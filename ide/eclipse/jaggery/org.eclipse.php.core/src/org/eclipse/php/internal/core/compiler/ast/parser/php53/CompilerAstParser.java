
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Wed Aug 28 12:28:24 IST 2013
//----------------------------------------------------

package org.eclipse.php.internal.core.compiler.ast.parser.php53;

import java.util.*;
import org.eclipse.dltk.ast.*;
import org.eclipse.dltk.ast.declarations.*;
import org.eclipse.dltk.ast.expressions.*;
import org.eclipse.dltk.ast.references.*;
import org.eclipse.dltk.ast.statements.*;
import org.eclipse.php.internal.core.compiler.ast.nodes.*;
import org.eclipse.php.internal.core.compiler.ast.parser.*;
import org.eclipse.php.internal.core.ast.scanner.php53.*;

/** CUP v0.10k generated parser.
  * @version Wed Aug 28 12:28:24 IST 2013
  */
public class CompilerAstParser extends AbstractASTParser {

  /** Default constructor. */
  public CompilerAstParser() {super();}

  /** Constructor which sets the default scanner. */
  public CompilerAstParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u019c\000\002\003\003\000\002\002\004\000\002\004" +
    "\003\000\002\005\003\000\002\005\005\000\002\010\004" +
    "\000\002\010\002\000\002\011\004\000\002\011\002\000" +
    "\002\012\003\000\002\012\003\000\002\012\006\000\002" +
    "\170\002\000\002\012\006\000\002\171\002\000\002\012" +
    "\005\000\002\012\005\000\002\012\004\000\002\126\003" +
    "\000\002\126\003\000\002\127\005\000\002\127\003\000" +
    "\002\007\005\000\002\007\003\000\002\006\003\000\002" +
    "\006\005\000\002\006\004\000\002\006\006\000\002\014" +
    "\004\000\002\014\002\000\002\015\003\000\002\015\003" +
    "\000\002\015\006\000\002\013\003\000\002\013\004\000" +
    "\002\013\003\000\002\013\003\000\002\172\002\000\002" +
    "\016\006\000\002\016\011\000\002\016\014\000\002\016" +
    "\007\000\002\016\011\000\002\016\013\000\002\016\007" +
    "\000\002\016\004\000\002\016\005\000\002\016\004\000" +
    "\002\016\005\000\002\016\004\000\002\016\005\000\002" +
    "\016\005\000\002\016\005\000\002\016\005\000\002\016" +
    "\005\000\002\016\003\000\002\016\004\000\002\016\005" +
    "\000\002\016\007\000\002\016\012\000\002\016\012\000" +
    "\002\016\007\000\002\016\003\000\002\016\017\000\002" +
    "\016\005\000\002\016\005\000\002\136\003\000\002\136" +
    "\002\000\002\137\003\000\002\137\004\000\002\140\012" +
    "\000\002\017\003\000\002\017\005\000\002\020\003\000" +
    "\002\021\003\000\002\021\005\000\002\134\003\000\002" +
    "\054\002\000\002\054\003\000\002\173\002\000\002\174" +
    "\002\000\002\141\013\000\002\166\005\000\002\166\003" +
    "\000\002\167\003\000\002\167\002\000\002\165\003\000" +
    "\002\142\003\000\002\142\004\000\002\142\004\000\002" +
    "\143\002\000\002\143\004\000\002\143\004\000\002\115" +
    "\003\000\002\116\002\000\002\116\004\000\002\144\002" +
    "\000\002\144\004\000\002\145\003\000\002\145\005\000" +
    "\002\145\005\000\002\145\003\000\002\022\002\000\002" +
    "\022\004\000\002\023\003\000\002\023\004\000\002\024" +
    "\003\000\002\024\006\000\002\025\003\000\002\025\006" +
    "\000\002\026\003\000\002\026\006\000\002\027\005\000" +
    "\002\027\007\000\002\030\005\000\002\030\006\000\002" +
    "\030\006\000\002\030\007\000\002\031\002\000\002\031" +
    "\007\000\002\031\006\000\002\032\003\000\002\032\003" +
    "\000\002\033\003\000\002\033\006\000\002\034\002\000" +
    "\002\034\010\000\002\035\002\000\002\035\011\000\002" +
    "\036\002\000\002\036\004\000\002\037\002\000\002\037" +
    "\005\000\002\040\003\000\002\040\002\000\002\043\003" +
    "\000\002\043\005\000\002\043\004\000\002\044\004\000" +
    "\002\044\005\000\002\044\006\000\002\044\007\000\002" +
    "\044\003\000\002\146\002\000\002\146\003\000\002\146" +
    "\003\000\002\045\003\000\002\045\002\000\002\046\003" +
    "\000\002\046\003\000\002\046\004\000\002\046\005\000" +
    "\002\046\005\000\002\046\006\000\002\047\005\000\002" +
    "\047\003\000\002\050\003\000\002\050\004\000\002\050" +
    "\006\000\002\051\005\000\002\051\007\000\002\051\003" +
    "\000\002\051\005\000\002\052\004\000\002\052\002\000" +
    "\002\053\005\000\002\053\004\000\002\175\002\000\002" +
    "\176\002\000\002\053\014\000\002\053\003\000\002\053" +
    "\003\000\002\125\003\000\002\125\005\000\002\125\002" +
    "\000\002\150\003\000\002\150\003\000\002\124\002\000" +
    "\002\124\003\000\002\130\003\000\002\130\004\000\002" +
    "\131\003\000\002\131\003\000\002\131\003\000\002\131" +
    "\003\000\002\131\003\000\002\131\003\000\002\122\005" +
    "\000\002\122\007\000\002\122\003\000\002\122\005\000" +
    "\002\123\007\000\002\123\006\000\002\055\005\000\002" +
    "\055\003\000\002\056\002\000\002\056\003\000\002\057" +
    "\005\000\002\057\003\000\002\060\010\000\002\060\005" +
    "\000\002\060\006\000\002\060\010\000\002\060\005\000" +
    "\002\060\004\000\002\060\005\000\002\060\005\000\002" +
    "\060\005\000\002\060\005\000\002\060\005\000\002\060" +
    "\005\000\002\060\005\000\002\060\005\000\002\060\005" +
    "\000\002\060\005\000\002\060\005\000\002\060\004\000" +
    "\002\060\004\000\002\060\004\000\002\060\004\000\002" +
    "\060\005\000\002\060\005\000\002\060\005\000\002\060" +
    "\005\000\002\060\005\000\002\060\005\000\002\060\005" +
    "\000\002\060\005\000\002\060\005\000\002\060\005\000" +
    "\002\060\005\000\002\060\005\000\002\060\005\000\002" +
    "\060\005\000\002\060\005\000\002\060\005\000\002\060" +
    "\004\000\002\060\004\000\002\060\004\000\002\060\004" +
    "\000\002\060\005\000\002\060\005\000\002\060\005\000" +
    "\002\060\005\000\002\060\005\000\002\060\005\000\002" +
    "\060\005\000\002\060\005\000\002\060\005\000\002\060" +
    "\005\000\002\060\007\000\002\060\006\000\002\060\003" +
    "\000\002\060\004\000\002\060\004\000\002\060\004\000" +
    "\002\060\004\000\002\060\004\000\002\060\004\000\002" +
    "\060\004\000\002\060\004\000\002\060\004\000\002\060" +
    "\003\000\002\060\006\000\002\060\005\000\002\060\004" +
    "\000\002\060\013\000\002\041\002\000\002\041\006\000" +
    "\002\042\005\000\002\042\006\000\002\042\003\000\002" +
    "\042\004\000\002\061\006\000\002\061\010\000\002\061" +
    "\007\000\002\061\010\000\002\061\010\000\002\061\010" +
    "\000\002\061\010\000\002\061\006\000\002\120\003\000" +
    "\002\120\003\000\002\120\005\000\002\120\004\000\002" +
    "\121\003\000\002\121\005\000\002\121\004\000\002\156" +
    "\003\000\002\156\003\000\002\157\006\000\002\157\003" +
    "\000\002\161\004\000\002\161\002\000\002\162\004\000" +
    "\002\062\002\000\002\062\004\000\002\062\005\000\002" +
    "\110\002\000\002\110\003\000\002\110\003\000\002\063" +
    "\002\000\002\063\005\000\002\064\003\000\002\064\003" +
    "\000\002\064\003\000\002\064\003\000\002\064\003\000" +
    "\002\064\003\000\002\064\003\000\002\064\003\000\002" +
    "\064\003\000\002\064\003\000\002\064\005\000\002\064" +
    "\004\000\002\065\003\000\002\065\003\000\002\065\005" +
    "\000\002\065\004\000\002\065\004\000\002\065\004\000" +
    "\002\065\006\000\002\065\003\000\002\163\005\000\002" +
    "\066\003\000\002\066\003\000\002\066\005\000\002\066" +
    "\004\000\002\066\003\000\002\066\005\000\002\066\005" +
    "\000\002\067\002\000\002\067\004\000\002\070\002\000" +
    "\002\070\003\000\002\071\007\000\002\071\005\000\002" +
    "\071\005\000\002\071\003\000\002\072\003\000\002\072" +
    "\003\000\002\147\003\000\002\117\003\000\002\151\003" +
    "\000\002\135\007\000\002\135\003\000\002\133\004\000" +
    "\002\133\002\000\002\153\005\000\002\132\005\000\002" +
    "\132\002\000\002\152\003\000\002\152\004\000\002\154" +
    "\005\000\002\154\005\000\002\074\003\000\002\164\003" +
    "\000\002\164\003\000\002\160\003\000\002\160\004\000" +
    "\002\160\003\000\002\073\006\000\002\073\006\000\002" +
    "\073\003\000\002\075\003\000\002\075\006\000\002\076" +
    "\002\000\002\076\003\000\002\077\003\000\002\077\003" +
    "\000\002\100\006\000\002\100\006\000\002\100\003\000" +
    "\002\101\003\000\002\101\005\000\002\102\003\000\002" +
    "\102\004\000\002\103\005\000\002\103\003\000\002\104" +
    "\003\000\002\104\006\000\002\104\002\000\002\105\002" +
    "\000\002\105\004\000\002\106\007\000\002\106\005\000" +
    "\002\106\005\000\002\106\003\000\002\106\010\000\002" +
    "\106\006\000\002\106\006\000\002\106\004\000\002\107" +
    "\004\000\002\107\004\000\002\107\003\000\002\107\004" +
    "\000\002\111\003\000\002\111\006\000\002\111\005\000" +
    "\002\111\005\000\002\111\010\000\002\111\005\000\002" +
    "\112\003\000\002\112\003\000\002\112\003\000\002\113" +
    "\006\000\002\113\004\000\002\113\004\000\002\113\006" +
    "\000\002\113\004\000\002\155\003\000\002\114\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u02ef\000\002\001\ufffb\000\004\002\u02f1\001\002\000" +
    "\220\003\111\004\137\005\147\006\102\007\011\010\030" +
    "\011\047\012\055\014\070\016\121\017\115\020\113\021" +
    "\040\023\027\025\076\027\150\032\077\034\123\040\051" +
    "\041\114\042\066\043\103\044\130\045\131\046\035\050" +
    "\145\051\023\052\012\054\072\055\026\056\052\065\143" +
    "\066\013\067\017\070\042\071\043\072\124\073\006\074" +
    "\031\100\057\103\073\104\122\105\036\106\061\107\022" +
    "\110\025\111\064\112\044\113\116\120\056\136\010\156" +
    "\101\157\062\163\140\164\015\166\046\167\144\170\024" +
    "\171\125\172\034\173\120\174\067\175\127\176\063\177" +
    "\033\202\071\206\037\214\142\217\075\220\106\221\053" +
    "\001\001\000\002\001\ufece\000\004\214\u02ee\001\002\000" +
    "\002\001\uffc3\000\002\001\ufed1\000\006\012\u02e3\217\u02e4" +
    "\001\002\000\004\214\u02ce\001\002\000\002\001\ufefb\000" +
    "\140\004\137\006\102\007\011\010\154\011\047\012\055" +
    "\016\121\032\077\043\231\055\026\065\143\066\013\067" +
    "\017\070\042\071\043\072\124\073\006\074\031\103\227" +
    "\104\122\105\036\106\061\110\025\111\064\112\044\113" +
    "\116\120\056\156\101\157\062\163\140\164\015\166\046" +
    "\167\144\170\024\171\125\172\034\173\120\174\067\175" +
    "\127\176\063\177\033\202\071\206\166\214\142\217\075" +
    "\220\106\221\053\001\002\000\070\031\u0107\115\377\116" +
    "\u010e\117\371\135\374\136\u02cc\137\370\140\u0108\141\372" +
    "\142\u0101\143\u0109\144\u010d\145\u0103\146\366\147\u0100\150" +
    "\u010c\151\u010a\152\375\153\u010b\154\u0106\155\u0102\156\u010f" +
    "\157\376\160\u0105\161\u0104\162\367\165\373\001\002\000" +
    "\002\001\ufecc\000\002\001\ufe99\000\036\121\352\122\355" +
    "\123\353\124\363\125\356\126\364\127\360\130\362\131" +
    "\354\132\351\133\357\134\361\166\ufeaa\167\ufeaa\001\ufeac" +
    "\000\002\001\uffdd\000\012\010\154\016\u0177\106\u02c2\214" +
    "\u0175\001\002\000\140\004\137\006\102\007\011\010\154" +
    "\011\047\012\055\016\121\032\077\043\231\055\026\065" +
    "\143\066\013\067\017\070\042\071\043\072\124\073\006" +
    "\074\031\103\227\104\122\105\036\106\061\110\025\111" +
    "\064\112\044\113\116\120\056\156\101\157\062\163\140" +
    "\164\015\166\046\167\144\170\024\171\125\172\034\173" +
    "\120\174\067\175\127\176\063\177\033\202\071\206\166" +
    "\214\142\217\075\220\106\221\053\001\002\000\140\004" +
    "\137\006\102\007\011\010\154\011\047\012\055\016\121" +
    "\032\077\043\231\055\026\065\143\066\013\067\017\070" +
    "\042\071\043\072\124\073\006\074\031\103\227\104\122" +
    "\105\036\106\061\110\025\111\064\112\044\113\116\120" +
    "\056\156\101\157\062\163\140\164\015\166\046\167\144" +
    "\170\024\171\125\172\034\173\120\174\067\175\127\176" +
    "\063\177\033\202\071\206\166\214\142\217\075\220\106" +
    "\221\053\001\002\000\004\214\u02bb\001\002\000\004\214" +
    "\u02aa\001\002\000\004\216\u02a9\001\ufe66\000\014\012\055" +
    "\015\u02a7\075\215\076\u01f9\077\u01f8\001\002\000\002\001" +
    "\ufe9d\000\140\004\137\006\102\007\011\010\154\011\047" +
    "\012\055\016\121\032\077\043\231\055\026\065\143\066" +
    "\013\067\017\070\042\071\043\072\124\073\006\074\031" +
    "\103\227\104\122\105\036\106\061\110\025\111\064\112" +
    "\044\113\116\120\056\156\101\157\062\163\140\164\015" +
    "\166\046\167\144\170\024\171\125\172\034\173\120\174" +
    "\067\175\127\176\063\177\033\202\071\206\166\214\142" +
    "\217\075\220\106\221\053\001\002\000\140\004\137\006" +
    "\102\007\011\010\154\011\047\012\055\016\121\032\077" +
    "\043\231\055\026\065\143\066\013\067\017\070\042\071" +
    "\043\072\124\073\006\074\031\103\227\104\122\105\036" +
    "\106\061\110\025\111\064\112\044\113\116\120\056\156" +
    "\101\157\062\163\140\164\015\166\046\167\144\170\024" +
    "\171\125\172\034\173\120\174\067\175\127\176\063\177" +
    "\033\202\071\206\166\214\142\217\075\220\106\221\053" +
    "\001\002\000\004\100\u028d\001\002\000\002\001\ufecd\000" +
    "\004\012\u0284\001\ufee8\000\004\214\u027b\001\002\000\002" +
    "\001\ufe9c\000\002\001\ufecb\000\002\001\ufeca\000\004\214" +
    "\u0278\001\002\000\004\063\u026d\001\ufea8\000\016\010\154" +
    "\012\055\103\336\106\334\206\166\217\075\001\002\000" +
    "\002\001\ufebd\000\012\100\u0129\102\ufe9e\200\u012a\214\ufea2" +
    "\001\ufe9b\000\142\004\137\006\102\007\011\010\154\011" +
    "\047\012\055\016\121\032\077\043\231\055\026\065\143" +
    "\066\013\067\017\070\042\071\043\072\124\073\006\074" +
    "\031\103\227\104\122\105\036\106\061\110\025\111\064" +
    "\112\044\113\116\120\056\136\u0269\156\101\157\062\163" +
    "\140\164\015\166\046\167\144\170\024\171\125\172\034" +
    "\173\120\174\067\175\127\176\063\177\033\202\071\206" +
    "\166\214\142\217\075\220\106\221\053\001\002\000\004" +
    "\214\u0266\001\002\000\012\012\055\015\u0264\076\u01f9\077" +
    "\u01f8\001\ufed7\000\004\102\u0259\001\002\000\002\001\ufe67" +
    "\000\140\004\137\006\102\007\011\010\154\011\047\012" +
    "\055\016\121\032\077\043\231\055\026\065\143\066\013" +
    "\067\017\070\042\071\043\072\124\073\006\074\031\103" +
    "\227\104\122\105\036\106\061\110\025\111\064\112\044" +
    "\113\116\120\056\156\101\157\062\163\140\164\015\166" +
    "\046\167\144\170\024\171\125\172\034\173\120\174\067" +
    "\175\127\176\063\177\033\202\071\206\166\214\142\217" +
    "\075\220\106\221\053\001\002\000\002\001\uffdc\000\002" +
    "\001\uff05\000\004\010\154\001\002\000\140\004\137\006" +
    "\102\007\011\010\154\011\047\012\055\016\121\032\077" +
    "\043\231\055\026\065\143\066\013\067\017\070\042\071" +
    "\043\072\124\073\006\074\031\103\227\104\122\105\036" +
    "\106\061\110\025\111\064\112\044\113\116\120\056\156" +
    "\101\157\062\163\140\164\015\166\046\167\144\170\024" +
    "\171\125\172\034\173\120\174\067\175\127\176\063\177" +
    "\033\202\071\206\166\214\142\217\075\220\106\221\053" +
    "\001\002\000\140\004\137\006\102\007\011\010\154\011" +
    "\047\012\055\016\121\032\077\043\231\055\026\065\143" +
    "\066\013\067\017\070\042\071\043\072\124\073\006\074" +
    "\031\103\227\104\122\105\036\106\061\110\025\111\064" +
    "\112\044\113\116\120\056\156\101\157\062\163\140\164" +
    "\015\166\046\167\144\170\024\171\125\172\034\173\120" +
    "\174\067\175\127\176\063\177\033\202\071\206\166\214" +
    "\142\217\075\220\106\221\053\001\002\000\140\004\137" +
    "\006\102\007\011\010\154\011\047\012\055\016\121\032" +
    "\077\043\231\055\026\065\143\066\013\067\017\070\042" +
    "\071\043\072\124\073\006\074\031\103\227\104\122\105" +
    "\036\106\061\110\025\111\064\112\044\113\116\120\056" +
    "\156\101\157\062\163\140\164\015\166\046\167\144\170" +
    "\024\171\125\172\034\173\120\174\067\175\127\176\063" +
    "\177\033\202\071\206\166\214\142\217\075\220\106\221" +
    "\053\001\002\000\006\012\055\217\u0125\001\002\000\004" +
    "\010\u024e\001\002\000\140\004\137\006\102\007\011\010" +
    "\154\011\047\012\055\016\121\032\077\043\231\055\026" +
    "\065\143\066\013\067\017\070\042\071\043\072\124\073" +
    "\006\074\031\103\227\104\122\105\036\106\061\110\025" +
    "\111\064\112\044\113\116\120\056\156\101\157\062\163" +
    "\140\164\015\166\046\167\144\170\024\171\125\172\034" +
    "\173\120\174\067\175\127\176\063\177\033\202\071\206" +
    "\166\214\142\217\075\220\106\221\053\001\002\000\002" +
    "\001\uffca\000\016\010\154\012\055\103\u0120\106\u011a\206" +
    "\166\217\075\001\002\000\004\214\u0243\001\002\000\006" +
    "\010\154\106\316\001\ufff3\000\006\166\u0235\167\u0236\001" +
    "\002\000\004\100\u0126\001\ufe8a\000\004\214\u021e\001\002" +
    "\000\140\004\137\006\102\007\011\010\154\011\047\012" +
    "\055\016\121\032\077\043\231\055\026\065\143\066\013" +
    "\067\017\070\042\071\043\072\124\073\006\074\031\103" +
    "\227\104\122\105\036\106\061\110\025\111\064\112\044" +
    "\113\116\120\056\156\101\157\062\163\140\164\015\166" +
    "\046\167\144\170\024\171\125\172\034\173\120\174\067" +
    "\175\127\176\063\177\033\202\071\206\166\214\142\217" +
    "\075\220\106\221\053\001\002\000\002\001\ufff7\000\140" +
    "\004\137\006\102\007\011\010\154\011\047\012\055\016" +
    "\121\032\077\043\231\055\026\065\143\066\013\067\017" +
    "\070\042\071\043\072\124\073\006\074\031\103\227\104" +
    "\122\105\036\106\061\110\025\111\064\112\044\113\116" +
    "\120\056\156\101\157\062\163\140\164\015\166\046\167" +
    "\144\170\024\171\125\172\034\173\120\174\067\175\127" +
    "\176\063\177\033\202\071\206\166\214\142\217\075\220" +
    "\106\221\053\001\002\000\002\001\ufed2\000\004\143\233" +
    "\001\uffb4\000\002\001\ufeb9\000\002\001\uffe0\000\012\012" +
    "\055\015\u01fa\076\u01f9\077\u01f8\001\002\000\002\001\ufe95" +
    "\000\006\114\u01f0\136\u01f1\001\002\000\002\001\uffde\000" +
    "\002\001\ufe96\000\214\003\111\004\137\005\147\006\102" +
    "\007\011\010\030\011\047\012\055\014\070\016\121\017" +
    "\115\020\113\021\040\023\027\025\076\027\150\032\077" +
    "\034\123\040\051\041\114\042\066\043\231\045\131\046" +
    "\035\050\145\051\225\052\012\054\072\055\026\065\143" +
    "\066\013\067\017\070\042\071\043\072\124\073\006\074" +
    "\031\100\057\103\227\104\122\105\036\106\061\107\022" +
    "\110\025\111\064\112\044\113\116\120\056\136\010\156" +
    "\101\157\062\163\140\164\015\166\046\167\144\170\024" +
    "\171\125\172\034\173\120\174\067\175\127\176\063\177" +
    "\033\202\071\206\037\214\142\217\075\220\106\221\053" +
    "\001\002\000\142\004\137\006\102\007\011\010\154\011" +
    "\047\012\055\016\121\032\077\043\231\055\026\065\143" +
    "\066\013\067\017\070\042\071\043\072\124\073\006\074" +
    "\031\103\227\104\122\105\036\106\061\110\025\111\064" +
    "\112\044\113\116\120\056\136\u01e7\156\101\157\062\163" +
    "\140\164\015\166\046\167\144\170\024\171\125\172\034" +
    "\173\120\174\067\175\127\176\063\177\033\202\071\206" +
    "\166\214\142\217\075\220\106\221\053\001\002\000\140" +
    "\004\137\006\102\007\011\010\154\011\047\012\055\016" +
    "\121\032\077\043\231\055\026\065\143\066\013\067\017" +
    "\070\042\071\043\072\124\073\006\074\031\103\227\104" +
    "\122\105\036\106\061\110\025\111\064\112\044\113\116" +
    "\120\056\156\101\157\062\163\140\164\015\166\046\167" +
    "\144\170\024\171\125\172\034\173\120\174\067\175\127" +
    "\176\063\177\033\202\071\206\166\214\142\217\075\220" +
    "\106\221\053\001\002\000\140\004\137\006\102\007\011" +
    "\010\154\011\047\012\055\016\121\032\077\043\231\055" +
    "\026\065\143\066\013\067\017\070\042\071\043\072\124" +
    "\073\006\074\031\103\227\104\122\105\036\106\061\110" +
    "\025\111\064\112\044\113\116\120\056\156\101\157\062" +
    "\163\140\164\015\166\046\167\144\170\024\171\125\172" +
    "\034\173\120\174\067\175\127\176\063\177\033\202\071" +
    "\206\166\214\142\217\075\220\106\221\053\001\002\000" +
    "\002\001\ufffe\000\140\004\137\006\102\007\011\010\154" +
    "\011\047\012\055\016\121\032\077\043\231\055\026\065" +
    "\143\066\013\067\017\070\042\071\043\072\124\073\006" +
    "\074\031\103\227\104\122\105\036\106\061\110\025\111" +
    "\064\112\044\113\116\120\056\156\101\157\062\163\140" +
    "\164\015\166\046\167\144\170\024\171\125\172\034\173" +
    "\120\174\067\175\127\176\063\177\033\202\071\206\166" +
    "\214\142\217\075\220\106\221\053\001\002\000\002\001" +
    "\ufed0\000\002\001\ufec9\000\004\214\u01c5\001\002\000\002" +
    "\001\ufecf\000\140\004\137\006\102\007\011\010\154\011" +
    "\047\012\055\016\121\032\077\043\231\055\026\065\143" +
    "\066\013\067\017\070\042\071\043\072\124\073\006\074" +
    "\031\103\227\104\122\105\036\106\061\110\025\111\064" +
    "\112\044\113\116\120\056\156\101\157\062\163\140\164" +
    "\015\166\046\167\144\170\024\171\125\172\034\173\120" +
    "\174\067\175\127\176\063\177\033\202\071\206\166\214" +
    "\142\217\075\220\106\221\053\001\002\000\002\001\uffb5" +
    "\000\140\004\137\006\102\007\011\010\154\011\047\012" +
    "\055\016\121\032\077\043\231\055\026\065\143\066\013" +
    "\067\017\070\042\071\043\072\124\073\006\074\031\103" +
    "\227\104\122\105\036\106\061\110\025\111\064\112\044" +
    "\113\116\120\056\156\101\157\062\163\140\164\015\166" +
    "\046\167\144\170\024\171\125\172\034\173\120\174\067" +
    "\175\127\176\063\177\033\202\071\206\166\214\142\217" +
    "\075\220\106\221\053\001\002\000\004\010\u01c0\001\002" +
    "\000\142\004\137\006\102\007\011\010\154\011\047\012" +
    "\055\016\121\032\077\043\231\055\026\065\143\066\013" +
    "\067\017\070\042\071\043\072\124\073\006\074\031\103" +
    "\227\104\122\105\036\106\061\110\025\111\064\112\044" +
    "\113\116\120\056\136\u01bb\156\101\157\062\163\140\164" +
    "\015\166\046\167\144\170\024\171\125\172\034\173\120" +
    "\174\067\175\127\176\063\177\033\202\071\206\166\214" +
    "\142\217\075\220\106\221\053\001\002\000\002\001\ufead" +
    "\000\004\102\u01b2\001\002\000\002\001\ufeae\000\004\106" +
    "\u01b0\001\uffff\000\006\102\ufee7\214\340\001\ufebc\000\004" +
    "\214\u01ab\001\ufeda\000\140\004\137\006\102\007\011\010" +
    "\154\011\047\012\055\016\121\032\077\043\231\055\026" +
    "\065\143\066\013\067\017\070\042\071\043\072\124\073" +
    "\006\074\031\103\227\104\122\105\036\106\061\110\025" +
    "\111\064\112\044\113\116\120\056\156\101\157\062\163" +
    "\140\164\015\166\046\167\144\170\024\171\125\172\034" +
    "\173\120\174\067\175\127\176\063\177\033\202\071\206" +
    "\166\214\142\217\075\220\106\221\053\001\002\000\002" +
    "\001\ufff8\000\140\004\137\006\102\007\011\010\154\011" +
    "\047\012\055\016\121\032\077\043\231\055\026\065\143" +
    "\066\013\067\017\070\042\071\043\072\124\073\006\074" +
    "\031\103\227\104\122\105\036\106\061\110\025\111\064" +
    "\112\044\113\116\120\056\156\101\157\062\163\140\164" +
    "\015\166\046\167\144\170\024\171\125\172\034\173\120" +
    "\174\067\175\127\176\063\177\033\202\071\206\166\214" +
    "\142\217\075\220\106\221\053\001\002\000\004\214\u019b" +
    "\001\002\000\016\010\154\012\055\103\336\106\334\206" +
    "\166\217\075\001\002\000\140\004\137\006\102\007\011" +
    "\010\154\011\047\012\055\016\121\032\077\043\231\055" +
    "\026\065\143\066\013\067\017\070\042\071\043\072\124" +
    "\073\006\074\031\103\227\104\122\105\036\106\061\110" +
    "\025\111\064\112\044\113\116\120\056\156\101\157\062" +
    "\163\140\164\015\166\046\167\144\170\024\171\125\172" +
    "\034\173\120\174\067\175\127\176\063\177\033\202\071" +
    "\206\166\214\142\217\075\220\106\221\053\001\002\000" +
    "\002\001\ufffc\000\004\214\u017b\001\002\000\004\214\151" +
    "\001\002\000\004\010\154\001\002\000\006\114\221\215" +
    "\220\001\002\000\004\121\155\001\002\000\002\001\ufe66" +
    "\000\046\006\102\007\011\010\154\016\121\066\163\067" +
    "\017\070\042\071\043\072\124\073\006\074\156\103\170" +
    "\104\122\105\036\106\162\156\167\157\160\206\166\001" +
    "\002\000\006\015\216\075\215\001\002\000\002\001\ufec6" +
    "\000\046\006\102\007\011\010\154\016\121\066\163\067" +
    "\017\070\042\071\043\072\124\073\006\074\156\103\170" +
    "\104\122\105\036\106\162\156\167\157\160\206\166\001" +
    "\002\000\002\001\ufebf\000\004\010\154\001\002\000\004" +
    "\214\177\001\002\000\004\102\175\001\002\000\002\001" +
    "\uff91\000\002\001\ufee8\000\046\006\102\007\011\010\154" +
    "\016\121\066\163\067\017\070\042\071\043\072\124\073" +
    "\006\074\156\103\170\104\122\105\036\106\162\156\167" +
    "\157\160\206\166\001\002\000\004\106\172\001\002\000" +
    "\004\102\ufee7\001\ufec5\000\004\010\154\001\002\000\004" +
    "\102\ufee6\001\ufec4\000\002\001\ufec2\000\004\010\176\001" +
    "\002\000\002\001\ufebe\000\046\006\102\007\011\010\154" +
    "\016\121\066\163\067\017\070\042\071\043\072\124\073" +
    "\006\074\156\103\170\104\122\105\036\106\162\156\167" +
    "\157\160\206\166\001\ufeb6\000\004\215\212\001\002\000" +
    "\004\114\205\001\ufeb4\000\004\064\203\001\ufeaf\000\046" +
    "\006\102\007\011\010\154\016\121\066\163\067\017\070" +
    "\042\071\043\072\124\073\006\074\156\103\170\104\122" +
    "\105\036\106\162\156\167\157\160\206\166\001\002\000" +
    "\002\001\ufeb0\000\046\006\102\007\011\010\154\016\121" +
    "\066\163\067\017\070\042\071\043\072\124\073\006\074" +
    "\156\103\170\104\122\105\036\106\162\156\167\157\160" +
    "\206\166\001\ufeb3\000\002\001\ufeb5\000\004\064\210\001" +
    "\ufeb1\000\046\006\102\007\011\010\154\016\121\066\163" +
    "\067\017\070\042\071\043\072\124\073\006\074\156\103" +
    "\170\104\122\105\036\106\162\156\167\157\160\206\166" +
    "\001\002\000\002\001\ufeb2\000\002\001\ufec0\000\004\102" +
    "\ufee5\001\ufec3\000\002\001\ufec1\000\002\001\ufec7\000\004" +
    "\075\217\001\002\000\002\001\ufec8\000\216\003\111\004" +
    "\137\005\147\006\102\007\011\010\030\011\047\012\055" +
    "\014\070\016\121\017\115\020\113\021\040\023\027\025" +
    "\076\027\150\032\077\034\123\040\051\041\114\042\066" +
    "\043\231\045\131\046\035\050\145\051\225\052\012\054" +
    "\072\055\026\065\143\066\013\067\017\070\042\071\043" +
    "\072\124\073\006\074\031\100\057\103\227\104\122\105" +
    "\036\106\061\107\022\110\025\111\064\112\044\113\116" +
    "\120\056\136\010\156\101\157\062\163\140\164\015\166" +
    "\046\167\144\170\024\171\125\172\034\173\120\174\067" +
    "\175\127\176\063\177\033\202\071\206\037\214\142\216" +
    "\230\217\075\220\106\221\053\001\002\000\004\010\154" +
    "\001\002\000\004\121\223\001\002\000\046\006\102\007" +
    "\011\010\154\016\121\066\163\067\017\070\042\071\043" +
    "\072\124\073\006\074\156\103\170\104\122\105\036\106" +
    "\162\156\167\157\160\206\166\001\002\000\002\001\uff90" +
    "\000\006\016\u0177\214\u0175\001\002\000\002\001\uffc4\000" +
    "\004\106\316\001\002\000\002\001\uffe4\000\004\143\233" +
    "\001\uffb4\000\002\001\uff93\000\002\001\uffb3\000\004\214" +
    "\235\001\002\000\016\003\244\010\154\066\236\103\242" +
    "\106\246\215\uff7b\001\uff72\000\002\001\uff70\000\002\001" +
    "\ufee4\000\006\012\305\143\304\001\002\000\004\114\302" +
    "\001\uff7c\000\004\106\300\001\002\000\002\001\uff71\000" +
    "\002\001\uff73\000\002\001\uff7a\000\004\010\154\001\002" +
    "\000\004\215\250\001\002\000\004\051\251\001\ufef6\000" +
    "\004\214\265\001\002\000\004\100\253\001\002\000\002" +
    "\001\uffe4\000\220\003\111\004\137\005\147\006\102\007" +
    "\011\010\030\011\047\012\055\014\070\016\121\017\115" +
    "\020\113\021\040\023\027\025\076\027\150\032\077\034" +
    "\123\040\051\041\114\042\066\043\103\045\131\046\035" +
    "\050\145\051\225\052\012\054\072\055\026\056\256\065" +
    "\143\066\013\067\017\070\042\071\043\072\124\073\006" +
    "\074\031\100\057\101\260\103\227\104\122\105\036\106" +
    "\061\107\022\110\025\111\064\112\044\113\116\120\056" +
    "\136\010\156\101\157\062\163\140\164\015\166\046\167" +
    "\144\170\024\171\125\172\034\173\120\174\067\175\127" +
    "\176\063\177\033\202\071\206\037\214\142\217\075\220" +
    "\106\221\053\001\002\000\002\001\uffe5\000\004\214\262" +
    "\001\002\000\002\001\uffe2\000\002\001\ufef7\000\002\001" +
    "\uffe3\000\004\215\263\001\002\000\004\136\264\001\002" +
    "\000\002\001\uffe1\000\006\012\270\143\266\001\002\000" +
    "\004\012\276\001\002\000\006\114\272\215\271\001\002" +
    "\000\002\001\ufef2\000\002\001\ufef5\000\006\012\274\143" +
    "\273\001\002\000\004\012\275\001\002\000\002\001\ufef4" +
    "\000\002\001\ufef3\000\002\001\ufef1\000\002\001\ufee2\000" +
    "\004\010\154\001\002\000\002\001\ufee3\000\020\003\244" +
    "\010\154\066\236\103\242\106\246\114\uff78\215\uff78\001" +
    "\uff72\000\002\001\uff79\000\004\012\310\001\002\000\004" +
    "\121\306\001\uff77\000\046\006\102\007\011\010\154\016" +
    "\121\066\163\067\017\070\042\071\043\072\124\073\006" +
    "\074\156\103\170\104\122\105\036\106\162\156\167\157" +
    "\160\206\166\001\002\000\002\001\uff75\000\004\121\311" +
    "\001\uff76\000\046\006\102\007\011\010\154\016\121\066" +
    "\163\067\017\070\042\071\043\072\124\073\006\074\156" +
    "\103\170\104\122\105\036\106\162\156\167\157\160\206" +
    "\166\001\002\000\002\001\uff74\000\220\003\111\004\137" +
    "\005\147\006\102\007\011\010\030\011\047\012\055\014" +
    "\070\016\121\017\115\020\113\021\040\023\027\025\076" +
    "\027\150\030\314\032\077\034\123\040\051\041\114\042" +
    "\066\043\103\045\131\046\035\050\145\051\225\052\012" +
    "\054\072\055\026\056\256\065\143\066\013\067\017\070" +
    "\042\071\043\072\124\073\006\074\031\100\057\103\227" +
    "\104\122\105\036\106\061\107\022\110\025\111\064\112" +
    "\044\113\116\120\056\136\010\156\101\157\062\163\140" +
    "\164\015\166\046\167\144\170\024\171\125\172\034\173" +
    "\120\174\067\175\127\176\063\177\033\202\071\206\037" +
    "\214\142\217\075\220\106\221\053\001\002\000\004\136" +
    "\315\001\002\000\002\001\uff92\000\004\010\154\001\002" +
    "\000\006\102\ufee6\214\320\001\ufebb\000\142\004\137\006" +
    "\102\007\011\010\154\011\047\012\055\016\121\032\077" +
    "\043\231\055\026\065\143\066\013\067\017\070\042\071" +
    "\043\072\124\073\006\074\031\103\227\104\122\105\036" +
    "\106\061\110\025\111\064\112\044\113\116\120\056\143" +
    "\322\156\101\157\062\163\140\164\015\166\046\167\144" +
    "\170\024\171\125\172\034\173\120\174\067\175\127\176" +
    "\063\177\033\202\071\206\166\214\142\217\075\220\106" +
    "\221\053\001\uff6e\000\004\215\u0174\001\002\000\016\010" +
    "\154\012\055\103\336\106\334\206\166\217\075\001\002" +
    "\000\066\031\u0107\115\377\116\u010e\117\371\135\374\137" +
    "\370\140\u0108\141\372\142\u0101\143\u0109\144\u010d\145\u0103" +
    "\146\366\147\u0100\150\u010c\151\u010a\152\375\153\u010b\154" +
    "\u0106\155\u0102\156\u010f\157\376\160\u0105\161\u0104\162\367" +
    "\165\373\001\002\000\042\114\uff6c\121\352\122\355\123" +
    "\353\124\363\125\356\126\364\127\360\130\362\131\354" +
    "\132\351\133\357\134\361\166\ufeaa\167\ufeaa\215\uff6c\001" +
    "\ufeac\000\004\114\327\001\uff6f\000\006\114\uff6d\215\uff6d" +
    "\001\ufead\000\142\004\137\006\102\007\011\010\154\011" +
    "\047\012\055\016\121\032\077\043\231\055\026\065\143" +
    "\066\013\067\017\070\042\071\043\072\124\073\006\074" +
    "\031\103\227\104\122\105\036\106\061\110\025\111\064" +
    "\112\044\113\116\120\056\143\331\156\101\157\062\163" +
    "\140\164\015\166\046\167\144\170\024\171\125\172\034" +
    "\173\120\174\067\175\127\176\063\177\033\202\071\206" +
    "\166\214\142\217\075\220\106\221\053\001\002\000\042" +
    "\114\uff69\121\352\122\355\123\353\124\363\125\356\126" +
    "\364\127\360\130\362\131\354\132\351\133\357\134\361" +
    "\166\ufeaa\167\ufeaa\215\uff69\001\ufeac\000\016\010\154\012" +
    "\055\103\336\106\334\206\166\217\075\001\002\000\006" +
    "\114\uff6a\215\uff6a\001\ufead\000\002\001\uff68\000\004\010" +
    "\154\001\002\000\002\001\ufeab\000\004\106\343\001\002" +
    "\000\004\214\340\001\ufee7\000\142\004\137\006\102\007" +
    "\011\010\154\011\047\012\055\016\121\032\077\043\231" +
    "\055\026\065\143\066\013\067\017\070\042\071\043\072" +
    "\124\073\006\074\031\103\227\104\122\105\036\106\061" +
    "\110\025\111\064\112\044\113\116\120\056\143\322\156" +
    "\101\157\062\163\140\164\015\166\046\167\144\170\024" +
    "\171\125\172\034\173\120\174\067\175\127\176\063\177" +
    "\033\202\071\206\166\214\142\217\075\220\106\221\053" +
    "\001\uff6e\000\004\215\342\001\002\000\002\001\ufef0\000" +
    "\004\010\154\001\002\000\004\214\320\001\ufee6\000\004" +
    "\214\346\001\ufee5\000\142\004\137\006\102\007\011\010" +
    "\154\011\047\012\055\016\121\032\077\043\231\055\026" +
    "\065\143\066\013\067\017\070\042\071\043\072\124\073" +
    "\006\074\031\103\227\104\122\105\036\106\061\110\025" +
    "\111\064\112\044\113\116\120\056\143\322\156\101\157" +
    "\062\163\140\164\015\166\046\167\144\170\024\171\125" +
    "\172\034\173\120\174\067\175\127\176\063\177\033\202" +
    "\071\206\166\214\142\217\075\220\106\221\053\001\uff6e" +
    "\000\004\215\350\001\002\000\002\001\ufeee\000\140\004" +
    "\137\006\102\007\011\010\154\011\047\012\055\016\121" +
    "\032\077\043\231\055\026\065\143\066\013\067\017\070" +
    "\042\071\043\072\124\073\006\074\031\103\227\104\122" +
    "\105\036\106\061\110\025\111\064\112\044\113\116\120" +
    "\056\156\101\157\062\163\140\164\015\166\046\167\144" +
    "\170\024\171\125\172\034\173\120\174\067\175\127\176" +
    "\063\177\033\202\071\206\166\214\142\217\075\220\106" +
    "\221\053\001\002\000\142\004\137\006\102\007\011\010" +
    "\154\011\047\012\055\016\121\032\077\043\231\055\026" +
    "\065\143\066\013\067\017\070\042\071\043\072\124\073" +
    "\006\074\031\103\227\104\122\105\036\106\061\110\025" +
    "\111\064\112\044\113\116\120\056\143\u0169\156\101\157" +
    "\062\163\140\164\015\166\046\167\144\170\024\171\125" +
    "\172\034\173\120\174\067\175\127\176\063\177\033\202" +
    "\071\206\166\214\142\217\075\220\106\221\053\001\002" +
    "\000\140\004\137\006\102\007\011\010\154\011\047\012" +
    "\055\016\121\032\077\043\231\055\026\065\143\066\013" +
    "\067\017\070\042\071\043\072\124\073\006\074\031\103" +
    "\227\104\122\105\036\106\061\110\025\111\064\112\044" +
    "\113\116\120\056\156\101\157\062\163\140\164\015\166" +
    "\046\167\144\170\024\171\125\172\034\173\120\174\067" +
    "\175\127\176\063\177\033\202\071\206\166\214\142\217" +
    "\075\220\106\221\053\001\002\000\140\004\137\006\102" +
    "\007\011\010\154\011\047\012\055\016\121\032\077\043" +
    "\231\055\026\065\143\066\013\067\017\070\042\071\043" +
    "\072\124\073\006\074\031\103\227\104\122\105\036\106" +
    "\061\110\025\111\064\112\044\113\116\120\056\156\101" +
    "\157\062\163\140\164\015\166\046\167\144\170\024\171" +
    "\125\172\034\173\120\174\067\175\127\176\063\177\033" +
    "\202\071\206\166\214\142\217\075\220\106\221\053\001" +
    "\002\000\140\004\137\006\102\007\011\010\154\011\047" +
    "\012\055\016\121\032\077\043\231\055\026\065\143\066" +
    "\013\067\017\070\042\071\043\072\124\073\006\074\031" +
    "\103\227\104\122\105\036\106\061\110\025\111\064\112" +
    "\044\113\116\120\056\156\101\157\062\163\140\164\015" +
    "\166\046\167\144\170\024\171\125\172\034\173\120\174" +
    "\067\175\127\176\063\177\033\202\071\206\166\214\142" +
    "\217\075\220\106\221\053\001\002\000\140\004\137\006" +
    "\102\007\011\010\154\011\047\012\055\016\121\032\077" +
    "\043\231\055\026\065\143\066\013\067\017\070\042\071" +
    "\043\072\124\073\006\074\031\103\227\104\122\105\036" +
    "\106\061\110\025\111\064\112\044\113\116\120\056\156" +
    "\101\157\062\163\140\164\015\166\046\167\144\170\024" +
    "\171\125\172\034\173\120\174\067\175\127\176\063\177" +
    "\033\202\071\206\166\214\142\217\075\220\106\221\053" +
    "\001\002\000\140\004\137\006\102\007\011\010\154\011" +
    "\047\012\055\016\121\032\077\043\231\055\026\065\143" +
    "\066\013\067\017\070\042\071\043\072\124\073\006\074" +
    "\031\103\227\104\122\105\036\106\061\110\025\111\064" +
    "\112\044\113\116\120\056\156\101\157\062\163\140\164" +
    "\015\166\046\167\144\170\024\171\125\172\034\173\120" +
    "\174\067\175\127\176\063\177\033\202\071\206\166\214" +
    "\142\217\075\220\106\221\053\001\002\000\140\004\137" +
    "\006\102\007\011\010\154\011\047\012\055\016\121\032" +
    "\077\043\231\055\026\065\143\066\013\067\017\070\042" +
    "\071\043\072\124\073\006\074\031\103\227\104\122\105" +
    "\036\106\061\110\025\111\064\112\044\113\116\120\056" +
    "\156\101\157\062\163\140\164\015\166\046\167\144\170" +
    "\024\171\125\172\034\173\120\174\067\175\127\176\063" +
    "\177\033\202\071\206\166\214\142\217\075\220\106\221" +
    "\053\001\002\000\140\004\137\006\102\007\011\010\154" +
    "\011\047\012\055\016\121\032\077\043\231\055\026\065" +
    "\143\066\013\067\017\070\042\071\043\072\124\073\006" +
    "\074\031\103\227\104\122\105\036\106\061\110\025\111" +
    "\064\112\044\113\116\120\056\156\101\157\062\163\140" +
    "\164\015\166\046\167\144\170\024\171\125\172\034\173" +
    "\120\174\067\175\127\176\063\177\033\202\071\206\166" +
    "\214\142\217\075\220\106\221\053\001\002\000\140\004" +
    "\137\006\102\007\011\010\154\011\047\012\055\016\121" +
    "\032\077\043\231\055\026\065\143\066\013\067\017\070" +
    "\042\071\043\072\124\073\006\074\031\103\227\104\122" +
    "\105\036\106\061\110\025\111\064\112\044\113\116\120" +
    "\056\156\101\157\062\163\140\164\015\166\046\167\144" +
    "\170\024\171\125\172\034\173\120\174\067\175\127\176" +
    "\063\177\033\202\071\206\166\214\142\217\075\220\106" +
    "\221\053\001\002\000\140\004\137\006\102\007\011\010" +
    "\154\011\047\012\055\016\121\032\077\043\231\055\026" +
    "\065\143\066\013\067\017\070\042\071\043\072\124\073" +
    "\006\074\031\103\227\104\122\105\036\106\061\110\025" +
    "\111\064\112\044\113\116\120\056\156\101\157\062\163" +
    "\140\164\015\166\046\167\144\170\024\171\125\172\034" +
    "\173\120\174\067\175\127\176\063\177\033\202\071\206" +
    "\166\214\142\217\075\220\106\221\053\001\002\000\140" +
    "\004\137\006\102\007\011\010\154\011\047\012\055\016" +
    "\121\032\077\043\231\055\026\065\143\066\013\067\017" +
    "\070\042\071\043\072\124\073\006\074\031\103\227\104" +
    "\122\105\036\106\061\110\025\111\064\112\044\113\116" +
    "\120\056\156\101\157\062\163\140\164\015\166\046\167" +
    "\144\170\024\171\125\172\034\173\120\174\067\175\127" +
    "\176\063\177\033\202\071\206\166\214\142\217\075\220" +
    "\106\221\053\001\002\000\060\031\u0107\135\374\137\370" +
    "\140\u0108\141\372\142\u0101\143\u0109\144\u010d\145\u0103\146" +
    "\366\147\u0100\150\u010c\151\u010a\152\375\153\u010b\154\u0106" +
    "\155\u0102\156\u010f\157\376\160\u0105\161\u0104\162\367\165" +
    "\373\001\uff30\000\140\004\137\006\102\007\011\010\154" +
    "\011\047\012\055\016\121\032\077\043\231\055\026\065" +
    "\143\066\013\067\017\070\042\071\043\072\124\073\006" +
    "\074\031\103\227\104\122\105\036\106\061\110\025\111" +
    "\064\112\044\113\116\120\056\156\101\157\062\163\140" +
    "\164\015\166\046\167\144\170\024\171\125\172\034\173" +
    "\120\174\067\175\127\176\063\177\033\202\071\206\166" +
    "\214\142\217\075\220\106\221\053\001\002\000\140\004" +
    "\137\006\102\007\011\010\154\011\047\012\055\016\121" +
    "\032\077\043\231\055\026\065\143\066\013\067\017\070" +
    "\042\071\043\072\124\073\006\074\031\103\227\104\122" +
    "\105\036\106\061\110\025\111\064\112\044\113\116\120" +
    "\056\156\101\157\062\163\140\164\015\166\046\167\144" +
    "\170\024\171\125\172\034\173\120\174\067\175\127\176" +
    "\063\177\033\202\071\206\166\214\142\217\075\220\106" +
    "\221\053\001\002\000\140\004\137\006\102\007\011\010" +
    "\154\011\047\012\055\016\121\032\077\043\231\055\026" +
    "\065\143\066\013\067\017\070\042\071\043\072\124\073" +
    "\006\074\031\103\227\104\122\105\036\106\061\110\025" +
    "\111\064\112\044\113\116\120\056\156\101\157\062\163" +
    "\140\164\015\166\046\167\144\170\024\171\125\172\034" +
    "\173\120\174\067\175\127\176\063\177\033\202\071\206" +
    "\166\214\142\217\075\220\106\221\053\001\002\000\140" +
    "\004\137\006\102\007\011\010\154\011\047\012\055\016" +
    "\121\032\077\043\231\055\026\065\143\066\013\067\017" +
    "\070\042\071\043\072\124\073\006\074\031\103\227\104" +
    "\122\105\036\106\061\110\025\111\064\112\044\113\116" +
    "\120\056\156\101\157\062\163\140\164\015\166\046\167" +
    "\144\170\024\171\125\172\034\173\120\174\067\175\127" +
    "\176\063\177\033\202\071\206\166\214\142\217\075\220" +
    "\106\221\053\001\002\000\140\004\137\006\102\007\011" +
    "\010\154\011\047\012\055\016\121\032\077\043\231\055" +
    "\026\065\143\066\013\067\017\070\042\071\043\072\124" +
    "\073\006\074\031\103\227\104\122\105\036\106\061\110" +
    "\025\111\064\112\044\113\116\120\056\156\101\157\062" +
    "\163\140\164\015\166\046\167\144\170\024\171\125\172" +
    "\034\173\120\174\067\175\127\176\063\177\033\202\071" +
    "\206\166\214\142\217\075\220\106\221\053\001\002\000" +
    "\140\004\137\006\102\007\011\010\154\011\047\012\055" +
    "\016\121\032\077\043\231\055\026\065\143\066\013\067" +
    "\017\070\042\071\043\072\124\073\006\074\031\103\227" +
    "\104\122\105\036\106\061\110\025\111\064\112\044\113" +
    "\116\120\056\156\101\157\062\163\140\164\015\166\046" +
    "\167\144\170\024\171\125\172\034\173\120\174\067\175" +
    "\127\176\063\177\033\202\071\206\166\214\142\217\075" +
    "\220\106\221\053\001\002\000\142\004\137\006\102\007" +
    "\011\010\154\011\047\012\055\016\121\032\077\043\231" +
    "\055\026\065\143\066\013\067\017\070\042\071\043\072" +
    "\124\073\006\074\031\103\227\104\122\105\036\106\061" +
    "\110\025\111\064\112\044\113\116\120\056\156\101\157" +
    "\062\163\140\164\015\166\046\167\144\170\024\171\125" +
    "\172\034\173\120\174\067\175\127\176\063\177\033\202" +
    "\071\206\166\214\142\216\u0155\217\075\220\106\221\053" +
    "\001\002\000\140\004\137\006\102\007\011\010\154\011" +
    "\047\012\055\016\121\032\077\043\231\055\026\065\143" +
    "\066\013\067\017\070\042\071\043\072\124\073\006\074" +
    "\031\103\227\104\122\105\036\106\061\110\025\111\064" +
    "\112\044\113\116\120\056\156\101\157\062\163\140\164" +
    "\015\166\046\167\144\170\024\171\125\172\034\173\120" +
    "\174\067\175\127\176\063\177\033\202\071\206\166\214" +
    "\142\217\075\220\106\221\053\001\002\000\140\004\137" +
    "\006\102\007\011\010\154\011\047\012\055\016\121\032" +
    "\077\043\231\055\026\065\143\066\013\067\017\070\042" +
    "\071\043\072\124\073\006\074\031\103\227\104\122\105" +
    "\036\106\061\110\025\111\064\112\044\113\116\120\056" +
    "\156\101\157\062\163\140\164\015\166\046\167\144\170" +
    "\024\171\125\172\034\173\120\174\067\175\127\176\063" +
    "\177\033\202\071\206\166\214\142\217\075\220\106\221" +
    "\053\001\002\000\140\004\137\006\102\007\011\010\154" +
    "\011\047\012\055\016\121\032\077\043\231\055\026\065" +
    "\143\066\013\067\017\070\042\071\043\072\124\073\006" +
    "\074\031\103\227\104\122\105\036\106\061\110\025\111" +
    "\064\112\044\113\116\120\056\156\101\157\062\163\140" +
    "\164\015\166\046\167\144\170\024\171\125\172\034\173" +
    "\120\174\067\175\127\176\063\177\033\202\071\206\166" +
    "\214\142\217\075\220\106\221\053\001\002\000\140\004" +
    "\137\006\102\007\011\010\154\011\047\012\055\016\121" +
    "\032\077\043\231\055\026\065\143\066\013\067\017\070" +
    "\042\071\043\072\124\073\006\074\031\103\227\104\122" +
    "\105\036\106\061\110\025\111\064\112\044\113\116\120" +
    "\056\156\101\157\062\163\140\164\015\166\046\167\144" +
    "\170\024\171\125\172\034\173\120\174\067\175\127\176" +
    "\063\177\033\202\071\206\166\214\142\217\075\220\106" +
    "\221\053\001\002\000\140\004\137\006\102\007\011\010" +
    "\154\011\047\012\055\016\121\032\077\043\231\055\026" +
    "\065\143\066\013\067\017\070\042\071\043\072\124\073" +
    "\006\074\031\103\227\104\122\105\036\106\061\110\025" +
    "\111\064\112\044\113\116\120\056\156\101\157\062\163" +
    "\140\164\015\166\046\167\144\170\024\171\125\172\034" +
    "\173\120\174\067\175\127\176\063\177\033\202\071\206" +
    "\166\214\142\217\075\220\106\221\053\001\002\000\140" +
    "\004\137\006\102\007\011\010\154\011\047\012\055\016" +
    "\121\032\077\043\231\055\026\065\143\066\013\067\017" +
    "\070\042\071\043\072\124\073\006\074\031\103\227\104" +
    "\122\105\036\106\061\110\025\111\064\112\044\113\116" +
    "\120\056\156\101\157\062\163\140\164\015\166\046\167" +
    "\144\170\024\171\125\172\034\173\120\174\067\175\127" +
    "\176\063\177\033\202\071\206\166\214\142\217\075\220" +
    "\106\221\053\001\002\000\140\004\137\006\102\007\011" +
    "\010\154\011\047\012\055\016\121\032\077\043\231\055" +
    "\026\065\143\066\013\067\017\070\042\071\043\072\124" +
    "\073\006\074\031\103\227\104\122\105\036\106\061\110" +
    "\025\111\064\112\044\113\116\120\056\156\101\157\062" +
    "\163\140\164\015\166\046\167\144\170\024\171\125\172" +
    "\034\173\120\174\067\175\127\176\063\177\033\202\071" +
    "\206\166\214\142\217\075\220\106\221\053\001\002\000" +
    "\140\004\137\006\102\007\011\010\154\011\047\012\055" +
    "\016\121\032\077\043\231\055\026\065\143\066\013\067" +
    "\017\070\042\071\043\072\124\073\006\074\031\103\227" +
    "\104\122\105\036\106\061\110\025\111\064\112\044\113" +
    "\116\120\056\156\101\157\062\163\140\164\015\166\046" +
    "\167\144\170\024\171\125\172\034\173\120\174\067\175" +
    "\127\176\063\177\033\202\071\206\166\214\142\217\075" +
    "\220\106\221\053\001\002\000\140\004\137\006\102\007" +
    "\011\010\154\011\047\012\055\016\121\032\077\043\231" +
    "\055\026\065\143\066\013\067\017\070\042\071\043\072" +
    "\124\073\006\074\031\103\227\104\122\105\036\106\061" +
    "\110\025\111\064\112\044\113\116\120\056\156\101\157" +
    "\062\163\140\164\015\166\046\167\144\170\024\171\125" +
    "\172\034\173\120\174\067\175\127\176\063\177\033\202" +
    "\071\206\166\214\142\217\075\220\106\221\053\001\002" +
    "\000\140\004\137\006\102\007\011\010\154\011\047\012" +
    "\055\016\121\032\077\043\231\055\026\065\143\066\013" +
    "\067\017\070\042\071\043\072\124\073\006\074\031\103" +
    "\227\104\122\105\036\106\061\110\025\111\064\112\044" +
    "\113\116\120\056\156\101\157\062\163\140\164\015\166" +
    "\046\167\144\170\024\171\125\172\034\173\120\174\067" +
    "\175\127\176\063\177\033\202\071\206\166\214\142\217" +
    "\075\220\106\221\053\001\002\000\016\010\154\012\055" +
    "\103\u0120\106\u011a\206\166\217\075\001\002\000\140\004" +
    "\137\006\102\007\011\010\154\011\047\012\055\016\121" +
    "\032\077\043\231\055\026\065\143\066\013\067\017\070" +
    "\042\071\043\072\124\073\006\074\031\103\227\104\122" +
    "\105\036\106\061\110\025\111\064\112\044\113\116\120" +
    "\056\156\101\157\062\163\140\164\015\166\046\167\144" +
    "\170\024\171\125\172\034\173\120\174\067\175\127\176" +
    "\063\177\033\202\071\206\166\214\142\217\075\220\106" +
    "\221\053\001\002\000\140\004\137\006\102\007\011\010" +
    "\154\011\047\012\055\016\121\032\077\043\231\055\026" +
    "\065\143\066\013\067\017\070\042\071\043\072\124\073" +
    "\006\074\031\103\227\104\122\105\036\106\061\110\025" +
    "\111\064\112\044\113\116\120\056\156\101\157\062\163" +
    "\140\164\015\166\046\167\144\170\024\171\125\172\034" +
    "\173\120\174\067\175\127\176\063\177\033\202\071\206" +
    "\166\214\142\217\075\220\106\221\053\001\002\000\140" +
    "\004\137\006\102\007\011\010\154\011\047\012\055\016" +
    "\121\032\077\043\231\055\026\065\143\066\013\067\017" +
    "\070\042\071\043\072\124\073\006\074\031\103\227\104" +
    "\122\105\036\106\061\110\025\111\064\112\044\113\116" +
    "\120\056\156\101\157\062\163\140\164\015\166\046\167" +
    "\144\170\024\171\125\172\034\173\120\174\067\175\127" +
    "\176\063\177\033\202\071\206\166\214\142\217\075\220" +
    "\106\221\053\001\002\000\140\004\137\006\102\007\011" +
    "\010\154\011\047\012\055\016\121\032\077\043\231\055" +
    "\026\065\143\066\013\067\017\070\042\071\043\072\124" +
    "\073\006\074\031\103\227\104\122\105\036\106\061\110" +
    "\025\111\064\112\044\113\116\120\056\156\101\157\062" +
    "\163\140\164\015\166\046\167\144\170\024\171\125\172" +
    "\034\173\120\174\067\175\127\176\063\177\033\202\071" +
    "\206\166\214\142\217\075\220\106\221\053\001\002\000" +
    "\140\004\137\006\102\007\011\010\154\011\047\012\055" +
    "\016\121\032\077\043\231\055\026\065\143\066\013\067" +
    "\017\070\042\071\043\072\124\073\006\074\031\103\227" +
    "\104\122\105\036\106\061\110\025\111\064\112\044\113" +
    "\116\120\056\156\101\157\062\163\140\164\015\166\046" +
    "\167\144\170\024\171\125\172\034\173\120\174\067\175" +
    "\127\176\063\177\033\202\071\206\166\214\142\217\075" +
    "\220\106\221\053\001\002\000\140\004\137\006\102\007" +
    "\011\010\154\011\047\012\055\016\121\032\077\043\231" +
    "\055\026\065\143\066\013\067\017\070\042\071\043\072" +
    "\124\073\006\074\031\103\227\104\122\105\036\106\061" +
    "\110\025\111\064\112\044\113\116\120\056\156\101\157" +
    "\062\163\140\164\015\166\046\167\144\170\024\171\125" +
    "\172\034\173\120\174\067\175\127\176\063\177\033\202" +
    "\071\206\166\214\142\217\075\220\106\221\053\001\002" +
    "\000\140\004\137\006\102\007\011\010\154\011\047\012" +
    "\055\016\121\032\077\043\231\055\026\065\143\066\013" +
    "\067\017\070\042\071\043\072\124\073\006\074\031\103" +
    "\227\104\122\105\036\106\061\110\025\111\064\112\044" +
    "\113\116\120\056\156\101\157\062\163\140\164\015\166" +
    "\046\167\144\170\024\171\125\172\034\173\120\174\067" +
    "\175\127\176\063\177\033\202\071\206\166\214\142\217" +
    "\075\220\106\221\053\001\002\000\140\004\137\006\102" +
    "\007\011\010\154\011\047\012\055\016\121\032\077\043" +
    "\231\055\026\065\143\066\013\067\017\070\042\071\043" +
    "\072\124\073\006\074\031\103\227\104\122\105\036\106" +
    "\061\110\025\111\064\112\044\113\116\120\056\156\101" +
    "\157\062\163\140\164\015\166\046\167\144\170\024\171" +
    "\125\172\034\173\120\174\067\175\127\176\063\177\033" +
    "\202\071\206\166\214\142\217\075\220\106\221\053\001" +
    "\002\000\012\031\u0107\160\u0105\161\u0104\162\367\001\uff1c" +
    "\000\062\031\u0107\117\371\135\374\137\370\140\u0108\141" +
    "\372\142\u0101\143\u0109\144\u010d\145\u0103\146\366\147\u0100" +
    "\150\u010c\151\u010a\152\375\153\u010b\154\u0106\155\u0102\156" +
    "\u010f\157\376\160\u0105\161\u0104\162\367\165\373\001\uff21" +
    "\000\034\031\u0107\150\u010c\151\u010a\152\375\153\u010b\154" +
    "\u0106\155\u0102\156\u010f\157\376\160\u0105\161\u0104\162\367" +
    "\165\373\001\uff0f\000\024\031\u0107\154\u0106\155\u0102\156" +
    "\u010f\157\376\160\u0105\161\u0104\162\367\165\373\001\uff0c" +
    "\000\024\031\u0107\154\u0106\155\u0102\156\u010f\157\376\160" +
    "\u0105\161\u0104\162\367\165\373\001\uff0b\000\024\031\u0107" +
    "\154\u0106\155\u0102\156\u010f\157\376\160\u0105\161\u0104\162" +
    "\367\165\373\001\uff0a\000\044\031\u0107\144\u010d\145\u0103" +
    "\146\366\147\u0100\150\u010c\151\u010a\152\375\153\u010b\154" +
    "\u0106\155\u0102\156\u010f\157\376\160\u0105\161\u0104\162\367" +
    "\165\373\001\uff1f\000\052\031\u0107\141\372\142\u0101\143" +
    "\u0109\144\u010d\145\u0103\146\366\147\u0100\150\u010c\151\u010a" +
    "\152\375\153\u010b\154\u0106\155\u0102\156\u010f\157\376\160" +
    "\u0105\161\u0104\162\367\165\373\001\uff24\000\002\001\ufee0" +
    "\000\004\102\u0149\001\002\000\004\010\154\001\002\000" +
    "\010\100\u0129\102\ufe9e\200\u012a\001\ufe9b\000\004\102\u0146" +
    "\001\ufee1\000\002\001\uff09\000\004\063\u0130\001\ufede\000" +
    "\006\012\055\217\u0125\001\002\000\004\106\u0122\001\002" +
    "\000\002\001\ufee7\000\004\010\154\001\002\000\002\001" +
    "\ufee6\000\006\100\u0129\200\u012a\001\ufe9a\000\004\100\u0126" +
    "\001\ufe89\000\140\004\137\006\102\007\011\010\154\011" +
    "\047\012\055\016\121\032\077\043\231\055\026\065\143" +
    "\066\013\067\017\070\042\071\043\072\124\073\006\074" +
    "\031\103\227\104\122\105\036\106\061\110\025\111\064" +
    "\112\044\113\116\120\056\156\101\157\062\163\140\164" +
    "\015\166\046\167\144\170\024\171\125\172\034\173\120" +
    "\174\067\175\127\176\063\177\033\202\071\206\166\214" +
    "\142\217\075\220\106\221\053\001\002\000\070\031\u0107" +
    "\101\u0128\115\377\116\u010e\117\371\135\374\137\370\140" +
    "\u0108\141\372\142\u0101\143\u0109\144\u010d\145\u0103\146\366" +
    "\147\u0100\150\u010c\151\u010a\152\375\153\u010b\154\u0106\155" +
    "\u0102\156\u010f\157\376\160\u0105\161\u0104\162\367\165\373" +
    "\001\002\000\002\001\ufe94\000\140\004\137\006\102\007" +
    "\011\010\154\011\047\012\055\016\121\032\077\043\231" +
    "\055\026\065\143\066\013\067\017\070\042\071\043\072" +
    "\124\073\006\074\031\103\227\104\122\105\036\106\061" +
    "\110\025\111\064\112\044\113\116\120\056\156\101\157" +
    "\062\163\140\164\015\166\046\167\144\170\024\171\125" +
    "\172\034\173\120\174\067\175\127\176\063\177\033\202" +
    "\071\206\166\214\142\217\075\220\106\221\053\001\002" +
    "\000\140\004\137\006\102\007\011\010\154\011\047\012" +
    "\055\016\121\032\077\043\231\055\026\065\143\066\013" +
    "\067\017\070\042\071\043\072\124\073\006\074\031\103" +
    "\227\104\122\105\036\106\061\110\025\111\064\112\044" +
    "\113\116\120\056\156\101\157\062\163\140\164\015\166" +
    "\046\167\144\170\024\171\125\172\034\173\120\174\067" +
    "\175\127\176\063\177\033\202\071\206\166\214\142\217" +
    "\075\220\106\221\053\001\ufe93\000\004\201\u012d\001\002" +
    "\000\066\031\u0107\115\377\116\u010e\117\371\135\374\137" +
    "\370\140\u0108\141\372\142\u0101\143\u0109\144\u010d\145\u0103" +
    "\146\366\147\u0100\150\u010c\151\u010a\152\375\153\u010b\154" +
    "\u0106\155\u0102\156\u010f\157\376\160\u0105\161\u0104\162\367" +
    "\165\373\001\ufe92\000\002\001\ufe98\000\070\031\u0107\101" +
    "\u012f\115\377\116\u010e\117\371\135\374\137\370\140\u0108" +
    "\141\372\142\u0101\143\u0109\144\u010d\145\u0103\146\366\147" +
    "\u0100\150\u010c\151\u010a\152\375\153\u010b\154\u0106\155\u0102" +
    "\156\u010f\157\376\160\u0105\161\u0104\162\367\165\373\001" +
    "\002\000\002\001\ufe97\000\012\010\154\012\055\100\u0137" +
    "\217\075\001\002\000\002\001\ufe8c\000\002\001\ufe8d\000" +
    "\002\001\ufe90\000\002\001\ufedc\000\006\100\u013c\200\u013d" +
    "\001\ufe91\000\006\012\055\217\u0125\001\002\000\140\004" +
    "\137\006\102\007\011\010\154\011\047\012\055\016\121" +
    "\032\077\043\231\055\026\065\143\066\013\067\017\070" +
    "\042\071\043\072\124\073\006\074\031\103\227\104\122" +
    "\105\036\106\061\110\025\111\064\112\044\113\116\120" +
    "\056\156\101\157\062\163\140\164\015\166\046\167\144" +
    "\170\024\171\125\172\034\173\120\174\067\175\127\176" +
    "\063\177\033\202\071\206\166\214\142\217\075\220\106" +
    "\221\053\001\002\000\006\100\u0129\200\u012a\001\ufea2\000" +
    "\070\031\u0107\101\u013a\115\377\116\u010e\117\371\135\374" +
    "\137\370\140\u0108\141\372\142\u0101\143\u0109\144\u010d\145" +
    "\u0103\146\366\147\u0100\150\u010c\151\u010a\152\375\153\u010b" +
    "\154\u0106\155\u0102\156\u010f\157\376\160\u0105\161\u0104\162" +
    "\367\165\373\001\002\000\002\001\ufe8b\000\006\100\u0129" +
    "\200\u012a\001\ufea1\000\140\004\137\006\102\007\011\010" +
    "\154\011\047\012\055\016\121\032\077\043\231\055\026" +
    "\065\143\066\013\067\017\070\042\071\043\072\124\073" +
    "\006\074\031\103\227\104\122\105\036\106\061\110\025" +
    "\111\064\112\044\113\116\120\056\156\101\157\062\163" +
    "\140\164\015\166\046\167\144\170\024\171\125\172\034" +
    "\173\120\174\067\175\127\176\063\177\033\202\071\206" +
    "\166\214\142\217\075\220\106\221\053\001\002\000\140" +
    "\004\137\006\102\007\011\010\154\011\047\012\055\016" +
    "\121\032\077\043\231\055\026\065\143\066\013\067\017" +
    "\070\042\071\043\072\124\073\006\074\031\103\227\104" +
    "\122\105\036\106\061\110\025\111\064\112\044\113\116" +
    "\120\056\156\101\157\062\163\140\164\015\166\046\167" +
    "\144\170\024\171\125\172\034\173\120\174\067\175\127" +
    "\176\063\177\033\202\071\206\166\214\142\217\075\220" +
    "\106\221\053\001\ufe93\000\004\201\u013f\001\002\000\002" +
    "\001\ufe8f\000\070\031\u0107\101\u0141\115\377\116\u010e\117" +
    "\371\135\374\137\370\140\u0108\141\372\142\u0101\143\u0109" +
    "\144\u010d\145\u0103\146\366\147\u0100\150\u010c\151\u010a\152" +
    "\375\153\u010b\154\u0106\155\u0102\156\u010f\157\376\160\u0105" +
    "\161\u0104\162\367\165\373\001\002\000\002\001\ufe8e\000" +
    "\004\063\u0144\001\ufedf\000\002\001\ufedd\000\012\010\154" +
    "\012\055\100\u0137\217\075\001\002\000\002\001\ufedb\000" +
    "\006\012\055\217\075\001\002\000\002\001\ufea0\000\002" +
    "\001\ufee5\000\006\012\055\217\075\001\002\000\002\001" +
    "\ufe9f\000\020\031\u0107\156\u010f\157\376\160\u0105\161\u0104" +
    "\162\367\165\373\001\uff17\000\004\031\u0107\001\uff1a\000" +
    "\004\031\u0107\001\uff19\000\034\031\u0107\150\u010c\151\u010a" +
    "\152\375\153\u010b\154\u0106\155\u0102\156\u010f\157\376\160" +
    "\u0105\161\u0104\162\367\165\373\001\uff0e\000\020\031\u0107" +
    "\156\u010f\157\376\160\u0105\161\u0104\162\367\165\373\001" +
    "\uff16\000\046\031\u0107\143\u0109\144\u010d\145\u0103\146\366" +
    "\147\u0100\150\u010c\151\u010a\152\375\153\u010b\154\u0106\155" +
    "\u0102\156\u010f\157\376\160\u0105\161\u0104\162\367\165\373" +
    "\001\uff1e\000\034\031\u0107\150\u010c\151\u010a\152\375\153" +
    "\u010b\154\u0106\155\u0102\156\u010f\157\376\160\u0105\161\u0104" +
    "\162\367\165\373\001\uff10\000\064\031\u0107\116\u010e\117" +
    "\371\135\374\137\370\140\u0108\141\372\142\u0101\143\u0109" +
    "\144\u010d\145\u0103\146\366\147\u0100\150\u010c\151\u010a\152" +
    "\375\153\u010b\154\u0106\155\u0102\156\u010f\157\376\160\u0105" +
    "\161\u0104\162\367\165\373\001\uff23\000\012\031\u0107\160" +
    "\u0105\161\u0104\162\367\001\uff1b\000\024\031\u0107\154\u0106" +
    "\155\u0102\156\u010f\157\376\160\u0105\161\u0104\162\367\165" +
    "\373\001\uff0d\000\140\004\137\006\102\007\011\010\154" +
    "\011\047\012\055\016\121\032\077\043\231\055\026\065" +
    "\143\066\013\067\017\070\042\071\043\072\124\073\006" +
    "\074\031\103\227\104\122\105\036\106\061\110\025\111" +
    "\064\112\044\113\116\120\056\156\101\157\062\163\140" +
    "\164\015\166\046\167\144\170\024\171\125\172\034\173" +
    "\120\174\067\175\127\176\063\177\033\202\071\206\166" +
    "\214\142\217\075\220\106\221\053\001\002\000\070\031" +
    "\u0107\115\377\116\u010e\117\371\135\374\137\370\140\u0108" +
    "\141\372\142\u0101\143\u0109\144\u010d\145\u0103\146\366\147" +
    "\u0100\150\u010c\151\u010a\152\375\153\u010b\154\u0106\155\u0102" +
    "\156\u010f\157\376\160\u0105\161\u0104\162\367\165\373\216" +
    "\u0157\001\002\000\140\004\137\006\102\007\011\010\154" +
    "\011\047\012\055\016\121\032\077\043\231\055\026\065" +
    "\143\066\013\067\017\070\042\071\043\072\124\073\006" +
    "\074\031\103\227\104\122\105\036\106\061\110\025\111" +
    "\064\112\044\113\116\120\056\156\101\157\062\163\140" +
    "\164\015\166\046\167\144\170\024\171\125\172\034\173" +
    "\120\174\067\175\127\176\063\177\033\202\071\206\166" +
    "\214\142\217\075\220\106\221\053\001\002\000\066\031" +
    "\u0107\115\377\116\u010e\117\371\135\374\137\370\140\u0108" +
    "\141\372\142\u0101\143\u0109\144\u010d\145\u0103\146\366\147" +
    "\u0100\150\u010c\151\u010a\152\375\153\u010b\154\u0106\155\u0102" +
    "\156\u010f\157\376\160\u0105\161\u0104\162\367\165\373\001" +
    "\uff07\000\066\031\u0107\115\377\116\u010e\117\371\135\374" +
    "\137\370\140\u0108\141\372\142\u0101\143\u0109\144\u010d\145" +
    "\u0103\146\366\147\u0100\150\u010c\151\u010a\152\375\153\u010b" +
    "\154\u0106\155\u0102\156\u010f\157\376\160\u0105\161\u0104\162" +
    "\367\165\373\001\uff06\000\012\031\u0107\160\u0105\161\u0104" +
    "\162\367\001\uff1d\000\050\031\u0107\142\u0101\143\u0109\144" +
    "\u010d\145\u0103\146\366\147\u0100\150\u010c\151\u010a\152\375" +
    "\153\u010b\154\u0106\155\u0102\156\u010f\157\376\160\u0105\161" +
    "\u0104\162\367\165\373\001\uff20\000\060\031\u0107\135\374" +
    "\137\370\140\u0108\141\372\142\u0101\143\u0109\144\u010d\145" +
    "\u0103\146\366\147\u0100\150\u010c\151\u010a\152\375\153\u010b" +
    "\154\u0106\155\u0102\156\u010f\157\376\160\u0105\161\u0104\162" +
    "\367\165\373\001\uff22\000\054\031\u0107\140\u0108\141\372" +
    "\142\u0101\143\u0109\144\u010d\145\u0103\146\366\147\u0100\150" +
    "\u010c\151\u010a\152\375\153\u010b\154\u0106\155\u0102\156\u010f" +
    "\157\376\160\u0105\161\u0104\162\367\165\373\001\uff25\000" +
    "\004\031\u0107\001\uff18\000\034\031\u0107\150\u010c\151\u010a" +
    "\152\375\153\u010b\154\u0106\155\u0102\156\u010f\157\376\160" +
    "\u0105\161\u0104\162\367\165\373\001\uff11\000\060\031\u0107" +
    "\135\374\137\370\140\u0108\141\372\142\u0101\143\u0109\144" +
    "\u010d\145\u0103\146\366\147\u0100\150\u010c\151\u010a\152\375" +
    "\153\u010b\154\u0106\155\u0102\156\u010f\157\376\160\u0105\161" +
    "\u0104\162\367\165\373\001\uff32\000\060\031\u0107\135\374" +
    "\137\370\140\u0108\141\372\142\u0101\143\u0109\144\u010d\145" +
    "\u0103\146\366\147\u0100\150\u010c\151\u010a\152\375\153\u010b" +
    "\154\u0106\155\u0102\156\u010f\157\376\160\u0105\161\u0104\162" +
    "\367\165\373\001\uff2e\000\060\031\u0107\135\374\137\370" +
    "\140\u0108\141\372\142\u0101\143\u0109\144\u010d\145\u0103\146" +
    "\366\147\u0100\150\u010c\151\u010a\152\375\153\u010b\154\u0106" +
    "\155\u0102\156\u010f\157\376\160\u0105\161\u0104\162\367\165" +
    "\373\001\uff2a\000\060\031\u0107\135\374\137\370\140\u0108" +
    "\141\372\142\u0101\143\u0109\144\u010d\145\u0103\146\366\147" +
    "\u0100\150\u010c\151\u010a\152\375\153\u010b\154\u0106\155\u0102" +
    "\156\u010f\157\376\160\u0105\161\u0104\162\367\165\373\001" +
    "\uff2f\000\060\031\u0107\135\374\137\370\140\u0108\141\372" +
    "\142\u0101\143\u0109\144\u010d\145\u0103\146\366\147\u0100\150" +
    "\u010c\151\u010a\152\375\153\u010b\154\u0106\155\u0102\156\u010f" +
    "\157\376\160\u0105\161\u0104\162\367\165\373\001\uff2b\000" +
    "\060\031\u0107\135\374\137\370\140\u0108\141\372\142\u0101" +
    "\143\u0109\144\u010d\145\u0103\146\366\147\u0100\150\u010c\151" +
    "\u010a\152\375\153\u010b\154\u0106\155\u0102\156\u010f\157\376" +
    "\160\u0105\161\u0104\162\367\165\373\001\uff31\000\060\031" +
    "\u0107\135\374\137\370\140\u0108\141\372\142\u0101\143\u0109" +
    "\144\u010d\145\u0103\146\366\147\u0100\150\u010c\151\u010a\152" +
    "\375\153\u010b\154\u0106\155\u0102\156\u010f\157\376\160\u0105" +
    "\161\u0104\162\367\165\373\001\uff34\000\060\031\u0107\135" +
    "\374\137\370\140\u0108\141\372\142\u0101\143\u0109\144\u010d" +
    "\145\u0103\146\366\147\u0100\150\u010c\151\u010a\152\375\153" +
    "\u010b\154\u0106\155\u0102\156\u010f\157\376\160\u0105\161\u0104" +
    "\162\367\165\373\001\uff2d\000\060\031\u0107\135\374\137" +
    "\370\140\u0108\141\372\142\u0101\143\u0109\144\u010d\145\u0103" +
    "\146\366\147\u0100\150\u010c\151\u010a\152\375\153\u010b\154" +
    "\u0106\155\u0102\156\u010f\157\376\160\u0105\161\u0104\162\367" +
    "\165\373\001\uff33\000\020\010\154\012\055\103\336\106" +
    "\334\202\u016c\206\166\217\075\001\002\000\060\031\u0107" +
    "\135\374\137\370\140\u0108\141\372\142\u0101\143\u0109\144" +
    "\u010d\145\u0103\146\366\147\u0100\150\u010c\151\u010a\152\375" +
    "\153\u010b\154\u0106\155\u0102\156\u010f\157\376\160\u0105\161" +
    "\u0104\162\367\165\373\001\uff39\000\002\001\uff38\000\016" +
    "\010\154\012\055\103\u0120\106\u011a\206\166\217\075\001" +
    "\002\000\004\214\u016f\001\ufed4\000\002\001\uff37\000\142" +
    "\004\137\006\102\007\011\010\154\011\047\012\055\016" +
    "\121\032\077\043\231\055\026\065\143\066\013\067\017" +
    "\070\042\071\043\072\124\073\006\074\031\103\227\104" +
    "\122\105\036\106\061\110\025\111\064\112\044\113\116" +
    "\120\056\143\322\156\101\157\062\163\140\164\015\166" +
    "\046\167\144\170\024\171\125\172\034\173\120\174\067" +
    "\175\127\176\063\177\033\202\071\206\166\214\142\217" +
    "\075\220\106\221\053\001\uff6e\000\004\215\u0171\001\002" +
    "\000\002\001\ufed3\000\060\031\u0107\135\374\137\370\140" +
    "\u0108\141\372\142\u0101\143\u0109\144\u010d\145\u0103\146\366" +
    "\147\u0100\150\u010c\151\u010a\152\375\153\u010b\154\u0106\155" +
    "\u0102\156\u010f\157\376\160\u0105\161\u0104\162\367\165\373" +
    "\001\uff2c\000\002\001\uff6b\000\002\001\ufeef\000\004\016" +
    "\u0179\001\002\000\004\136\u0178\001\002\000\002\001\uffb7" +
    "\000\002\001\uffc8\000\004\215\u017a\001\002\000\002\001" +
    "\uffb6\000\140\004\137\006\102\007\011\010\154\011\047" +
    "\012\055\016\121\032\077\043\231\055\026\065\143\066" +
    "\013\067\017\070\042\071\043\072\124\073\006\074\031" +
    "\103\227\104\122\105\036\106\061\110\025\111\064\112" +
    "\044\113\116\120\056\156\101\157\062\163\140\164\015" +
    "\166\046\167\144\170\024\171\125\172\034\173\120\174" +
    "\067\175\127\176\063\177\033\202\071\206\166\214\142" +
    "\217\075\220\106\221\053\001\002\000\070\031\u0107\115" +
    "\377\116\u010e\117\371\135\374\137\370\140\u0108\141\372" +
    "\142\u0101\143\u0109\144\u010d\145\u0103\146\366\147\u0100\150" +
    "\u010c\151\u010a\152\375\153\u010b\154\u0106\155\u0102\156\u010f" +
    "\157\376\160\u0105\161\u0104\162\367\165\373\215\u017d\001" +
    "\002\000\216\003\111\004\137\005\147\006\102\007\011" +
    "\010\030\011\047\012\055\014\070\016\121\017\115\020" +
    "\113\021\040\023\027\025\076\027\150\032\077\034\123" +
    "\040\051\041\114\042\066\043\231\045\131\046\035\050" +
    "\145\051\225\052\012\054\072\055\026\065\143\066\013" +
    "\067\017\070\042\071\043\072\124\073\006\074\031\100" +
    "\057\103\227\104\122\105\036\106\061\107\022\110\025" +
    "\111\064\112\044\113\116\120\056\136\010\156\101\157" +
    "\062\163\140\164\015\166\046\167\144\170\024\171\125" +
    "\172\034\173\120\174\067\175\127\176\063\177\033\202" +
    "\071\206\037\214\142\216\u017e\217\075\220\106\221\053" +
    "\001\002\000\002\001\uffe4\000\002\001\uff84\000\006\204" +
    "\u0183\205\u0182\001\uff80\000\002\001\uffda\000\214\003\111" +
    "\004\137\005\147\006\102\007\011\010\030\011\047\012" +
    "\055\014\070\016\121\017\115\020\113\021\040\023\027" +
    "\025\076\027\150\032\077\034\123\040\051\041\114\042" +
    "\066\043\231\045\131\046\035\050\145\051\225\052\012" +
    "\054\072\055\026\065\143\066\013\067\017\070\042\071" +
    "\043\072\124\073\006\074\031\100\057\103\227\104\122" +
    "\105\036\106\061\107\022\110\025\111\064\112\044\113" +
    "\116\120\056\136\010\156\101\157\062\163\140\164\015" +
    "\166\046\167\144\170\024\171\125\172\034\173\120\174" +
    "\067\175\127\176\063\177\033\202\071\206\037\214\142" +
    "\217\075\220\106\221\053\001\002\000\004\214\u0184\001" +
    "\002\000\140\004\137\006\102\007\011\010\154\011\047" +
    "\012\055\016\121\032\077\043\231\055\026\065\143\066" +
    "\013\067\017\070\042\071\043\072\124\073\006\074\031" +
    "\103\227\104\122\105\036\106\061\110\025\111\064\112" +
    "\044\113\116\120\056\156\101\157\062\163\140\164\015" +
    "\166\046\167\144\170\024\171\125\172\034\173\120\174" +
    "\067\175\127\176\063\177\033\202\071\206\166\214\142" +
    "\217\075\220\106\221\053\001\002\000\070\031\u0107\115" +
    "\377\116\u010e\117\371\135\374\137\370\140\u0108\141\372" +
    "\142\u0101\143\u0109\144\u010d\145\u0103\146\366\147\u0100\150" +
    "\u010c\151\u010a\152\375\153\u010b\154\u0106\155\u0102\156\u010f" +
    "\157\376\160\u0105\161\u0104\162\367\165\373\215\u0186\001" +
    "\002\000\214\003\111\004\137\005\147\006\102\007\011" +
    "\010\030\011\047\012\055\014\070\016\121\017\115\020" +
    "\113\021\040\023\027\025\076\027\150\032\077\034\123" +
    "\040\051\041\114\042\066\043\231\045\131\046\035\050" +
    "\145\051\225\052\012\054\072\055\026\065\143\066\013" +
    "\067\017\070\042\071\043\072\124\073\006\074\031\100" +
    "\057\103\227\104\122\105\036\106\061\107\022\110\025" +
    "\111\064\112\044\113\116\120\056\136\010\156\101\157" +
    "\062\163\140\164\015\166\046\167\144\170\024\171\125" +
    "\172\034\173\120\174\067\175\127\176\063\177\033\202" +
    "\071\206\037\214\142\217\075\220\106\221\053\001\002" +
    "\000\002\001\uff83\000\002\001\uff7f\000\216\003\111\004" +
    "\137\005\147\006\102\007\011\010\030\011\047\012\055" +
    "\014\070\016\121\017\115\020\113\021\040\023\027\025" +
    "\076\027\150\032\077\034\123\040\051\041\114\042\066" +
    "\043\103\045\131\046\035\050\145\051\225\052\012\054" +
    "\072\055\026\056\256\065\143\066\013\067\017\070\042" +
    "\071\043\072\124\073\006\074\031\100\057\103\227\104" +
    "\122\105\036\106\061\107\022\110\025\111\064\112\044" +
    "\113\116\120\056\136\010\156\101\157\062\163\140\164" +
    "\015\166\046\167\144\170\024\171\125\172\034\173\120" +
    "\174\067\175\127\176\063\177\033\202\071\206\037\214" +
    "\142\217\075\220\106\221\053\001\uff82\000\006\204\u018d" +
    "\205\u018c\001\uff7e\000\004\203\u0195\001\002\000\004\216" +
    "\u0193\001\002\000\004\214\u018e\001\002\000\140\004\137" +
    "\006\102\007\011\010\154\011\047\012\055\016\121\032" +
    "\077\043\231\055\026\065\143\066\013\067\017\070\042" +
    "\071\043\072\124\073\006\074\031\103\227\104\122\105" +
    "\036\106\061\110\025\111\064\112\044\113\116\120\056" +
    "\156\101\157\062\163\140\164\015\166\046\167\144\170" +
    "\024\171\125\172\034\173\120\174\067\175\127\176\063" +
    "\177\033\202\071\206\166\214\142\217\075\220\106\221" +
    "\053\001\002\000\070\031\u0107\115\377\116\u010e\117\371" +
    "\135\374\137\370\140\u0108\141\372\142\u0101\143\u0109\144" +
    "\u010d\145\u0103\146\366\147\u0100\150\u010c\151\u010a\152\375" +
    "\153\u010b\154\u0106\155\u0102\156\u010f\157\376\160\u0105\161" +
    "\u0104\162\367\165\373\215\u0190\001\002\000\004\216\u0191" +
    "\001\002\000\002\001\uffe4\000\216\003\111\004\137\005" +
    "\147\006\102\007\011\010\030\011\047\012\055\014\070" +
    "\016\121\017\115\020\113\021\040\023\027\025\076\027" +
    "\150\032\077\034\123\040\051\041\114\042\066\043\103" +
    "\045\131\046\035\050\145\051\225\052\012\054\072\055" +
    "\026\056\256\065\143\066\013\067\017\070\042\071\043" +
    "\072\124\073\006\074\031\100\057\103\227\104\122\105" +
    "\036\106\061\107\022\110\025\111\064\112\044\113\116" +
    "\120\056\136\010\156\101\157\062\163\140\164\015\166" +
    "\046\167\144\170\024\171\125\172\034\173\120\174\067" +
    "\175\127\176\063\177\033\202\071\206\037\214\142\217" +
    "\075\220\106\221\053\001\uff81\000\002\001\uffe4\000\216" +
    "\003\111\004\137\005\147\006\102\007\011\010\030\011" +
    "\047\012\055\014\070\016\121\017\115\020\113\021\040" +
    "\023\027\025\076\027\150\032\077\034\123\040\051\041" +
    "\114\042\066\043\103\045\131\046\035\050\145\051\225" +
    "\052\012\054\072\055\026\056\256\065\143\066\013\067" +
    "\017\070\042\071\043\072\124\073\006\074\031\100\057" +
    "\103\227\104\122\105\036\106\061\107\022\110\025\111" +
    "\064\112\044\113\116\120\056\136\010\156\101\157\062" +
    "\163\140\164\015\166\046\167\144\170\024\171\125\172" +
    "\034\173\120\174\067\175\127\176\063\177\033\202\071" +
    "\206\037\214\142\217\075\220\106\221\053\001\uff7d\000" +
    "\004\136\u0196\001\002\000\002\001\uffd9\000\070\031\u0107" +
    "\115\377\116\u010e\117\371\135\374\136\u0198\137\370\140" +
    "\u0108\141\372\142\u0101\143\u0109\144\u010d\145\u0103\146\366" +
    "\147\u0100\150\u010c\151\u010a\152\375\153\u010b\154\u0106\155" +
    "\u0102\156\u010f\157\376\160\u0105\161\u0104\162\367\165\373" +
    "\001\002\000\002\001\uffc1\000\002\001\uff26\000\002\001" +
    "\ufeaa\000\020\010\154\012\055\065\u019f\103\336\106\334" +
    "\206\166\217\075\001\ufe84\000\006\114\u01a3\215\u01a5\001" +
    "\002\000\002\001\ufe87\000\002\001\ufe86\000\004\214\u01a0" +
    "\001\002\000\020\010\154\012\055\065\u019f\103\336\106" +
    "\334\206\166\217\075\001\ufe84\000\006\114\u01a3\215\u01a2" +
    "\001\002\000\002\001\ufe85\000\020\010\154\012\055\065" +
    "\u019f\103\336\106\334\206\166\217\075\001\ufe84\000\002" +
    "\001\ufe88\000\004\121\u01a6\001\002\000\140\004\137\006" +
    "\102\007\011\010\154\011\047\012\055\016\121\032\077" +
    "\043\231\055\026\065\143\066\013\067\017\070\042\071" +
    "\043\072\124\073\006\074\031\103\227\104\122\105\036" +
    "\106\061\110\025\111\064\112\044\113\116\120\056\156" +
    "\101\157\062\163\140\164\015\166\046\167\144\170\024" +
    "\171\125\172\034\173\120\174\067\175\127\176\063\177" +
    "\033\202\071\206\166\214\142\217\075\220\106\221\053" +
    "\001\002\000\060\031\u0107\135\374\137\370\140\u0108\141" +
    "\372\142\u0101\143\u0109\144\u010d\145\u0103\146\366\147\u0100" +
    "\150\u010c\151\u010a\152\375\153\u010b\154\u0106\155\u0102\156" +
    "\u010f\157\376\160\u0105\161\u0104\162\367\165\373\001\uff3a" +
    "\000\070\031\u0107\115\377\116\u010e\117\371\135\374\137" +
    "\370\140\u0108\141\372\142\u0101\143\u0109\144\u010d\145\u0103" +
    "\146\366\147\u0100\150\u010c\151\u010a\152\375\153\u010b\154" +
    "\u0106\155\u0102\156\u010f\157\376\160\u0105\161\u0104\162\367" +
    "\165\373\215\u01a9\001\002\000\002\001\uff08\000\004\031" +
    "\u0107\001\uff13\000\142\004\137\006\102\007\011\010\154" +
    "\011\047\012\055\016\121\032\077\043\231\055\026\065" +
    "\143\066\013\067\017\070\042\071\043\072\124\073\006" +
    "\074\031\103\227\104\122\105\036\106\061\110\025\111" +
    "\064\112\044\113\116\120\056\156\101\157\062\163\140" +
    "\164\015\166\046\167\144\170\024\171\125\172\034\173" +
    "\120\174\067\175\127\176\063\177\033\202\071\206\166" +
    "\214\142\215\u01ae\217\075\220\106\221\053\001\002\000" +
    "\002\001\ufefd\000\070\031\u0107\115\377\116\u010e\117\371" +
    "\135\374\137\370\140\u0108\141\372\142\u0101\143\u0109\144" +
    "\u010d\145\u0103\146\366\147\u0100\150\u010c\151\u010a\152\375" +
    "\153\u010b\154\u0106\155\u0102\156\u010f\157\376\160\u0105\161" +
    "\u0104\162\367\165\373\215\u01af\001\002\000\002\001\ufed9" +
    "\000\002\001\ufed8\000\004\010\154\001\002\000\002\001" +
    "\ufffd\000\010\010\u01b4\012\055\217\075\001\002\000\004" +
    "\214\u01b8\001\ufe9f\000\004\214\u01b5\001\002\000\142\004" +
    "\137\006\102\007\011\010\154\011\047\012\055\016\121" +
    "\032\077\043\231\055\026\065\143\066\013\067\017\070" +
    "\042\071\043\072\124\073\006\074\031\103\227\104\122" +
    "\105\036\106\061\110\025\111\064\112\044\113\116\120" +
    "\056\143\322\156\101\157\062\163\140\164\015\166\046" +
    "\167\144\170\024\171\125\172\034\173\120\174\067\175" +
    "\127\176\063\177\033\202\071\206\166\214\142\217\075" +
    "\220\106\221\053\001\uff6e\000\004\215\u01b7\001\002\000" +
    "\002\001\ufeeb\000\142\004\137\006\102\007\011\010\154" +
    "\011\047\012\055\016\121\032\077\043\231\055\026\065" +
    "\143\066\013\067\017\070\042\071\043\072\124\073\006" +
    "\074\031\103\227\104\122\105\036\106\061\110\025\111" +
    "\064\112\044\113\116\120\056\143\322\156\101\157\062" +
    "\163\140\164\015\166\046\167\144\170\024\171\125\172" +
    "\034\173\120\174\067\175\127\176\063\177\033\202\071" +
    "\206\166\214\142\217\075\220\106\221\053\001\uff6e\000" +
    "\004\215\u01ba\001\002\000\002\001\ufeea\000\002\001\uffd0" +
    "\000\040\121\352\122\355\123\353\124\363\125\356\126" +
    "\364\127\360\130\362\131\354\132\351\133\357\134\361" +
    "\136\u01bf\166\ufeaa\167\ufeaa\001\ufeac\000\004\136\u01be\001" +
    "\ufead\000\002\001\uffcf\000\002\001\uffce\000\004\121\u01c1" +
    "\001\002\000\046\006\102\007\011\010\154\016\121\066" +
    "\163\067\017\070\042\071\043\072\124\073\006\074\156" +
    "\103\170\104\122\105\036\106\162\156\167\157\160\206" +
    "\166\001\002\000\002\001\uff41\000\002\001\ufeff\000\002" +
    "\001\uff03\000\140\004\137\006\102\007\011\010\154\011" +
    "\047\012\055\016\121\032\077\043\231\055\026\065\143" +
    "\066\013\067\017\070\042\071\043\072\124\073\006\074" +
    "\031\103\227\104\122\105\036\106\061\110\025\111\064" +
    "\112\044\113\116\120\056\156\101\157\062\163\140\164" +
    "\015\166\046\167\144\170\024\171\125\172\034\173\120" +
    "\174\067\175\127\176\063\177\033\202\071\206\166\214" +
    "\142\217\075\220\106\221\053\001\002\000\070\031\u0107" +
    "\115\377\116\u010e\117\371\135\374\137\370\140\u0108\141" +
    "\372\142\u0101\143\u0109\144\u010d\145\u0103\146\366\147\u0100" +
    "\150\u010c\151\u010a\152\375\153\u010b\154\u0106\155\u0102\156" +
    "\u010f\157\376\160\u0105\161\u0104\162\367\165\373\215\u01c7" +
    "\001\002\000\006\100\u01c9\216\u01ca\001\002\000\002\001" +
    "\uffd5\000\004\136\u01dc\001\uff8b\000\004\136\u01cc\001\uff8b" +
    "\000\010\035\u01d9\036\u01cf\037\u01d0\001\002\000\002\001" +
    "\uff8b\000\010\035\u01ce\036\u01cf\037\u01d0\001\002\000\004" +
    "\136\u01d8\001\002\000\140\004\137\006\102\007\011\010" +
    "\154\011\047\012\055\016\121\032\077\043\231\055\026" +
    "\065\143\066\013\067\017\070\042\071\043\072\124\073" +
    "\006\074\031\103\227\104\122\105\036\106\061\110\025" +
    "\111\064\112\044\113\116\120\056\156\101\157\062\163" +
    "\140\164\015\166\046\167\144\170\024\171\125\172\034" +
    "\173\120\174\067\175\127\176\063\177\033\202\071\206" +
    "\166\214\142\217\075\220\106\221\053\001\002\000\006" +
    "\136\u01d3\216\u01d2\001\002\000\002\001\uffe4\000\002\001" +
    "\uff88\000\002\001\uff87\000\216\003\111\004\137\005\147" +
    "\006\102\007\011\010\030\011\047\012\055\014\070\016" +
    "\121\017\115\020\113\021\040\023\027\025\076\027\150" +
    "\032\077\034\123\040\051\041\114\042\066\043\103\045" +
    "\131\046\035\050\145\051\225\052\012\054\072\055\026" +
    "\056\256\065\143\066\013\067\017\070\042\071\043\072" +
    "\124\073\006\074\031\100\057\103\227\104\122\105\036" +
    "\106\061\107\022\110\025\111\064\112\044\113\116\120" +
    "\056\136\010\156\101\157\062\163\140\164\015\166\046" +
    "\167\144\170\024\171\125\172\034\173\120\174\067\175" +
    "\127\176\063\177\033\202\071\206\037\214\142\217\075" +
    "\220\106\221\053\001\uff89\000\072\031\u0107\115\377\116" +
    "\u010e\117\371\135\374\136\u01d3\137\370\140\u0108\141\372" +
    "\142\u0101\143\u0109\144\u010d\145\u0103\146\366\147\u0100\150" +
    "\u010c\151\u010a\152\375\153\u010b\154\u0106\155\u0102\156\u010f" +
    "\157\376\160\u0105\161\u0104\162\367\165\373\216\u01d2\001" +
    "\002\000\002\001\uffe4\000\216\003\111\004\137\005\147" +
    "\006\102\007\011\010\030\011\047\012\055\014\070\016" +
    "\121\017\115\020\113\021\040\023\027\025\076\027\150" +
    "\032\077\034\123\040\051\041\114\042\066\043\103\045" +
    "\131\046\035\050\145\051\225\052\012\054\072\055\026" +
    "\056\256\065\143\066\013\067\017\070\042\071\043\072" +
    "\124\073\006\074\031\100\057\103\227\104\122\105\036" +
    "\106\061\107\022\110\025\111\064\112\044\113\116\120" +
    "\056\136\010\156\101\157\062\163\140\164\015\166\046" +
    "\167\144\170\024\171\125\172\034\173\120\174\067\175" +
    "\127\176\063\177\033\202\071\206\037\214\142\217\075" +
    "\220\106\221\053\001\uff8a\000\002\001\uff8c\000\004\136" +
    "\u01da\001\002\000\002\001\uff8d\000\010\036\u01cf\037\u01d0" +
    "\101\u01df\001\002\000\002\001\uff8b\000\010\036\u01cf\037" +
    "\u01d0\101\u01de\001\002\000\002\001\uff8e\000\002\001\uff8f" +
    "\000\002\001\uff01\000\066\031\u0107\115\377\116\u010e\117" +
    "\371\135\374\137\370\140\u0108\141\372\142\u0101\143\u0109" +
    "\144\u010d\145\u0103\146\366\147\u0100\150\u010c\151\u010a\152" +
    "\375\153\u010b\154\u0106\155\u0102\156\u010f\157\376\160\u0105" +
    "\161\u0104\162\367\165\373\001\ufe68\000\006\114\u01e4\136" +
    "\u01e5\001\002\000\066\031\u0107\115\377\116\u010e\117\371" +
    "\135\374\137\370\140\u0108\141\372\142\u0101\143\u0109\144" +
    "\u010d\145\u0103\146\366\147\u0100\150\u010c\151\u010a\152\375" +
    "\153\u010b\154\u0106\155\u0102\156\u010f\157\376\160\u0105\161" +
    "\u0104\162\367\165\373\001\uff3f\000\140\004\137\006\102" +
    "\007\011\010\154\011\047\012\055\016\121\032\077\043" +
    "\231\055\026\065\143\066\013\067\017\070\042\071\043" +
    "\072\124\073\006\074\031\103\227\104\122\105\036\106" +
    "\061\110\025\111\064\112\044\113\116\120\056\156\101" +
    "\157\062\163\140\164\015\166\046\167\144\170\024\171" +
    "\125\172\034\173\120\174\067\175\127\176\063\177\033" +
    "\202\071\206\166\214\142\217\075\220\106\221\053\001" +
    "\002\000\002\001\uffcb\000\066\031\u0107\115\377\116\u010e" +
    "\117\371\135\374\137\370\140\u0108\141\372\142\u0101\143" +
    "\u0109\144\u010d\145\u0103\146\366\147\u0100\150\u010c\151\u010a" +
    "\152\375\153\u010b\154\u0106\155\u0102\156\u010f\157\376\160" +
    "\u0105\161\u0104\162\367\165\373\001\uff40\000\002\001\uffd2" +
    "\000\070\031\u0107\115\377\116\u010e\117\371\135\374\136" +
    "\u01e9\137\370\140\u0108\141\372\142\u0101\143\u0109\144\u010d" +
    "\145\u0103\146\366\147\u0100\150\u010c\151\u010a\152\375\153" +
    "\u010b\154\u0106\155\u0102\156\u010f\157\376\160\u0105\161\u0104" +
    "\162\367\165\373\001\002\000\002\001\uffd1\000\004\021" +
    "\u01eb\001\002\000\004\214\u01ec\001\002\000\140\004\137" +
    "\006\102\007\011\010\154\011\047\012\055\016\121\032" +
    "\077\043\231\055\026\065\143\066\013\067\017\070\042" +
    "\071\043\072\124\073\006\074\031\103\227\104\122\105" +
    "\036\106\061\110\025\111\064\112\044\113\116\120\056" +
    "\156\101\157\062\163\140\164\015\166\046\167\144\170" +
    "\024\171\125\172\034\173\120\174\067\175\127\176\063" +
    "\177\033\202\071\206\166\214\142\217\075\220\106\221" +
    "\053\001\002\000\070\031\u0107\115\377\116\u010e\117\371" +
    "\135\374\137\370\140\u0108\141\372\142\u0101\143\u0109\144" +
    "\u010d\145\u0103\146\366\147\u0100\150\u010c\151\u010a\152\375" +
    "\153\u010b\154\u0106\155\u0102\156\u010f\157\376\160\u0105\161" +
    "\u0104\162\367\165\373\215\u01ee\001\002\000\004\136\u01ef" +
    "\001\002\000\002\001\uffd7\000\004\010\u01f2\001\002\000" +
    "\002\001\ufff0\000\004\121\u01f3\001\002\000\046\006\102" +
    "\007\011\010\154\016\121\066\163\067\017\070\042\071" +
    "\043\072\124\073\006\074\156\103\170\104\122\105\036" +
    "\106\162\156\167\157\160\206\166\001\002\000\002\001" +
    "\uff42\000\006\063\u0209\200\u0208\001\ufe75\000\014\012\055" +
    "\015\u0207\076\u01f9\077\u01f8\220\u0206\001\002\000\002\001" +
    "\ufe77\000\016\010\154\012\055\103\336\106\334\206\166" +
    "\217\075\001\002\000\140\004\137\006\102\007\011\010" +
    "\154\011\u01fc\012\055\016\121\032\077\043\231\055\026" +
    "\065\143\066\013\067\017\070\042\071\043\072\124\073" +
    "\006\074\031\103\227\104\122\105\036\106\061\110\025" +
    "\111\064\112\044\113\116\120\056\156\101\157\062\163" +
    "\140\164\015\166\046\167\144\170\024\171\125\172\034" +
    "\173\120\174\067\175\127\176\063\177\033\202\071\206" +
    "\166\214\142\217\075\220\106\221\053\001\002\000\010" +
    "\012\055\076\u01f9\077\u01f8\001\002\000\002\001\ufe76\000" +
    "\004\200\u01ff\001\ufebd\000\070\031\u0107\101\u01fe\115\377" +
    "\116\u010e\117\371\135\374\137\370\140\u0108\141\372\142" +
    "\u0101\143\u0109\144\u010d\145\u0103\146\366\147\u0100\150\u010c" +
    "\151\u010a\152\375\153\u010b\154\u0106\155\u0102\156\u010f\157" +
    "\376\160\u0105\161\u0104\162\367\165\373\001\002\000\002" +
    "\001\ufe72\000\140\004\137\006\102\007\011\010\154\011" +
    "\047\012\055\016\121\032\077\043\231\055\026\065\143" +
    "\066\013\067\017\070\042\071\043\072\124\073\006\074" +
    "\031\103\227\104\122\105\036\106\061\110\025\111\064" +
    "\112\044\113\116\120\056\156\101\157\062\163\140\164" +
    "\015\166\046\167\144\170\024\171\125\172\034\173\120" +
    "\174\067\175\127\176\063\177\033\202\071\206\166\214" +
    "\142\217\075\220\106\221\053\001\002\000\070\031\u0107" +
    "\115\377\116\u010e\117\371\135\374\137\370\140\u0108\141" +
    "\372\142\u0101\143\u0109\144\u010d\145\u0103\146\366\147\u0100" +
    "\150\u010c\151\u010a\152\375\153\u010b\154\u0106\155\u0102\156" +
    "\u010f\157\376\160\u0105\161\u0104\162\367\165\373\201\u0201" +
    "\001\002\000\004\101\u0202\001\002\000\002\001\ufe71\000" +
    "\004\101\u0204\001\002\000\002\001\ufe70\000\002\001\ufe79" +
    "\000\002\001\ufeb8\000\002\001\ufe78\000\010\010\154\012" +
    "\055\013\u020e\001\002\000\004\010\154\001\002\000\002" +
    "\001\ufe73\000\002\001\ufe6d\000\004\201\u020f\001\002\000" +
    "\002\001\ufe6f\000\002\001\ufe6e\000\002\001\ufe74\000\006" +
    "\010\154\214\235\001\002\000\002\001\uffb2\000\004\214" +
    "\u0213\001\002\000\016\003\244\010\154\066\236\103\242" +
    "\106\246\215\uff7b\001\uff72\000\004\215\u0215\001\002\000" +
    "\002\001\uffb1\000\006\003\u0217\100\u0218\001\002\000\002" +
    "\001\uffae\000\002\001\uffe4\000\002\001\uffb0\000\220\003" +
    "\111\004\137\005\147\006\102\007\011\010\030\011\047" +
    "\012\055\014\070\016\121\017\115\020\113\021\040\023" +
    "\027\025\076\027\150\032\077\034\123\040\051\041\114" +
    "\042\066\043\103\045\131\046\035\050\145\051\225\052" +
    "\012\054\072\055\026\056\256\065\143\066\013\067\017" +
    "\070\042\071\043\072\124\073\006\074\031\100\057\101" +
    "\u021b\103\227\104\122\105\036\106\061\107\022\110\025" +
    "\111\064\112\044\113\116\120\056\136\010\156\101\157" +
    "\062\163\140\164\015\166\046\167\144\170\024\171\125" +
    "\172\034\173\120\174\067\175\127\176\063\177\033\202" +
    "\071\206\037\214\142\217\075\220\106\221\053\001\002" +
    "\000\002\001\uffaf\000\012\031\u0107\160\u0105\161\u0104\162" +
    "\367\001\uff15\000\002\001\uff35\000\140\004\137\006\102" +
    "\007\011\010\154\011\047\012\055\016\121\032\077\043" +
    "\231\055\026\065\143\066\013\067\017\070\042\071\043" +
    "\072\124\073\006\074\031\103\227\104\122\105\036\106" +
    "\061\110\025\111\064\112\044\113\116\120\056\156\101" +
    "\157\062\163\140\164\015\166\046\167\144\170\024\171" +
    "\125\172\034\173\120\174\067\175\127\176\063\177\033" +
    "\202\071\206\166\214\142\217\075\220\106\221\053\001" +
    "\002\000\040\033\u0230\121\352\122\355\123\353\124\363" +
    "\125\356\126\364\127\360\130\362\131\354\132\351\133" +
    "\357\134\361\166\ufeaa\167\ufeaa\001\ufeac\000\004\033\u0221" +
    "\001\ufead\000\016\010\154\012\055\103\336\106\334\206" +
    "\166\217\075\001\002\000\004\064\u0224\001\uff9b\000\004" +
    "\215\u0229\001\002\000\020\010\154\012\055\103\336\106" +
    "\334\143\u0227\206\166\217\075\001\002\000\002\001\uff9a" +
    "\000\002\001\uff99\000\016\010\154\012\055\103\336\106" +
    "\334\206\166\217\075\001\002\000\002\001\uff98\000\216" +
    "\003\111\004\137\005\147\006\102\007\011\010\030\011" +
    "\047\012\055\014\070\016\121\017\115\020\113\021\040" +
    "\023\027\025\076\027\150\032\077\034\123\040\051\041" +
    "\114\042\066\043\231\045\131\046\035\050\145\051\225" +
    "\052\012\054\072\055\026\065\143\066\013\067\017\070" +
    "\042\071\043\072\124\073\006\074\031\100\057\103\227" +
    "\104\122\105\036\106\061\107\022\110\025\111\064\112" +
    "\044\113\116\120\056\136\010\156\101\157\062\163\140" +
    "\164\015\166\046\167\144\170\024\171\125\172\034\173" +
    "\120\174\067\175\127\176\063\177\033\202\071\206\037" +
    "\214\142\216\u022a\217\075\220\106\221\053\001\002\000" +
    "\002\001\uffe4\000\002\001\uff95\000\002\001\uffc5\000\220" +
    "\003\111\004\137\005\147\006\102\007\011\010\030\011" +
    "\047\012\055\014\070\016\121\017\115\020\113\021\040" +
    "\023\027\025\076\026\u022e\027\150\032\077\034\123\040" +
    "\051\041\114\042\066\043\103\045\131\046\035\050\145" +
    "\051\225\052\012\054\072\055\026\056\256\065\143\066" +
    "\013\067\017\070\042\071\043\072\124\073\006\074\031" +
    "\100\057\103\227\104\122\105\036\106\061\107\022\110" +
    "\025\111\064\112\044\113\116\120\056\136\010\156\101" +
    "\157\062\163\140\164\015\166\046\167\144\170\024\171" +
    "\125\172\034\173\120\174\067\175\127\176\063\177\033" +
    "\202\071\206\037\214\142\217\075\220\106\221\053\001" +
    "\002\000\004\136\u022f\001\002\000\002\001\uff94\000\020" +
    "\010\154\012\055\103\336\106\334\143\u0227\206\166\217" +
    "\075\001\002\000\004\064\u0224\001\uff9b\000\004\215\u0233" +
    "\001\002\000\216\003\111\004\137\005\147\006\102\007" +
    "\011\010\030\011\047\012\055\014\070\016\121\017\115" +
    "\020\113\021\040\023\027\025\076\027\150\032\077\034" +
    "\123\040\051\041\114\042\066\043\231\045\131\046\035" +
    "\050\145\051\225\052\012\054\072\055\026\065\143\066" +
    "\013\067\017\070\042\071\043\072\124\073\006\074\031" +
    "\100\057\103\227\104\122\105\036\106\061\107\022\110" +
    "\025\111\064\112\044\113\116\120\056\136\010\156\101" +
    "\157\062\163\140\164\015\166\046\167\144\170\024\171" +
    "\125\172\034\173\120\174\067\175\127\176\063\177\033" +
    "\202\071\206\037\214\142\216\u022a\217\075\220\106\221" +
    "\053\001\002\000\002\001\uffc6\000\002\001\uff29\000\002" +
    "\001\uff27\000\006\003\u023b\100\u023a\001\002\000\002\001" +
    "\ufff5\000\010\003\u023b\100\u023a\136\u023e\001\002\000\002" +
    "\001\ufff9\000\002\001\uffec\000\002\001\uffee\000\002\001" +
    "\ufff4\000\002\001\uffef\000\222\003\111\004\137\005\147" +
    "\006\102\007\011\010\030\011\047\012\055\014\070\016" +
    "\121\017\115\020\113\021\040\023\027\025\076\027\150" +
    "\032\077\034\123\040\051\041\114\042\066\043\103\044" +
    "\130\045\131\046\035\050\145\051\023\052\012\054\072" +
    "\055\026\056\052\065\143\066\013\067\017\070\042\071" +
    "\043\072\124\073\006\074\031\100\057\101\u0240\103\073" +
    "\104\122\105\036\106\061\107\022\110\025\111\064\112" +
    "\044\113\116\120\056\136\010\156\101\157\062\163\140" +
    "\164\015\166\046\167\144\170\024\171\125\172\034\173" +
    "\120\174\067\175\127\176\063\177\033\202\071\206\037" +
    "\214\142\217\075\220\106\221\053\001\002\000\002\001" +
    "\uffed\000\002\001\ufffa\000\002\001\ufff2\000\016\010\154" +
    "\012\055\103\336\106\334\206\166\217\075\001\002\000" +
    "\002\001\uffba\000\006\114\u0248\215\u0247\001\002\000\002" +
    "\001\uffb8\000\004\136\u024a\001\002\000\016\010\154\012" +
    "\055\103\336\106\334\206\166\217\075\001\002\000\002" +
    "\001\uffb9\000\002\001\uffc7\000\004\214\u016f\001\ufed4\000" +
    "\002\001\uff36\000\002\001\uff00\000\004\136\u024f\001\002" +
    "\000\002\001\uffc0\000\010\100\u0129\200\u012a\214\ufea1\001" +
    "\ufe9a\000\066\031\u0107\115\377\116\u010e\117\371\135\374" +
    "\137\370\140\u0108\141\372\142\u0101\143\u0109\144\u010d\145" +
    "\u0103\146\366\147\u0100\150\u010c\151\u010a\152\375\153\u010b" +
    "\154\u0106\155\u0102\156\u010f\157\376\160\u0105\161\u0104\162" +
    "\367\165\373\001\ufe6a\000\002\001\ufefe\000\012\031\u0107" +
    "\160\u0105\161\u0104\162\367\001\uff14\000\006\102\ufee5\214" +
    "\346\001\ufeba\000\002\001\uffe4\000\220\003\111\004\137" +
    "\005\147\006\102\007\011\010\030\011\047\012\055\014" +
    "\070\016\121\017\115\020\113\021\040\023\027\025\076" +
    "\027\150\032\077\034\123\040\051\041\114\042\066\043" +
    "\103\045\131\046\035\050\145\051\225\052\012\054\072" +
    "\055\026\056\256\065\143\066\013\067\017\070\042\071" +
    "\043\072\124\073\006\074\031\100\057\101\u0257\103\227" +
    "\104\122\105\036\106\061\107\022\110\025\111\064\112" +
    "\044\113\116\120\056\136\010\156\101\157\062\163\140" +
    "\164\015\166\046\167\144\170\024\171\125\172\034\173" +
    "\120\174\067\175\127\176\063\177\033\202\071\206\037" +
    "\214\142\217\075\220\106\221\053\001\002\000\002\001" +
    "\uffdb\000\060\031\u0107\135\374\137\370\140\u0108\141\372" +
    "\142\u0101\143\u0109\144\u010d\145\u0103\146\366\147\u0100\150" +
    "\u010c\151\u010a\152\375\153\u010b\154\u0106\155\u0102\156\u010f" +
    "\157\376\160\u0105\161\u0104\162\367\165\373\001\ufef8\000" +
    "\010\010\u025b\012\055\217\075\001\002\000\004\214\u025f" +
    "\001\ufea0\000\004\214\u025c\001\002\000\142\004\137\006" +
    "\102\007\011\010\154\011\047\012\055\016\121\032\077" +
    "\043\231\055\026\065\143\066\013\067\017\070\042\071" +
    "\043\072\124\073\006\074\031\103\227\104\122\105\036" +
    "\106\061\110\025\111\064\112\044\113\116\120\056\143" +
    "\322\156\101\157\062\163\140\164\015\166\046\167\144" +
    "\170\024\171\125\172\034\173\120\174\067\175\127\176" +
    "\063\177\033\202\071\206\166\214\142\217\075\220\106" +
    "\221\053\001\uff6e\000\004\215\u025e\001\002\000\002\001" +
    "\ufeed\000\142\004\137\006\102\007\011\010\154\011\047" +
    "\012\055\016\121\032\077\043\231\055\026\065\143\066" +
    "\013\067\017\070\042\071\043\072\124\073\006\074\031" +
    "\103\227\104\122\105\036\106\061\110\025\111\064\112" +
    "\044\113\116\120\056\143\322\156\101\157\062\163\140" +
    "\164\015\166\046\167\144\170\024\171\125\172\034\173" +
    "\120\174\067\175\127\176\063\177\033\202\071\206\166" +
    "\214\142\217\075\220\106\221\053\001\uff6e\000\004\215" +
    "\u0261\001\002\000\002\001\ufeec\000\004\221\u0265\001\002" +
    "\000\012\012\055\015\u0207\076\u01f9\077\u01f8\001\ufed5\000" +
    "\010\012\055\076\u01f9\077\u01f8\001\ufed6\000\002\001\ufef9" +
    "\000\004\215\u0267\001\002\000\004\136\u0268\001\002\000" +
    "\002\001\ufff6\000\002\001\uffd4\000\070\031\u0107\115\377" +
    "\116\u010e\117\371\135\374\136\u026b\137\370\140\u0108\141" +
    "\372\142\u0101\143\u0109\144\u010d\145\u0103\146\366\147\u0100" +
    "\150\u010c\151\u010a\152\375\153\u010b\154\u0106\155\u0102\156" +
    "\u010f\157\376\160\u0105\161\u0104\162\367\165\373\001\002" +
    "\000\002\001\uffd3\000\002\001\uff28\000\012\010\154\012" +
    "\055\100\u0137\217\075\001\002\000\004\214\u0270\001\ufea3" +
    "\000\002\001\ufea6\000\142\004\137\006\102\007\011\010" +
    "\154\011\047\012\055\016\121\032\077\043\231\055\026" +
    "\065\143\066\013\067\017\070\042\071\043\072\124\073" +
    "\006\074\031\103\227\104\122\105\036\106\061\110\025" +
    "\111\064\112\044\113\116\120\056\143\322\156\101\157" +
    "\062\163\140\164\015\166\046\167\144\170\024\171\125" +
    "\172\034\173\120\174\067\175\127\176\063\177\033\202" +
    "\071\206\166\214\142\217\075\220\106\221\053\001\uff6e" +
    "\000\004\215\u0272\001\002\000\002\001\ufea4\000\004\063" +
    "\u0275\001\ufea9\000\002\001\ufea7\000\012\010\154\012\055" +
    "\100\u0137\217\075\001\002\000\004\214\u0270\001\ufea3\000" +
    "\002\001\ufea5\000\140\004\137\006\102\007\011\010\154" +
    "\011\047\012\055\016\121\032\077\043\231\055\026\065" +
    "\143\066\013\067\017\070\042\071\043\072\124\073\006" +
    "\074\031\103\227\104\122\105\036\106\061\110\025\111" +
    "\064\112\044\113\116\120\056\156\101\157\062\163\140" +
    "\164\015\166\046\167\144\170\024\171\125\172\034\173" +
    "\120\174\067\175\127\176\063\177\033\202\071\206\166" +
    "\214\142\217\075\220\106\221\053\001\002\000\070\031" +
    "\u0107\115\377\116\u010e\117\371\135\374\137\370\140\u0108" +
    "\141\372\142\u0101\143\u0109\144\u010d\145\u0103\146\366\147" +
    "\u0100\150\u010c\151\u010a\152\375\153\u010b\154\u0106\155\u0102" +
    "\156\u010f\157\376\160\u0105\161\u0104\162\367\165\373\215" +
    "\u027a\001\002\000\002\001\ufe69\000\140\004\137\006\102" +
    "\007\011\010\154\011\047\012\055\016\121\032\077\043" +
    "\231\055\026\065\143\066\013\067\017\070\042\071\043" +
    "\072\124\073\006\074\031\103\227\104\122\105\036\106" +
    "\061\110\025\111\064\112\044\113\116\120\056\156\101" +
    "\157\062\163\140\164\015\166\046\167\144\170\024\171" +
    "\125\172\034\173\120\174\067\175\127\176\063\177\033" +
    "\202\071\206\166\214\142\217\075\220\106\221\053\001" +
    "\002\000\070\031\u0107\115\377\116\u010e\117\371\135\374" +
    "\137\370\140\u0108\141\372\142\u0101\143\u0109\144\u010d\145" +
    "\u0103\146\366\147\u0100\150\u010c\151\u010a\152\375\153\u010b" +
    "\154\u0106\155\u0102\156\u010f\157\376\160\u0105\161\u0104\162" +
    "\367\165\373\215\u027d\001\002\000\216\003\111\004\137" +
    "\005\147\006\102\007\011\010\030\011\047\012\055\014" +
    "\070\016\121\017\115\020\113\021\040\023\027\025\076" +
    "\027\150\032\077\034\123\040\051\041\114\042\066\043" +
    "\231\045\131\046\035\050\145\051\225\052\012\054\072" +
    "\055\026\065\143\066\013\067\017\070\042\071\043\072" +
    "\124\073\006\074\031\100\057\103\227\104\122\105\036" +
    "\106\061\107\022\110\025\111\064\112\044\113\116\120" +
    "\056\136\010\156\101\157\062\163\140\164\015\166\046" +
    "\167\144\170\024\171\125\172\034\173\120\174\067\175" +
    "\127\176\063\177\033\202\071\206\037\214\142\216\u027e" +
    "\217\075\220\106\221\053\001\002\000\002\001\uffe4\000" +
    "\002\001\uffd8\000\002\001\uff86\000\220\003\111\004\137" +
    "\005\147\006\102\007\011\010\030\011\047\012\055\014" +
    "\070\016\121\017\115\020\113\021\040\022\u0282\023\027" +
    "\025\076\027\150\032\077\034\123\040\051\041\114\042" +
    "\066\043\103\045\131\046\035\050\145\051\225\052\012" +
    "\054\072\055\026\056\256\065\143\066\013\067\017\070" +
    "\042\071\043\072\124\073\006\074\031\100\057\103\227" +
    "\104\122\105\036\106\061\107\022\110\025\111\064\112" +
    "\044\113\116\120\056\136\010\156\101\157\062\163\140" +
    "\164\015\166\046\167\144\170\024\171\125\172\034\173" +
    "\120\174\067\175\127\176\063\177\033\202\071\206\037" +
    "\214\142\217\075\220\106\221\053\001\002\000\004\136" +
    "\u0283\001\002\000\002\001\uff85\000\004\121\u028b\001\uff60" +
    "\000\006\114\u0286\136\u0287\001\002\000\004\012\u0288\001" +
    "\002\000\002\001\uffcc\000\004\121\u0289\001\uff62\000\046" +
    "\006\102\007\011\010\154\016\121\066\163\067\017\070" +
    "\042\071\043\072\124\073\006\074\156\103\170\104\122" +
    "\105\036\106\162\156\167\157\160\206\166\001\002\000" +
    "\002\001\uff61\000\046\006\102\007\011\010\154\016\121" +
    "\066\163\067\017\070\042\071\043\072\124\073\006\074" +
    "\156\103\170\104\122\105\036\106\162\156\167\157\160" +
    "\206\166\001\002\000\002\001\uff5f\000\002\001\uffe4\000" +
    "\220\003\111\004\137\005\147\006\102\007\011\010\030" +
    "\011\047\012\055\014\070\016\121\017\115\020\113\021" +
    "\040\023\027\025\076\027\150\032\077\034\123\040\051" +
    "\041\114\042\066\043\103\045\131\046\035\050\145\051" +
    "\225\052\012\054\072\055\026\056\256\065\143\066\013" +
    "\067\017\070\042\071\043\072\124\073\006\074\031\100" +
    "\057\101\u028f\103\227\104\122\105\036\106\061\107\022" +
    "\110\025\111\064\112\044\113\116\120\056\136\010\156" +
    "\101\157\062\163\140\164\015\166\046\167\144\170\024" +
    "\171\125\172\034\173\120\174\067\175\127\176\063\177" +
    "\033\202\071\206\037\214\142\217\075\220\106\221\053" +
    "\001\002\000\004\047\u0290\001\002\000\004\214\u0291\001" +
    "\002\000\010\010\154\103\242\106\246\001\002\000\004" +
    "\012\055\001\002\000\004\215\u0294\001\002\000\004\100" +
    "\u0295\001\002\000\002\001\uffe4\000\220\003\111\004\137" +
    "\005\147\006\102\007\011\010\030\011\047\012\055\014" +
    "\070\016\121\017\115\020\113\021\040\023\027\025\076" +
    "\027\150\032\077\034\123\040\051\041\114\042\066\043" +
    "\103\045\131\046\035\050\145\051\225\052\012\054\072" +
    "\055\026\056\256\065\143\066\013\067\017\070\042\071" +
    "\043\072\124\073\006\074\031\100\057\101\u0297\103\227" +
    "\104\122\105\036\106\061\107\022\110\025\111\064\112" +
    "\044\113\116\120\056\136\010\156\101\157\062\163\140" +
    "\164\015\166\046\167\144\170\024\171\125\172\034\173" +
    "\120\174\067\175\127\176\063\177\033\202\071\206\037" +
    "\214\142\217\075\220\106\221\053\001\002\000\004\047" +
    "\u0298\001\uffbe\000\004\214\u029d\001\002\000\002\001\uffc2" +
    "\000\002\001\uffbd\000\004\047\u0298\001\uffbf\000\002\001" +
    "\uffbc\000\010\010\154\103\242\106\246\001\002\000\004" +
    "\012\u029f\001\002\000\004\215\u02a0\001\002\000\004\100" +
    "\u02a1\001\002\000\002\001\uffe4\000\220\003\111\004\137" +
    "\005\147\006\102\007\011\010\030\011\047\012\055\014" +
    "\070\016\121\017\115\020\113\021\040\023\027\025\076" +
    "\027\150\032\077\034\123\040\051\041\114\042\066\043" +
    "\103\045\131\046\035\050\145\051\225\052\012\054\072" +
    "\055\026\056\256\065\143\066\013\067\017\070\042\071" +
    "\043\072\124\073\006\074\031\100\057\101\u02a3\103\227" +
    "\104\122\105\036\106\061\107\022\110\025\111\064\112" +
    "\044\113\116\120\056\136\010\156\101\157\062\163\140" +
    "\164\015\166\046\167\144\170\024\171\125\172\034\173" +
    "\120\174\067\175\127\176\063\177\033\202\071\206\037" +
    "\214\142\217\075\220\106\221\053\001\002\000\002\001" +
    "\uffbb\000\002\001\uff02\000\002\001\ufefc\000\014\012\055" +
    "\015\u0207\075\u02a8\076\u01f9\077\u01f8\001\002\000\012\012" +
    "\055\075\217\076\u01f9\077\u01f8\001\002\000\002\001\ufeb7" +
    "\000\002\001\uffdf\000\140\004\137\006\102\007\011\010" +
    "\154\011\047\012\055\016\121\032\077\043\231\055\026" +
    "\065\143\066\013\067\017\070\042\071\043\072\124\073" +
    "\006\074\031\103\227\104\122\105\036\106\061\110\025" +
    "\111\064\112\044\113\116\120\056\156\101\157\062\163" +
    "\140\164\015\166\046\167\144\170\024\171\125\172\034" +
    "\173\120\174\067\175\127\176\063\177\033\202\071\206" +
    "\166\214\142\217\075\220\106\221\053\001\uff3e\000\004" +
    "\114\u02b9\001\uff3d\000\066\031\u0107\115\377\116\u010e\117" +
    "\371\135\374\137\370\140\u0108\141\372\142\u0101\143\u0109" +
    "\144\u010d\145\u0103\146\366\147\u0100\150\u010c\151\u010a\152" +
    "\375\153\u010b\154\u0106\155\u0102\156\u010f\157\376\160\u0105" +
    "\161\u0104\162\367\165\373\001\uff3b\000\004\136\u02ae\001" +
    "\002\000\140\004\137\006\102\007\011\010\154\011\047" +
    "\012\055\016\121\032\077\043\231\055\026\065\143\066" +
    "\013\067\017\070\042\071\043\072\124\073\006\074\031" +
    "\103\227\104\122\105\036\106\061\110\025\111\064\112" +
    "\044\113\116\120\056\156\101\157\062\163\140\164\015" +
    "\166\046\167\144\170\024\171\125\172\034\173\120\174" +
    "\067\175\127\176\063\177\033\202\071\206\166\214\142" +
    "\217\075\220\106\221\053\001\uff3e\000\004\136\u02b0\001" +
    "\002\000\140\004\137\006\102\007\011\010\154\011\047" +
    "\012\055\016\121\032\077\043\231\055\026\065\143\066" +
    "\013\067\017\070\042\071\043\072\124\073\006\074\031" +
    "\103\227\104\122\105\036\106\061\110\025\111\064\112" +
    "\044\113\116\120\056\156\101\157\062\163\140\164\015" +
    "\166\046\167\144\170\024\171\125\172\034\173\120\174" +
    "\067\175\127\176\063\177\033\202\071\206\166\214\142" +
    "\217\075\220\106\221\053\001\uff3e\000\004\215\u02b2\001" +
    "\002\000\216\003\111\004\137\005\147\006\102\007\011" +
    "\010\030\011\047\012\055\014\070\016\121\017\115\020" +
    "\113\021\040\023\027\025\076\027\150\032\077\034\123" +
    "\040\051\041\114\042\066\043\231\045\131\046\035\050" +
    "\145\051\225\052\012\054\072\055\026\065\143\066\013" +
    "\067\017\070\042\071\043\072\124\073\006\074\031\100" +
    "\057\103\227\104\122\105\036\106\061\107\022\110\025" +
    "\111\064\112\044\113\116\120\056\136\010\156\101\157" +
    "\062\163\140\164\015\166\046\167\144\170\024\171\125" +
    "\172\034\173\120\174\067\175\127\176\063\177\033\202" +
    "\071\206\037\214\142\216\u02b4\217\075\220\106\221\053" +
    "\001\002\000\002\001\uffd6\000\002\001\uffe4\000\002\001" +
    "\uff97\000\220\003\111\004\137\005\147\006\102\007\011" +
    "\010\030\011\047\012\055\014\070\016\121\017\115\020" +
    "\113\021\040\023\027\024\u02b7\025\076\027\150\032\077" +
    "\034\123\040\051\041\114\042\066\043\103\045\131\046" +
    "\035\050\145\051\225\052\012\054\072\055\026\056\256" +
    "\065\143\066\013\067\017\070\042\071\043\072\124\073" +
    "\006\074\031\100\057\103\227\104\122\105\036\106\061" +
    "\107\022\110\025\111\064\112\044\113\116\120\056\136" +
    "\010\156\101\157\062\163\140\164\015\166\046\167\144" +
    "\170\024\171\125\172\034\173\120\174\067\175\127\176" +
    "\063\177\033\202\071\206\037\214\142\217\075\220\106" +
    "\221\053\001\002\000\004\136\u02b8\001\002\000\002\001" +
    "\uff96\000\140\004\137\006\102\007\011\010\154\011\047" +
    "\012\055\016\121\032\077\043\231\055\026\065\143\066" +
    "\013\067\017\070\042\071\043\072\124\073\006\074\031" +
    "\103\227\104\122\105\036\106\061\110\025\111\064\112" +
    "\044\113\116\120\056\156\101\157\062\163\140\164\015" +
    "\166\046\167\144\170\024\171\125\172\034\173\120\174" +
    "\067\175\127\176\063\177\033\202\071\206\166\214\142" +
    "\217\075\220\106\221\053\001\002\000\066\031\u0107\115" +
    "\377\116\u010e\117\371\135\374\137\370\140\u0108\141\372" +
    "\142\u0101\143\u0109\144\u010d\145\u0103\146\366\147\u0100\150" +
    "\u010c\151\u010a\152\375\153\u010b\154\u0106\155\u0102\156\u010f" +
    "\157\376\160\u0105\161\u0104\162\367\165\373\001\uff3c\000" +
    "\016\010\154\012\055\103\336\106\334\206\166\217\075" +
    "\001\002\000\004\215\u02bd\001\002\000\002\001\ufe6c\000" +
    "\066\031\u0107\115\377\116\u010e\117\371\135\374\137\370" +
    "\140\u0108\141\372\142\u0101\143\u0109\144\u010d\145\u0103\146" +
    "\366\147\u0100\150\u010c\151\u010a\152\375\153\u010b\154\u0106" +
    "\155\u0102\156\u010f\157\376\160\u0105\161\u0104\162\367\165" +
    "\373\001\ufe6b\000\002\001\uff04\000\004\033\u02ca\001\uffe9" +
    "\000\002\001\uffea\000\004\010\154\001\002\000\006\114" +
    "\u02c4\136\u02c5\001\002\000\006\010\154\106\u02c2\001\002" +
    "\000\002\001\ufff1\000\002\001\uffeb\000\004\033\u02c8\001" +
    "\uffe7\000\004\010\u02c9\001\002\000\002\001\uffe6\000\004" +
    "\010\u02cb\001\002\000\002\001\uffe8\000\002\001\uffc9\000" +
    "\002\001\uff12\000\142\004\137\006\102\007\011\010\154" +
    "\011\047\012\055\016\121\032\077\043\231\055\026\065" +
    "\143\066\013\067\017\070\042\071\043\072\124\073\006" +
    "\074\031\103\227\104\122\105\036\106\061\110\025\111" +
    "\064\112\044\113\116\120\056\143\u02cf\156\101\157\062" +
    "\163\140\164\015\166\046\167\144\170\024\171\125\172" +
    "\034\173\120\174\067\175\127\176\063\177\033\202\071" +
    "\206\166\214\142\217\075\220\106\221\053\001\ufe83\000" +
    "\016\010\154\012\055\103\336\106\334\206\166\217\075" +
    "\001\002\000\070\031\u0107\064\u02dd\115\377\116\u010e\117" +
    "\371\135\374\137\370\140\u0108\141\372\142\u0101\143\u0109" +
    "\144\u010d\145\u0103\146\366\147\u0100\150\u010c\151\u010a\152" +
    "\375\153\u010b\154\u0106\155\u0102\156\u010f\157\376\160\u0105" +
    "\161\u0104\162\367\165\373\001\ufe7e\000\004\114\u02d4\001" +
    "\ufeb4\000\004\215\u02d3\001\002\000\002\001\ufefa\000\142" +
    "\004\137\006\102\007\011\010\154\011\047\012\055\016" +
    "\121\032\077\043\231\055\026\065\143\066\013\067\017" +
    "\070\042\071\043\072\124\073\006\074\031\103\227\104" +
    "\122\105\036\106\061\110\025\111\064\112\044\113\116" +
    "\120\056\143\u02d6\156\101\157\062\163\140\164\015\166" +
    "\046\167\144\170\024\171\125\172\034\173\120\174\067" +
    "\175\127\176\063\177\033\202\071\206\166\214\142\217" +
    "\075\220\106\221\053\001\ufeb3\000\002\001\ufe82\000\016" +
    "\010\154\012\055\103\336\106\334\206\166\217\075\001" +
    "\002\000\070\031\u0107\064\u02d8\115\377\116\u010e\117\371" +
    "\135\374\137\370\140\u0108\141\372\142\u0101\143\u0109\144" +
    "\u010d\145\u0103\146\366\147\u0100\150\u010c\151\u010a\152\375" +
    "\153\u010b\154\u0106\155\u0102\156\u010f\157\376\160\u0105\161" +
    "\u0104\162\367\165\373\001\ufe80\000\142\004\137\006\102" +
    "\007\011\010\154\011\047\012\055\016\121\032\077\043" +
    "\231\055\026\065\143\066\013\067\017\070\042\071\043" +
    "\072\124\073\006\074\031\103\227\104\122\105\036\106" +
    "\061\110\025\111\064\112\044\113\116\120\056\143\u02d9" +
    "\156\101\157\062\163\140\164\015\166\046\167\144\170" +
    "\024\171\125\172\034\173\120\174\067\175\127\176\063" +
    "\177\033\202\071\206\166\214\142\217\075\220\106\221" +
    "\053\001\002\000\016\010\154\012\055\103\336\106\334" +
    "\206\166\217\075\001\002\000\066\031\u0107\115\377\116" +
    "\u010e\117\371\135\374\137\370\140\u0108\141\372\142\u0101" +
    "\143\u0109\144\u010d\145\u0103\146\366\147\u0100\150\u010c\151" +
    "\u010a\152\375\153\u010b\154\u0106\155\u0102\156\u010f\157\376" +
    "\160\u0105\161\u0104\162\367\165\373\001\ufe81\000\002\001" +
    "\ufe7d\000\002\001\ufe7c\000\142\004\137\006\102\007\011" +
    "\010\154\011\047\012\055\016\121\032\077\043\231\055" +
    "\026\065\143\066\013\067\017\070\042\071\043\072\124" +
    "\073\006\074\031\103\227\104\122\105\036\106\061\110" +
    "\025\111\064\112\044\113\116\120\056\143\u02de\156\101" +
    "\157\062\163\140\164\015\166\046\167\144\170\024\171" +
    "\125\172\034\173\120\174\067\175\127\176\063\177\033" +
    "\202\071\206\166\214\142\217\075\220\106\221\053\001" +
    "\002\000\016\010\154\012\055\103\336\106\334\206\166" +
    "\217\075\001\002\000\066\031\u0107\115\377\116\u010e\117" +
    "\371\135\374\137\370\140\u0108\141\372\142\u0101\143\u0109" +
    "\144\u010d\145\u0103\146\366\147\u0100\150\u010c\151\u010a\152" +
    "\375\153\u010b\154\u0106\155\u0102\156\u010f\157\376\160\u0105" +
    "\161\u0104\162\367\165\373\001\ufe7f\000\002\001\ufe7b\000" +
    "\002\001\ufe7a\000\006\114\u02eb\136\u02ec\001\002\000\002" +
    "\001\uff65\000\020\010\154\012\055\100\u02e8\103\336\106" +
    "\334\206\166\217\075\001\002\000\002\001\uff66\000\002" +
    "\001\uff64\000\002\001\ufeac\000\140\004\137\006\102\007" +
    "\011\010\154\011\047\012\055\016\121\032\077\043\231" +
    "\055\026\065\143\066\013\067\017\070\042\071\043\072" +
    "\124\073\006\074\031\103\227\104\122\105\036\106\061" +
    "\110\025\111\064\112\044\113\116\120\056\156\101\157" +
    "\062\163\140\164\015\166\046\167\144\170\024\171\125" +
    "\172\034\173\120\174\067\175\127\176\063\177\033\202" +
    "\071\206\166\214\142\217\075\220\106\221\053\001\002" +
    "\000\070\031\u0107\101\u02ea\115\377\116\u010e\117\371\135" +
    "\374\137\370\140\u0108\141\372\142\u0101\143\u0109\144\u010d" +
    "\145\u0103\146\366\147\u0100\150\u010c\151\u010a\152\375\153" +
    "\u010b\154\u0106\155\u0102\156\u010f\157\376\160\u0105\161\u0104" +
    "\162\367\165\373\001\002\000\002\001\uff63\000\006\012" +
    "\u02e3\217\u02e4\001\002\000\002\001\uffcd\000\002\001\uff67" +
    "\000\142\004\137\006\102\007\011\010\154\011\047\012" +
    "\055\016\121\032\077\043\231\055\026\065\143\066\013" +
    "\067\017\070\042\071\043\072\124\073\006\074\031\103" +
    "\227\104\122\105\036\106\061\110\025\111\064\112\044" +
    "\113\116\120\056\143\322\156\101\157\062\163\140\164" +
    "\015\166\046\167\144\170\024\171\125\172\034\173\120" +
    "\174\067\175\127\176\063\177\033\202\071\206\166\214" +
    "\142\217\075\220\106\221\053\001\uff6e\000\004\215\u02f0" +
    "\001\002\000\002\001\ufee9\000\002\001\000" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u02ef\000\006\003\003\010\004\001\001\000\002\001" +
    "\001\000\072\004\135\005\134\012\145\013\140\016\104" +
    "\060\131\061\040\064\103\066\013\072\015\073\047\074" +
    "\132\075\111\102\064\113\057\114\116\120\053\123\107" +
    "\134\077\135\020\141\125\147\133\151\073\152\006\154" +
    "\017\155\106\160\031\164\044\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\047\u02e1\050\u02e4\001\001\000\002\001\001\000\002" +
    "\001\001\000\056\004\135\005\134\060\131\061\040\064" +
    "\103\066\013\072\u02cc\073\047\074\132\075\111\102\064" +
    "\113\057\114\116\120\053\135\020\147\133\151\073\152" +
    "\006\154\017\155\106\160\031\164\044\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\004\u02bf\005\134\006\u02c0" +
    "\007\u02c2\021\u0175\114\116\001\001\000\056\004\135\005" +
    "\134\060\131\061\040\064\103\066\013\072\u02be\073\047" +
    "\074\132\075\111\102\064\113\057\114\116\120\053\135" +
    "\020\147\133\151\073\152\006\154\017\155\106\160\031" +
    "\164\044\001\001\000\056\004\135\005\134\060\131\061" +
    "\040\064\103\066\013\072\u02bd\073\047\074\132\075\111" +
    "\102\064\113\057\114\116\120\053\135\020\147\133\151" +
    "\073\152\006\154\017\155\106\160\031\164\044\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\107\u02a5\111\u01f6\155\u01f4\001\001\000\002\001\001" +
    "\000\056\004\135\005\134\060\131\061\040\064\103\066" +
    "\013\072\u02a4\073\047\074\132\075\111\102\064\113\057" +
    "\114\116\120\053\135\020\147\133\151\073\152\006\154" +
    "\017\155\106\160\031\164\044\001\001\000\056\004\135" +
    "\005\134\060\131\061\040\064\103\066\013\072\u02a3\073" +
    "\047\074\132\075\111\102\064\113\057\114\116\120\053" +
    "\135\020\147\133\151\073\152\006\154\017\155\106\160" +
    "\031\164\044\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\051\u0284\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\004\336\005\134\061\040\073" +
    "\047\074\132\075\111\102\064\114\116\120\053\135\u0199" +
    "\151\u026b\152\006\154\017\155\106\160\031\164\044\001" +
    "\001\000\002\001\001\000\002\001\001\000\056\004\135" +
    "\005\134\060\131\061\040\064\103\066\013\072\u0269\073" +
    "\047\074\132\075\111\102\064\113\057\114\116\120\053" +
    "\135\020\147\133\151\073\152\006\154\017\155\106\160" +
    "\031\164\044\001\001\000\002\001\001\000\012\107\u0262" +
    "\110\u0261\111\u01f6\155\u01f4\001\001\000\002\001\001\000" +
    "\002\001\001\000\056\004\135\005\134\060\131\061\040" +
    "\064\103\066\013\072\u0257\073\047\074\132\075\111\102" +
    "\064\113\057\114\116\120\053\135\020\147\133\151\073" +
    "\152\006\154\017\155\106\160\031\164\044\001\001\000" +
    "\004\172\u0254\001\001\000\002\001\001\000\010\004\u0253" +
    "\005\134\114\116\001\001\000\056\004\135\005\134\060" +
    "\131\061\040\064\103\066\013\072\u0252\073\047\074\132" +
    "\075\111\102\064\113\057\114\116\120\053\135\020\147" +
    "\133\151\073\152\006\154\017\155\106\160\031\164\044" +
    "\001\001\000\056\004\135\005\134\060\131\061\040\064" +
    "\103\066\013\072\u0251\073\047\074\132\075\111\102\064" +
    "\113\057\114\116\120\053\135\020\147\133\151\073\152" +
    "\006\154\017\155\106\160\031\164\044\001\001\000\056" +
    "\004\135\005\134\060\131\061\040\064\103\066\013\072" +
    "\u0250\073\047\074\132\075\111\102\064\113\057\114\116" +
    "\120\053\135\020\147\133\151\073\152\006\154\017\155" +
    "\106\160\031\164\044\001\001\000\010\073\u024f\075\111" +
    "\155\106\001\001\000\002\001\001\000\056\004\135\005" +
    "\134\060\131\061\040\064\103\066\013\072\u024c\073\047" +
    "\074\132\075\111\102\064\113\057\114\116\120\053\135" +
    "\020\147\133\151\073\152\006\154\017\155\106\160\031" +
    "\164\044\001\001\000\002\001\001\000\034\004\u0120\005" +
    "\134\073\u011a\074\u0118\075\111\102\u011e\114\116\120\u011b" +
    "\154\017\155\106\156\u024a\157\u0117\160\u011d\001\001\000" +
    "\002\001\001\000\012\004\u0237\005\134\114\116\171\u0236" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\056\004\135\005\134\060\131\061\040\064\103" +
    "\066\013\072\u021c\073\047\074\132\075\111\102\064\113" +
    "\057\114\116\120\053\135\020\147\133\151\073\152\006" +
    "\154\017\155\106\160\031\164\044\001\001\000\002\001" +
    "\001\000\056\004\135\005\134\060\131\061\040\064\103" +
    "\066\013\072\u021b\073\047\074\132\075\111\102\064\113" +
    "\057\114\116\120\053\135\020\147\133\151\073\152\006" +
    "\154\017\155\106\160\031\164\044\001\001\000\002\001" +
    "\001\000\004\054\u020f\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\107\u01f5\111\u01f6\155\u01f4\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\062\004\135\005\134\013\u01e9\016\104\060" +
    "\131\061\040\064\103\066\013\072\015\073\047\074\132" +
    "\075\111\102\064\113\057\114\116\120\053\135\020\147" +
    "\133\151\073\152\006\154\017\155\106\160\031\164\044" +
    "\001\001\000\056\004\135\005\134\060\131\061\040\064" +
    "\103\066\013\072\u01e7\073\047\074\132\075\111\102\064" +
    "\113\057\114\116\120\053\135\020\147\133\151\073\152" +
    "\006\154\017\155\106\160\031\164\044\001\001\000\060" +
    "\004\135\005\134\055\u01e1\060\131\061\040\064\103\066" +
    "\013\072\u01e2\073\047\074\132\075\111\102\064\113\057" +
    "\114\116\120\053\135\020\147\133\151\073\152\006\154" +
    "\017\155\106\160\031\164\044\001\001\000\056\004\135" +
    "\005\134\060\131\061\040\064\103\066\013\072\u01e0\073" +
    "\047\074\132\075\111\102\064\113\057\114\116\120\053" +
    "\135\020\147\133\151\073\152\006\154\017\155\106\160" +
    "\031\164\044\001\001\000\002\001\001\000\056\004\135" +
    "\005\134\060\131\061\040\064\103\066\013\072\u01df\073" +
    "\047\074\132\075\111\102\064\113\057\114\116\120\053" +
    "\135\020\147\133\151\073\152\006\154\017\155\106\160" +
    "\031\164\044\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\056\004\135\005" +
    "\134\060\131\061\040\064\103\066\013\072\u01c3\073\047" +
    "\074\132\075\111\102\064\113\057\114\116\120\053\135" +
    "\020\147\133\151\073\152\006\154\017\155\106\160\031" +
    "\164\044\001\001\000\002\001\001\000\056\004\135\005" +
    "\134\060\131\061\040\064\103\066\013\072\u01c2\073\047" +
    "\074\132\075\111\102\064\113\057\114\116\120\053\135" +
    "\020\147\133\151\073\152\006\154\017\155\106\160\031" +
    "\164\044\001\001\000\002\001\001\000\056\004\135\005" +
    "\134\060\u01bc\061\040\064\103\066\013\072\322\073\047" +
    "\074\132\075\111\102\064\113\057\114\116\120\053\135" +
    "\u01bb\147\133\151\073\152\006\154\017\155\106\160\031" +
    "\164\044\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\062\u01ab\001\001\000\056\004\135\005\134\060\131\061" +
    "\040\064\103\066\013\072\u01a9\073\047\074\132\075\111" +
    "\102\064\113\057\114\116\120\053\135\020\147\133\151" +
    "\073\152\006\154\017\155\106\160\031\164\044\001\001" +
    "\000\002\001\001\000\056\004\135\005\134\060\131\061" +
    "\040\064\103\066\013\072\u01a7\073\047\074\132\075\111" +
    "\102\064\113\057\114\116\120\053\135\020\147\133\151" +
    "\073\152\006\154\017\155\106\160\031\164\044\001\001" +
    "\000\002\001\001\000\042\004\336\005\134\061\040\073" +
    "\047\074\132\075\111\102\064\114\116\120\053\135\u0199" +
    "\151\u0198\152\006\154\017\155\106\160\031\164\044\001" +
    "\001\000\056\004\135\005\134\060\131\061\040\064\103" +
    "\066\013\072\u0196\073\047\074\132\075\111\102\064\113" +
    "\057\114\116\120\053\135\020\147\133\151\073\152\006" +
    "\154\017\155\106\160\031\164\044\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\027\151" +
    "\114\152\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\004\170\005\134\064\156\065\164" +
    "\114\116\120\163\163\160\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\004\170\005\134\064\156\065\213" +
    "\114\116\120\163\163\160\001\001\000\002\001\001\000" +
    "\010\004\212\005\134\114\116\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\004\170\005\134\064\156\065\173\114\116\120\163" +
    "\163\160\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\004\172\005\134\114\116\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\004\170\005\134\064\156\065\201\067\177\071\200" +
    "\114\116\120\163\163\160\001\001\000\002\001\001\000" +
    "\004\070\205\001\001\000\002\001\001\000\020\004\170" +
    "\005\134\064\156\065\203\114\116\120\163\163\160\001" +
    "\001\000\002\001\001\000\020\004\170\005\134\064\156" +
    "\065\206\114\116\120\163\163\160\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\004\170\005\134\064\156" +
    "\065\210\114\116\120\163\163\160\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\064\004\135\005\134\013\231\016\104\026\225\060\131" +
    "\061\040\064\103\066\013\072\015\073\047\074\132\075" +
    "\111\102\064\113\057\114\116\120\053\135\020\147\133" +
    "\151\073\152\006\154\017\155\106\160\031\164\044\001" +
    "\001\000\004\114\221\001\001\000\002\001\001\000\020" +
    "\004\170\005\134\064\156\065\223\114\116\120\163\163" +
    "\160\001\001\000\002\001\001\000\004\021\u0175\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\014\312\001" +
    "\001\000\004\054\233\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\004\236\005\134\040" +
    "\246\043\240\044\244\114\116\121\242\146\237\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\004\276\005\134\114" +
    "\116\001\001\000\002\001\001\000\004\041\251\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\014\253\001" +
    "\001\000\070\004\135\005\134\013\260\015\254\016\104" +
    "\060\131\061\040\064\103\066\013\072\015\073\047\074" +
    "\132\075\111\102\064\113\057\114\116\120\053\134\256" +
    "\135\020\141\125\147\133\151\073\152\006\154\017\155" +
    "\106\160\031\164\044\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\042\266\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\004\300\005\134" +
    "\114\116\001\001\000\002\001\001\000\016\004\236\005" +
    "\134\044\302\114\116\121\242\146\237\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\004" +
    "\170\005\134\064\156\065\306\114\116\120\163\163\160" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\004" +
    "\170\005\134\064\156\065\311\114\116\120\163\163\160" +
    "\001\001\000\002\001\001\000\070\004\135\005\134\013" +
    "\260\015\254\016\104\060\131\061\040\064\103\066\013" +
    "\072\015\073\047\074\132\075\111\102\064\113\057\114" +
    "\116\120\053\134\256\135\020\141\125\147\133\151\073" +
    "\152\006\154\017\155\106\160\031\164\044\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\004\316\005\134" +
    "\114\116\001\001\000\002\001\001\000\062\004\135\005" +
    "\134\045\320\046\324\060\325\061\040\064\103\066\013" +
    "\072\322\073\047\074\132\075\111\102\064\113\057\114" +
    "\116\120\053\135\323\147\133\151\073\152\006\154\017" +
    "\155\106\160\031\164\044\001\001\000\002\001\001\000" +
    "\042\004\336\005\134\061\040\073\047\074\132\075\111" +
    "\102\064\114\116\117\u0172\120\053\135\334\152\006\154" +
    "\017\155\106\160\031\164\044\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\056\004\135\005\134\060\331\061\040\064\103\066\013" +
    "\072\322\073\047\074\132\075\111\102\064\113\057\114" +
    "\116\120\053\135\327\147\133\151\073\152\006\154\017" +
    "\155\106\160\031\164\044\001\001\000\002\001\001\000" +
    "\042\004\336\005\134\061\040\073\047\074\132\075\111" +
    "\102\064\114\116\117\332\120\053\135\334\152\006\154" +
    "\017\155\106\160\031\164\044\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\004\344\005\134\114\116\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\062\004\135\005\134\045\340\046\324\060\325\061" +
    "\040\064\103\066\013\072\322\073\047\074\132\075\111" +
    "\102\064\113\057\114\116\120\053\135\323\147\133\151" +
    "\073\152\006\154\017\155\106\160\031\164\044\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\004\343\005" +
    "\134\114\116\001\001\000\002\001\001\000\002\001\001" +
    "\000\062\004\135\005\134\045\346\046\324\060\325\061" +
    "\040\064\103\066\013\072\322\073\047\074\132\075\111" +
    "\102\064\113\057\114\116\120\053\135\323\147\133\151" +
    "\073\152\006\154\017\155\106\160\031\164\044\001\001" +
    "\000\002\001\001\000\002\001\001\000\056\004\135\005" +
    "\134\060\131\061\040\064\103\066\013\072\u0171\073\047" +
    "\074\132\075\111\102\064\113\057\114\116\120\053\135" +
    "\020\147\133\151\073\152\006\154\017\155\106\160\031" +
    "\164\044\001\001\000\056\004\135\005\134\060\131\061" +
    "\040\064\103\066\013\072\u0169\073\047\074\132\075\111" +
    "\102\064\113\057\114\116\120\053\135\020\147\133\151" +
    "\073\152\006\154\017\155\106\160\031\164\044\001\001" +
    "\000\056\004\135\005\134\060\131\061\040\064\103\066" +
    "\013\072\u0167\073\047\074\132\075\111\102\064\113\057" +
    "\114\116\120\053\135\020\147\133\151\073\152\006\154" +
    "\017\155\106\160\031\164\044\001\001\000\056\004\135" +
    "\005\134\060\131\061\040\064\103\066\013\072\u0166\073" +
    "\047\074\132\075\111\102\064\113\057\114\116\120\053" +
    "\135\020\147\133\151\073\152\006\154\017\155\106\160" +
    "\031\164\044\001\001\000\056\004\135\005\134\060\131" +
    "\061\040\064\103\066\013\072\u0165\073\047\074\132\075" +
    "\111\102\064\113\057\114\116\120\053\135\020\147\133" +
    "\151\073\152\006\154\017\155\106\160\031\164\044\001" +
    "\001\000\056\004\135\005\134\060\131\061\040\064\103" +
    "\066\013\072\u0164\073\047\074\132\075\111\102\064\113" +
    "\057\114\116\120\053\135\020\147\133\151\073\152\006" +
    "\154\017\155\106\160\031\164\044\001\001\000\056\004" +
    "\135\005\134\060\131\061\040\064\103\066\013\072\u0163" +
    "\073\047\074\132\075\111\102\064\113\057\114\116\120" +
    "\053\135\020\147\133\151\073\152\006\154\017\155\106" +
    "\160\031\164\044\001\001\000\056\004\135\005\134\060" +
    "\131\061\040\064\103\066\013\072\u0162\073\047\074\132" +
    "\075\111\102\064\113\057\114\116\120\053\135\020\147" +
    "\133\151\073\152\006\154\017\155\106\160\031\164\044" +
    "\001\001\000\056\004\135\005\134\060\131\061\040\064" +
    "\103\066\013\072\u0161\073\047\074\132\075\111\102\064" +
    "\113\057\114\116\120\053\135\020\147\133\151\073\152" +
    "\006\154\017\155\106\160\031\164\044\001\001\000\056" +
    "\004\135\005\134\060\131\061\040\064\103\066\013\072" +
    "\u0160\073\047\074\132\075\111\102\064\113\057\114\116" +
    "\120\053\135\020\147\133\151\073\152\006\154\017\155" +
    "\106\160\031\164\044\001\001\000\056\004\135\005\134" +
    "\060\131\061\040\064\103\066\013\072\u015f\073\047\074" +
    "\132\075\111\102\064\113\057\114\116\120\053\135\020" +
    "\147\133\151\073\152\006\154\017\155\106\160\031\164" +
    "\044\001\001\000\056\004\135\005\134\060\131\061\040" +
    "\064\103\066\013\072\364\073\047\074\132\075\111\102" +
    "\064\113\057\114\116\120\053\135\020\147\133\151\073" +
    "\152\006\154\017\155\106\160\031\164\044\001\001\000" +
    "\002\001\001\000\056\004\135\005\134\060\131\061\040" +
    "\064\103\066\013\072\u015e\073\047\074\132\075\111\102" +
    "\064\113\057\114\116\120\053\135\020\147\133\151\073" +
    "\152\006\154\017\155\106\160\031\164\044\001\001\000" +
    "\056\004\135\005\134\060\131\061\040\064\103\066\013" +
    "\072\u015d\073\047\074\132\075\111\102\064\113\057\114" +
    "\116\120\053\135\020\147\133\151\073\152\006\154\017" +
    "\155\106\160\031\164\044\001\001\000\056\004\135\005" +
    "\134\060\131\061\040\064\103\066\013\072\u015c\073\047" +
    "\074\132\075\111\102\064\113\057\114\116\120\053\135" +
    "\020\147\133\151\073\152\006\154\017\155\106\160\031" +
    "\164\044\001\001\000\056\004\135\005\134\060\131\061" +
    "\040\064\103\066\013\072\u015b\073\047\074\132\075\111" +
    "\102\064\113\057\114\116\120\053\135\020\147\133\151" +
    "\073\152\006\154\017\155\106\160\031\164\044\001\001" +
    "\000\056\004\135\005\134\060\131\061\040\064\103\066" +
    "\013\072\u015a\073\047\074\132\075\111\102\064\113\057" +
    "\114\116\120\053\135\020\147\133\151\073\152\006\154" +
    "\017\155\106\160\031\164\044\001\001\000\056\004\135" +
    "\005\134\060\131\061\040\064\103\066\013\072\u0159\073" +
    "\047\074\132\075\111\102\064\113\057\114\116\120\053" +
    "\135\020\147\133\151\073\152\006\154\017\155\106\160" +
    "\031\164\044\001\001\000\056\004\135\005\134\060\131" +
    "\061\040\064\103\066\013\072\u0155\073\047\074\132\075" +
    "\111\102\064\113\057\114\116\120\053\135\020\147\133" +
    "\151\073\152\006\154\017\155\106\160\031\164\044\001" +
    "\001\000\056\004\135\005\134\060\131\061\040\064\103" +
    "\066\013\072\u0153\073\047\074\132\075\111\102\064\113" +
    "\057\114\116\120\053\135\020\147\133\151\073\152\006" +
    "\154\017\155\106\160\031\164\044\001\001\000\056\004" +
    "\135\005\134\060\131\061\040\064\103\066\013\072\u0152" +
    "\073\047\074\132\075\111\102\064\113\057\114\116\120" +
    "\053\135\020\147\133\151\073\152\006\154\017\155\106" +
    "\160\031\164\044\001\001\000\056\004\135\005\134\060" +
    "\131\061\040\064\103\066\013\072\u0151\073\047\074\132" +
    "\075\111\102\064\113\057\114\116\120\053\135\020\147" +
    "\133\151\073\152\006\154\017\155\106\160\031\164\044" +
    "\001\001\000\056\004\135\005\134\060\131\061\040\064" +
    "\103\066\013\072\u0150\073\047\074\132\075\111\102\064" +
    "\113\057\114\116\120\053\135\020\147\133\151\073\152" +
    "\006\154\017\155\106\160\031\164\044\001\001\000\056" +
    "\004\135\005\134\060\131\061\040\064\103\066\013\072" +
    "\u014f\073\047\074\132\075\111\102\064\113\057\114\116" +
    "\120\053\135\020\147\133\151\073\152\006\154\017\155" +
    "\106\160\031\164\044\001\001\000\056\004\135\005\134" +
    "\060\131\061\040\064\103\066\013\072\u014e\073\047\074" +
    "\132\075\111\102\064\113\057\114\116\120\053\135\020" +
    "\147\133\151\073\152\006\154\017\155\106\160\031\164" +
    "\044\001\001\000\056\004\135\005\134\060\131\061\040" +
    "\064\103\066\013\072\u014d\073\047\074\132\075\111\102" +
    "\064\113\057\114\116\120\053\135\020\147\133\151\073" +
    "\152\006\154\017\155\106\160\031\164\044\001\001\000" +
    "\056\004\135\005\134\060\131\061\040\064\103\066\013" +
    "\072\u014c\073\047\074\132\075\111\102\064\113\057\114" +
    "\116\120\053\135\020\147\133\151\073\152\006\154\017" +
    "\155\106\160\031\164\044\001\001\000\056\004\135\005" +
    "\134\060\131\061\040\064\103\066\013\072\u014b\073\047" +
    "\074\132\075\111\102\064\113\057\114\116\120\053\135" +
    "\020\147\133\151\073\152\006\154\017\155\106\160\031" +
    "\164\044\001\001\000\056\004\135\005\134\060\131\061" +
    "\040\064\103\066\013\072\u014a\073\047\074\132\075\111" +
    "\102\064\113\057\114\116\120\053\135\020\147\133\151" +
    "\073\152\006\154\017\155\106\160\031\164\044\001\001" +
    "\000\034\004\u0120\005\134\073\u011a\074\u0118\075\111\102" +
    "\u011e\114\116\120\u011b\154\017\155\106\156\u011c\157\u0117" +
    "\160\u011d\001\001\000\056\004\135\005\134\060\131\061" +
    "\040\064\103\066\013\072\u0116\073\047\074\132\075\111" +
    "\102\064\113\057\114\116\120\053\135\020\147\133\151" +
    "\073\152\006\154\017\155\106\160\031\164\044\001\001" +
    "\000\056\004\135\005\134\060\131\061\040\064\103\066" +
    "\013\072\u0115\073\047\074\132\075\111\102\064\113\057" +
    "\114\116\120\053\135\020\147\133\151\073\152\006\154" +
    "\017\155\106\160\031\164\044\001\001\000\056\004\135" +
    "\005\134\060\131\061\040\064\103\066\013\072\u0114\073" +
    "\047\074\132\075\111\102\064\113\057\114\116\120\053" +
    "\135\020\147\133\151\073\152\006\154\017\155\106\160" +
    "\031\164\044\001\001\000\056\004\135\005\134\060\131" +
    "\061\040\064\103\066\013\072\u0113\073\047\074\132\075" +
    "\111\102\064\113\057\114\116\120\053\135\020\147\133" +
    "\151\073\152\006\154\017\155\106\160\031\164\044\001" +
    "\001\000\056\004\135\005\134\060\131\061\040\064\103" +
    "\066\013\072\u0112\073\047\074\132\075\111\102\064\113" +
    "\057\114\116\120\053\135\020\147\133\151\073\152\006" +
    "\154\017\155\106\160\031\164\044\001\001\000\056\004" +
    "\135\005\134\060\131\061\040\064\103\066\013\072\u0111" +
    "\073\047\074\132\075\111\102\064\113\057\114\116\120" +
    "\053\135\020\147\133\151\073\152\006\154\017\155\106" +
    "\160\031\164\044\001\001\000\056\004\135\005\134\060" +
    "\131\061\040\064\103\066\013\072\u0110\073\047\074\132" +
    "\075\111\102\064\113\057\114\116\120\053\135\020\147" +
    "\133\151\073\152\006\154\017\155\106\160\031\164\044" +
    "\001\001\000\056\004\135\005\134\060\131\061\040\064" +
    "\103\066\013\072\u010f\073\047\074\132\075\111\102\064" +
    "\113\057\114\116\120\053\135\020\147\133\151\073\152" +
    "\006\154\017\155\106\160\031\164\044\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\004\u0147\005\134\114\116\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\073\u0123\075\111\155\106\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\004\u0122\005\134\114\116\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\056\004\135\005\134\060\131\061\040\064\103\066" +
    "\013\072\u0126\073\047\074\132\075\111\102\064\113\057" +
    "\114\116\120\053\135\020\147\133\151\073\152\006\154" +
    "\017\155\106\160\031\164\044\001\001\000\002\001\001" +
    "\000\002\001\001\000\056\004\135\005\134\060\131\061" +
    "\040\064\103\066\013\072\u012d\073\047\074\132\075\111" +
    "\102\064\113\057\114\116\120\053\135\020\147\133\151" +
    "\073\152\006\154\017\155\106\160\031\164\044\001\001" +
    "\000\060\004\135\005\134\060\131\061\040\064\103\066" +
    "\013\072\u012b\073\047\074\132\075\111\076\u012a\102\064" +
    "\113\057\114\116\120\053\135\020\147\133\151\073\152" +
    "\006\154\017\155\106\160\031\164\044\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\073\u0137\075\111\077\u0133" +
    "\100\u0134\101\u0131\102\u0135\114\u0130\152\u0132\155\106\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\161\u0141\001\001\000\002\001\001\000\010\073" +
    "\u013a\075\111\155\106\001\001\000\056\004\135\005\134" +
    "\060\131\061\040\064\103\066\013\072\u0138\073\047\074" +
    "\132\075\111\102\064\113\057\114\116\120\053\135\020" +
    "\147\133\151\073\152\006\154\017\155\106\160\031\164" +
    "\044\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\056\004\135\005\134\060" +
    "\131\061\040\064\103\066\013\072\u013f\073\047\074\132" +
    "\075\111\102\064\113\057\114\116\120\053\135\020\147" +
    "\133\151\073\152\006\154\017\155\106\160\031\164\044" +
    "\001\001\000\060\004\135\005\134\060\131\061\040\064" +
    "\103\066\013\072\u012b\073\047\074\132\075\111\076\u013d" +
    "\102\064\113\057\114\116\120\053\135\020\147\133\151" +
    "\073\152\006\154\017\155\106\160\031\164\044\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\162\u0142\001\001\000\002\001\001" +
    "\000\024\073\u0137\075\111\077\u0144\100\u0134\101\u0131\102" +
    "\u0135\114\u0130\152\u0132\155\106\001\001\000\002\001\001" +
    "\000\014\073\u0137\075\111\102\u0135\152\u0146\155\106\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\073\u0137" +
    "\075\111\102\u0135\152\u0149\155\106\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\056\004\135\005\134\060\131\061\040\064" +
    "\103\066\013\072\u0158\073\047\074\132\075\111\102\064" +
    "\113\057\114\116\120\053\135\020\147\133\151\073\152" +
    "\006\154\017\155\106\160\031\164\044\001\001\000\002" +
    "\001\001\000\056\004\135\005\134\060\131\061\040\064" +
    "\103\066\013\072\u0157\073\047\074\132\075\111\102\064" +
    "\113\057\114\116\120\053\135\020\147\133\151\073\152" +
    "\006\154\017\155\106\160\031\164\044\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\004\336\005\134\061\040\073\047\074\132" +
    "\075\111\102\064\114\116\120\053\135\u016a\152\006\154" +
    "\017\155\106\160\031\164\044\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\004\u0120\005\134\073\u011a\074" +
    "\u0118\075\111\102\u011e\114\116\120\u011b\154\017\155\106" +
    "\156\u016c\157\u0117\160\u011d\001\001\000\004\063\u016d\001" +
    "\001\000\002\001\001\000\062\004\135\005\134\045\u016f" +
    "\046\324\060\325\061\040\064\103\066\013\072\322\073" +
    "\047\074\132\075\111\102\064\113\057\114\116\120\053" +
    "\135\323\147\133\151\073\152\006\154\017\155\106\160" +
    "\031\164\044\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\056\004" +
    "\135\005\134\060\131\061\040\064\103\066\013\072\u017b" +
    "\073\047\074\132\075\111\102\064\113\057\114\116\120" +
    "\053\135\020\147\133\151\073\152\006\154\017\155\106" +
    "\160\031\164\044\001\001\000\002\001\001\000\062\004" +
    "\135\005\134\013\u017e\016\104\060\131\061\040\064\103" +
    "\066\013\072\015\073\047\074\132\075\111\102\064\113" +
    "\057\114\116\120\053\135\020\147\133\151\073\152\006" +
    "\154\017\155\106\160\031\164\044\001\001\000\004\014" +
    "\u0188\001\001\000\004\034\u017f\001\001\000\004\036\u0180" +
    "\001\001\000\002\001\001\000\062\004\135\005\134\013" +
    "\u0187\016\104\060\131\061\040\064\103\066\013\072\015" +
    "\073\047\074\132\075\111\102\064\113\057\114\116\120" +
    "\053\135\020\147\133\151\073\152\006\154\017\155\106" +
    "\160\031\164\044\001\001\000\002\001\001\000\056\004" +
    "\135\005\134\060\131\061\040\064\103\066\013\072\u0184" +
    "\073\047\074\132\075\111\102\064\113\057\114\116\120" +
    "\053\135\020\147\133\151\073\152\006\154\017\155\106" +
    "\160\031\164\044\001\001\000\002\001\001\000\062\004" +
    "\135\005\134\013\u0186\016\104\060\131\061\040\064\103" +
    "\066\013\072\015\073\047\074\132\075\111\102\064\113" +
    "\057\114\116\120\053\135\020\147\133\151\073\152\006" +
    "\154\017\155\106\160\031\164\044\001\001\000\002\001" +
    "\001\000\002\001\001\000\072\004\135\005\134\013\260" +
    "\015\254\016\104\035\u0189\060\131\061\040\064\103\066" +
    "\013\072\015\073\047\074\132\075\111\102\064\113\057" +
    "\114\116\120\053\134\256\135\020\141\125\147\133\151" +
    "\073\152\006\154\017\155\106\160\031\164\044\001\001" +
    "\000\004\037\u018a\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\056\004\135\005\134\060\131" +
    "\061\040\064\103\066\013\072\u018e\073\047\074\132\075" +
    "\111\102\064\113\057\114\116\120\053\135\020\147\133" +
    "\151\073\152\006\154\017\155\106\160\031\164\044\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\014\u0191" +
    "\001\001\000\070\004\135\005\134\013\260\015\254\016" +
    "\104\060\131\061\040\064\103\066\013\072\015\073\047" +
    "\074\132\075\111\102\064\113\057\114\116\120\053\134" +
    "\256\135\020\141\125\147\133\151\073\152\006\154\017" +
    "\155\106\160\031\164\044\001\001\000\004\014\u0193\001" +
    "\001\000\070\004\135\005\134\013\260\015\254\016\104" +
    "\060\131\061\040\064\103\066\013\072\015\073\047\074" +
    "\132\075\111\102\064\113\057\114\116\120\053\134\256" +
    "\135\020\141\125\147\133\151\073\152\006\154\017\155" +
    "\106\160\031\164\044\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\044\004\336\005\134\061\040" +
    "\073\047\074\132\075\111\102\064\103\u019b\104\u019c\114" +
    "\116\120\053\135\u019d\152\006\154\017\155\106\160\031" +
    "\164\044\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\044\004\336\005\134" +
    "\061\040\073\047\074\132\075\111\102\064\103\u01a0\104" +
    "\u019c\114\116\120\053\135\u019d\152\006\154\017\155\106" +
    "\160\031\164\044\001\001\000\002\001\001\000\002\001" +
    "\001\000\042\004\336\005\134\061\040\073\047\074\132" +
    "\075\111\102\064\104\u01a3\114\116\120\053\135\u019d\152" +
    "\006\154\017\155\106\160\031\164\044\001\001\000\002" +
    "\001\001\000\002\001\001\000\056\004\135\005\134\060" +
    "\131\061\040\064\103\066\013\072\u01a6\073\047\074\132" +
    "\075\111\102\064\113\057\114\116\120\053\135\020\147" +
    "\133\151\073\152\006\154\017\155\106\160\031\164\044" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\056\004\135\005\134\060\131" +
    "\061\040\064\103\066\013\072\u01ac\073\047\074\132\075" +
    "\111\102\064\113\057\114\116\120\053\135\020\147\133" +
    "\151\073\152\006\154\017\155\106\160\031\164\044\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\114\u01b0\001\001\000\002\001" +
    "\001\000\014\073\u0137\075\111\102\u0135\152\u01b2\155\106" +
    "\001\001\000\002\001\001\000\002\001\001\000\062\004" +
    "\135\005\134\045\u01b5\046\324\060\325\061\040\064\103" +
    "\066\013\072\322\073\047\074\132\075\111\102\064\113" +
    "\057\114\116\120\053\135\323\147\133\151\073\152\006" +
    "\154\017\155\106\160\031\164\044\001\001\000\002\001" +
    "\001\000\002\001\001\000\062\004\135\005\134\045\u01b8" +
    "\046\324\060\325\061\040\064\103\066\013\072\322\073" +
    "\047\074\132\075\111\102\064\113\057\114\116\120\053" +
    "\135\323\147\133\151\073\152\006\154\017\155\106\160" +
    "\031\164\044\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\004\170\005\134\064\156\065\u01c1\114\116\120\163\163" +
    "\160\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\056\004\135\005\134\060\131\061\040\064" +
    "\103\066\013\072\u01c5\073\047\074\132\075\111\102\064" +
    "\113\057\114\116\120\053\135\020\147\133\151\073\152" +
    "\006\154\017\155\106\160\031\164\044\001\001\000\002" +
    "\001\001\000\004\030\u01c7\001\001\000\002\001\001\000" +
    "\004\031\u01da\001\001\000\004\031\u01ca\001\001\000\002" +
    "\001\001\000\004\031\u01cc\001\001\000\002\001\001\000" +
    "\002\001\001\000\056\004\135\005\134\060\131\061\040" +
    "\064\103\066\013\072\u01d4\073\047\074\132\075\111\102" +
    "\064\113\057\114\116\120\053\135\020\147\133\151\073" +
    "\152\006\154\017\155\106\160\031\164\044\001\001\000" +
    "\004\032\u01d0\001\001\000\004\014\u01d3\001\001\000\002" +
    "\001\001\000\002\001\001\000\070\004\135\005\134\013" +
    "\260\015\254\016\104\060\131\061\040\064\103\066\013" +
    "\072\015\073\047\074\132\075\111\102\064\113\057\114" +
    "\116\120\053\134\256\135\020\141\125\147\133\151\073" +
    "\152\006\154\017\155\106\160\031\164\044\001\001\000" +
    "\004\032\u01d5\001\001\000\004\014\u01d6\001\001\000\070" +
    "\004\135\005\134\013\260\015\254\016\104\060\131\061" +
    "\040\064\103\066\013\072\015\073\047\074\132\075\111" +
    "\102\064\113\057\114\116\120\053\134\256\135\020\141" +
    "\125\147\133\151\073\152\006\154\017\155\106\160\031" +
    "\164\044\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\031\u01dc\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\056\004\135\005\134\060\131\061\040\064" +
    "\103\066\013\072\u01e5\073\047\074\132\075\111\102\064" +
    "\113\057\114\116\120\053\135\020\147\133\151\073\152" +
    "\006\154\017\155\106\160\031\164\044\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\056\004\135\005\134\060\131\061\040\064\103\066" +
    "\013\072\u01ec\073\047\074\132\075\111\102\064\113\057" +
    "\114\116\120\053\135\020\147\133\151\073\152\006\154" +
    "\017\155\106\160\031\164\044\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\004\170\005\134" +
    "\064\156\065\u01f3\114\116\120\163\163\160\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\111\u0204\155\u01f4" +
    "\001\001\000\002\001\001\000\040\004\336\005\134\061" +
    "\040\073\047\074\132\075\111\102\064\114\116\120\053" +
    "\135\u0202\152\006\154\017\155\106\160\031\164\044\001" +
    "\001\000\056\004\135\005\134\060\131\061\040\064\103" +
    "\066\013\072\u01fc\073\047\074\132\075\111\102\064\113" +
    "\057\114\116\120\053\135\020\147\133\151\073\152\006" +
    "\154\017\155\106\160\031\164\044\001\001\000\006\111" +
    "\u01fa\155\u01f4\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\056\004\135\005" +
    "\134\060\131\061\040\064\103\066\013\072\u01ff\073\047" +
    "\074\132\075\111\102\064\113\057\114\116\120\053\135" +
    "\020\147\133\151\073\152\006\154\017\155\106\160\031" +
    "\164\044\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\112" +
    "\u020b\114\u020c\155\u020a\001\001\000\004\114\u0209\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\114\u0210\001\001\000\004\173\u0211\001\001\000\002\001" +
    "\001\000\022\004\236\005\134\040\u0213\043\240\044\244" +
    "\114\116\121\242\146\237\001\001\000\002\001\001\000" +
    "\004\174\u0215\001\001\000\004\166\u0218\001\001\000\002" +
    "\001\001\000\004\014\u0219\001\001\000\002\001\001\000" +
    "\070\004\135\005\134\013\260\015\254\016\104\060\131" +
    "\061\040\064\103\066\013\072\015\073\047\074\132\075" +
    "\111\102\064\113\057\114\116\120\053\134\256\135\020" +
    "\141\125\147\133\151\073\152\006\154\017\155\106\160" +
    "\031\164\044\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\056\004\135\005\134\060\u021f\061" +
    "\040\064\103\066\013\072\322\073\047\074\132\075\111" +
    "\102\064\113\057\114\116\120\053\135\u021e\147\133\151" +
    "\073\152\006\154\017\155\106\160\031\164\044\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\004\336\005" +
    "\134\061\040\073\047\074\132\075\111\102\064\114\116" +
    "\120\053\135\u0221\152\006\154\017\155\106\160\031\164" +
    "\044\001\001\000\004\022\u0222\001\001\000\002\001\001" +
    "\000\042\004\336\005\134\023\u0224\061\040\073\047\074" +
    "\132\075\111\102\064\114\116\120\053\135\u0225\152\006" +
    "\154\017\155\106\160\031\164\044\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\004\336\005\134\061\040" +
    "\073\047\074\132\075\111\102\064\114\116\120\053\135" +
    "\u0227\152\006\154\017\155\106\160\031\164\044\001\001" +
    "\000\002\001\001\000\064\004\135\005\134\013\u022a\016" +
    "\104\025\u022b\060\131\061\040\064\103\066\013\072\015" +
    "\073\047\074\132\075\111\102\064\113\057\114\116\120" +
    "\053\135\020\147\133\151\073\152\006\154\017\155\106" +
    "\160\031\164\044\001\001\000\004\014\u022c\001\001\000" +
    "\002\001\001\000\002\001\001\000\070\004\135\005\134" +
    "\013\260\015\254\016\104\060\131\061\040\064\103\066" +
    "\013\072\015\073\047\074\132\075\111\102\064\113\057" +
    "\114\116\120\053\134\256\135\020\141\125\147\133\151" +
    "\073\152\006\154\017\155\106\160\031\164\044\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\004\336\005" +
    "\134\023\u0230\061\040\073\047\074\132\075\111\102\064" +
    "\114\116\120\053\135\u0225\152\006\154\017\155\106\160" +
    "\031\164\044\001\001\000\004\022\u0231\001\001\000\002" +
    "\001\001\000\064\004\135\005\134\013\u022a\016\104\025" +
    "\u0233\060\131\061\040\064\103\066\013\072\015\073\047" +
    "\074\132\075\111\102\064\113\057\114\116\120\053\135" +
    "\020\147\133\151\073\152\006\154\017\155\106\160\031" +
    "\164\044\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\127\u0241\001\001\000\004\170\u0238" +
    "\001\001\000\006\126\u023c\127\u023b\001\001\000\004\011" +
    "\u023e\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\072\004\135\005\134\012" +
    "\u0240\013\140\016\104\060\131\061\040\064\103\066\013" +
    "\072\015\073\047\074\132\075\111\102\064\113\057\114" +
    "\116\120\053\123\107\134\077\135\020\141\125\147\133" +
    "\151\073\152\006\154\017\155\106\160\031\164\044\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\004\336\005\134\017\u0244\020\u0243\061\040\073" +
    "\047\074\132\075\111\102\064\114\116\120\053\135\u0245" +
    "\152\006\154\017\155\106\160\031\164\044\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\004\336\005\134\020\u0248\061\040\073" +
    "\047\074\132\075\111\102\064\114\116\120\053\135\u0245" +
    "\152\006\154\017\155\106\160\031\164\044\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\063\u024b\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\014" +
    "\u0255\001\001\000\070\004\135\005\134\013\260\015\254" +
    "\016\104\060\131\061\040\064\103\066\013\072\015\073" +
    "\047\074\132\075\111\102\064\113\057\114\116\120\053" +
    "\134\256\135\020\141\125\147\133\151\073\152\006\154" +
    "\017\155\106\160\031\164\044\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\073\u0137\075\111\102\u0135\152" +
    "\u0259\155\106\001\001\000\002\001\001\000\002\001\001" +
    "\000\062\004\135\005\134\045\u025c\046\324\060\325\061" +
    "\040\064\103\066\013\072\322\073\047\074\132\075\111" +
    "\102\064\113\057\114\116\120\053\135\323\147\133\151" +
    "\073\152\006\154\017\155\106\160\031\164\044\001\001" +
    "\000\002\001\001\000\002\001\001\000\062\004\135\005" +
    "\134\045\u025f\046\324\060\325\061\040\064\103\066\013" +
    "\072\322\073\047\074\132\075\111\102\064\113\057\114" +
    "\116\120\053\135\323\147\133\151\073\152\006\154\017" +
    "\155\106\160\031\164\044\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\111\u0204\155\u01f4" +
    "\001\001\000\006\111\u01fa\155\u01f4\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\073\u0137\075\111\077\u026d\100\u0134" +
    "\101\u0131\102\u0135\114\u0130\152\u0132\155\106\001\001\000" +
    "\004\132\u026e\001\001\000\004\133\u0272\001\001\000\062" +
    "\004\135\005\134\045\u0270\046\324\060\325\061\040\064" +
    "\103\066\013\072\322\073\047\074\132\075\111\102\064" +
    "\113\057\114\116\120\053\135\323\147\133\151\073\152" +
    "\006\154\017\155\106\160\031\164\044\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\153\u0273\001\001\000" +
    "\002\001\001\000\024\073\u0137\075\111\077\u0275\100\u0134" +
    "\101\u0131\102\u0135\114\u0130\152\u0132\155\106\001\001\000" +
    "\004\132\u0276\001\001\000\002\001\001\000\056\004\135" +
    "\005\134\060\131\061\040\064\103\066\013\072\u0278\073" +
    "\047\074\132\075\111\102\064\113\057\114\116\120\053" +
    "\135\020\147\133\151\073\152\006\154\017\155\106\160" +
    "\031\164\044\001\001\000\002\001\001\000\002\001\001" +
    "\000\056\004\135\005\134\060\131\061\040\064\103\066" +
    "\013\072\u027b\073\047\074\132\075\111\102\064\113\057" +
    "\114\116\120\053\135\020\147\133\151\073\152\006\154" +
    "\017\155\106\160\031\164\044\001\001\000\002\001\001" +
    "\000\064\004\135\005\134\013\u027f\016\104\033\u027e\060" +
    "\131\061\040\064\103\066\013\072\015\073\047\074\132" +
    "\075\111\102\064\113\057\114\116\120\053\135\020\147" +
    "\133\151\073\152\006\154\017\155\106\160\031\164\044" +
    "\001\001\000\004\014\u0280\001\001\000\002\001\001\000" +
    "\002\001\001\000\070\004\135\005\134\013\260\015\254" +
    "\016\104\060\131\061\040\064\103\066\013\072\015\073" +
    "\047\074\132\075\111\102\064\113\057\114\116\120\053" +
    "\134\256\135\020\141\125\147\133\151\073\152\006\154" +
    "\017\155\106\160\031\164\044\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\004\170\005\134\064\156\065\u0289\114\116\120\163\163" +
    "\160\001\001\000\002\001\001\000\020\004\170\005\134" +
    "\064\156\065\u028b\114\116\120\163\163\160\001\001\000" +
    "\002\001\001\000\004\014\u028d\001\001\000\070\004\135" +
    "\005\134\013\260\015\254\016\104\060\131\061\040\064" +
    "\103\066\013\072\015\073\047\074\132\075\111\102\064" +
    "\113\057\114\116\120\053\134\256\135\020\141\125\147" +
    "\133\151\073\152\006\154\017\155\106\160\031\164\044" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\004" +
    "\236\005\134\114\116\121\u0291\001\001\000\004\155\u0292" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\014" +
    "\u0295\001\001\000\070\004\135\005\134\013\260\015\254" +
    "\016\104\060\131\061\040\064\103\066\013\072\015\073" +
    "\047\074\132\075\111\102\064\113\057\114\116\120\053" +
    "\134\256\135\020\141\125\147\133\151\073\152\006\154" +
    "\017\155\106\160\031\164\044\001\001\000\010\136\u0298" +
    "\137\u029a\140\u0299\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\140\u029b\001\001\000\002" +
    "\001\001\000\012\004\236\005\134\114\116\121\u029d\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\u02a1\001\001\000\070\004\135\005\134\013" +
    "\260\015\254\016\104\060\131\061\040\064\103\066\013" +
    "\072\015\073\047\074\132\075\111\102\064\113\057\114" +
    "\116\120\053\134\256\135\020\141\125\147\133\151\073" +
    "\152\006\154\017\155\106\160\031\164\044\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\111\u0204\155\u01f4\001\001\000\006\111\u01fa\155\u01f4\001" +
    "\001\000\002\001\001\000\002\001\001\000\062\004\135" +
    "\005\134\056\u02ac\057\u02aa\060\131\061\040\064\103\066" +
    "\013\072\u02ab\073\047\074\132\075\111\102\064\113\057" +
    "\114\116\120\053\135\020\147\133\151\073\152\006\154" +
    "\017\155\106\160\031\164\044\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\062\004\135\005" +
    "\134\056\u02ae\057\u02aa\060\131\061\040\064\103\066\013" +
    "\072\u02ab\073\047\074\132\075\111\102\064\113\057\114" +
    "\116\120\053\135\020\147\133\151\073\152\006\154\017" +
    "\155\106\160\031\164\044\001\001\000\002\001\001\000" +
    "\062\004\135\005\134\056\u02b0\057\u02aa\060\131\061\040" +
    "\064\103\066\013\072\u02ab\073\047\074\132\075\111\102" +
    "\064\113\057\114\116\120\053\135\020\147\133\151\073" +
    "\152\006\154\017\155\106\160\031\164\044\001\001\000" +
    "\002\001\001\000\064\004\135\005\134\013\u02b4\016\104" +
    "\024\u02b2\060\131\061\040\064\103\066\013\072\015\073" +
    "\047\074\132\075\111\102\064\113\057\114\116\120\053" +
    "\135\020\147\133\151\073\152\006\154\017\155\106\160" +
    "\031\164\044\001\001\000\002\001\001\000\004\014\u02b5" +
    "\001\001\000\002\001\001\000\070\004\135\005\134\013" +
    "\260\015\254\016\104\060\131\061\040\064\103\066\013" +
    "\072\015\073\047\074\132\075\111\102\064\113\057\114" +
    "\116\120\053\134\256\135\020\141\125\147\133\151\073" +
    "\152\006\154\017\155\106\160\031\164\044\001\001\000" +
    "\002\001\001\000\002\001\001\000\056\004\135\005\134" +
    "\060\131\061\040\064\103\066\013\072\u02b9\073\047\074" +
    "\132\075\111\102\064\113\057\114\116\120\053\135\020" +
    "\147\133\151\073\152\006\154\017\155\106\160\031\164" +
    "\044\001\001\000\002\001\001\000\040\004\336\005\134" +
    "\061\040\073\047\074\132\075\111\102\064\114\116\120" +
    "\053\135\u02bb\152\006\154\017\155\106\160\031\164\044" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\004\u02c6\005\134\114\116\001\001\000\002\001" +
    "\001\000\012\004\u02bf\005\134\006\u02c5\114\116\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\062\004" +
    "\135\005\134\060\131\061\040\064\103\066\013\072\u02cf" +
    "\073\047\074\132\075\111\102\064\105\u02d1\106\u02d0\113" +
    "\057\114\116\120\053\135\020\147\133\151\073\152\006" +
    "\154\017\155\106\160\031\164\044\001\001\000\042\004" +
    "\336\005\134\061\040\073\047\074\132\075\111\102\064" +
    "\114\116\117\u02e0\120\053\135\334\152\006\154\017\155" +
    "\106\160\031\164\044\001\001\000\002\001\001\000\004" +
    "\070\u02d4\001\001\000\002\001\001\000\002\001\001\000" +
    "\056\004\135\005\134\060\131\061\040\064\103\066\013" +
    "\072\u02d6\073\047\074\132\075\111\102\064\113\057\114" +
    "\116\120\053\135\020\147\133\151\073\152\006\154\017" +
    "\155\106\160\031\164\044\001\001\000\002\001\001\000" +
    "\042\004\336\005\134\061\040\073\047\074\132\075\111" +
    "\102\064\114\116\117\u02db\120\053\135\334\152\006\154" +
    "\017\155\106\160\031\164\044\001\001\000\002\001\001" +
    "\000\056\004\135\005\134\060\131\061\040\064\103\066" +
    "\013\072\u02d9\073\047\074\132\075\111\102\064\113\057" +
    "\114\116\120\053\135\020\147\133\151\073\152\006\154" +
    "\017\155\106\160\031\164\044\001\001\000\042\004\336" +
    "\005\134\061\040\073\047\074\132\075\111\102\064\114" +
    "\116\117\u02da\120\053\135\334\152\006\154\017\155\106" +
    "\160\031\164\044\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\056\004\135\005\134\060\131" +
    "\061\040\064\103\066\013\072\u02de\073\047\074\132\075" +
    "\111\102\064\113\057\114\116\120\053\135\020\147\133" +
    "\151\073\152\006\154\017\155\106\160\031\164\044\001" +
    "\001\000\042\004\336\005\134\061\040\073\047\074\132" +
    "\075\111\102\064\114\116\117\u02df\120\053\135\334\152" +
    "\006\154\017\155\106\160\031\164\044\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\042\004\336\005\134\061\040" +
    "\073\047\074\132\075\111\102\064\114\116\120\053\135" +
    "\u02e6\147\u02e5\152\006\154\017\155\106\160\031\164\044" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\056\004\135\005\134\060\131\061\040\064\103" +
    "\066\013\072\u02e8\073\047\074\132\075\111\102\064\113" +
    "\057\114\116\120\053\135\020\147\133\151\073\152\006" +
    "\154\017\155\106\160\031\164\044\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\050\u02ec\001\001\000\002" +
    "\001\001\000\002\001\001\000\062\004\135\005\134\045" +
    "\u02ee\046\324\060\325\061\040\064\103\066\013\072\322" +
    "\073\047\074\132\075\111\102\064\113\057\114\116\120" +
    "\053\135\323\147\133\151\073\152\006\154\017\155\106" +
    "\160\031\164\044\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CompilerAstParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CompilerAstParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CompilerAstParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	class ModifierDocPair {
		public int modifier;
		public PHPDocBlock doc;
		
		public ModifierDocPair(int modifier, PHPDocBlock doc) {
			this.modifier = modifier;
			this.doc = doc;
		}
	}
	
	public Expression createDispatch(Expression dispatcher, Expression property) {

		if (property.getKind() == ASTNodeKinds.REFLECTION_CALL_EXPRESSION) {
			((ReflectionCallExpression) property).setReceiver (dispatcher);
			dispatcher = property;
		} else if (property.getKind() == ASTNodeKinds.METHOD_INVOCATION) {
			PHPCallExpression callExpression = (PHPCallExpression) property;
			dispatcher = new PHPCallExpression(dispatcher.sourceStart(), callExpression.sourceEnd(), dispatcher, callExpression.getCallName(), callExpression.getArgs());
		} else {
			dispatcher =  new FieldAccess(dispatcher.sourceStart(), property.sourceEnd(), dispatcher, property);
		}

		return dispatcher;
	}

	protected String getTokenName(int token) {
		return PhpTokenNames.getName(token);
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$CompilerAstParser$actions {
  private final CompilerAstParser parser;

  /** Constructor */
  CUP$CompilerAstParser$actions(CompilerAstParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$CompilerAstParser$do_action(
    int                        CUP$CompilerAstParser$act_num,
    java_cup.runtime.lr_parser CUP$CompilerAstParser$parser,
    java.util.Stack            CUP$CompilerAstParser$stack,
    int                        CUP$CompilerAstParser$top)
    throws java.lang.Exception
    {
      if (CUP$CompilerAstParser$act_num < 100) {
        return CUP$CompilerAstParser$do_action1(
             CUP$CompilerAstParser$act_num, CUP$CompilerAstParser$parser,CUP$CompilerAstParser$stack,CUP$CompilerAstParser$top);
      }
      else       if (CUP$CompilerAstParser$act_num < 200) {
        return CUP$CompilerAstParser$do_action2(
             CUP$CompilerAstParser$act_num, CUP$CompilerAstParser$parser,CUP$CompilerAstParser$stack,CUP$CompilerAstParser$top);
      }
      else       if (CUP$CompilerAstParser$act_num < 300) {
        return CUP$CompilerAstParser$do_action3(
             CUP$CompilerAstParser$act_num, CUP$CompilerAstParser$parser,CUP$CompilerAstParser$stack,CUP$CompilerAstParser$top);
      }
      else       if (CUP$CompilerAstParser$act_num < 400) {
        return CUP$CompilerAstParser$do_action4(
             CUP$CompilerAstParser$act_num, CUP$CompilerAstParser$parser,CUP$CompilerAstParser$stack,CUP$CompilerAstParser$top);
      }
      else  {
        return CUP$CompilerAstParser$do_action5(
             CUP$CompilerAstParser$act_num, CUP$CompilerAstParser$parser,CUP$CompilerAstParser$stack,CUP$CompilerAstParser$top);
      }
    }


  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$CompilerAstParser$do_action1(
    int                        CUP$CompilerAstParser$act_num,
    java_cup.runtime.lr_parser CUP$CompilerAstParser$parser,
    java.util.Stack            CUP$CompilerAstParser$stack,
    int                        CUP$CompilerAstParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CompilerAstParser$result;

      /* select the action based on the action number */
      switch (CUP$CompilerAstParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // thestart ::= top_statement_list 
            {
              ModuleDeclaration RESULT = null;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object statementList = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	PHPModuleDeclaration program = parser.getModuleDeclaration();

	PhpAstLexer phpAstLexer = (PhpAstLexer) parser.getScanner();
	List commentList = phpAstLexer.getCommentList();
	Iterator i = commentList.iterator();
	while (i.hasNext()) {
		Object c = i.next();
		if (c instanceof VarComment) {
			program.getVarComments().add((VarComment)c);
		} else if (c instanceof PHPDocBlock) {
			program.getPhpDocBlocks().add((PHPDocBlock) c);
		}
	}
	
	program.setStart(statementListleft);
	program.setEnd(statementListright + 1);
	RESULT = program; 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(1/*thestart*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= thestart EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		ModuleDeclaration start_val = (ModuleDeclaration)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		RESULT = start_val;
              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$CompilerAstParser$parser.done_parsing();
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // namespace_name ::= namespace_name_list 
            {
              FullyQualifiedReference RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	StringBuilder namespaceNameBuf = new StringBuilder();
	FullyQualifiedReference fullyQualifiedName = null;
	Iterator i = list.iterator();
	while (i.hasNext()) {
		String s = (String) i.next();
		if (i.hasNext()) {
			if (namespaceNameBuf.length() != 0) {
				namespaceNameBuf.append('\\');
			}
			namespaceNameBuf.append(s);
		} else {
			NamespaceReference namespaceRef = (namespaceNameBuf.length() != 0) ? 
				new NamespaceReference(listleft, listright - s.length() - 1, namespaceNameBuf.toString()) : null;
			fullyQualifiedName = new FullyQualifiedReference(listleft, listright, s, namespaceRef);
		}
	}
	RESULT = fullyQualifiedName;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(2/*namespace_name*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // namespace_name_list ::= string_st 
            {
              List RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	List list = new LinkedList();
	list.add(name);
	RESULT = list;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(3/*namespace_name_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // namespace_name_list ::= namespace_name_list T_NS_SEPARATOR string_st 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	list.add(name);
	RESULT = list;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(3/*namespace_name_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // top_statement_list ::= top_statement_list top_statement 
            {
              Object RESULT = null;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object statementList = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	if(statement != null) {
		parser.addStatement(statement);
		if(parser.pendingStatement != null){
			parser.addStatement(parser.pendingStatement);
			parser.pendingStatement = null;
		}
	}
	while(!parser.declarations.isEmpty()) {
		parser.addStatement(parser.declarations.pop());
	}

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(6/*top_statement_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // top_statement_list ::= 
            {
              Object RESULT = null;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(6/*top_statement_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // namespace_statement_list ::= namespace_statement_list top_statement 
            {
              List RESULT = null;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	// Ignore null statements
	if(statement != null) {
		statementList.add(statement);
		if(statement.getKind() == ASTNodeKinds.AST_ERROR){
			if(!parser.declarations.isEmpty()) {
				Statement node = parser.declarations.peek();
				if(node.sourceStart() == statement.sourceStart() && node.sourceEnd() == statement.sourceEnd()) {
					statementList.add(parser.declarations.pop());
				}
			}		
		}
	}
	if(!(parser.declarations.peek() instanceof NamespaceDeclaration)) {
		statementList.add(parser.declarations.pop());
	}
	RESULT = statementList;	

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(7/*namespace_statement_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // namespace_statement_list ::= 
            {
              List RESULT = null;
		
	RESULT = new LinkedList();

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(7/*namespace_statement_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // top_statement ::= statement 
            {
              Statement RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = statement;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(8/*top_statement*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // top_statement ::= function_declaration_statement 
            {
              Statement RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		PHPMethodDeclaration statement = (PHPMethodDeclaration)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = statement; 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(8/*top_statement*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // top_statement ::= T_HALT_COMPILER T_OPEN_PARENTHESE T_CLOSE_PARENTHESE T_SEMICOLON 
            {
              Statement RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object statement = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	// Note: we never generate T_HALT_COMPILER
	RESULT = null;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(8/*top_statement*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NT$0 ::= 
            {
              Object RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		FullyQualifiedReference name = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;

	NamespaceDeclaration namespace = new NamespaceDeclaration(startleft, nameright, nameleft, nameright, name.getFullyQualifiedName(), null, null);
	parser.addDeclarationStatement(namespace);
	parser.declarations.push(namespace);

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(118/*NT$0*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // top_statement ::= T_NAMESPACE namespace_name NT$0 named_namespace_body 
            {
              Statement RESULT = null;
              // propagate RESULT from NT$0
              if ( ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value != null )
                RESULT = (Statement) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		FullyQualifiedReference name = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Statement body = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = body;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(8/*top_statement*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$1 ::= 
            {
              Object RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;

	NamespaceDeclaration namespace = new NamespaceDeclaration(startleft, startright, startright, startright, NamespaceDeclaration.GLOBAL, null, null);
	parser.addDeclarationStatement(namespace);
	parser.declarations.push(namespace);

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(119/*NT$1*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // top_statement ::= T_NAMESPACE NT$1 namespace_body 
            {
              Statement RESULT = null;
              // propagate RESULT from NT$1
              if ( ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value != null )
                RESULT = (Statement) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Statement body = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = body;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(8/*top_statement*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // top_statement ::= T_USE use_declarations T_SEMICOLON 
            {
              Statement RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int useDeclListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int useDeclListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List useDeclList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	parser.declarations.push(new UseStatement(startleft, endright, useDeclList));

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(8/*top_statement*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // top_statement ::= constant_declaration T_SEMICOLON 
            {
              Statement RESULT = null;
		int decListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int decListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List decList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		
	Iterator i = decList.iterator();
	while (i.hasNext()) {
		ASTNode[] decl = (ASTNode[]) i.next();
		ConstantReference constant = (ConstantReference)decl[0];
		Expression initializer = (Expression)decl[1];
		
		PHPDocBlock docBlock = null;
		if (decl.length == 3) {
			docBlock = (PHPDocBlock)decl[2];
		}
		int start = constant.sourceStart();
		int end = (initializer == null ? constant.sourceEnd() : initializer.sourceEnd());
		parser.declarations.push(new ConstantDeclaration(constant, initializer, decListleft, end, docBlock));
	}

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(8/*top_statement*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // named_namespace_body ::= T_SEMICOLON 
            {
              Statement RESULT = null;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	NamespaceDeclaration namespaceDeclaration = (NamespaceDeclaration)parser.declarations.pop();
	namespaceDeclaration.setEnd(endright);
	namespaceDeclaration.setBracketed(false);

	parser.currentNamespace = namespaceDeclaration;

	parser.metUnbracketedNSDecl = true;
	if (parser.metBracketedNSDecl) {
		parser.reportError(new ASTError(namespaceDeclaration.sourceStart(), endright), "Cannot mix bracketed namespace declarations with unbracketed namespace declarations");
	}
	
	RESULT = namespaceDeclaration;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(84/*named_namespace_body*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // named_namespace_body ::= namespace_body 
            {
              Statement RESULT = null;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Statement body = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = body;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(84/*named_namespace_body*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // namespace_body ::= T_CURLY_OPEN namespace_statement_list T_CURLY_CLOSE 
            {
              Statement RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	NamespaceDeclaration namespaceDeclaration = (NamespaceDeclaration)parser.declarations.pop();
	namespaceDeclaration.getBody().setStart(startleft);
	namespaceDeclaration.getBody().setEnd(endright);
	namespaceDeclaration.getBody().getStatements().clear();
	namespaceDeclaration.getBody().acceptStatements(statementList);
	namespaceDeclaration.setEnd(endright);
	
	parser.metBracketedNSDecl = true;
	if (parser.metUnbracketedNSDecl) {
		parser.reportError(new ASTError(namespaceDeclaration.sourceStart(), endright), "Cannot mix bracketed namespace declarations with unbracketed namespace declarations");
	}
	
	RESULT = namespaceDeclaration;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(85/*namespace_body*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // namespace_body ::= error 
            {
              Statement RESULT = null;
		int theErrorleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int theErrorright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object theError = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = (NamespaceDeclaration)parser.declarations.pop();

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(85/*namespace_body*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // use_declarations ::= use_declarations T_COMMA use_declaration 
            {
              List RESULT = null;
		int useDeclListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int useDeclListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List useDeclList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int useDeclleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int useDeclright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		UsePart useDecl = (UsePart)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	useDeclList.add(useDecl);
	RESULT = useDeclList;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(5/*use_declarations*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // use_declarations ::= use_declaration 
            {
              List RESULT = null;
		int useDeclleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int useDeclright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		UsePart useDecl = (UsePart)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	List useDeclList = new LinkedList();
	useDeclList.add(useDecl);
	RESULT = useDeclList;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(5/*use_declarations*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // use_declaration ::= namespace_name 
            {
              UsePart RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		FullyQualifiedReference name = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	UsePart usePart = new UsePart(name, null);
	RESULT = usePart;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(4/*use_declaration*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // use_declaration ::= namespace_name T_AS T_STRING 
            {
              UsePart RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		FullyQualifiedReference name = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int aliasNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int aliasNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		String aliasName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	UsePart usePart = new UsePart(name, 
		new SimpleReference(aliasNameleft, aliasNameright, aliasName));
	RESULT = usePart;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(4/*use_declaration*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // use_declaration ::= T_NS_SEPARATOR namespace_name 
            {
              UsePart RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		FullyQualifiedReference name = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	NamespaceReference namespace = name.getNamespace();
	if (namespace == null) {
		namespace = new NamespaceReference(sleft, sright, "");
		name.setNamespace(namespace);
	}
		namespace.setGlobal(true);
		namespace.setStart(namespace.sourceStart() - 1);

	UsePart usePart = new UsePart(name, null);
	RESULT = usePart;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(4/*use_declaration*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // use_declaration ::= T_NS_SEPARATOR namespace_name T_AS T_STRING 
            {
              UsePart RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		FullyQualifiedReference name = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int aliasNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int aliasNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		String aliasName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	NamespaceReference namespace = name.getNamespace();
	if (namespace == null) {
		namespace = new NamespaceReference(sleft, sright, "");
		name.setNamespace(namespace);
	}
		namespace.setGlobal(true);
		namespace.setStart(namespace.sourceStart() - 1);
	
	UsePart usePart = new UsePart(name,
		new SimpleReference(aliasNameleft, aliasNameright, aliasName));
	RESULT = usePart;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(4/*use_declaration*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // inner_statement_list ::= inner_statement_list inner_statement 
            {
              List RESULT = null;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	// Ignore null statements
	if(statement != null) {
		statementList.add(statement);
		if(statement.getKind() == ASTNodeKinds.AST_ERROR){
			if(!parser.declarations.isEmpty()) {
				Statement node = parser.declarations.peek();
				if(node.sourceStart() == statement.sourceStart() && node.sourceEnd() == statement.sourceEnd()) {
					statementList.add(parser.declarations.pop());
				}
			}		
		}
	}
	RESULT = statementList;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(10/*inner_statement_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // inner_statement_list ::= 
            {
              List RESULT = null;
		 
	RESULT = new LinkedList(); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(10/*inner_statement_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // inner_statement ::= statement 
            {
              Statement RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = statement; 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(11/*inner_statement*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // inner_statement ::= function_declaration_statement 
            {
              Statement RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		PHPMethodDeclaration statement = (PHPMethodDeclaration)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = statement; 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(11/*inner_statement*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // inner_statement ::= T_HALT_COMPILER T_OPEN_PARENTHESE T_CLOSE_PARENTHESE T_SEMICOLON 
            {
              Statement RESULT = null;
		int haltleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int haltright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object halt = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int closeleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int closeright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object close = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		 
	// Note: we never generate K_HALT_COMPILER
	RESULT = null;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(11/*inner_statement*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // statement ::= unticked_statement 
            {
              Statement RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = statement; 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(9/*statement*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // statement ::= T_STRING T_NEKUDOTAIM 
            {
              Statement RESULT = null;
		int labelleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		String label = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = new GotoLabel(labelleft, endright, label);

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(9/*statement*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // statement ::= error 
            {
              Statement RESULT = null;
		int theErrorleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int theErrorright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object theError = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	parser.reportError();
	ASTError error = new ASTError(theErrorleft, theErrorright);
	RESULT = error;	

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(9/*statement*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // statement ::= T_VAR_COMMENT 
            {
              Statement RESULT = null;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(9/*statement*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NT$2 ::= 
            {
              Object RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;

	Block block = new Block(tokenleft, tokenleft, new LinkedList());
	parser.declarations.push(block);
	

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(120/*NT$2*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // unticked_statement ::= T_CURLY_OPEN NT$2 inner_statement_list T_CURLY_CLOSE 
            {
              Statement RESULT = null;
              // propagate RESULT from NT$2
              if ( ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value != null )
                RESULT = (Statement) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	Block block = (Block)parser.declarations.pop();
	block.setEnd(endright);
	block.getStatements().clear();
	block.acceptStatements(statementList);
	
	RESULT = block;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(12/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // unticked_statement ::= T_IF T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE statement elseif_list else_single 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int iftrueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int iftrueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Statement iftrue = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int elseifleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int elseifright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List[] elseif = (List[])((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int iffalseleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int iffalseright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Statement iffalse = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	Expression innerCondition = null;	
	Statement trueStatement = null;
	Statement falseStatement = iffalse;
		
	for (int i=0 ; i < elseif[0].size() ; i++) {
		innerCondition = (Expression)elseif[0].get(i);	
	 	trueStatement = (Statement)elseif[1].get(i);
	 	int start = ((Integer)elseif[2].get(i)).intValue();
		falseStatement = new IfStatement(start, iffalseright, innerCondition, trueStatement, falseStatement);
	}
	IfStatement ifStatement = new IfStatement(tokenleft, iffalseright, condition, iftrue, falseStatement);		
	
	RESULT = ifStatement;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(12/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // unticked_statement ::= T_IF T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE T_NEKUDOTAIM inner_statement_list new_elseif_list new_else_single T_ENDIF T_SEMICOLON 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-9)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-9)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-9)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).right;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).value;
		int colonleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		Object colon = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int ifTrueStatementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int ifTrueStatementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		List ifTrueStatementList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int elseifleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int elseifright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		List[] elseif = (List[])((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int iffalseleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int iffalseright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Statement iffalse = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	Expression innerCondition = null;	
	Statement trueStatement = null;
	Statement falseStatement = iffalse;
		
	for (int i=0 ; i < elseif[0].size() ; i++) {
		innerCondition = (Expression)elseif[0].get(i);	
	 	trueStatement = (Statement)elseif[1].get(i);
	 	int start = ((Integer)elseif[2].get(i)).intValue();
		falseStatement = new IfStatement(start, iffalseright, innerCondition, trueStatement, falseStatement);
	}
	Block block = new Block(colonleft, ifTrueStatementListright, ifTrueStatementList);
	IfStatement ifStatement = new IfStatement(tokenleft, iffalseright, condition, block, falseStatement);		
	
	RESULT = ifStatement;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(12/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-9)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // unticked_statement ::= T_WHILE T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE while_statement 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	WhileStatement whileStatement = new WhileStatement(tokenleft, statementright, expr, statement);			
	RESULT = whileStatement;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(12/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // unticked_statement ::= T_DO statement T_WHILE T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE T_SEMICOLON 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	DoStatement doStatement = new DoStatement(tokenleft, endright, expr, statement);			
	RESULT = doStatement;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(12/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // unticked_statement ::= T_FOR T_OPEN_PARENTHESE for_expr T_SEMICOLON for_expr T_SEMICOLON for_expr T_CLOSE_PARENTHESE for_statement 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).value;
		int initializationsleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).left;
		int initializationsright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).right;
		List initializations = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).value;
		int conditionsleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int conditionsright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		List conditions = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int increasementsleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int increasementsright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List increasements = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
				
	ForStatement forStatement = new ForStatement(tokenleft, statementright, initializations, conditions, increasements, statement);			
	RESULT = forStatement;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(12/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // unticked_statement ::= T_SWITCH T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE switch_case_list 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int caseBlockleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int caseBlockright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Block caseBlock = (Block)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	SwitchStatement switchStatement = new SwitchStatement(tokenleft, caseBlockright, expr, caseBlock);
	RESULT = switchStatement;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(12/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // unticked_statement ::= T_BREAK T_SEMICOLON 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new BreakStatement(tokenleft, endright); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(12/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // unticked_statement ::= T_BREAK expr T_SEMICOLON 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new BreakStatement(tokenleft, endright, expr); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(12/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // unticked_statement ::= T_CONTINUE T_SEMICOLON 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new ContinueStatement(tokenleft, endright); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(12/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // unticked_statement ::= T_CONTINUE expr T_SEMICOLON 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new ContinueStatement(tokenleft, endright, expr); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(12/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // unticked_statement ::= T_RETURN T_SEMICOLON 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new ReturnStatement(tokenleft, endright); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(12/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // unticked_statement ::= T_RETURN expr_without_variable T_SEMICOLON 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new ReturnStatement(tokenleft, endright, expr); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(12/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // unticked_statement ::= T_RETURN variable T_SEMICOLON 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new ReturnStatement(tokenleft, endright, expr); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(12/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // unticked_statement ::= T_GLOBAL global_var_list T_SEMICOLON 
            {
              Statement RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	GlobalStatement  global = new GlobalStatement(startleft, endright, list);
	RESULT = global;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(12/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // unticked_statement ::= T_STATIC static_var_list T_SEMICOLON 
            {
              Statement RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		PHPDocBlock start = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	StaticStatement s = new StaticStatement(startleft, endright, list);
	RESULT = s;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(12/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // unticked_statement ::= T_ECHO echo_expr_list T_SEMICOLON 
            {
              Statement RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List exprList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new EchoStatement(startleft, endright, exprList); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(12/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // unticked_statement ::= T_INLINE_HTML 
            {
              Statement RESULT = null;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(12/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // unticked_statement ::= expr T_SEMICOLON 
            {
              Statement RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	ExpressionStatement expressionStatement = new ExpressionStatement(exprleft, endright, expr);
	RESULT = expressionStatement;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(12/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // unticked_statement ::= T_USE use_filename T_SEMICOLON 
            {
              Statement RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	PHPCallArgumentsList list = new PHPCallArgumentsList(expr.sourceStart(), expr.sourceEnd());
	list.addNode(expr);
	SimpleReference functionName = new SimpleReference(startleft, startright, "use");
	PHPCallExpression functionInvocation = new PHPCallExpression(startleft, exprright, null, functionName, list);
	ExpressionStatement expressionStatement = new ExpressionStatement(startleft, endright, functionInvocation);
	RESULT = expressionStatement;	

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(12/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // unticked_statement ::= T_UNSET T_OPEN_PARENTHESE unset_variables T_CLOSE_PARENTHESE T_SEMICOLON 
            {
              Statement RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int openParleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int openParright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object openPar = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		PHPCallArgumentsList list = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int closeParleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int closeParright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object closePar = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	list.setStart(openParright);
	list.setEnd(closeParleft);
	SimpleReference functionName = new SimpleReference(startleft, startright, "unset");
	PHPCallExpression functionInvocation = new PHPCallExpression(startleft, closeParright, null, functionName, list);
	ExpressionStatement expressionStatement = new ExpressionStatement(startleft, endright, functionInvocation);
	RESULT = expressionStatement;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(12/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // unticked_statement ::= T_FOREACH T_OPEN_PARENTHESE variable T_AS foreach_variable foreach_optional_arg T_CLOSE_PARENTHESE foreach_statement 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int argleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression arg = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	ForEachStatement forEachStatement = null;
	if (arg == null) {
		forEachStatement = new ForEachStatement(tokenleft, statementright, expr, var, statement);
	} else {
		forEachStatement = new ForEachStatement(tokenleft, statementright, expr, var, arg, statement);
	}
	RESULT = forEachStatement;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(12/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // unticked_statement ::= T_FOREACH T_OPEN_PARENTHESE expr_without_variable T_AS variable foreach_optional_arg T_CLOSE_PARENTHESE foreach_statement 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int argleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression arg = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	ForEachStatement forEachStatement = null;
	if (arg == null) {
		forEachStatement = new ForEachStatement(tokenleft, statementright, expr, var, statement);
	} else {
		forEachStatement = new ForEachStatement(tokenleft, statementright, expr, var, arg, statement);
	}
	RESULT = forEachStatement;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(12/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // unticked_statement ::= T_DECLARE T_OPEN_PARENTHESE declare_list T_CLOSE_PARENTHESE declare_statement 
            {
              Statement RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int listsleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int listsright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List[] lists = (List[])((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	DeclareStatement declare = new DeclareStatement(startleft, statementright, lists[0], lists[1], statement);
	RESULT = declare;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(12/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // unticked_statement ::= T_SEMICOLON 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new EmptyStatement(tokenleft, tokenright); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(12/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // unticked_statement ::= T_TRY T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE T_CATCH T_OPEN_PARENTHESE fully_qualified_class_name tracked_variable T_CLOSE_PARENTHESE T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE additional_catches 
            {
              Statement RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-12)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-12)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-12)).value;
		int tryBlockStartleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-11)).left;
		int tryBlockStartright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-11)).right;
		Object tryBlockStart = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-11)).value;
		int tryListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-10)).left;
		int tryListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-10)).right;
		List tryList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-10)).value;
		int tryBlockEndleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-9)).left;
		int tryBlockEndright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-9)).right;
		Object tryBlockEnd = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-9)).value;
		int catch_wordleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).left;
		int catch_wordright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).right;
		Object catch_word = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).right;
		TypeReference className = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		VariableReference var = (VariableReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int catchBlockStartleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int catchBlockStartright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object catchBlockStart = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int catchListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int catchListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List catchList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int catchBlockEndleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int catchBlockEndright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object catchBlockEnd = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int catchesListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int catchesListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		List catchesList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	Block tryBlock = new Block(tryBlockStartleft, tryBlockEndright, tryList);
	Block catchBlock = new Block(catchBlockStartleft, catchBlockEndright, catchList);
	CatchClause catchClause = new CatchClause(catch_wordleft, catchBlockEndright, className, var, catchBlock);
	((LinkedList) catchesList).addFirst(catchClause);
	TryStatement tryStatement = new TryStatement(startleft, catchesListright, tryBlock, catchesList);
	RESULT = tryStatement;	

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(12/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-12)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // unticked_statement ::= T_THROW expr T_SEMICOLON 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new ThrowStatement(tokenleft, endright, expr); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(12/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // unticked_statement ::= T_GOTO T_STRING T_SEMICOLON 
            {
              Statement RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int labelleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		String label = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = new GotoStatement(startleft, endright, label);

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(12/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // additional_catches ::= non_empty_additional_catches 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = list;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(92/*additional_catches*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // additional_catches ::= 
            {
              List RESULT = null;
		
	List list = new LinkedList();
	RESULT = list;	

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(92/*additional_catches*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // non_empty_additional_catches ::= additional_catch 
            {
              List RESULT = null;
		int catch_statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int catch_statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		CatchClause catch_statement = (CatchClause)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	List list = new LinkedList();
	list.add(catch_statement);
	RESULT = list;	

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(93/*non_empty_additional_catches*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // non_empty_additional_catches ::= non_empty_additional_catches additional_catch 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int catch_statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int catch_statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		CatchClause catch_statement = (CatchClause)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	list.add(catch_statement);
	RESULT = list;	

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(93/*non_empty_additional_catches*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // additional_catch ::= T_CATCH T_OPEN_PARENTHESE fully_qualified_class_name T_VARIABLE T_CLOSE_PARENTHESE T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              CatchClause RESULT = null;
		int catch_wordleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).left;
		int catch_wordright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).right;
		Object catch_word = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		TypeReference className = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int catchBlockStartleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int catchBlockStartright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object catchBlockStart = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int catchListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int catchListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List catchList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int catchBlockEndleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int catchBlockEndright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object catchBlockEnd = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	Block catchBlock = new Block(catchBlockStartleft, catchBlockEndright, catchList);
	VariableReference variable = new VariableReference(varleft, varright, var, PHPVariableKind.LOCAL);
	CatchClause catchClause = new CatchClause(catch_wordleft, catchBlockEndright, className, variable, catchBlock);
	RESULT = catchClause;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(94/*additional_catch*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // unset_variables ::= unset_variable 
            {
              PHPCallArgumentsList RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	PHPCallArgumentsList list = new PHPCallArgumentsList();
	list.addNode(var);
	RESULT = list;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(13/*unset_variables*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // unset_variables ::= unset_variables T_COMMA unset_variable 
            {
              PHPCallArgumentsList RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		PHPCallArgumentsList list = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	list.addNode(var);
	RESULT = list;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(13/*unset_variables*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // unset_variable ::= variable 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = var;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(14/*unset_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // use_filename ::= T_CONSTANT_ENCAPSED_STRING 
            {
              Expression RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, scalar, Scalar.TYPE_STRING);
	RESULT = s;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(15/*use_filename*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // use_filename ::= T_OPEN_PARENTHESE T_CONSTANT_ENCAPSED_STRING T_CLOSE_PARENTHESE 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	Scalar s = new Scalar(startleft, endright, scalar, Scalar.TYPE_STRING);
	RESULT = s;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(15/*use_filename*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // function_declaration_statement ::= unticked_function_declaration_statement 
            {
              PHPMethodDeclaration RESULT = null;
		int functionDeclarationleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int functionDeclarationright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		PHPMethodDeclaration functionDeclaration = (PHPMethodDeclaration)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = functionDeclaration;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(90/*function_declaration_statement*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // is_reference ::= 
            {
              Boolean RESULT = null;
		
	RESULT = Boolean.FALSE;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(42/*is_reference*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // is_reference ::= T_REFERENCE 
            {
              Boolean RESULT = null;
		
	RESULT = Boolean.TRUE;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(42/*is_reference*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // NT$3 ::= 
            {
              Object RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		PHPDocBlock start = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;

	PHPMethodDeclaration functionDeclaration = new PHPMethodDeclaration(startleft, functionNameright, functionNameleft, functionNameright, functionName, 0, null, new Block(functionNameright,functionNameright,null), isReference.booleanValue(), start);
	parser.addDeclarationStatement(functionDeclaration);
	parser.declarations.push(functionDeclaration);

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(121/*NT$3*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // NT$4 ::= 
            {
              Object RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).right;
		PHPDocBlock start = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List paramList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int closeParentheseleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int closeParentheseright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object closeParenthese = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;

	PHPMethodDeclaration functionDeclaration = (PHPMethodDeclaration)parser.declarations.peek();
	functionDeclaration.acceptArguments(paramList);
	functionDeclaration.setEnd(closeParentheseright);

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(122/*NT$4*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // unticked_function_declaration_statement ::= T_FUNCTION is_reference string_st NT$3 T_OPEN_PARENTHESE parameter_list T_CLOSE_PARENTHESE NT$4 function_body 
            {
              PHPMethodDeclaration RESULT = null;
              // propagate RESULT from NT$3
              if ( ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value != null )
                RESULT = (PHPMethodDeclaration) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
              // propagate RESULT from NT$4
              if ( ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value != null )
                RESULT = (PHPMethodDeclaration) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).right;
		PHPDocBlock start = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		List paramList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int closeParentheseleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int closeParentheseright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object closeParenthese = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		PHPMethodDeclaration body = (PHPMethodDeclaration)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = body;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(95/*unticked_function_declaration_statement*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // function_body ::= T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              PHPMethodDeclaration RESULT = null;
		int blockStartleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int blockStartright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object blockStart = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int blockEndleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int blockEndright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object blockEnd = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	PHPMethodDeclaration functionDeclaration = (PHPMethodDeclaration)parser.declarations.pop();
	Block block = functionDeclaration.getBody();
	block.setStart(blockStartleft);
	block.setEnd(blockEndright);
	block.getStatements().clear();
	block.acceptStatements(statementList);
	functionDeclaration.setEnd(blockEndright);
	RESULT = functionDeclaration;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(116/*function_body*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // function_body ::= error 
            {
              PHPMethodDeclaration RESULT = null;
		int theErrorleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int theErrorright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object theError = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = (PHPMethodDeclaration)parser.declarations.pop();

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(116/*function_body*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // errorOrNot ::= error 
            {
              Object RESULT = null;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(117/*errorOrNot*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // errorOrNot ::= 
            {
              Object RESULT = null;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(117/*errorOrNot*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // class_closure ::= T_CURLY_CLOSE 
            {
              Statement RESULT = null;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(115/*class_closure*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // class_entry_type ::= T_CLASS 
            {
              CompilerAstParser.ModifierDocPair RESULT = null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		PHPDocBlock value = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccDefault, value); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(96/*class_entry_type*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // class_entry_type ::= T_ABSTRACT T_CLASS 
            {
              CompilerAstParser.ModifierDocPair RESULT = null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		PHPDocBlock value = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccAbstract, value);

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(96/*class_entry_type*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // class_entry_type ::= T_FINAL T_CLASS 
            {
              CompilerAstParser.ModifierDocPair RESULT = null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		PHPDocBlock value = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccFinal, value);

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(96/*class_entry_type*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // extends_from ::= 
            {
              TypeReference RESULT = null;
		
	RESULT = null;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(97/*extends_from*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // extends_from ::= T_EXTENDS fully_qualified_class_name 
            {
              TypeReference RESULT = null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		TypeReference className = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = className;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(97/*extends_from*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // extends_from ::= T_EXTENDS error 
            {
              TypeReference RESULT = null;
		int theErrorleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int theErrorright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object theError = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	parser.reportError(new ASTError(theErrorleft, theErrorright));

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(97/*extends_from*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // interface_entry ::= T_INTERFACE 
            {
              PHPDocBlock RESULT = null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		PHPDocBlock value = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = value;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(75/*interface_entry*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // interface_extends_list ::= 
            {
              List RESULT = null;
		
	List list = new LinkedList();
	RESULT = list;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(76/*interface_extends_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // interface_extends_list ::= T_EXTENDS interface_list 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = list;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(76/*interface_extends_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // implements_list ::= 
            {
              List RESULT = null;
		
	List list = new LinkedList();
	RESULT = list;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(98/*implements_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // implements_list ::= T_IMPLEMENTS interface_list 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = list;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(98/*implements_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // interface_list ::= fully_qualified_class_name 
            {
              List RESULT = null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		TypeReference className = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	List list = new LinkedList();
	if(className != null) {
		list.add(className);
	}
	RESULT = list;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(99/*interface_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // interface_list ::= interface_list T_COMMA fully_qualified_class_name 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		TypeReference className = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	list.add(className);
	RESULT = list;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(99/*interface_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$CompilerAstParser$do_action2(
    int                        CUP$CompilerAstParser$act_num,
    java_cup.runtime.lr_parser CUP$CompilerAstParser$parser,
    java.util.Stack            CUP$CompilerAstParser$stack,
    int                        CUP$CompilerAstParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CompilerAstParser$result;

      /* select the action based on the action number */
      switch (CUP$CompilerAstParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // interface_list ::= interface_list T_COMMA error 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int commaleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int commaright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object comma = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int theErrorleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int theErrorright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object theError = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	parser.reportError(new ASTError(theErrorleft, theErrorright));
	RESULT = list;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(99/*interface_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // interface_list ::= error 
            {
              List RESULT = null;
		int theErrorleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int theErrorright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object theError = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	parser.reportError(new ASTError(theErrorleft, theErrorright));
	RESULT = new LinkedList();

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(99/*interface_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // foreach_optional_arg ::= 
            {
              Expression RESULT = null;
		 
	RESULT = null;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(16/*foreach_optional_arg*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // foreach_optional_arg ::= T_DOUBLE_ARROW foreach_variable 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = var;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(16/*foreach_optional_arg*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // foreach_variable ::= variable 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = var;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(17/*foreach_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // foreach_variable ::= T_REFERENCE variable 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	ReferenceExpression reference = new ReferenceExpression (startleft, varright, var);
	RESULT = reference;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(17/*foreach_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // for_statement ::= statement 
            {
              Statement RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = statement;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(18/*for_statement*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // for_statement ::= T_NEKUDOTAIM inner_statement_list T_ENDFOR T_SEMICOLON 
            {
              Statement RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		
	Block block = new Block(startleft, statementListright, statementList);
	RESULT = block;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(18/*for_statement*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // foreach_statement ::= statement 
            {
              Statement RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = statement;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(19/*foreach_statement*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // foreach_statement ::= T_NEKUDOTAIM inner_statement_list T_ENDFOREACH T_SEMICOLON 
            {
              Statement RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		
	Block block = new Block(startleft, statementListright, statementList);
	RESULT = block;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(19/*foreach_statement*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // declare_statement ::= statement 
            {
              Statement RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = statement;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(20/*declare_statement*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // declare_statement ::= T_NEKUDOTAIM inner_statement_list T_ENDDECLARE T_SEMICOLON 
            {
              Statement RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		
	Block block = new Block(startleft, statementListright, statementList);
	RESULT = block;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(20/*declare_statement*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // declare_list ::= string_st T_EQUAL static_scalar 
            {
              List[] RESULT = null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String key = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	List listKeys = new LinkedList();
	List listValues = new LinkedList();
	
	listKeys.add(key);
	listValues.add(value);

	List[] returnList = new List[] { listKeys, listValues };
	RESULT = returnList;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(21/*declare_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // declare_list ::= declare_list T_COMMA string_st T_EQUAL static_scalar 
            {
              List[] RESULT = null;
		int listsleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int listsright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		List[] lists = (List[])((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int keyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String key = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	lists[0].add(key);
	lists[1].add(value);
	RESULT = lists;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(21/*declare_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // switch_case_list ::= T_CURLY_OPEN case_list T_CURLY_CLOSE 
            {
              Block RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	Block block = new Block(startleft, endright, caseList);	
	RESULT = block; 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(22/*switch_case_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // switch_case_list ::= T_CURLY_OPEN T_SEMICOLON case_list T_CURLY_CLOSE 
            {
              Block RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	Block block = new Block(startleft, endright, caseList);	
	RESULT = block; 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(22/*switch_case_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // switch_case_list ::= T_NEKUDOTAIM case_list T_ENDSWITCH T_SEMICOLON 
            {
              Block RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	Block block = new Block(startleft, endright, caseList);	
	RESULT = block; 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(22/*switch_case_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // switch_case_list ::= T_NEKUDOTAIM T_SEMICOLON case_list T_ENDSWITCH T_SEMICOLON 
            {
              Block RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	Block block = new Block(startleft, endright, caseList);	
	RESULT = block; 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(22/*switch_case_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // case_list ::= 
            {
              List RESULT = null;
		
	RESULT = new LinkedList(); // of SwitchCase

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(23/*case_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // case_list ::= case_list T_CASE expr case_separator inner_statement_list 
            {
              List RESULT = null;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		List statements = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	SwitchCase switchCase = new SwitchCase(tokenleft, statementsright, expr, statements, false);
	if (caseList == null) {
		caseList = new LinkedList(); // of switchCase
	}
	caseList.add(switchCase);
	RESULT = caseList;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(23/*case_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // case_list ::= case_list T_DEFAULT case_separator inner_statement_list 
            {
              List RESULT = null;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		List statements = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	SwitchCase switchCase = new SwitchCase(tokenleft, statementsright, null, statements, true);
	if (caseList == null) {
		caseList = new LinkedList(); // of SwitchCase
	}
	caseList.add(switchCase);
	RESULT = caseList;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(23/*case_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // case_separator ::= T_NEKUDOTAIM 
            {
              Object RESULT = null;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(24/*case_separator*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // case_separator ::= T_SEMICOLON 
            {
              Object RESULT = null;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(24/*case_separator*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // while_statement ::= statement 
            {
              Statement RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = statement;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(25/*while_statement*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // while_statement ::= T_NEKUDOTAIM inner_statement_list T_ENDWHILE T_SEMICOLON 
            {
              Statement RESULT = null;
		int colonleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object colon = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		
	Block block = new Block(colonleft, statementListright, statementList);
	RESULT = block;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(25/*while_statement*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // elseif_list ::= 
            {
              List[] RESULT = null;
		
	List listConditions = new LinkedList();
	List listStatements = new LinkedList();
	List listTokens = new LinkedList();
	
	List[] returnList = new List[] { listConditions, listStatements, listTokens };
	
	RESULT = returnList;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(26/*elseif_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // elseif_list ::= elseif_list T_ELSEIF T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE statement 
            {
              List[] RESULT = null;
		int elseifListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int elseifListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		List[] elseifList = (List[])((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int iftrueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int iftrueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Statement iftrue = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
			
	((LinkedList)elseifList[0]).addFirst(condition);
	((LinkedList)elseifList[1]).addFirst(iftrue);
	((LinkedList)elseifList[2]).addFirst(new Integer(tokenleft));

	RESULT = elseifList;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(26/*elseif_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // new_elseif_list ::= 
            {
              List[] RESULT = null;
		
	List listConditions = new LinkedList();
	List listStatements = new LinkedList();
	List listTokens = new LinkedList();
	
	List[] returnList = new List[] { listConditions, listStatements, listTokens };
	
	RESULT = returnList;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(27/*new_elseif_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // new_elseif_list ::= new_elseif_list T_ELSEIF T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE T_NEKUDOTAIM inner_statement_list 
            {
              List[] RESULT = null;
		int elseifListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).left;
		int elseifListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).right;
		List[] elseifList = (List[])((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int colonleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object colon = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
			
	Block block = new Block(colonleft, statementListright, statementList);
	((LinkedList)elseifList[0]).addFirst(condition);
	((LinkedList)elseifList[1]).addFirst(block);
	((LinkedList)elseifList[2]).addFirst(new Integer(tokenleft));

	RESULT = elseifList;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(27/*new_elseif_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // else_single ::= 
            {
              Statement RESULT = null;
		
	RESULT = null;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(28/*else_single*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // else_single ::= T_ELSE statement 
            {
              Statement RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = statement;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(28/*else_single*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // new_else_single ::= 
            {
              Statement RESULT = null;
		
	RESULT = null;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(29/*new_else_single*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // new_else_single ::= T_ELSE T_NEKUDOTAIM inner_statement_list 
            {
              Statement RESULT = null;
		int colonleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object colon = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	Block block = new Block(colonleft, statementListright, statementList);
	RESULT = block;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(29/*new_else_single*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // parameter_list ::= non_empty_parameter_list 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = list;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(30/*parameter_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // parameter_list ::= 
            {
              List RESULT = null;
		
	List list = new LinkedList();
	RESULT = list;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(30/*parameter_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // non_empty_parameter_list ::= parameter 
            {
              List RESULT = null;
		int parameterleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int parameterright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		FormalParameter parameter = (FormalParameter)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	List list = new LinkedList();
	if(parameter != null) {
		list.add(parameter);
	}
	RESULT = list;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(33/*non_empty_parameter_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // non_empty_parameter_list ::= non_empty_parameter_list T_COMMA parameter 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int parameterleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int parameterright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		FormalParameter parameter = (FormalParameter)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	if(parameter != null) {
		list.add(parameter);
	}
	RESULT = list;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(33/*non_empty_parameter_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // non_empty_parameter_list ::= non_empty_parameter_list T_COMMA 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int commaleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int commaright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object comma = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	parser.reportError(new ASTError(commaleft, commaright), "syntax error, unexpected ','");
	RESULT = list;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(33/*non_empty_parameter_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // parameter ::= optional_class_type T_VARIABLE 
            {
              FormalParameter RESULT = null;
		int classTypeleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int classTyperight = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		TypeReference classType = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	int start = classType == null ? varleft : classTypeleft;
	VariableReference v = new VariableReference(varleft, varright, var, PHPVariableKind.LOCAL);
	FormalParameter parameter = new FormalParameter(start, varright, classType, v);
	RESULT = parameter;	

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(34/*parameter*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // parameter ::= optional_class_type T_REFERENCE T_VARIABLE 
            {
              FormalParameter RESULT = null;
		int classTypeleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int classTyperight = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		TypeReference classType = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int refleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object ref = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	int start = classType == null ? refleft : classTypeleft;
	VariableReference v = new VariableReference(varleft, varright, var, PHPVariableKind.LOCAL);
	FormalParameter parameter = new FormalParameterByReference(start, varright, classType, v);
	RESULT = parameter;	

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(34/*parameter*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // parameter ::= optional_class_type T_VARIABLE T_EQUAL static_scalar 
            {
              FormalParameter RESULT = null;
		int classTypeleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int classTyperight = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		TypeReference classType = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression scalar = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	int start = classType == null ? varleft : classTypeleft;
	VariableReference v = new VariableReference(varleft, varright, var, PHPVariableKind.LOCAL);
	FormalParameter parameter = new FormalParameter(start, scalarright, classType, v, scalar);
	RESULT = parameter;	

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(34/*parameter*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // parameter ::= optional_class_type T_REFERENCE T_VARIABLE T_EQUAL static_scalar 
            {
              FormalParameter RESULT = null;
		int classTypeleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int classTyperight = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		TypeReference classType = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int refleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object ref = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression scalar = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	int start = classType == null ? refleft : classTypeleft;
	VariableReference v = new VariableReference(varleft, varright, var, PHPVariableKind.LOCAL);
	FormalParameter parameter = new FormalParameterByReference(start, scalarright, classType, v, scalar);
	RESULT = parameter;	

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(34/*parameter*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // parameter ::= error 
            {
              FormalParameter RESULT = null;
		int theErrorleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int theErrorright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object theError = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	parser.reportError(new ASTError(theErrorleft, theErrorright));
	RESULT = null;	

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(34/*parameter*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // optional_class_type ::= 
            {
              TypeReference RESULT = null;
		
	RESULT = null;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(100/*optional_class_type*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // optional_class_type ::= fully_qualified_class_name 
            {
              TypeReference RESULT = null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		TypeReference className = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = className;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(100/*optional_class_type*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // optional_class_type ::= T_ARRAY 
            {
              TypeReference RESULT = null;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object array = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	TypeReference reference = new TypeReference(arrayleft, arrayright, "array");
	RESULT = reference;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(100/*optional_class_type*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // function_call_parameter_list ::= non_empty_function_call_parameter_list 
            {
              PHPCallArgumentsList RESULT = null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		PHPCallArgumentsList paramsList = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = paramsList;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(35/*function_call_parameter_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // function_call_parameter_list ::= 
            {
              PHPCallArgumentsList RESULT = null;
		
	PHPCallArgumentsList list = new PHPCallArgumentsList();
	RESULT = list;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(35/*function_call_parameter_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // non_empty_function_call_parameter_list ::= expr_without_variable 
            {
              PHPCallArgumentsList RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	PHPCallArgumentsList paramsList = new PHPCallArgumentsList();
	paramsList.addNode(var);	
	RESULT = paramsList;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(36/*non_empty_function_call_parameter_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // non_empty_function_call_parameter_list ::= variable 
            {
              PHPCallArgumentsList RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	PHPCallArgumentsList paramsList = new PHPCallArgumentsList();
	paramsList.addNode(var);	
	RESULT = paramsList;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(36/*non_empty_function_call_parameter_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // non_empty_function_call_parameter_list ::= T_REFERENCE w_variable 
            {
              PHPCallArgumentsList RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	PHPCallArgumentsList paramsList = new PHPCallArgumentsList();
	Expression var_ref = new ReferenceExpression(startleft, varright, var);
	paramsList.addNode(var_ref);	
	RESULT = paramsList;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(36/*non_empty_function_call_parameter_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // non_empty_function_call_parameter_list ::= non_empty_function_call_parameter_list T_COMMA expr_without_variable 
            {
              PHPCallArgumentsList RESULT = null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		PHPCallArgumentsList paramsList = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	paramsList.addNode(var);
	RESULT = paramsList;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(36/*non_empty_function_call_parameter_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // non_empty_function_call_parameter_list ::= non_empty_function_call_parameter_list T_COMMA variable 
            {
              PHPCallArgumentsList RESULT = null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		PHPCallArgumentsList paramsList = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	paramsList.addNode(var);	
	RESULT = paramsList;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(36/*non_empty_function_call_parameter_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // non_empty_function_call_parameter_list ::= non_empty_function_call_parameter_list T_COMMA T_REFERENCE w_variable 
            {
              PHPCallArgumentsList RESULT = null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		PHPCallArgumentsList paramsList = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	Expression var_ref = new ReferenceExpression(startleft, varright, var);
	paramsList.addNode(var_ref);
	RESULT = paramsList;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(36/*non_empty_function_call_parameter_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // global_var_list ::= global_var_list T_COMMA global_var 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	list.add(var);
	RESULT = list;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(37/*global_var_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // global_var_list ::= global_var 
            {
              List RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	List list = new LinkedList();
	list.add(var);
	RESULT = list;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(37/*global_var_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // global_var ::= T_VARIABLE 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	VariableReference variable = new VariableReference(varleft, varright, var);
	RESULT = variable;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(38/*global_var*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // global_var ::= T_DOLLAR r_variable 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	ReflectionVariableReference ref = new ReflectionVariableReference(startleft, varright, var);
	RESULT = ref;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(38/*global_var*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // global_var ::= T_DOLLAR T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression varName = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	ReflectionVariableReference var = new ReflectionVariableReference(startleft, endright, varName);
	RESULT = var;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(38/*global_var*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // static_var_list ::= static_var_list T_COMMA T_VARIABLE 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	VariableReference v = new VariableReference(varleft, varright, var); 
	list.add(v);
	RESULT = list;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(39/*static_var_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // static_var_list ::= static_var_list T_COMMA T_VARIABLE T_EQUAL static_scalar 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	VariableReference v = new VariableReference(varleft, varright, var); 
	Assignment assignment = new Assignment(varleft, exprright, v, Assignment.OP_EQUAL, expr); 
	list.add(assignment);
	RESULT = list;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(39/*static_var_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // static_var_list ::= T_VARIABLE 
            {
              List RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	VariableReference v = new VariableReference(varleft, varright, var); 
	List list = new LinkedList();
	list.add(v);
	RESULT = list;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(39/*static_var_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // static_var_list ::= T_VARIABLE T_EQUAL static_scalar 
            {
              List RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	VariableReference v = new VariableReference(varleft, varright, var); 
	Assignment assignment = new Assignment(varleft, exprright, v, Assignment.OP_EQUAL, expr); 
	List list = new LinkedList();
	list.add(assignment);
	RESULT = list;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(39/*static_var_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // class_statement_list ::= class_statement_list class_statement 
            {
              Object RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int classStatementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int classStatementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object classStatement = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	if(!(parser.declarations.peek() instanceof TypeDeclaration)) {
		parser.declarations.pop();
	}

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(40/*class_statement_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // class_statement_list ::= 
            {
              Object RESULT = null;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(40/*class_statement_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // class_statement ::= variable_modifiers class_variable_declaration T_SEMICOLON 
            {
              Object RESULT = null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		CompilerAstParser.ModifierDocPair modifier = (CompilerAstParser.ModifierDocPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int decListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int decListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List decList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		
	Iterator i = decList.iterator();
	while (i.hasNext()) {
		ASTNode[] decl = (ASTNode[]) i.next();
		VariableReference variable = (VariableReference)decl[0];
		Expression initializer = (Expression)decl[1];
		int start = variable.sourceStart();
		int end = (initializer == null ? variable.sourceEnd() : initializer.sourceEnd());
		parser.addDeclarationStatement(new PHPFieldDeclaration(variable, initializer, start, end, modifier.modifier, modifierleft, modifier.doc));
	}

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(41/*class_statement*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // class_statement ::= constant_declaration T_SEMICOLON 
            {
              Object RESULT = null;
		int decListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int decListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List decList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		
	Iterator i = decList.iterator();
	while (i.hasNext()) {
		ASTNode[] decl = (ASTNode[]) i.next();
		ConstantReference constant = (ConstantReference)decl[0];
		Expression initializer = (Expression)decl[1];
		
		PHPDocBlock docBlock = null;
		if (decl.length == 3) {
			docBlock = (PHPDocBlock)decl[2];
		}
		int start = constant.sourceStart();
		int end = (initializer == null ? constant.sourceEnd() : initializer.sourceEnd());
		parser.addDeclarationStatement(new ConstantDeclaration(constant, initializer, decListleft, end, docBlock));
	}

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(41/*class_statement*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // NT$5 ::= 
            {
              Object RESULT = null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		CompilerAstParser.ModifierDocPair modifier = (CompilerAstParser.ModifierDocPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		PHPDocBlock start = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;

	int methodStart = modifier == null ? startleft : modifierleft;
	int modifierValue = modifier == null ? Modifiers.AccPublic : modifier.modifier;
	PHPDocBlock docBlock = start;
	if (modifier != null && modifier.doc != null) {
		docBlock = modifier.doc;
	}
	PHPMethodDeclaration methodDeclaration = new PHPMethodDeclaration(methodStart, functionNameright, functionNameleft, functionNameright, functionName, modifierValue, null, new Block(functionNameright, functionNameright, null), isReference.booleanValue(), docBlock);
	parser.addDeclarationStatement(methodDeclaration);
	parser.declarations.push(methodDeclaration);

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(123/*NT$5*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // NT$6 ::= 
            {
              Object RESULT = null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).right;
		CompilerAstParser.ModifierDocPair modifier = (CompilerAstParser.ModifierDocPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).right;
		PHPDocBlock start = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List paramList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int closeParentheseleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int closeParentheseright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object closeParenthese = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;

	PHPMethodDeclaration functionDeclaration = (PHPMethodDeclaration)parser.declarations.peek();
	functionDeclaration.acceptArguments(paramList);
	functionDeclaration.setEnd(closeParentheseright);

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(124/*NT$6*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // class_statement ::= method_modifiers T_FUNCTION is_reference string_st NT$5 T_OPEN_PARENTHESE parameter_list T_CLOSE_PARENTHESE NT$6 method_body 
            {
              Object RESULT = null;
              // propagate RESULT from NT$5
              if ( ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
              // propagate RESULT from NT$6
              if ( ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-9)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-9)).right;
		CompilerAstParser.ModifierDocPair modifier = (CompilerAstParser.ModifierDocPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-9)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).right;
		PHPDocBlock start = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		List paramList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int closeParentheseleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int closeParentheseright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object closeParenthese = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Statement body = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	PHPMethodDeclaration methodDeclaration = (PHPMethodDeclaration)parser.declarations.pop();
	if(body instanceof ASTError) {
		parser.reportError(new ASTError(methodDeclaration.sourceEnd() - 1, methodDeclaration.sourceEnd()), "syntax error, unfinished method declaration");
	}
	TypeDeclaration type = (TypeDeclaration)parser.declarations.peek();
	methodDeclaration.setDeclaringTypeName(type.getName());

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(41/*class_statement*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-9)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // class_statement ::= T_VAR_COMMENT 
            {
              Object RESULT = null;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(41/*class_statement*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // class_statement ::= error 
            {
              Object RESULT = null;
		int theErrorleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int theErrorright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object theError = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	parser.reportError();
	ASTError error = new ASTError(theErrorleft, theErrorright);
	parser.addDeclarationStatement(error);

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(41/*class_statement*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // method_body ::= T_SEMICOLON 
            {
              Statement RESULT = null;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	PHPMethodDeclaration methodDeclaration = (PHPMethodDeclaration)parser.declarations.peek();
	methodDeclaration.getBody().setStart(endleft);
	methodDeclaration.getBody().setEnd(endright);
	methodDeclaration.setEnd(endright);
	RESULT = null;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(83/*method_body*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // method_body ::= T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              Statement RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	PHPMethodDeclaration methodDeclaration = (PHPMethodDeclaration)parser.declarations.peek();
	methodDeclaration.getBody().setStart(startleft);
	methodDeclaration.getBody().setEnd(endright);
	methodDeclaration.getBody().getStatements().clear();
	methodDeclaration.getBody().acceptStatements(statementList);
	methodDeclaration.setEnd(endright);
	RESULT = null;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(83/*method_body*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // method_body ::= 
            {
              Statement RESULT = null;
		
	parser.reportError();
	RESULT = new ASTError(0,0);

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(83/*method_body*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // variable_modifiers ::= non_empty_member_modifiers 
            {
              CompilerAstParser.ModifierDocPair RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	int result = 0;
	PHPDocBlock docBlock = null;
	for (Iterator it = list.iterator(); it.hasNext() ; ) {
		CompilerAstParser.ModifierDocPair modifier = (CompilerAstParser.ModifierDocPair)it.next();
		if (modifier.doc != null) {
			docBlock = modifier.doc;
		}
		result |= modifier.modifier;
	}
	RESULT = parser.new ModifierDocPair(result, docBlock);

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(102/*variable_modifiers*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // variable_modifiers ::= T_VAR 
            {
              CompilerAstParser.ModifierDocPair RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		PHPDocBlock var = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccPublic, var);

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(102/*variable_modifiers*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // method_modifiers ::= 
            {
              CompilerAstParser.ModifierDocPair RESULT = null;
		
	RESULT = null;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(82/*method_modifiers*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // method_modifiers ::= non_empty_member_modifiers 
            {
              CompilerAstParser.ModifierDocPair RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	int result = 0;
	PHPDocBlock docBlock = null;
	for (Iterator it = list.iterator(); it.hasNext() ; ) {
		CompilerAstParser.ModifierDocPair modifier = (CompilerAstParser.ModifierDocPair)it.next();
		if (modifier.doc != null) {
			docBlock = modifier.doc;
		}
		result |= modifier.modifier;
	}
	RESULT = parser.new ModifierDocPair(result, docBlock);

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(82/*method_modifiers*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // non_empty_member_modifiers ::= member_modifier 
            {
              List RESULT = null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		CompilerAstParser.ModifierDocPair modifier = (CompilerAstParser.ModifierDocPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	List list = new LinkedList();
	list.add(modifier);
	RESULT = list;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(86/*non_empty_member_modifiers*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // non_empty_member_modifiers ::= non_empty_member_modifiers member_modifier 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		CompilerAstParser.ModifierDocPair modifier = (CompilerAstParser.ModifierDocPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	list.add(modifier);
	RESULT = list;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(86/*non_empty_member_modifiers*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // member_modifier ::= T_PUBLIC 
            {
              CompilerAstParser.ModifierDocPair RESULT = null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		PHPDocBlock value = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccPublic, value);

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(87/*member_modifier*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // member_modifier ::= T_PROTECTED 
            {
              CompilerAstParser.ModifierDocPair RESULT = null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		PHPDocBlock value = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccProtected, value);

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(87/*member_modifier*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // member_modifier ::= T_PRIVATE 
            {
              CompilerAstParser.ModifierDocPair RESULT = null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		PHPDocBlock value = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccPrivate, value);

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(87/*member_modifier*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // member_modifier ::= T_STATIC 
            {
              CompilerAstParser.ModifierDocPair RESULT = null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		PHPDocBlock value = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccStatic, value);

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(87/*member_modifier*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // member_modifier ::= T_ABSTRACT 
            {
              CompilerAstParser.ModifierDocPair RESULT = null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		PHPDocBlock value = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccAbstract, value);

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(87/*member_modifier*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // member_modifier ::= T_FINAL 
            {
              CompilerAstParser.ModifierDocPair RESULT = null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		PHPDocBlock value = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccFinal, value);

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(87/*member_modifier*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // class_variable_declaration ::= class_variable_declaration T_COMMA T_VARIABLE 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	VariableReference varId = new VariableReference(varleft, varright, var);
	list.add(new ASTNode[] {varId, null});
	RESULT = list;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(80/*class_variable_declaration*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // class_variable_declaration ::= class_variable_declaration T_COMMA T_VARIABLE T_EQUAL static_scalar 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	VariableReference varId = new VariableReference(varleft, varright, var);
	list.add(new ASTNode[] {varId, expr});
	RESULT = list;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(80/*class_variable_declaration*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // class_variable_declaration ::= T_VARIABLE 
            {
              List RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	List list = new LinkedList();
	VariableReference varId = new VariableReference(varleft, varright, var);
	list.add(new ASTNode[] {varId, null});
	RESULT = list;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(80/*class_variable_declaration*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // class_variable_declaration ::= T_VARIABLE T_EQUAL static_scalar 
            {
              List RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	List list = new LinkedList();
	VariableReference varId = new VariableReference(varleft, varright, var);
	list.add(new ASTNode[] {varId, expr});
	RESULT = list;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(80/*class_variable_declaration*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // constant_declaration ::= constant_declaration T_COMMA T_STRING T_EQUAL static_scalar 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int constNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int constNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String constName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	ConstantReference constId = new ConstantReference(constNameleft, constNameright, constName);
	list.add(new ASTNode[] {constId, expr});
	RESULT = list;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(81/*constant_declaration*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // constant_declaration ::= T_CONST T_STRING T_EQUAL static_scalar 
            {
              List RESULT = null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		PHPDocBlock value = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int constNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int constNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String constName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	List list = new LinkedList();
	ConstantReference constId = new ConstantReference(constNameleft, constNameright, constName);
	list.add(new ASTNode[] {constId, expr, value});
	RESULT = list;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(81/*constant_declaration*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // echo_expr_list ::= echo_expr_list T_COMMA expr 
            {
              List RESULT = null;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List exprList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	exprList.add(expr);
	RESULT = exprList;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(43/*echo_expr_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // echo_expr_list ::= expr 
            {
              List RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	List exprList = new LinkedList();
	exprList.add(expr);
	RESULT = exprList;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(43/*echo_expr_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // for_expr ::= 
            {
              List RESULT = null;
		
	RESULT = new LinkedList();

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(44/*for_expr*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // for_expr ::= non_empty_for_expr 
            {
              List RESULT = null;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		List exprList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = exprList;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(44/*for_expr*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // non_empty_for_expr ::= non_empty_for_expr T_COMMA expr 
            {
              List RESULT = null;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List exprList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	exprList.add(expr);
	RESULT = exprList;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(45/*non_empty_for_expr*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // non_empty_for_expr ::= expr 
            {
              List RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	List exprList = new LinkedList();
	exprList.add(expr);
	RESULT = exprList;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(45/*non_empty_for_expr*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // expr_without_variable ::= T_LIST T_OPEN_PARENTHESE assignment_list T_CLOSE_PARENTHESE T_EQUAL expr 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int varListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		List varList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int closeleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int closeright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object close = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	ListVariable vars = new ListVariable(startleft, closeright, varList);
	Assignment list = new Assignment(startleft, exprright, vars, Assignment.OP_EQUAL, expr);
	RESULT = list; 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$CompilerAstParser$do_action3(
    int                        CUP$CompilerAstParser$act_num,
    java_cup.runtime.lr_parser CUP$CompilerAstParser$parser,
    java.util.Stack            CUP$CompilerAstParser$stack,
    int                        CUP$CompilerAstParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CompilerAstParser$result;

      /* select the action based on the action number */
      switch (CUP$CompilerAstParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // expr_without_variable ::= variable T_EQUAL expr 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new Assignment(varleft, exprright, var, Assignment.OP_EQUAL, expr); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // expr_without_variable ::= variable T_EQUAL T_REFERENCE variable 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int reftokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int reftokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object reftoken = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int refvarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int refvarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression refvar = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new Assignment(varleft, refvarright, var, Assignment.OP_REF_EQUAL, refvar); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // expr_without_variable ::= variable T_EQUAL T_REFERENCE T_NEW class_name_reference ctor_arguments 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int reftokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int reftokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object reftoken = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int ctorleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int ctorright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		PHPCallArgumentsList ctor = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	if (ctor.sourceStart() == 0) {
		ctor.setStart(classNameright);
		ctor.setEnd(classNameright);
	}
	ClassInstanceCreation classInstanceCreation = new ClassInstanceCreation(startleft, ctorright, className, ctor);
	Assignment assignment = new Assignment(varleft, ctorright, var, Assignment.OP_REF_EQUAL, classInstanceCreation);
	RESULT = assignment;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // expr_without_variable ::= T_NEW class_name_reference ctor_arguments 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int ctorleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int ctorright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		PHPCallArgumentsList ctor = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	if (ctor.sourceStart() == 0) {
		ctor.setStart(classNameright);
		ctor.setEnd(classNameright);
	}
	ClassInstanceCreation classInstanceCreation = new ClassInstanceCreation(startleft, ctorright, className, ctor);
	RESULT = classInstanceCreation;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // expr_without_variable ::= T_CLONE expr 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	CloneExpression clone = new CloneExpression(startleft, exprright, expr);
	RESULT = clone;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // expr_without_variable ::= variable T_PLUS_EQUAL expr 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new Assignment(varleft, exprright, var , Assignment.OP_PLUS_EQUAL, expr); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // expr_without_variable ::= variable T_MINUS_EQUAL expr 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new Assignment(varleft, exprright, var , Assignment.OP_MINUS_EQUAL, expr); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // expr_without_variable ::= variable T_MUL_EQUAL expr 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new Assignment(varleft, exprright, var , Assignment.OP_MUL_EQUAL, expr); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // expr_without_variable ::= variable T_DIV_EQUAL expr 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 	
	RESULT = new Assignment(varleft, exprright, var , Assignment.OP_DIV_EQUAL, expr); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // expr_without_variable ::= variable T_CONCAT_EQUAL expr 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new Assignment(varleft, exprright, var , Assignment.OP_CONCAT_EQUAL, expr); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // expr_without_variable ::= variable T_MOD_EQUAL expr 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new Assignment(varleft, exprright, var , Assignment.OP_MOD_EQUAL, expr); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // expr_without_variable ::= variable T_AND_EQUAL expr 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new Assignment(varleft, exprright, var , Assignment.OP_AND_EQUAL, expr); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // expr_without_variable ::= variable T_OR_EQUAL expr 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new Assignment(varleft, exprright, var , Assignment.OP_OR_EQUAL, expr); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // expr_without_variable ::= variable T_XOR_EQUAL expr 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new Assignment(varleft, exprright, var , Assignment.OP_XOR_EQUAL, expr); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // expr_without_variable ::= variable T_SL_EQUAL expr 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new Assignment(varleft, exprright, var , Assignment.OP_SL_EQUAL, expr); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // expr_without_variable ::= variable T_SR_EQUAL expr 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new Assignment(varleft, exprright, var , Assignment.OP_SR_EQUAL, expr); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // expr_without_variable ::= rw_variable T_INC 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new PostfixExpression(varleft, tokenright, var , PostfixExpression.OP_INC); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // expr_without_variable ::= T_INC rw_variable 
            {
              Expression RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new PrefixExpression(tokenleft, varright, var , PrefixExpression.OP_INC); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // expr_without_variable ::= rw_variable T_DEC 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new PostfixExpression(varleft, tokenright, var , PostfixExpression.OP_DEC); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // expr_without_variable ::= T_DEC rw_variable 
            {
              Expression RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new PrefixExpression(tokenleft, varright, var , PrefixExpression.OP_DEC); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // expr_without_variable ::= expr T_BOOLEAN_OR expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_BOOL_OR, expr2); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // expr_without_variable ::= expr T_BOOLEAN_AND expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_BOOL_AND, expr2); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // expr_without_variable ::= expr T_LOGICAL_OR expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_STRING_OR, expr2); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // expr_without_variable ::= expr T_LOGICAL_AND expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_STRING_AND, expr2); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // expr_without_variable ::= expr T_LOGICAL_XOR expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_STRING_XOR, expr2);

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // expr_without_variable ::= expr T_OR expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_OR, expr2); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // expr_without_variable ::= expr T_REFERENCE expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_AND, expr2); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // expr_without_variable ::= expr T_KOVA expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_XOR, expr2); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // expr_without_variable ::= expr T_NEKUDA expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_CONCAT, expr2); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // expr_without_variable ::= expr T_PLUS expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_PLUS, expr2); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // expr_without_variable ::= expr T_MINUS expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_MINUS, expr2); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // expr_without_variable ::= expr T_TIMES expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_MUL, expr2); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // expr_without_variable ::= expr T_DIV expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_DIV, expr2); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // expr_without_variable ::= expr T_PRECENT expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_MOD, expr2); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // expr_without_variable ::= expr T_SL expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_SL, expr2); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // expr_without_variable ::= expr T_SR expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_SR, expr2); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // expr_without_variable ::= T_PLUS expr 
            {
              Expression RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new UnaryOperation(tokenleft, exprright, expr , UnaryOperation.OP_PLUS); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // expr_without_variable ::= T_MINUS expr 
            {
              Expression RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new UnaryOperation(tokenleft, exprright, expr , UnaryOperation.OP_MINUS); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // expr_without_variable ::= T_NOT expr 
            {
              Expression RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new UnaryOperation(tokenleft, exprright, expr , UnaryOperation.OP_NOT); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // expr_without_variable ::= T_TILDA expr 
            {
              Expression RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new UnaryOperation(tokenleft, exprright, expr , UnaryOperation.OP_TILDA); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // expr_without_variable ::= expr T_IS_IDENTICAL expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_IS_IDENTICAL, expr2); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // expr_without_variable ::= expr T_IS_NOT_IDENTICAL expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_IS_NOT_IDENTICAL, expr2); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // expr_without_variable ::= expr T_IS_EQUAL expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_IS_EQUAL, expr2); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // expr_without_variable ::= expr T_IS_NOT_EQUAL expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_IS_NOT_EQUAL, expr2); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // expr_without_variable ::= expr T_RGREATER expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_RGREATER, expr2); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // expr_without_variable ::= expr T_IS_SMALLER_OR_EQUAL expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_IS_SMALLER_OR_EQUAL, expr2); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // expr_without_variable ::= expr T_LGREATER expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_LGREATER, expr2); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // expr_without_variable ::= expr T_IS_GREATER_OR_EQUAL expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_IS_GREATER_OR_EQUAL, expr2); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // expr_without_variable ::= expr T_INSTANCEOF class_name_reference 
            {
              Expression RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new InstanceOfExpression(exprleft, classNameright, expr , className); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // expr_without_variable ::= T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = expr; 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // expr_without_variable ::= expr T_QUESTION_MARK expr T_NEKUDOTAIM expr 
            {
              Expression RESULT = null;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int ifTrueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int ifTrueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression ifTrue = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int ifFalseleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int ifFalseright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression ifFalse = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new ConditionalExpression(conditionleft, ifFalseright, condition , ifTrue, ifFalse); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // expr_without_variable ::= expr T_QUESTION_MARK T_NEKUDOTAIM expr 
            {
              Expression RESULT = null;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int ifFalseleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int ifFalseright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression ifFalse = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new ConditionalExpression(conditionleft, ifFalseright, condition , null, ifFalse); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // expr_without_variable ::= internal_functions_in_yacc 
            {
              Expression RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = expr;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // expr_without_variable ::= T_INT_CAST expr 
            {
              Expression RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new CastExpression(tokenleft, exprright, expr , CastExpression.TYPE_INT); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // expr_without_variable ::= T_DOUBLE_CAST expr 
            {
              Expression RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new CastExpression(tokenleft, exprright, expr , CastExpression.TYPE_REAL); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // expr_without_variable ::= T_STRING_CAST expr 
            {
              Expression RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new CastExpression(tokenleft, exprright, expr , CastExpression.TYPE_STRING); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // expr_without_variable ::= T_ARRAY_CAST expr 
            {
              Expression RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new CastExpression(tokenleft, exprright, expr , CastExpression.TYPE_ARRAY); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // expr_without_variable ::= T_OBJECT_CAST expr 
            {
              Expression RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new CastExpression(tokenleft, exprright, expr , CastExpression.TYPE_OBJECT); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // expr_without_variable ::= T_BOOL_CAST expr 
            {
              Expression RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new CastExpression(tokenleft, exprright, expr , CastExpression.TYPE_BOOL); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // expr_without_variable ::= T_UNSET_CAST expr 
            {
              Expression RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new CastExpression(tokenleft, exprright, expr , CastExpression.TYPE_UNSET); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // expr_without_variable ::= T_EXIT exit_expr 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	PHPCallArgumentsList list = new PHPCallArgumentsList();
	if (expr != null) {
		list.addNode(expr);
		list.setStart(expr.sourceStart());
		list.setEnd(expr.sourceEnd());
	} else {
		list.setStart(startright);
		list.setEnd(startright);
	}
	SimpleReference functionName = new SimpleReference(startleft, startright, start);
	PHPCallExpression result = new PHPCallExpression(startleft, exprright, null, functionName, list);
	RESULT = result;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // expr_without_variable ::= T_AT expr 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	IgnoreError ignoreError = new IgnoreError(startleft, exprright, expr);
	RESULT = ignoreError;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // expr_without_variable ::= scalar 
            {
              Expression RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression scalar = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = scalar; 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // expr_without_variable ::= T_ARRAY T_OPEN_PARENTHESE array_pair_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	Expression expr = new ArrayCreation(startleft, endright, list);
	RESULT = expr;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // expr_without_variable ::= T_BACKQUATE backticks_expr T_BACKQUATE 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	BackTickExpression backTickExpression = new BackTickExpression(startleft, endright, list);
	RESULT = backTickExpression;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // expr_without_variable ::= T_PRINT expr 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	PHPCallArgumentsList list = new PHPCallArgumentsList();
	if (expr != null) {
		list.addNode(expr);
		list.setStart(expr.sourceStart());
		list.setEnd(expr.sourceEnd());
	} else {
		list.setStart(startright);
		list.setEnd(startright);
	}
	SimpleReference name = new SimpleReference(startleft, startright, "print");
	PHPCallExpression result = new PHPCallExpression(startleft, exprright, null, name, list);
	RESULT = result;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // expr_without_variable ::= T_FUNCTION is_reference T_OPEN_PARENTHESE parameter_list T_CLOSE_PARENTHESE lexical_vars T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              Expression RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).right;
		PHPDocBlock s = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		List paramList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int varsListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int varsListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		List varsList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int blockStartleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int blockStartright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object blockStart = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int blockEndleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int blockEndright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object blockEnd = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = new LambdaFunctionDeclaration(sleft, blockEndright, paramList, varsList, 
		new Block(blockStartleft, blockEndright, list), isReference.booleanValue());

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // lexical_vars ::= 
            {
              List RESULT = null;
		
	RESULT = null;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(31/*lexical_vars*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // lexical_vars ::= T_USE T_OPEN_PARENTHESE lexical_var_list T_CLOSE_PARENTHESE 
            {
              List RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = list;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(31/*lexical_vars*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // lexical_var_list ::= lexical_var_list T_COMMA T_VARIABLE 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	VariableReference v = new VariableReference(varleft, varright, var);
	list.add(v);
	RESULT = list;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(32/*lexical_var_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // lexical_var_list ::= lexical_var_list T_COMMA T_REFERENCE T_VARIABLE 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int refleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object ref = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	list.add(new ReferenceExpression (refleft, varright, new VariableReference(varleft, varright, var)));
	RESULT = list;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(32/*lexical_var_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // lexical_var_list ::= T_VARIABLE 
            {
              List RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	List list = new LinkedList();
	list.add(new VariableReference(varleft, varright, var));
	RESULT = list;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(32/*lexical_var_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // lexical_var_list ::= T_REFERENCE T_VARIABLE 
            {
              List RESULT = null;
		int refleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object ref = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	List list = new LinkedList();
	list.add(new ReferenceExpression (refleft, varright, new VariableReference(varleft, varright, var)));
	RESULT = list;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(32/*lexical_var_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // function_call ::= namespace_name T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT = null;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		FullyQualifiedReference functionName = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		PHPCallArgumentsList parameters = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	parameters.setStart(startright);
	parameters.setEnd(endleft);
	RESULT = new PHPCallExpression(functionNameleft, endright, null, functionName, parameters); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(47/*function_call*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // function_call ::= T_NAMESPACE T_NS_SEPARATOR namespace_name T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT = null;
		int namespaceleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int namespaceright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		Object namespace = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		FullyQualifiedReference functionName = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		PHPCallArgumentsList parameters = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	parameters.setStart(startright);
	parameters.setEnd(endleft);
	if (functionName.getNamespace() != null) {
		functionName.getNamespace().setLocal(true);
	}
	RESULT = new PHPCallExpression(namespaceleft, endright, null, functionName, parameters); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(47/*function_call*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // function_call ::= T_NS_SEPARATOR namespace_name T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		FullyQualifiedReference functionName = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		PHPCallArgumentsList parameters = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	parameters.setStart(startright);
	parameters.setEnd(endleft);
	NamespaceReference namespace = functionName.getNamespace();
	if (namespace == null) {
		namespace = new NamespaceReference(sleft, sright, "");
		functionName.setNamespace(namespace);
	}
		namespace.setGlobal(true);
		namespace.setStart(namespace.sourceStart() - 1);
	RESULT = new PHPCallExpression(sleft, endright, null, functionName, parameters); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(47/*function_call*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // function_call ::= class_name T_PAAMAYIM_NEKUDOTAYIM T_STRING T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT = null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		PHPCallArgumentsList parameters = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	parameters.setStart(startright);
	parameters.setEnd(endleft);
	SimpleReference name = new SimpleReference(functionNameleft, functionNameright, functionName);
	StaticMethodInvocation staticMethodInvocation = new StaticMethodInvocation(classNameleft, endright, className, name, parameters); 
	RESULT = staticMethodInvocation;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(47/*function_call*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // function_call ::= class_name T_PAAMAYIM_NEKUDOTAYIM variable_without_objects T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT = null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int reflectionNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int reflectionNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Expression reflectionName = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		PHPCallArgumentsList parameters = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	parameters.setStart(startright);
	parameters.setEnd(endleft); 
	ReflectionStaticMethodInvocation functionInvocation = new ReflectionStaticMethodInvocation(classNameleft, endright, className, reflectionName, parameters); 
	RESULT = functionInvocation;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(47/*function_call*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // function_call ::= variable_class_name T_PAAMAYIM_NEKUDOTAYIM T_STRING T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT = null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		PHPCallArgumentsList parameters = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	parameters.setStart(startright);
	parameters.setEnd(endleft);
	SimpleReference name = new SimpleReference(functionNameleft, functionNameright, functionName);
	StaticMethodInvocation staticMethodInvocation = new StaticMethodInvocation(classNameleft, endright, className, name, parameters); 
	RESULT = staticMethodInvocation; 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(47/*function_call*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // function_call ::= variable_class_name T_PAAMAYIM_NEKUDOTAYIM variable_without_objects T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT = null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int reflectionNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int reflectionNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Expression reflectionName = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		PHPCallArgumentsList parameters = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	parameters.setStart(startright);
	parameters.setEnd(endleft); 
	ReflectionStaticMethodInvocation functionInvocation = new ReflectionStaticMethodInvocation(classNameleft, endright, className, reflectionName, parameters); 
	RESULT = functionInvocation; 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(47/*function_call*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // function_call ::= variable_without_objects T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT = null;
		int reflectionNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int reflectionNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Expression reflectionName = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		PHPCallArgumentsList parameters = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	parameters.setStart(startright);
	parameters.setEnd(endleft);
	RESULT = new ReflectionCallExpression(reflectionNameleft, endright, null, reflectionName, parameters); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(47/*function_call*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // class_name ::= T_STATIC 
            {
              Expression RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		PHPDocBlock s = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = new FullyQualifiedReference(sleft, sright, "static", null);

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(78/*class_name*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // class_name ::= namespace_name 
            {
              Expression RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		FullyQualifiedReference name = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = name;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(78/*class_name*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // class_name ::= T_NAMESPACE T_NS_SEPARATOR namespace_name 
            {
              Expression RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		FullyQualifiedReference name = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	if (name.getNamespace() != null) {
		name.getNamespace().setLocal(true);
	}
	RESULT = name;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(78/*class_name*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // class_name ::= T_NS_SEPARATOR namespace_name 
            {
              Expression RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		FullyQualifiedReference name = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	NamespaceReference namespace = name.getNamespace();
	if (namespace == null) {
		namespace = new NamespaceReference(sleft, sright, "");
		name.setNamespace(namespace);
	}
		namespace.setGlobal(true);
		namespace.setStart(namespace.sourceStart() - 1);
	RESULT = name;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(78/*class_name*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // fully_qualified_class_name ::= namespace_name 
            {
              TypeReference RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		FullyQualifiedReference name = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = name;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(79/*fully_qualified_class_name*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // fully_qualified_class_name ::= T_NAMESPACE T_NS_SEPARATOR namespace_name 
            {
              TypeReference RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		FullyQualifiedReference name = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	if (name.getNamespace() != null) {
		name.getNamespace().setLocal(true);
	}
	RESULT = name;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(79/*fully_qualified_class_name*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // fully_qualified_class_name ::= T_NS_SEPARATOR namespace_name 
            {
              TypeReference RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		FullyQualifiedReference name = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	NamespaceReference namespace = name.getNamespace();
	if (namespace == null) {
		namespace = new NamespaceReference(sleft, sright, "");
		name.setNamespace(namespace);
	}
		namespace.setGlobal(true);
		namespace.setStart(namespace.sourceStart() - 1);
	RESULT = name;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(79/*fully_qualified_class_name*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // class_name_reference ::= class_name 
            {
              Expression RESULT = null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = className;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(108/*class_name_reference*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // class_name_reference ::= dynamic_class_name_reference 
            {
              Expression RESULT = null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = className;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(108/*class_name_reference*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // dynamic_class_name_reference ::= base_variable T_OBJECT_OPERATOR object_property dynamic_class_name_variable_properties 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int firstVarPropertyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int firstVarPropertyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression firstVarProperty = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int propertyListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int propertyListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		List propertyList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	// then get the aggregated list of properties (->...->...->...)
	LinkedList list = (LinkedList) propertyList;
	list.addFirst(firstVarProperty);
	
	// now create the dispatch(es) nodes 
	Expression dispatcher = var;

	Iterator listIt = list.iterator();
	while (listIt.hasNext()) {
		Expression property = (Expression)listIt.next();
		dispatcher = parser.createDispatch(dispatcher, property);
	}	
	
	RESULT = dispatcher;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(109/*dynamic_class_name_reference*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // dynamic_class_name_reference ::= base_variable 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	 RESULT = var;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(109/*dynamic_class_name_reference*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // dynamic_class_name_variable_properties ::= dynamic_class_name_variable_properties dynamic_class_name_variable_property 
            {
              List RESULT = null;
		int variablesleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int variablesright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List variables = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	variables.add(var);
	RESULT = variables;	

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(111/*dynamic_class_name_variable_properties*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // dynamic_class_name_variable_properties ::= 
            {
              List RESULT = null;
		
	RESULT = new LinkedList();

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(111/*dynamic_class_name_variable_properties*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // dynamic_class_name_variable_property ::= T_OBJECT_OPERATOR object_property 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = var;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(112/*dynamic_class_name_variable_property*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // exit_expr ::= 
            {
              Expression RESULT = null;
		
	RESULT = null;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(48/*exit_expr*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // exit_expr ::= T_OPEN_PARENTHESE T_CLOSE_PARENTHESE 
            {
              Expression RESULT = null;
		
	RESULT = null;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(48/*exit_expr*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // exit_expr ::= T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE 
            {
              Expression RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		
	RESULT = expr;	

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(48/*exit_expr*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // backticks_expr ::= 
            {
              List RESULT = null;
		
	RESULT = new LinkedList();

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(70/*backticks_expr*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // backticks_expr ::= T_ENCAPSED_AND_WHITESPACE 
            {
              List RESULT = null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	List list = new LinkedList();
	Scalar scalar = new Scalar(stringleft, stringright, string, string == null ? Scalar.TYPE_UNKNOWN : Scalar.TYPE_STRING);
	list.add(scalar);
	RESULT = list;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(70/*backticks_expr*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$CompilerAstParser$do_action4(
    int                        CUP$CompilerAstParser$act_num,
    java_cup.runtime.lr_parser CUP$CompilerAstParser$parser,
    java.util.Stack            CUP$CompilerAstParser$stack,
    int                        CUP$CompilerAstParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CompilerAstParser$result;

      /* select the action based on the action number */
      switch (CUP$CompilerAstParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // backticks_expr ::= encaps_list 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = list;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(70/*backticks_expr*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // ctor_arguments ::= 
            {
              PHPCallArgumentsList RESULT = null;
		
	RESULT = new PHPCallArgumentsList();

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(49/*ctor_arguments*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // ctor_arguments ::= T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              PHPCallArgumentsList RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		PHPCallArgumentsList paramsList = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	paramsList.setStart(startright);
	paramsList.setEnd(endleft);
	RESULT = paramsList;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(49/*ctor_arguments*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // common_scalar ::= T_LNUMBER 
            {
              Expression RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, scalar, Scalar.TYPE_INT);
	RESULT = s;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(50/*common_scalar*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // common_scalar ::= T_DNUMBER 
            {
              Expression RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	Scalar s = new Scalar(scalarleft, scalarright, scalar, Scalar.TYPE_REAL);
	RESULT = s;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(50/*common_scalar*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // common_scalar ::= T_CONSTANT_ENCAPSED_STRING 
            {
              Expression RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	Scalar s = new Scalar(scalarleft, scalarright, scalar, Scalar.TYPE_STRING);
	RESULT = s;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(50/*common_scalar*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // common_scalar ::= T_LINE 
            {
              Expression RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, "__LINE__", Scalar.TYPE_SYSTEM);
	RESULT = s;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(50/*common_scalar*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // common_scalar ::= T_FILE 
            {
              Expression RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, "__FILE__", Scalar.TYPE_SYSTEM);
	RESULT = s;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(50/*common_scalar*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // common_scalar ::= T_DIR 
            {
              Expression RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, "__DIR__", Scalar.TYPE_SYSTEM);
	RESULT = s;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(50/*common_scalar*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // common_scalar ::= T_CLASS_C 
            {
              Expression RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, "__CLASS__", Scalar.TYPE_SYSTEM);
	RESULT = s;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(50/*common_scalar*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // common_scalar ::= T_METHOD_C 
            {
              Expression RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, "__METHOD__", Scalar.TYPE_SYSTEM);
	RESULT = s;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(50/*common_scalar*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // common_scalar ::= T_FUNC_C 
            {
              Expression RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, "__FUNCTION__", Scalar.TYPE_SYSTEM);
	RESULT = s;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(50/*common_scalar*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // common_scalar ::= T_NS_C 
            {
              Expression RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = new Scalar(scalarleft, scalarright, "__NAMESPACE__", Scalar.TYPE_SYSTEM);

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(50/*common_scalar*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // common_scalar ::= T_START_HEREDOC T_ENCAPSED_AND_WHITESPACE T_END_HEREDOC 
            {
              Expression RESULT = null;
		int labelleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String label = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	List list = new LinkedList();
	list.add(new Scalar(stringleft, stringright, string, string == null ? Scalar.TYPE_UNKNOWN : Scalar.TYPE_STRING));
	RESULT = new Quote(labelleft, eright, list, label.charAt(0) == '\'' ? Quote.QT_NOWDOC : Quote.QT_HEREDOC);

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(50/*common_scalar*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // common_scalar ::= T_START_HEREDOC T_END_HEREDOC 
            {
              Expression RESULT = null;
		int labelleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		String label = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = new Quote(labelleft, eright, new LinkedList(), label.charAt(0) == '\'' ? Quote.QT_NOWDOC : Quote.QT_HEREDOC);

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(50/*common_scalar*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // static_scalar ::= common_scalar 
            {
              Expression RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression scalar = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = scalar;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(51/*static_scalar*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // static_scalar ::= namespace_name 
            {
              Expression RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		FullyQualifiedReference name = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	if (name.getNamespace() == null) {
		RESULT = new Scalar(nameleft, nameright, name.getName(), Scalar.TYPE_STRING);
	} else {
		RESULT = name;
	}

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(51/*static_scalar*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // static_scalar ::= T_NAMESPACE T_NS_SEPARATOR namespace_name 
            {
              Expression RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		FullyQualifiedReference name = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	if (name.getNamespace() != null) {
		name.getNamespace().setLocal(true);
	}
	RESULT = name;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(51/*static_scalar*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // static_scalar ::= T_NS_SEPARATOR namespace_name 
            {
              Expression RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		FullyQualifiedReference name = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	NamespaceReference namespace = name.getNamespace();
	if (namespace == null) {
		namespace = new NamespaceReference(sleft, sright, "");
		name.setNamespace(namespace);
	}
		namespace.setGlobal(true);
		namespace.setStart(namespace.sourceStart() - 1);
	RESULT = name;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(51/*static_scalar*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // static_scalar ::= T_PLUS static_scalar 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	UnaryOperation op = new UnaryOperation(startleft, exprright, expr, UnaryOperation.OP_PLUS);
	RESULT = op;	

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(51/*static_scalar*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // static_scalar ::= T_MINUS static_scalar 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	UnaryOperation op = new UnaryOperation(startleft, exprright, expr, UnaryOperation.OP_MINUS);
	RESULT = op;	

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(51/*static_scalar*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // static_scalar ::= T_ARRAY T_OPEN_PARENTHESE static_array_pair_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	ArrayCreation array = new ArrayCreation(startleft, endright, list);
	RESULT = array;	

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(51/*static_scalar*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // static_scalar ::= static_class_constant 
            {
              Expression RESULT = null;
		int classConstantleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int classConstantright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		StaticConstantAccess classConstant = (StaticConstantAccess)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = classConstant;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(51/*static_scalar*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // static_class_constant ::= class_name T_PAAMAYIM_NEKUDOTAYIM T_STRING 
            {
              StaticConstantAccess RESULT = null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	ConstantReference vname = new ConstantReference(varNameleft, varNameright, varName);
	StaticConstantAccess constant = new StaticConstantAccess(classNameleft, varNameright, className, vname); 
	RESULT = constant;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(113/*static_class_constant*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // scalar ::= T_STRING_VARNAME 
            {
              Expression RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	// TODO: check if this is a scalar
	Scalar s = new Scalar(scalarleft, scalarright, scalar, Scalar.TYPE_STRING);
	RESULT = s;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(52/*scalar*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // scalar ::= namespace_name 
            {
              Expression RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		FullyQualifiedReference name = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	if (name.getNamespace() == null) {
		RESULT = new Scalar(nameleft, nameright, name.getName(), Scalar.TYPE_STRING);
	} else {
		RESULT = name;
	}

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(52/*scalar*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // scalar ::= T_NAMESPACE T_NS_SEPARATOR namespace_name 
            {
              Expression RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		FullyQualifiedReference name = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	if (name.getNamespace() != null) {
		name.getNamespace().setLocal(true);
	}
	RESULT = name;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(52/*scalar*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // scalar ::= T_NS_SEPARATOR namespace_name 
            {
              Expression RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		FullyQualifiedReference name = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	NamespaceReference namespace = name.getNamespace();
	if (namespace == null) {
		namespace = new NamespaceReference(sleft, sright, "");
		name.setNamespace(namespace);
	}
		namespace.setGlobal(true);
		namespace.setStart(namespace.sourceStart() - 1);
	RESULT = name;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(52/*scalar*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // scalar ::= common_scalar 
            {
              Expression RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression scalar = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = scalar;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(52/*scalar*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // scalar ::= T_QUATE encaps_list T_QUATE 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	Quote quote = new Quote(startleft, endright, list, Quote.QT_QUOTE);
	RESULT = quote;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(52/*scalar*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // scalar ::= T_START_HEREDOC encaps_list T_END_HEREDOC 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	Quote hereDoc = new Quote(startleft, endright, list, Quote.QT_HEREDOC);
	RESULT = hereDoc;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(52/*scalar*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // static_array_pair_list ::= 
            {
              List RESULT = null;
		
	List list = new LinkedList();
	RESULT = list;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(53/*static_array_pair_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // static_array_pair_list ::= non_empty_static_array_pair_list possible_comma 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		
	RESULT = list;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(53/*static_array_pair_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // possible_comma ::= 
            {
              Object RESULT = null;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(54/*possible_comma*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // possible_comma ::= T_COMMA 
            {
              Object RESULT = null;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(54/*possible_comma*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // non_empty_static_array_pair_list ::= non_empty_static_array_pair_list T_COMMA static_scalar T_DOUBLE_ARROW static_scalar 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int keyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	ArrayElement element = new ArrayElement(keyleft, valueright, key, value);
	list.add(element);
	RESULT = list;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(55/*non_empty_static_array_pair_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // non_empty_static_array_pair_list ::= non_empty_static_array_pair_list T_COMMA static_scalar 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	ArrayElement element = new ArrayElement(valueleft, valueright, value);
	list.add(element);
	RESULT = list;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(55/*non_empty_static_array_pair_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // non_empty_static_array_pair_list ::= static_scalar T_DOUBLE_ARROW static_scalar 
            {
              List RESULT = null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	List list = new LinkedList();
	ArrayElement element = new ArrayElement(keyleft, valueright, key, value);
	list.add(element);
	RESULT = list;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(55/*non_empty_static_array_pair_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // non_empty_static_array_pair_list ::= static_scalar 
            {
              List RESULT = null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	List list = new LinkedList();
	ArrayElement element = new ArrayElement(valueleft, valueright, value);
	list.add(element);
	RESULT = list;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(55/*non_empty_static_array_pair_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // expr ::= r_variable 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 RESULT = var; 
              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(56/*expr*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // expr ::= expr_without_variable 
            {
              Expression RESULT = null;
		int ewvleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int ewvright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression ewv = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 RESULT = ewv; 
              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(56/*expr*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // r_variable ::= variable 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 RESULT = var; 
              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(101/*r_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // w_variable ::= variable 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 RESULT = var; 
              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(77/*w_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // rw_variable ::= variable 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 RESULT = var; 
              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(103/*rw_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // variable ::= base_variable_with_function_calls T_OBJECT_OPERATOR object_property method_or_not variable_properties 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int memberPropertyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int memberPropertyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression memberProperty = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		PHPCallArgumentsList paramsList = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int propertyListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int propertyListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		List propertyList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	// get the last property 
	Expression firstVarProperty = null;
	if (paramsList == null) {
		firstVarProperty = memberProperty;
	} else {
		if (memberProperty.getClass().equals(SimpleReference.class)) {
			firstVarProperty = new PHPCallExpression(memberPropertyleft, paramsListright, null, (SimpleReference)memberProperty, paramsList);
		} else {
			firstVarProperty = new ReflectionCallExpression(memberPropertyleft, paramsListright, null, memberProperty, paramsList);
		}
	}

	// then get the aggregated list of properties (->...->...->...)
	LinkedList list = (LinkedList) propertyList;
	list.addFirst(firstVarProperty);
	
	// now create the dispatch(es) nodes 
	Expression dispatcher = var;
	
	Iterator listIt = list.iterator();
	while (listIt.hasNext()) {
		Expression property = (Expression)listIt.next();
		dispatcher = parser.createDispatch(dispatcher, property);
	}

	RESULT = dispatcher;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(91/*variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // variable ::= base_variable_with_function_calls 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = var; 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(91/*variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // variable_properties ::= variable_properties variable_property 
            {
              List RESULT = null;
		int variablesleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int variablesright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List variables = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int variablePropertyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int variablePropertyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression variableProperty = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	variables.add(variableProperty);
	RESULT = variables;	

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(89/*variable_properties*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // variable_properties ::= 
            {
              List RESULT = null;
		
	RESULT = new LinkedList();

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(89/*variable_properties*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 348: // variable_property ::= T_OBJECT_OPERATOR object_property method_or_not 
            {
              Expression RESULT = null;
		int memberPropertyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int memberPropertyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression memberProperty = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		PHPCallArgumentsList paramsList = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	Expression result = null;
	if (paramsList == null) {
		result = memberProperty;
	} else {
		if (memberProperty.getClass().equals(SimpleReference.class)) {
			result = new PHPCallExpression(memberPropertyleft, paramsListright, null, (SimpleReference)memberProperty, paramsList);
		} else {
			result = new ReflectionCallExpression(memberPropertyleft, paramsListright, null, memberProperty, paramsList);
		}
	}
	RESULT = result;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(105/*variable_property*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 349: // method_or_not ::= T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              PHPCallArgumentsList RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		PHPCallArgumentsList paramsList = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	paramsList.setStart(startright);
	paramsList.setEnd(endleft);
	RESULT = paramsList;	

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(88/*method_or_not*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 350: // method_or_not ::= 
            {
              PHPCallArgumentsList RESULT = null;
		
	RESULT = null;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(88/*method_or_not*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 351: // variable_without_objects ::= reference_variable 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = var; 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(104/*variable_without_objects*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 352: // variable_without_objects ::= simple_indirect_reference reference_variable 
            {
              Expression RESULT = null;
		int ref_countleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int ref_countright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Integer ref_count = (Integer)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	// the ref_count counts the number of reflection (DOLLAR sign) so now we should 
	// accomulate the dolars into reflection variables
	Expression finalVar = var;
	for (int i=0; i<ref_count.intValue(); i++) {
		finalVar = new ReflectionVariableReference(ref_countright - i - 1, varright, finalVar);				
	}
	RESULT = finalVar;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(104/*variable_without_objects*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 353: // static_member ::= class_name T_PAAMAYIM_NEKUDOTAYIM variable_without_objects 
            {
              StaticFieldAccess RESULT = null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	StaticFieldAccess staticFieldAccess = new StaticFieldAccess(classNameleft, varright, className, var);
	RESULT = staticFieldAccess;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(106/*static_member*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 354: // static_member ::= variable_class_name T_PAAMAYIM_NEKUDOTAYIM variable_without_objects 
            {
              StaticFieldAccess RESULT = null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	StaticFieldAccess staticFieldAccess = new StaticFieldAccess(classNameleft, varright, className, var);
	RESULT = staticFieldAccess;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(106/*static_member*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 355: // variable_class_name ::= reference_variable 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = var;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(58/*variable_class_name*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 356: // base_variable_with_function_calls ::= base_variable 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 RESULT = var; 
              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(114/*base_variable_with_function_calls*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 357: // base_variable_with_function_calls ::= function_call 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 RESULT = var; 
              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(114/*base_variable_with_function_calls*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 358: // base_variable ::= reference_variable 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = var; 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(110/*base_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 359: // base_variable ::= simple_indirect_reference reference_variable 
            {
              Expression RESULT = null;
		int ref_countleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int ref_countright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Integer ref_count = (Integer)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	// the ref_count counts the number of reflection (DOLLAR sign) so now we should 
	// accomulate the dolars into reflection variables
	Expression finalVar = var;
	for (int i=0; i<ref_count.intValue(); i++) {
		finalVar = new ReflectionVariableReference(ref_countright - i - 1, varright, finalVar);				
	}
	RESULT = finalVar;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(110/*base_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 360: // base_variable ::= static_member 
            {
              Expression RESULT = null;
		int staticFieldAccessleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int staticFieldAccessright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		StaticFieldAccess staticFieldAccess = (StaticFieldAccess)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = staticFieldAccess;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(110/*base_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 361: // reference_variable ::= reference_variable T_OPEN_RECT dim_offset T_CLOSE_RECT 
            {
              Expression RESULT = null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Expression varName = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	Expression var;
	if(varName.getKind() == ExpressionConstants.E_IDENTIFIER) { // VariableReference - $a
		var = new ArrayVariableReference(varNameleft, endright, ((SimpleReference)varName).getName(), index, ArrayVariableReference.VARIABLE_ARRAY);
	} else {
		var = new ReflectionArrayVariableReference(varNameleft, endright, varName, index, ReflectionArrayVariableReference.VARIABLE_ARRAY);
	}
	RESULT = var;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(57/*reference_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 362: // reference_variable ::= reference_variable T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              Expression RESULT = null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Expression varName = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	Expression var;
	if(varName.getKind() == ExpressionConstants.E_IDENTIFIER) { // VariableReference - $a
		var = new ArrayVariableReference(varNameleft, endright, ((SimpleReference)varName).getName(), index, ArrayVariableReference.VARIABLE_HASHTABLE);
	} else {
		var = new ReflectionArrayVariableReference(varNameleft, endright, varName, index, ReflectionArrayVariableReference.VARIABLE_HASHTABLE);
	}
	RESULT = var;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(57/*reference_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 363: // reference_variable ::= compound_variable 
            {
              Expression RESULT = null;
		int comp_varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int comp_varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression comp_var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 RESULT = comp_var; 
              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(57/*reference_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 364: // compound_variable ::= tracked_variable 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		VariableReference var = (VariableReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 RESULT = var; 
              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(59/*compound_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 365: // compound_variable ::= T_DOLLAR T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	ReflectionVariableReference var = new ReflectionVariableReference(startleft, endright, expr);
	RESULT = var;	 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(59/*compound_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 366: // dim_offset ::= 
            {
              Expression RESULT = null;
		 
	RESULT = null;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(60/*dim_offset*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 367: // dim_offset ::= expr 
            {
              Expression RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = expr; 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(60/*dim_offset*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 368: // object_property ::= object_dim_list 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = var; 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(61/*object_property*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 369: // object_property ::= variable_without_objects 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = var;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(61/*object_property*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 370: // object_dim_list ::= object_dim_list T_OPEN_RECT dim_offset T_CLOSE_RECT 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	Expression varArray;
	if(var.getKind() == ExpressionConstants.E_IDENTIFIER) { // VariableReference - $a
		varArray = new ArrayVariableReference(varleft, endright, ((SimpleReference)var).getName(), index, ArrayVariableReference.VARIABLE_ARRAY);
	} else {
		varArray = new ReflectionArrayVariableReference(varleft, endright, var, index, ReflectionArrayVariableReference.VARIABLE_ARRAY);
	}
	RESULT = varArray;	

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(62/*object_dim_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 371: // object_dim_list ::= object_dim_list T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	Expression varArray;
	if(var.getKind() == ExpressionConstants.E_IDENTIFIER) { // VariableReference - $a
		varArray = new ArrayVariableReference(varleft, endright, ((SimpleReference)var).getName(), index, ArrayVariableReference.VARIABLE_HASHTABLE);
	} else {
		varArray = new ReflectionArrayVariableReference(varleft, endright, var, index, ReflectionArrayVariableReference.VARIABLE_HASHTABLE);
	}
	RESULT = varArray;	

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(62/*object_dim_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 372: // object_dim_list ::= variable_name 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 RESULT = var; 
              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(62/*object_dim_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 373: // variable_name ::= string_st 
            {
              Expression RESULT = null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = new SimpleReference(varNameleft, varNameright, varName); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(63/*variable_name*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 374: // variable_name ::= T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = new ReflectionVariableReference(startleft, endright, expr); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(63/*variable_name*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 375: // simple_indirect_reference ::= T_DOLLAR 
            {
              Integer RESULT = null;
		
	RESULT = new Integer(1);

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(64/*simple_indirect_reference*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 376: // simple_indirect_reference ::= simple_indirect_reference T_DOLLAR 
            {
              Integer RESULT = null;
		int refleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Integer ref = (Integer)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		
	RESULT = new Integer(1 + ref.intValue());

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(64/*simple_indirect_reference*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 377: // assignment_list ::= assignment_list T_COMMA assignment_list_element 
            {
              List RESULT = null;
		int listElementsleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int listElementsright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List listElements = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int elementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int elementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression element = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	if (element != null) {
		listElements.add(element);
	}
	RESULT = listElements;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(65/*assignment_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 378: // assignment_list ::= assignment_list_element 
            {
              List RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	List listElements = new LinkedList();
	if (var != null) {
		listElements.add(var);	
	}
	RESULT = listElements;
	;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(65/*assignment_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 379: // assignment_list_element ::= variable 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = var;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(66/*assignment_list_element*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 380: // assignment_list_element ::= T_LIST T_OPEN_PARENTHESE assignment_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int varListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List varList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	ListVariable vars = new ListVariable(startleft, endright, varList);
	RESULT = vars;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(66/*assignment_list_element*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 381: // assignment_list_element ::= 
            {
              Expression RESULT = null;
		
	RESULT = null;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(66/*assignment_list_element*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 382: // array_pair_list ::= 
            {
              List RESULT = null;
		
	List list = new LinkedList();
	RESULT = list;	

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(67/*array_pair_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 383: // array_pair_list ::= non_empty_array_pair_list possible_comma 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		
	RESULT = list;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(67/*array_pair_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 384: // non_empty_array_pair_list ::= non_empty_array_pair_list T_COMMA expr T_DOUBLE_ARROW expr 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int keyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	ArrayElement element = new ArrayElement(keyleft, valueright, key, value);
	list.add(element);
	RESULT = list;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(68/*non_empty_array_pair_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 385: // non_empty_array_pair_list ::= non_empty_array_pair_list T_COMMA expr 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	ArrayElement element = new ArrayElement(exprleft, exprright, expr);
	list.add(element);
	RESULT = list;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(68/*non_empty_array_pair_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 386: // non_empty_array_pair_list ::= expr T_DOUBLE_ARROW expr 
            {
              List RESULT = null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	List list = new LinkedList();
	ArrayElement element = new ArrayElement(keyleft, valueright, key, value);
	list.add(element);
	RESULT = list;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(68/*non_empty_array_pair_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 387: // non_empty_array_pair_list ::= expr 
            {
              List RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	List list = new LinkedList();
	ArrayElement element = new ArrayElement(exprleft, exprright, expr);
	list.add(element);
	RESULT = list;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(68/*non_empty_array_pair_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 388: // non_empty_array_pair_list ::= non_empty_array_pair_list T_COMMA expr T_DOUBLE_ARROW T_REFERENCE w_variable 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int keyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	ReferenceExpression value = new ReferenceExpression(startleft, varright, var);
	ArrayElement element = new ArrayElement(keyleft, varright, key, value);	
	list.add(element);
	RESULT = list;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(68/*non_empty_array_pair_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 389: // non_empty_array_pair_list ::= non_empty_array_pair_list T_COMMA T_REFERENCE w_variable 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	ReferenceExpression ref = new ReferenceExpression(startleft, varright, var);
	ArrayElement element = new ArrayElement(startleft, varright, ref);	
	list.add(element);
	RESULT = list;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(68/*non_empty_array_pair_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 390: // non_empty_array_pair_list ::= expr T_DOUBLE_ARROW T_REFERENCE w_variable 
            {
              List RESULT = null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	List list = new LinkedList();
	ReferenceExpression value = new ReferenceExpression(startleft, varright, var);
	ArrayElement element = new ArrayElement(keyleft, varright, key, value);	
	list.add(element);
	RESULT = list;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(68/*non_empty_array_pair_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 391: // non_empty_array_pair_list ::= T_REFERENCE w_variable 
            {
              List RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	List list = new LinkedList();
	ReferenceExpression ref = new ReferenceExpression(startleft, varright, var);
	ArrayElement element = new ArrayElement(startleft, varright, ref);	
	list.add(element);
	RESULT = list;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(68/*non_empty_array_pair_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 392: // encaps_list ::= encaps_list encaps_var 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	list.add(var);
	RESULT = list;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(69/*encaps_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 393: // encaps_list ::= encaps_list T_ENCAPSED_AND_WHITESPACE 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	Scalar scalar = new Scalar(stringleft, stringright, string, string == null ? Scalar.TYPE_UNKNOWN : Scalar.TYPE_STRING);
	list.add(scalar);
	RESULT = list;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(69/*encaps_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 394: // encaps_list ::= encaps_var 
            {
              List RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	List list = new LinkedList();
	list.add(var);
	RESULT = list;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(69/*encaps_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 395: // encaps_list ::= T_ENCAPSED_AND_WHITESPACE encaps_var 
            {
              List RESULT = null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	List list = new LinkedList();
	Scalar scalar = new Scalar(stringleft, stringright, string, string == null ? Scalar.TYPE_UNKNOWN : Scalar.TYPE_STRING);
	list.add(scalar);
	list.add(var);
	RESULT = list;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(69/*encaps_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 396: // encaps_var ::= tracked_variable 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		VariableReference var = (VariableReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = var;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(71/*encaps_var*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 397: // encaps_var ::= tracked_variable T_OPEN_RECT encaps_var_offset T_CLOSE_RECT 
            {
              Expression RESULT = null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		VariableReference varName = (VariableReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	VariableReference var = new ArrayVariableReference(varNameleft, endright, varName.getName(), index, ArrayVariableReference.VARIABLE_ARRAY);
	RESULT = var;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(71/*encaps_var*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 398: // encaps_var ::= tracked_variable T_OBJECT_OPERATOR string_st 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		VariableReference var = (VariableReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	VariableReference property = new VariableReference(stringleft, stringright, string);
	Expression dispatch = parser.createDispatch(var, property);
	RESULT = dispatch;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(71/*encaps_var*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 399: // encaps_var ::= T_DOLLAR_OPEN_CURLY_BRACES expr T_CURLY_CLOSE 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	ReflectionVariableReference var = new ReflectionVariableReference(startleft, endright, expr);
	RESULT = var;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(71/*encaps_var*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$CompilerAstParser$do_action5(
    int                        CUP$CompilerAstParser$act_num,
    java_cup.runtime.lr_parser CUP$CompilerAstParser$parser,
    java.util.Stack            CUP$CompilerAstParser$stack,
    int                        CUP$CompilerAstParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CompilerAstParser$result;

      /* select the action based on the action number */
      switch (CUP$CompilerAstParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 400: // encaps_var ::= T_DOLLAR_OPEN_CURLY_BRACES T_STRING_VARNAME T_OPEN_RECT expr T_CLOSE_RECT T_CURLY_CLOSE 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	VariableReference indexedVar = new ArrayVariableReference(startleft, endright, varName, index, ArrayVariableReference.VARIABLE_ARRAY);
	RESULT = indexedVar;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(71/*encaps_var*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 401: // encaps_var ::= T_CURLY_OPEN_WITH_DOLAR variable T_CURLY_CLOSE 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	ReflectionVariableReference ref = new ReflectionVariableReference(startleft, endright, var);
	RESULT = ref;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(71/*encaps_var*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 402: // encaps_var_offset ::= string_st 
            {
              Expression RESULT = null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	Scalar scalar = new Scalar(stringleft,stringright, string, Scalar.TYPE_STRING);
	RESULT = scalar;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(72/*encaps_var_offset*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 403: // encaps_var_offset ::= T_NUM_STRING 
            {
              Expression RESULT = null;
		int numleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	Scalar scalar = new Scalar(numleft,numright, num, Scalar.TYPE_REAL);
	RESULT = scalar;	

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(72/*encaps_var_offset*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 404: // encaps_var_offset ::= tracked_variable 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		VariableReference var = (VariableReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = var;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(72/*encaps_var_offset*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 405: // internal_functions_in_yacc ::= T_EMPTY T_OPEN_PARENTHESE variable T_CLOSE_PARENTHESE 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int openParleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int openParright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object openPar = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	SimpleReference name = new SimpleReference(startleft, startright, "empty");
	PHPCallArgumentsList varList = new PHPCallArgumentsList(openParright, endleft);
	varList.addNode(var);
	PHPCallExpression result = new PHPCallExpression(startleft, endright, null, name, varList);
	RESULT = result;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(73/*internal_functions_in_yacc*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 406: // internal_functions_in_yacc ::= T_INCLUDE expr 
            {
              Expression RESULT = null;
		int includeleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int includeright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		String include = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	Include result = new Include(includeleft, exprright, expr, Include.IT_INCLUDE);
	RESULT = result;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(73/*internal_functions_in_yacc*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 407: // internal_functions_in_yacc ::= T_INCLUDE_ONCE expr 
            {
              Expression RESULT = null;
		int includeleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int includeright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		String include = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	Include result = new Include(includeleft, exprright, expr, Include.IT_INCLUDE_ONCE);
	RESULT = result;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(73/*internal_functions_in_yacc*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 408: // internal_functions_in_yacc ::= T_EVAL T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int openParleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int openParright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object openPar = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	SimpleReference name = new SimpleReference(startleft, startright, "eval");
	PHPCallArgumentsList exprList = new PHPCallArgumentsList(openParright, endleft);
	exprList.addNode(expr);
	PHPCallExpression result = new PHPCallExpression(startleft, endright, null, name, exprList);
	RESULT = result;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(73/*internal_functions_in_yacc*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 409: // internal_functions_in_yacc ::= T_REQUIRE expr 
            {
              Expression RESULT = null;
		int includeleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int includeright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		String include = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	Include result = new Include(includeleft, exprright, expr, Include.IT_REQUIRE);
	RESULT = result;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(73/*internal_functions_in_yacc*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 410: // tracked_variable ::= T_VARIABLE 
            {
              VariableReference RESULT = null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = new VariableReference(varNameleft, varNameright, varName, PHPVariableKind.LOCAL);

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(107/*tracked_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 411: // string_st ::= T_STRING 
            {
              String RESULT = null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 RESULT = value; 
              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(74/*string_st*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

