
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Wed Jul 10 15:09:26 IST 2013
//----------------------------------------------------

package org.eclipse.php.internal.core.compiler.ast.parser.php54;

import java.util.*;
import org.eclipse.dltk.ast.*;
import org.eclipse.dltk.ast.declarations.*;
import org.eclipse.dltk.ast.expressions.*;
import org.eclipse.dltk.ast.references.*;
import org.eclipse.dltk.ast.statements.*;
import org.eclipse.php.internal.core.compiler.ast.nodes.*;
import org.eclipse.php.internal.core.compiler.ast.parser.*;
import org.eclipse.php.internal.core.ast.scanner.php54.*;

/** CUP v0.10k generated parser.
  * @version Wed Jul 10 15:09:26 IST 2013
  */
public class CompilerAstParser extends AbstractASTParser {

  /** Default constructor. */
  public CompilerAstParser() {super();}

  /** Constructor which sets the default scanner. */
  public CompilerAstParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u01dc\000\002\003\003\000\002\002\004\000\002\004" +
    "\003\000\002\005\003\000\002\005\005\000\002\010\004" +
    "\000\002\010\002\000\002\011\004\000\002\011\002\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\012\006\000\002\220\002\000\002\012\006\000\002\221" +
    "\002\000\002\012\005\000\002\012\005\000\002\012\004" +
    "\000\002\126\003\000\002\126\003\000\002\127\005\000" +
    "\002\127\003\000\002\007\005\000\002\007\003\000\002" +
    "\006\003\000\002\006\005\000\002\006\004\000\002\006" +
    "\006\000\002\014\004\000\002\014\002\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\015\006\000" +
    "\002\013\003\000\002\013\004\000\002\013\003\000\002" +
    "\013\003\000\002\222\002\000\002\016\006\000\002\016" +
    "\011\000\002\016\014\000\002\016\007\000\002\016\011" +
    "\000\002\016\013\000\002\016\007\000\002\016\004\000" +
    "\002\016\005\000\002\016\004\000\002\016\005\000\002" +
    "\016\004\000\002\016\005\000\002\016\005\000\002\016" +
    "\005\000\002\016\005\000\002\016\005\000\002\016\003" +
    "\000\002\016\004\000\002\016\005\000\002\016\007\000" +
    "\002\016\012\000\002\016\012\000\002\016\007\000\002" +
    "\016\003\000\002\016\017\000\002\016\005\000\002\016" +
    "\005\000\002\137\003\000\002\137\002\000\002\140\003" +
    "\000\002\140\004\000\002\141\012\000\002\017\003\000" +
    "\002\017\005\000\002\020\003\000\002\021\003\000\002" +
    "\021\005\000\002\134\003\000\002\135\003\000\002\054" +
    "\002\000\002\054\003\000\002\223\002\000\002\224\002" +
    "\000\002\142\013\000\002\172\005\000\002\172\003\000" +
    "\002\225\002\000\002\226\002\000\002\143\014\000\002" +
    "\227\002\000\002\143\011\000\002\173\003\000\002\173" +
    "\002\000\002\171\003\000\002\171\003\000\002\144\003" +
    "\000\002\144\004\000\002\144\004\000\002\144\003\000" +
    "\002\145\002\000\002\145\004\000\002\145\004\000\002" +
    "\115\003\000\002\116\002\000\002\116\004\000\002\146" +
    "\002\000\002\146\004\000\002\147\003\000\002\147\005" +
    "\000\002\147\005\000\002\147\003\000\002\022\002\000" +
    "\002\022\004\000\002\023\003\000\002\023\004\000\002" +
    "\024\003\000\002\024\006\000\002\025\003\000\002\025" +
    "\006\000\002\026\003\000\002\026\006\000\002\027\005" +
    "\000\002\027\007\000\002\030\005\000\002\030\006\000" +
    "\002\030\006\000\002\030\007\000\002\031\002\000\002" +
    "\031\007\000\002\031\006\000\002\032\003\000\002\032" +
    "\003\000\002\033\003\000\002\033\006\000\002\034\002" +
    "\000\002\034\010\000\002\035\002\000\002\035\011\000" +
    "\002\036\002\000\002\036\004\000\002\037\002\000\002" +
    "\037\005\000\002\040\003\000\002\040\002\000\002\043" +
    "\003\000\002\043\005\000\002\043\004\000\002\044\004" +
    "\000\002\044\005\000\002\044\006\000\002\044\007\000" +
    "\002\044\003\000\002\150\002\000\002\150\003\000\002" +
    "\150\003\000\002\150\003\000\002\045\003\000\002\045" +
    "\002\000\002\046\003\000\002\046\003\000\002\046\004" +
    "\000\002\046\005\000\002\046\005\000\002\046\006\000" +
    "\002\047\005\000\002\047\003\000\002\050\003\000\002" +
    "\050\004\000\002\050\006\000\002\051\005\000\002\051" +
    "\007\000\002\051\003\000\002\051\005\000\002\052\004" +
    "\000\002\052\002\000\002\053\005\000\002\053\004\000" +
    "\002\230\002\000\002\231\002\000\002\053\014\000\002" +
    "\053\003\000\002\053\003\000\002\053\003\000\002\174" +
    "\005\000\002\175\003\000\002\175\005\000\002\176\003" +
    "\000\002\176\005\000\002\177\002\000\002\177\003\000" +
    "\002\200\003\000\002\200\004\000\002\201\004\000\002" +
    "\201\004\000\002\202\005\000\002\203\003\000\002\203" +
    "\005\000\002\204\003\000\002\204\003\000\002\205\005" +
    "\000\002\206\006\000\002\206\005\000\002\207\002\000" +
    "\002\207\003\000\002\125\003\000\002\125\005\000\002" +
    "\125\002\000\002\152\003\000\002\152\003\000\002\124" +
    "\002\000\002\124\003\000\002\130\003\000\002\130\004" +
    "\000\002\131\003\000\002\131\003\000\002\131\003\000" +
    "\002\131\003\000\002\131\003\000\002\131\003\000\002" +
    "\122\005\000\002\122\007\000\002\122\003\000\002\122" +
    "\005\000\002\210\004\000\002\210\003\000\002\211\006" +
    "\000\002\211\005\000\002\212\004\000\002\212\003\000" +
    "\002\212\003\000\002\213\002\000\002\213\003\000\002" +
    "\057\005\000\002\057\003\000\002\123\007\000\002\123" +
    "\006\000\002\055\005\000\002\055\003\000\002\056\002" +
    "\000\002\056\003\000\002\214\005\000\002\060\010\000" +
    "\002\060\005\000\002\060\006\000\002\060\010\000\002" +
    "\060\004\000\002\060\005\000\002\060\005\000\002\060" +
    "\005\000\002\060\005\000\002\060\005\000\002\060\005" +
    "\000\002\060\005\000\002\060\005\000\002\060\005\000" +
    "\002\060\005\000\002\060\005\000\002\060\004\000\002" +
    "\060\004\000\002\060\004\000\002\060\004\000\002\060" +
    "\005\000\002\060\005\000\002\060\005\000\002\060\005" +
    "\000\002\060\005\000\002\060\005\000\002\060\005\000" +
    "\002\060\005\000\002\060\005\000\002\060\005\000\002" +
    "\060\005\000\002\060\005\000\002\060\005\000\002\060" +
    "\005\000\002\060\005\000\002\060\005\000\002\060\004" +
    "\000\002\060\004\000\002\060\004\000\002\060\004\000" +
    "\002\060\005\000\002\060\005\000\002\060\005\000\002" +
    "\060\005\000\002\060\005\000\002\060\005\000\002\060" +
    "\005\000\002\060\005\000\002\060\005\000\002\060\005" +
    "\000\002\060\003\000\002\060\006\000\002\060\007\000" +
    "\002\060\006\000\002\060\003\000\002\060\004\000\002" +
    "\060\004\000\002\060\004\000\002\060\004\000\002\060" +
    "\004\000\002\060\004\000\002\060\004\000\002\060\004" +
    "\000\002\060\004\000\002\060\003\000\002\060\006\000" +
    "\002\060\005\000\002\060\005\000\002\060\004\000\002" +
    "\060\013\000\002\060\014\000\002\041\002\000\002\041" +
    "\006\000\002\042\005\000\002\042\006\000\002\042\003" +
    "\000\002\042\004\000\002\061\006\000\002\061\010\000" +
    "\002\061\007\000\002\061\010\000\002\061\010\000\002" +
    "\061\010\000\002\061\010\000\002\061\006\000\002\120" +
    "\003\000\002\120\003\000\002\120\005\000\002\120\004" +
    "\000\002\121\003\000\002\121\005\000\002\121\004\000" +
    "\002\161\003\000\002\161\003\000\002\163\006\000\002" +
    "\163\003\000\002\165\004\000\002\165\002\000\002\166" +
    "\004\000\002\062\002\000\002\062\004\000\002\062\005" +
    "\000\002\110\002\000\002\110\003\000\002\110\003\000" +
    "\002\063\002\000\002\063\005\000\002\064\003\000\002" +
    "\064\003\000\002\064\003\000\002\064\003\000\002\064" +
    "\003\000\002\064\003\000\002\064\003\000\002\064\003" +
    "\000\002\064\003\000\002\064\003\000\002\064\003\000" +
    "\002\064\003\000\002\064\005\000\002\064\004\000\002" +
    "\065\003\000\002\065\003\000\002\065\005\000\002\065" +
    "\004\000\002\065\004\000\002\065\004\000\002\065\006" +
    "\000\002\065\005\000\002\065\003\000\002\167\005\000" +
    "\002\066\003\000\002\066\003\000\002\066\003\000\002" +
    "\066\005\000\002\066\004\000\002\066\003\000\002\066" +
    "\005\000\002\066\005\000\002\067\002\000\002\067\004" +
    "\000\002\070\002\000\002\070\003\000\002\071\007\000" +
    "\002\071\005\000\002\071\005\000\002\071\003\000\002" +
    "\072\003\000\002\072\003\000\002\151\003\000\002\117" +
    "\003\000\002\153\003\000\002\136\007\000\002\136\003" +
    "\000\002\133\004\000\002\133\002\000\002\155\005\000" +
    "\002\215\005\000\002\216\006\000\002\216\006\000\002" +
    "\132\003\000\002\132\003\000\002\132\002\000\002\154" +
    "\003\000\002\154\004\000\002\156\005\000\002\156\005" +
    "\000\002\074\003\000\002\217\006\000\002\217\006\000" +
    "\002\170\003\000\002\170\003\000\002\170\003\000\002" +
    "\164\003\000\002\164\004\000\002\164\003\000\002\073" +
    "\006\000\002\073\006\000\002\073\003\000\002\075\003" +
    "\000\002\075\006\000\002\076\002\000\002\076\003\000" +
    "\002\077\003\000\002\077\003\000\002\100\006\000\002" +
    "\100\006\000\002\100\003\000\002\101\003\000\002\101" +
    "\005\000\002\102\003\000\002\102\004\000\002\103\005" +
    "\000\002\103\003\000\002\104\003\000\002\104\006\000" +
    "\002\104\002\000\002\105\002\000\002\105\004\000\002" +
    "\106\007\000\002\106\005\000\002\106\005\000\002\106" +
    "\003\000\002\106\010\000\002\106\006\000\002\106\006" +
    "\000\002\106\004\000\002\107\004\000\002\107\004\000" +
    "\002\107\003\000\002\107\004\000\002\111\003\000\002" +
    "\111\006\000\002\111\005\000\002\111\005\000\002\111" +
    "\010\000\002\111\005\000\002\112\003\000\002\112\003" +
    "\000\002\112\003\000\002\113\006\000\002\113\006\000" +
    "\002\113\004\000\002\113\004\000\002\113\006\000\002" +
    "\113\004\000\002\113\004\000\002\157\003\000\002\157" +
    "\005\000\002\162\005\000\002\162\005\000\002\160\003" +
    "\000\002\114\003\000\002\114\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u03a6\000\002\001\ufffb\000\004\002\u03a8\001\002\000" +
    "\246\003\127\004\157\005\171\006\117\007\011\010\066" +
    "\011\034\012\055\013\064\015\102\017\141\020\134\021" +
    "\131\022\045\024\033\026\111\030\172\033\113\035\143" +
    "\041\057\042\133\043\077\044\116\045\150\046\151\047" +
    "\041\051\167\052\026\053\012\055\104\056\163\057\031" +
    "\060\061\061\032\062\156\067\165\070\013\071\021\072" +
    "\046\073\050\074\145\075\006\076\035\102\070\105\105" +
    "\106\142\107\042\110\072\111\024\112\060\113\030\114" +
    "\074\115\052\116\136\117\115\124\067\142\010\162\114" +
    "\163\073\167\161\170\016\172\054\173\166\174\027\175" +
    "\146\176\040\177\140\200\100\201\147\202\076\203\036" +
    "\204\053\206\103\212\043\213\065\214\017\220\164\223" +
    "\110\224\122\225\062\227\132\231\126\001\001\000\002" +
    "\001\ufe9f\000\004\220\u03a5\001\002\000\002\001\uffc1\000" +
    "\002\001\ufea3\000\006\013\u039a\223\u039b\001\002\000\004" +
    "\220\u0396\001\002\000\002\001\ufedd\000\002\001\ufecf\000" +
    "\154\004\157\006\117\007\011\010\066\011\176\012\055" +
    "\013\064\017\141\033\113\044\256\056\163\057\031\067" +
    "\165\070\013\071\021\072\046\073\050\074\145\075\006" +
    "\076\035\105\254\106\142\107\042\110\072\112\060\113" +
    "\030\114\074\115\052\116\136\117\115\124\067\162\114" +
    "\163\073\167\161\170\016\172\054\173\166\174\027\175" +
    "\146\176\040\177\140\200\100\201\147\202\076\203\036" +
    "\204\053\206\103\212\354\220\164\223\110\224\122\225" +
    "\062\231\126\001\002\000\004\061\u0292\001\002\000\070" +
    "\032\u0111\121\u0109\122\u0118\123\u0103\141\u0106\142\u0394\143" +
    "\u0102\144\u0112\145\u0104\146\u010b\147\u0113\150\u0117\151\u010d" +
    "\152\u0100\153\u010a\154\u0116\155\u0114\156\u0107\157\u0115\160" +
    "\u0110\161\u010c\162\u0119\163\u0108\164\u010f\165\u010e\166\u0101" +
    "\171\u0105\001\002\000\002\001\ufe9d\000\002\001\ufe60\000" +
    "\036\125\364\126\370\127\365\130\376\131\367\132\375" +
    "\133\372\134\374\135\366\136\363\137\371\140\373\172" +
    "\ufe78\173\ufe78\001\ufe7a\000\002\001\uffdb\000\002\001\uffb2" +
    "\000\014\011\176\017\u01ac\110\u038a\112\060\220\u01aa\001" +
    "\002\000\154\004\157\006\117\007\011\010\066\011\176" +
    "\012\055\013\064\017\141\033\113\044\256\056\163\057" +
    "\031\067\165\070\013\071\021\072\046\073\050\074\145" +
    "\075\006\076\035\105\254\106\142\107\042\110\072\112" +
    "\060\113\030\114\074\115\052\116\136\117\115\124\067" +
    "\162\114\163\073\167\161\170\016\172\054\173\166\174" +
    "\027\175\146\176\040\177\140\200\100\201\147\202\076" +
    "\203\036\204\053\206\103\212\354\220\164\223\110\224" +
    "\122\225\062\231\126\001\002\000\154\004\157\006\117" +
    "\007\011\010\066\011\176\012\055\013\064\017\141\033" +
    "\113\044\256\056\163\057\031\067\165\070\013\071\021" +
    "\072\046\073\050\074\145\075\006\076\035\105\254\106" +
    "\142\107\042\110\072\112\060\113\030\114\074\115\052" +
    "\116\136\117\115\124\067\162\114\163\073\167\161\170" +
    "\016\172\054\173\166\174\027\175\146\176\040\177\140" +
    "\200\100\201\147\202\076\203\036\204\053\206\103\212" +
    "\354\220\164\223\110\224\122\225\062\231\126\001\002" +
    "\000\004\220\u0383\001\002\000\002\001\uffa1\000\004\220" +
    "\u0372\001\002\000\004\222\u0371\001\ufe27\000\014\013\064" +
    "\016\u036f\077\242\100\u02a5\101\u02a4\001\002\000\154\004" +
    "\157\006\117\007\011\010\066\011\176\012\055\013\064" +
    "\017\141\033\113\044\256\056\163\057\031\067\165\070" +
    "\013\071\021\072\046\073\050\074\145\075\006\076\035" +
    "\105\254\106\142\107\042\110\072\112\060\113\030\114" +
    "\074\115\052\116\136\117\115\124\067\162\114\163\073" +
    "\167\161\170\016\172\054\173\166\174\027\175\146\176" +
    "\040\177\140\200\100\201\147\202\076\203\036\204\053" +
    "\206\103\212\354\220\164\223\110\224\122\225\062\231" +
    "\126\001\002\000\002\001\ufe65\000\154\004\157\006\117" +
    "\007\011\010\066\011\176\012\055\013\064\017\141\033" +
    "\113\044\256\056\163\057\031\067\165\070\013\071\021" +
    "\072\046\073\050\074\145\075\006\076\035\105\254\106" +
    "\142\107\042\110\072\112\060\113\030\114\074\115\052" +
    "\116\136\117\115\124\067\162\114\163\073\167\161\170" +
    "\016\172\054\173\166\174\027\175\146\176\040\177\140" +
    "\200\100\201\147\202\076\203\036\204\053\206\103\212" +
    "\354\220\164\223\110\224\122\225\062\231\126\001\002" +
    "\000\004\102\u0355\001\002\000\002\001\ufe9e\000\006\013" +
    "\u034c\044\u019f\001\ufeba\000\004\204\u0349\001\ufe64\000\004" +
    "\220\u0340\001\002\000\002\001\ufe9b\000\004\011\u0331\001" +
    "\002\000\002\001\ufe9a\000\004\065\u032c\001\ufe76\000\004" +
    "\220\u0329\001\002\000\156\004\157\006\117\007\011\010" +
    "\066\011\176\012\055\013\064\017\141\033\113\044\256" +
    "\056\163\057\031\067\165\070\013\071\021\072\046\073" +
    "\050\074\145\075\006\076\035\105\254\106\142\107\042" +
    "\110\072\112\060\113\030\114\074\115\052\116\136\117" +
    "\115\124\067\147\u0316\162\114\163\073\167\161\170\016" +
    "\172\054\173\166\174\027\175\146\176\040\177\140\200" +
    "\100\201\147\202\076\203\036\204\053\206\103\212\354" +
    "\220\164\223\110\224\122\225\062\231\126\001\ufe4a\000" +
    "\020\011\176\013\064\105\u017a\110\u0176\112\060\212\211" +
    "\223\110\001\002\000\002\001\ufe8c\000\012\102\u0133\104" +
    "\ufe68\204\u0134\220\ufe6c\001\ufe62\000\156\004\157\006\117" +
    "\007\011\010\066\011\176\012\055\013\064\017\141\033" +
    "\113\044\256\056\163\057\031\067\165\070\013\071\021" +
    "\072\046\073\050\074\145\075\006\076\035\105\254\106" +
    "\142\107\042\110\072\112\060\113\030\114\074\115\052" +
    "\116\136\117\115\124\067\142\u0312\162\114\163\073\167" +
    "\161\170\016\172\054\173\166\174\027\175\146\176\040" +
    "\177\140\200\100\201\147\202\076\203\036\204\053\206" +
    "\103\212\354\220\164\223\110\224\122\225\062\231\126" +
    "\001\002\000\002\001\ufe26\000\004\220\u030f\001\002\000" +
    "\012\013\064\016\u030d\100\u02a5\101\u02a4\001\ufea9\000\004" +
    "\104\u0309\001\002\000\002\001\ufe28\000\004\061\u0293\001" +
    "\002\000\002\001\ufea2\000\154\004\157\006\117\007\011" +
    "\010\066\011\176\012\055\013\064\017\141\033\113\044" +
    "\256\056\163\057\031\067\165\070\013\071\021\072\046" +
    "\073\050\074\145\075\006\076\035\105\254\106\142\107" +
    "\042\110\072\112\060\113\030\114\074\115\052\116\136" +
    "\117\115\124\067\162\114\163\073\167\161\170\016\172" +
    "\054\173\166\174\027\175\146\176\040\177\140\200\100" +
    "\201\147\202\076\203\036\204\053\206\103\212\354\220" +
    "\164\223\110\224\122\225\062\231\126\001\002\000\002" +
    "\001\uffda\000\002\001\ufed9\000\006\011\176\112\060\001" +
    "\002\000\154\004\157\006\117\007\011\010\066\011\176" +
    "\012\055\013\064\017\141\033\113\044\256\056\163\057" +
    "\031\067\165\070\013\071\021\072\046\073\050\074\145" +
    "\075\006\076\035\105\254\106\142\107\042\110\072\112" +
    "\060\113\030\114\074\115\052\116\136\117\115\124\067" +
    "\162\114\163\073\167\161\170\016\172\054\173\166\174" +
    "\027\175\146\176\040\177\140\200\100\201\147\202\076" +
    "\203\036\204\053\206\103\212\354\220\164\223\110\224" +
    "\122\225\062\231\126\001\002\000\154\004\157\006\117" +
    "\007\011\010\066\011\176\012\055\013\064\017\141\033" +
    "\113\044\256\056\163\057\031\067\165\070\013\071\021" +
    "\072\046\073\050\074\145\075\006\076\035\105\254\106" +
    "\142\107\042\110\072\112\060\113\030\114\074\115\052" +
    "\116\136\117\115\124\067\162\114\163\073\167\161\170" +
    "\016\172\054\173\166\174\027\175\146\176\040\177\140" +
    "\200\100\201\147\202\076\203\036\204\053\206\103\212" +
    "\354\220\164\223\110\224\122\225\062\231\126\001\002" +
    "\000\006\013\064\223\u012f\001\002\000\154\004\157\006" +
    "\117\007\011\010\066\011\176\012\055\013\064\017\141" +
    "\033\113\044\256\056\163\057\031\067\165\070\013\071" +
    "\021\072\046\073\050\074\145\075\006\076\035\105\254" +
    "\106\142\107\042\110\072\112\060\113\030\114\074\115" +
    "\052\116\136\117\115\124\067\162\114\163\073\167\161" +
    "\170\016\172\054\173\166\174\027\175\146\176\040\177" +
    "\140\200\100\201\147\202\076\203\036\204\053\206\103" +
    "\212\354\220\164\223\110\224\122\225\062\231\126\001" +
    "\002\000\004\011\u02fe\001\002\000\154\004\157\006\117" +
    "\007\011\010\066\011\176\012\055\013\064\017\141\033" +
    "\113\044\256\056\163\057\031\067\165\070\013\071\021" +
    "\072\046\073\050\074\145\075\006\076\035\105\254\106" +
    "\142\107\042\110\072\112\060\113\030\114\074\115\052" +
    "\116\136\117\115\124\067\162\114\163\073\167\161\170" +
    "\016\172\054\173\166\174\027\175\146\176\040\177\140" +
    "\200\100\201\147\202\076\203\036\204\053\206\103\212" +
    "\354\220\164\223\110\224\122\225\062\231\126\001\002" +
    "\000\002\001\ufe8b\000\002\001\uffc8\000\020\011\176\013" +
    "\064\105\u012a\110\u0124\112\060\212\211\223\110\001\002" +
    "\000\004\220\u02f3\001\002\000\010\011\176\110\345\112" +
    "\060\001\ufff2\000\006\172\u02e5\173\u02e6\001\002\000\004" +
    "\204\u02e2\001\ufe63\000\004\102\u0130\001\ufe51\000\004\220" +
    "\u02cb\001\002\000\002\001\ufff7\000\154\004\157\006\117" +
    "\007\011\010\066\011\176\012\055\013\064\017\141\033" +
    "\113\044\256\056\163\057\031\067\165\070\013\071\021" +
    "\072\046\073\050\074\145\075\006\076\035\105\254\106" +
    "\142\107\042\110\072\112\060\113\030\114\074\115\052" +
    "\116\136\117\115\124\067\162\114\163\073\167\161\170" +
    "\016\172\054\173\166\174\027\175\146\176\040\177\140" +
    "\200\100\201\147\202\076\203\036\204\053\206\103\212" +
    "\354\220\164\223\110\224\122\225\062\231\126\001\002" +
    "\000\154\004\157\006\117\007\011\010\066\011\176\012" +
    "\055\013\064\017\141\033\113\044\256\056\163\057\031" +
    "\067\165\070\013\071\021\072\046\073\050\074\145\075" +
    "\006\076\035\105\254\106\142\107\042\110\072\112\060" +
    "\113\030\114\074\115\052\116\136\117\115\124\067\162" +
    "\114\163\073\167\161\170\016\172\054\173\166\174\027" +
    "\175\146\176\040\177\140\200\100\201\147\202\076\203" +
    "\036\204\053\206\103\212\354\220\164\223\110\224\122" +
    "\225\062\231\126\001\002\000\154\004\157\006\117\007" +
    "\011\010\066\011\176\012\055\013\064\017\141\033\113" +
    "\044\256\056\163\057\031\067\165\070\013\071\021\072" +
    "\046\073\050\074\145\075\006\076\035\105\254\106\142" +
    "\107\042\110\072\112\060\113\030\114\074\115\052\116" +
    "\136\117\115\124\067\162\114\163\073\167\161\170\016" +
    "\172\054\173\166\174\027\175\146\176\040\177\140\200" +
    "\100\201\147\202\076\203\036\204\053\206\103\212\354" +
    "\220\164\223\110\224\122\225\062\231\126\001\002\000" +
    "\004\147\261\001\uffb1\000\002\001\ufea4\000\002\001\ufe87" +
    "\000\002\001\uffde\000\012\013\064\016\u02a6\100\u02a5\101" +
    "\u02a4\001\002\000\002\001\ufe5c\000\004\011\u0246\001\002" +
    "\000\006\120\u0241\142\u0242\001\002\000\002\001\ufe9c\000" +
    "\002\001\uffdc\000\002\001\ufe5d\000\230\003\127\004\157" +
    "\005\171\006\117\007\011\010\066\011\034\012\055\013" +
    "\064\015\102\017\141\020\134\021\131\022\045\024\033" +
    "\026\111\030\172\033\113\035\143\041\057\042\133\043" +
    "\077\044\256\046\151\047\041\051\167\052\252\053\012" +
    "\055\104\056\163\057\031\067\165\070\013\071\021\072" +
    "\046\073\050\074\145\075\006\076\035\102\070\105\254" +
    "\106\142\107\042\110\072\111\024\112\060\113\030\114" +
    "\074\115\052\116\136\117\115\124\067\142\010\162\114" +
    "\163\073\167\161\170\016\172\054\173\166\174\027\175" +
    "\146\176\040\177\140\200\100\201\147\202\076\203\036" +
    "\204\053\206\103\212\043\220\164\223\110\224\122\225" +
    "\062\231\126\001\002\000\002\001\uff9e\000\156\004\157" +
    "\006\117\007\011\010\066\011\176\012\055\013\064\017" +
    "\141\033\113\044\256\056\163\057\031\067\165\070\013" +
    "\071\021\072\046\073\050\074\145\075\006\076\035\105" +
    "\254\106\142\107\042\110\072\112\060\113\030\114\074" +
    "\115\052\116\136\117\115\124\067\142\u0238\162\114\163" +
    "\073\167\161\170\016\172\054\173\166\174\027\175\146" +
    "\176\040\177\140\200\100\201\147\202\076\203\036\204" +
    "\053\206\103\212\354\220\164\223\110\224\122\225\062" +
    "\231\126\001\002\000\154\004\157\006\117\007\011\010" +
    "\066\011\176\012\055\013\064\017\141\033\113\044\256" +
    "\056\163\057\031\067\165\070\013\071\021\072\046\073" +
    "\050\074\145\075\006\076\035\105\254\106\142\107\042" +
    "\110\072\112\060\113\030\114\074\115\052\116\136\117" +
    "\115\124\067\162\114\163\073\167\161\170\016\172\054" +
    "\173\166\174\027\175\146\176\040\177\140\200\100\201" +
    "\147\202\076\203\036\204\053\206\103\212\354\220\164" +
    "\223\110\224\122\225\062\231\126\001\002\000\002\001" +
    "\ufff6\000\154\004\157\006\117\007\011\010\066\011\176" +
    "\012\055\013\064\017\141\033\113\044\256\056\163\057" +
    "\031\067\165\070\013\071\021\072\046\073\050\074\145" +
    "\075\006\076\035\105\254\106\142\107\042\110\072\112" +
    "\060\113\030\114\074\115\052\116\136\117\115\124\067" +
    "\162\114\163\073\167\161\170\016\172\054\173\166\174" +
    "\027\175\146\176\040\177\140\200\100\201\147\202\076" +
    "\203\036\204\053\206\103\212\354\220\164\223\110\224" +
    "\122\225\062\231\126\001\002\000\002\001\ufffe\000\154" +
    "\004\157\006\117\007\011\010\066\011\176\012\055\013" +
    "\064\017\141\033\113\044\256\056\163\057\031\067\165" +
    "\070\013\071\021\072\046\073\050\074\145\075\006\076" +
    "\035\105\254\106\142\107\042\110\072\112\060\113\030" +
    "\114\074\115\052\116\136\117\115\124\067\162\114\163" +
    "\073\167\161\170\016\172\054\173\166\174\027\175\146" +
    "\176\040\177\140\200\100\201\147\202\076\203\036\204" +
    "\053\206\103\212\354\220\164\223\110\224\122\225\062" +
    "\231\126\001\002\000\002\001\ufea1\000\002\001\ufe99\000" +
    "\004\220\u0216\001\002\000\002\001\uffb3\000\002\001\ufea0" +
    "\000\154\004\157\006\117\007\011\010\066\011\176\012" +
    "\055\013\064\017\141\033\113\044\256\056\163\057\031" +
    "\067\165\070\013\071\021\072\046\073\050\074\145\075" +
    "\006\076\035\105\254\106\142\107\042\110\072\112\060" +
    "\113\030\114\074\115\052\116\136\117\115\124\067\162" +
    "\114\163\073\167\161\170\016\172\054\173\166\174\027" +
    "\175\146\176\040\177\140\200\100\201\147\202\076\203" +
    "\036\204\053\206\103\212\354\220\164\223\110\224\122" +
    "\225\062\231\126\001\002\000\154\004\157\006\117\007" +
    "\011\010\066\011\176\012\055\013\064\017\141\033\113" +
    "\044\256\056\163\057\031\067\165\070\013\071\021\072" +
    "\046\073\050\074\145\075\006\076\035\105\254\106\142" +
    "\107\042\110\072\112\060\113\030\114\074\115\052\116" +
    "\136\117\115\124\067\162\114\163\073\167\161\170\016" +
    "\172\054\173\166\174\027\175\146\176\040\177\140\200" +
    "\100\201\147\202\076\203\036\204\053\206\103\212\354" +
    "\220\164\223\110\224\122\225\062\231\126\001\002\000" +
    "\004\011\u0211\001\002\000\156\004\157\006\117\007\011" +
    "\010\066\011\176\012\055\013\064\017\141\033\113\044" +
    "\256\056\163\057\031\067\165\070\013\071\021\072\046" +
    "\073\050\074\145\075\006\076\035\105\254\106\142\107" +
    "\042\110\072\112\060\113\030\114\074\115\052\116\136" +
    "\117\115\124\067\142\u020c\162\114\163\073\167\161\170" +
    "\016\172\054\173\166\174\027\175\146\176\040\177\140" +
    "\200\100\201\147\202\076\203\036\204\053\206\103\212" +
    "\354\220\164\223\110\224\122\225\062\231\126\001\002" +
    "\000\002\001\ufe7b\000\004\104\u020a\001\002\000\002\001" +
    "\ufe7c\000\004\110\u0208\001\uffff\000\002\001\uff9a\000\004" +
    "\220\u0203\001\ufeac\000\006\104\ufeb9\220\u017c\001\ufe8a\000" +
    "\154\004\157\006\117\007\011\010\066\011\176\012\055" +
    "\013\064\017\141\033\113\044\256\056\163\057\031\067" +
    "\165\070\013\071\021\072\046\073\050\074\145\075\006" +
    "\076\035\105\254\106\142\107\042\110\072\112\060\113" +
    "\030\114\074\115\052\116\136\117\115\124\067\162\114" +
    "\163\073\167\161\170\016\172\054\173\166\174\027\175" +
    "\146\176\040\177\140\200\100\201\147\202\076\203\036" +
    "\204\053\206\103\212\354\220\164\223\110\224\122\225" +
    "\062\231\126\001\002\000\002\001\ufff8\000\004\220\u01fc" +
    "\001\002\000\154\004\157\006\117\007\011\010\066\011" +
    "\176\012\055\013\064\017\141\033\113\044\256\056\163" +
    "\057\031\067\165\070\013\071\021\072\046\073\050\074" +
    "\145\075\006\076\035\105\254\106\142\107\042\110\072" +
    "\112\060\113\030\114\074\115\052\116\136\117\115\124" +
    "\067\162\114\163\073\167\161\170\016\172\054\173\166" +
    "\174\027\175\146\176\040\177\140\200\100\201\147\202" +
    "\076\203\036\204\053\206\103\212\354\220\164\223\110" +
    "\224\122\225\062\231\126\001\002\000\004\220\u01d0\001" +
    "\002\000\020\011\176\013\064\105\u017a\110\u0176\112\060" +
    "\212\211\223\110\001\002\000\154\004\157\006\117\007" +
    "\011\010\066\011\176\012\055\013\064\017\141\033\113" +
    "\044\256\056\163\057\031\067\165\070\013\071\021\072" +
    "\046\073\050\074\145\075\006\076\035\105\254\106\142" +
    "\107\042\110\072\112\060\113\030\114\074\115\052\116" +
    "\136\117\115\124\067\162\114\163\073\167\161\170\016" +
    "\172\054\173\166\174\027\175\146\176\040\177\140\200" +
    "\100\201\147\202\076\203\036\204\053\206\103\212\354" +
    "\220\164\223\110\224\122\225\062\231\126\001\002\000" +
    "\002\001\ufffc\000\004\220\u01b0\001\002\000\004\220\173" +
    "\001\002\000\006\011\176\112\060\001\002\000\006\120" +
    "\246\221\245\001\002\000\004\125\177\001\002\000\002" +
    "\001\ufe27\000\056\006\117\007\011\010\066\011\176\017" +
    "\141\070\205\071\021\072\046\073\050\074\145\075\006" +
    "\076\200\105\213\106\142\107\042\110\204\112\060\162" +
    "\212\163\202\204\206\212\211\231\126\001\002\000\006" +
    "\016\243\077\242\001\002\000\002\001\ufe96\000\056\006" +
    "\117\007\011\010\066\011\176\017\141\070\205\071\021" +
    "\072\046\073\050\074\145\075\006\076\200\105\213\106" +
    "\142\107\042\110\204\112\060\162\212\163\202\204\206" +
    "\212\211\231\126\001\002\000\002\001\ufe8e\000\006\011" +
    "\176\112\060\001\002\000\004\220\235\001\002\000\056" +
    "\006\117\007\011\010\066\011\176\017\141\070\205\071" +
    "\021\072\046\073\050\074\145\075\006\076\200\105\213" +
    "\106\142\107\042\110\204\112\060\162\212\163\202\204" +
    "\206\212\211\231\126\001\ufe84\000\004\104\220\001\002" +
    "\000\002\001\uff87\000\002\001\ufeba\000\056\006\117\007" +
    "\011\010\066\011\176\017\141\070\205\071\021\072\046" +
    "\073\050\074\145\075\006\076\200\105\213\106\142\107" +
    "\042\110\204\112\060\162\212\163\202\204\206\212\211" +
    "\231\126\001\002\000\004\110\215\001\002\000\004\104" +
    "\ufeb9\001\ufe95\000\006\011\176\112\060\001\002\000\004" +
    "\104\ufeb8\001\ufe94\000\002\001\ufe92\000\004\011\221\001" +
    "\002\000\002\001\ufe8d\000\004\205\234\001\002\000\004" +
    "\120\227\001\ufe82\000\004\066\225\001\ufe7d\000\056\006" +
    "\117\007\011\010\066\011\176\017\141\070\205\071\021" +
    "\072\046\073\050\074\145\075\006\076\200\105\213\106" +
    "\142\107\042\110\204\112\060\162\212\163\202\204\206" +
    "\212\211\231\126\001\002\000\002\001\ufe7e\000\056\006" +
    "\117\007\011\010\066\011\176\017\141\070\205\071\021" +
    "\072\046\073\050\074\145\075\006\076\200\105\213\106" +
    "\142\107\042\110\204\112\060\162\212\163\202\204\206" +
    "\212\211\231\126\001\ufe81\000\002\001\ufe83\000\004\066" +
    "\232\001\ufe7f\000\056\006\117\007\011\010\066\011\176" +
    "\017\141\070\205\071\021\072\046\073\050\074\145\075" +
    "\006\076\200\105\213\106\142\107\042\110\204\112\060" +
    "\162\212\163\202\204\206\212\211\231\126\001\002\000" +
    "\002\001\ufe80\000\002\001\ufe8f\000\056\006\117\007\011" +
    "\010\066\011\176\017\141\070\205\071\021\072\046\073" +
    "\050\074\145\075\006\076\200\105\213\106\142\107\042" +
    "\110\204\112\060\162\212\163\202\204\206\212\211\231" +
    "\126\001\ufe84\000\004\221\237\001\002\000\002\001\ufe90" +
    "\000\004\104\ufeb7\001\ufe93\000\002\001\ufe91\000\002\001" +
    "\ufe97\000\004\077\244\001\002\000\002\001\ufe98\000\232" +
    "\003\127\004\157\005\171\006\117\007\011\010\066\011" +
    "\034\012\055\013\064\015\102\017\141\020\134\021\131" +
    "\022\045\024\033\026\111\030\172\033\113\035\143\041" +
    "\057\042\133\043\077\044\256\046\151\047\041\051\167" +
    "\052\252\053\012\055\104\056\163\057\031\067\165\070" +
    "\013\071\021\072\046\073\050\074\145\075\006\076\035" +
    "\102\070\105\254\106\142\107\042\110\072\111\024\112" +
    "\060\113\030\114\074\115\052\116\136\117\115\124\067" +
    "\142\010\162\114\163\073\167\161\170\016\172\054\173" +
    "\166\174\027\175\146\176\040\177\140\200\100\201\147" +
    "\202\076\203\036\204\053\206\103\212\043\220\164\222" +
    "\255\223\110\224\122\225\062\231\126\001\002\000\006" +
    "\011\176\112\060\001\002\000\004\125\250\001\002\000" +
    "\056\006\117\007\011\010\066\011\176\017\141\070\205" +
    "\071\021\072\046\073\050\074\145\075\006\076\200\105" +
    "\213\106\142\107\042\110\204\112\060\162\212\163\202" +
    "\204\206\212\211\231\126\001\002\000\002\001\uff86\000" +
    "\006\017\u01ac\220\u01aa\001\002\000\002\001\uffc2\000\004" +
    "\110\345\001\002\000\002\001\uffe3\000\004\147\261\001" +
    "\uffb1\000\002\001\uff89\000\004\220\262\001\002\000\002" +
    "\001\uffb0\000\022\003\272\011\176\070\263\105\270\110" +
    "\273\112\060\221\uff71\230\267\001\uff68\000\002\001\uff66" +
    "\000\002\001\ufeb6\000\006\013\334\147\333\001\002\000" +
    "\004\120\331\001\uff72\000\002\001\uff65\000\004\110\327" +
    "\001\002\000\002\001\uff67\000\002\001\uff69\000\006\011" +
    "\176\112\060\001\002\000\002\001\uff70\000\004\221\276" +
    "\001\002\000\004\052\277\001\ufec8\000\004\220\314\001" +
    "\002\000\004\102\301\001\002\000\002\001\uffe3\000\246" +
    "\003\127\004\157\005\171\006\117\007\011\010\066\011" +
    "\034\012\055\013\064\015\102\017\141\020\134\021\131" +
    "\022\045\024\033\026\111\030\172\033\113\035\143\041" +
    "\057\042\133\043\077\044\116\046\151\047\041\051\167" +
    "\052\252\053\012\055\104\056\163\057\031\060\304\061" +
    "\032\062\156\067\165\070\013\071\021\072\046\073\050" +
    "\074\145\075\006\076\035\102\070\103\306\105\254\106" +
    "\142\107\042\110\072\111\024\112\060\113\030\114\074" +
    "\115\052\116\136\117\115\124\067\142\010\162\114\163" +
    "\073\167\161\170\016\172\054\173\166\174\027\175\146" +
    "\176\040\177\140\200\100\201\147\202\076\203\036\204" +
    "\053\206\103\212\043\213\065\214\017\220\164\223\110" +
    "\224\122\225\062\227\132\231\126\001\002\000\002\001" +
    "\uffe4\000\004\220\311\001\002\000\002\001\uffe1\000\002" +
    "\001\ufeca\000\002\001\uffe0\000\002\001\uffe2\000\004\221" +
    "\312\001\002\000\004\142\313\001\002\000\002\001\uffdf" +
    "\000\006\013\317\147\315\001\002\000\004\013\325\001" +
    "\002\000\006\120\321\221\320\001\002\000\002\001\ufec4" +
    "\000\002\001\ufec7\000\006\013\323\147\322\001\002\000" +
    "\004\013\324\001\002\000\002\001\ufec6\000\002\001\ufec5" +
    "\000\002\001\ufec3\000\002\001\ufeb4\000\006\011\176\112" +
    "\060\001\002\000\002\001\ufeb5\000\024\003\272\011\176" +
    "\070\263\105\270\110\273\112\060\120\uff6e\221\uff6e\230" +
    "\267\001\uff68\000\002\001\uff6f\000\004\013\337\001\002" +
    "\000\004\125\335\001\uff6d\000\056\006\117\007\011\010" +
    "\066\011\176\017\141\070\205\071\021\072\046\073\050" +
    "\074\145\075\006\076\200\105\213\106\142\107\042\110" +
    "\204\112\060\162\212\163\202\204\206\212\211\231\126" +
    "\001\002\000\002\001\uff6b\000\004\125\340\001\uff6c\000" +
    "\056\006\117\007\011\010\066\011\176\017\141\070\205" +
    "\071\021\072\046\073\050\074\145\075\006\076\200\105" +
    "\213\106\142\107\042\110\204\112\060\162\212\163\202" +
    "\204\206\212\211\231\126\001\002\000\002\001\uff6a\000" +
    "\246\003\127\004\157\005\171\006\117\007\011\010\066" +
    "\011\034\012\055\013\064\015\102\017\141\020\134\021" +
    "\131\022\045\024\033\026\111\030\172\031\343\033\113" +
    "\035\143\041\057\042\133\043\077\044\116\046\151\047" +
    "\041\051\167\052\252\053\012\055\104\056\163\057\031" +
    "\060\304\061\032\062\156\067\165\070\013\071\021\072" +
    "\046\073\050\074\145\075\006\076\035\102\070\105\254" +
    "\106\142\107\042\110\072\111\024\112\060\113\030\114" +
    "\074\115\052\116\136\117\115\124\067\142\010\162\114" +
    "\163\073\167\161\170\016\172\054\173\166\174\027\175" +
    "\146\176\040\177\140\200\100\201\147\202\076\203\036" +
    "\204\053\206\103\212\043\213\065\214\017\220\164\223" +
    "\110\224\122\225\062\227\132\231\126\001\002\000\004" +
    "\142\344\001\002\000\002\001\uff88\000\006\011\176\112" +
    "\060\001\002\000\006\104\ufeb8\220\347\001\ufe89\000\156" +
    "\004\157\006\117\007\011\010\066\011\176\012\055\013" +
    "\064\017\141\033\113\044\256\056\163\057\031\067\165" +
    "\070\013\071\021\072\046\073\050\074\145\075\006\076" +
    "\035\105\254\106\142\107\042\110\072\112\060\113\030" +
    "\114\074\115\052\116\136\117\115\124\067\147\351\162" +
    "\114\163\073\167\161\170\016\172\054\173\166\174\027" +
    "\175\146\176\040\177\140\200\100\201\147\202\076\203" +
    "\036\204\053\206\103\212\354\220\164\223\110\224\122" +
    "\225\062\231\126\001\uff63\000\004\221\u01a9\001\002\000" +
    "\020\011\176\013\064\105\u017a\110\u0176\112\060\212\211" +
    "\223\110\001\002\000\066\032\u0111\121\u0109\122\u0118\123" +
    "\u0103\141\u0106\143\u0102\144\u0112\145\u0104\146\u010b\147\u0113" +
    "\150\u0117\151\u010d\152\u0100\153\u010a\154\u0116\155\u0114\156" +
    "\u0107\157\u0115\160\u0110\161\u010c\162\u0119\163\u0108\164\u010f" +
    "\165\u010e\166\u0101\171\u0105\001\002\000\042\120\uff61\125" +
    "\364\126\370\127\365\130\376\131\367\132\375\133\372" +
    "\134\374\135\366\136\363\137\371\140\373\172\ufe78\173" +
    "\ufe78\221\uff61\001\ufe7a\000\004\044\u019f\001\ufeba\000\004" +
    "\120\357\001\uff64\000\006\120\uff62\221\uff62\001\ufe7b\000" +
    "\156\004\157\006\117\007\011\010\066\011\176\012\055" +
    "\013\064\017\141\033\113\044\256\056\163\057\031\067" +
    "\165\070\013\071\021\072\046\073\050\074\145\075\006" +
    "\076\035\105\254\106\142\107\042\110\072\112\060\113" +
    "\030\114\074\115\052\116\136\117\115\124\067\147\360" +
    "\162\114\163\073\167\161\170\016\172\054\173\166\174" +
    "\027\175\146\176\040\177\140\200\100\201\147\202\076" +
    "\203\036\204\053\206\103\212\354\220\164\223\110\224" +
    "\122\225\062\231\126\001\002\000\020\011\176\013\064" +
    "\105\u017a\110\u0176\112\060\212\211\223\110\001\002\000" +
    "\042\120\uff5e\125\364\126\370\127\365\130\376\131\367" +
    "\132\375\133\372\134\374\135\366\136\363\137\371\140" +
    "\373\172\ufe78\173\ufe78\221\uff5e\001\ufe7a\000\006\120\uff5f" +
    "\221\uff5f\001\ufe7b\000\154\004\157\006\117\007\011\010" +
    "\066\011\176\012\055\013\064\017\141\033\113\044\256" +
    "\056\163\057\031\067\165\070\013\071\021\072\046\073" +
    "\050\074\145\075\006\076\035\105\254\106\142\107\042" +
    "\110\072\112\060\113\030\114\074\115\052\116\136\117" +
    "\115\124\067\162\114\163\073\167\161\170\016\172\054" +
    "\173\166\174\027\175\146\176\040\177\140\200\100\201" +
    "\147\202\076\203\036\204\053\206\103\212\354\220\164" +
    "\223\110\224\122\225\062\231\126\001\002\000\156\004" +
    "\157\006\117\007\011\010\066\011\176\012\055\013\064" +
    "\017\141\033\113\044\256\056\163\057\031\067\165\070" +
    "\013\071\021\072\046\073\050\074\145\075\006\076\035" +
    "\105\254\106\142\107\042\110\072\112\060\113\030\114" +
    "\074\115\052\116\136\117\115\124\067\147\u0173\162\114" +
    "\163\073\167\161\170\016\172\054\173\166\174\027\175" +
    "\146\176\040\177\140\200\100\201\147\202\076\203\036" +
    "\204\053\206\103\212\354\220\164\223\110\224\122\225" +
    "\062\231\126\001\002\000\154\004\157\006\117\007\011" +
    "\010\066\011\176\012\055\013\064\017\141\033\113\044" +
    "\256\056\163\057\031\067\165\070\013\071\021\072\046" +
    "\073\050\074\145\075\006\076\035\105\254\106\142\107" +
    "\042\110\072\112\060\113\030\114\074\115\052\116\136" +
    "\117\115\124\067\162\114\163\073\167\161\170\016\172" +
    "\054\173\166\174\027\175\146\176\040\177\140\200\100" +
    "\201\147\202\076\203\036\204\053\206\103\212\354\220" +
    "\164\223\110\224\122\225\062\231\126\001\002\000\154" +
    "\004\157\006\117\007\011\010\066\011\176\012\055\013" +
    "\064\017\141\033\113\044\256\056\163\057\031\067\165" +
    "\070\013\071\021\072\046\073\050\074\145\075\006\076" +
    "\035\105\254\106\142\107\042\110\072\112\060\113\030" +
    "\114\074\115\052\116\136\117\115\124\067\162\114\163" +
    "\073\167\161\170\016\172\054\173\166\174\027\175\146" +
    "\176\040\177\140\200\100\201\147\202\076\203\036\204" +
    "\053\206\103\212\354\220\164\223\110\224\122\225\062" +
    "\231\126\001\002\000\154\004\157\006\117\007\011\010" +
    "\066\011\176\012\055\013\064\017\141\033\113\044\256" +
    "\056\163\057\031\067\165\070\013\071\021\072\046\073" +
    "\050\074\145\075\006\076\035\105\254\106\142\107\042" +
    "\110\072\112\060\113\030\114\074\115\052\116\136\117" +
    "\115\124\067\162\114\163\073\167\161\170\016\172\054" +
    "\173\166\174\027\175\146\176\040\177\140\200\100\201" +
    "\147\202\076\203\036\204\053\206\103\212\354\220\164" +
    "\223\110\224\122\225\062\231\126\001\002\000\154\004" +
    "\157\006\117\007\011\010\066\011\176\012\055\013\064" +
    "\017\141\033\113\044\256\056\163\057\031\067\165\070" +
    "\013\071\021\072\046\073\050\074\145\075\006\076\035" +
    "\105\254\106\142\107\042\110\072\112\060\113\030\114" +
    "\074\115\052\116\136\117\115\124\067\162\114\163\073" +
    "\167\161\170\016\172\054\173\166\174\027\175\146\176" +
    "\040\177\140\200\100\201\147\202\076\203\036\204\053" +
    "\206\103\212\354\220\164\223\110\224\122\225\062\231" +
    "\126\001\002\000\154\004\157\006\117\007\011\010\066" +
    "\011\176\012\055\013\064\017\141\033\113\044\256\056" +
    "\163\057\031\067\165\070\013\071\021\072\046\073\050" +
    "\074\145\075\006\076\035\105\254\106\142\107\042\110" +
    "\072\112\060\113\030\114\074\115\052\116\136\117\115" +
    "\124\067\162\114\163\073\167\161\170\016\172\054\173" +
    "\166\174\027\175\146\176\040\177\140\200\100\201\147" +
    "\202\076\203\036\204\053\206\103\212\354\220\164\223" +
    "\110\224\122\225\062\231\126\001\002\000\154\004\157" +
    "\006\117\007\011\010\066\011\176\012\055\013\064\017" +
    "\141\033\113\044\256\056\163\057\031\067\165\070\013" +
    "\071\021\072\046\073\050\074\145\075\006\076\035\105" +
    "\254\106\142\107\042\110\072\112\060\113\030\114\074" +
    "\115\052\116\136\117\115\124\067\162\114\163\073\167" +
    "\161\170\016\172\054\173\166\174\027\175\146\176\040" +
    "\177\140\200\100\201\147\202\076\203\036\204\053\206" +
    "\103\212\354\220\164\223\110\224\122\225\062\231\126" +
    "\001\002\000\154\004\157\006\117\007\011\010\066\011" +
    "\176\012\055\013\064\017\141\033\113\044\256\056\163" +
    "\057\031\067\165\070\013\071\021\072\046\073\050\074" +
    "\145\075\006\076\035\105\254\106\142\107\042\110\072" +
    "\112\060\113\030\114\074\115\052\116\136\117\115\124" +
    "\067\162\114\163\073\167\161\170\016\172\054\173\166" +
    "\174\027\175\146\176\040\177\140\200\100\201\147\202" +
    "\076\203\036\204\053\206\103\212\354\220\164\223\110" +
    "\224\122\225\062\231\126\001\002\000\154\004\157\006" +
    "\117\007\011\010\066\011\176\012\055\013\064\017\141" +
    "\033\113\044\256\056\163\057\031\067\165\070\013\071" +
    "\021\072\046\073\050\074\145\075\006\076\035\105\254" +
    "\106\142\107\042\110\072\112\060\113\030\114\074\115" +
    "\052\116\136\117\115\124\067\162\114\163\073\167\161" +
    "\170\016\172\054\173\166\174\027\175\146\176\040\177" +
    "\140\200\100\201\147\202\076\203\036\204\053\206\103" +
    "\212\354\220\164\223\110\224\122\225\062\231\126\001" +
    "\002\000\154\004\157\006\117\007\011\010\066\011\176" +
    "\012\055\013\064\017\141\033\113\044\256\056\163\057" +
    "\031\067\165\070\013\071\021\072\046\073\050\074\145" +
    "\075\006\076\035\105\254\106\142\107\042\110\072\112" +
    "\060\113\030\114\074\115\052\116\136\117\115\124\067" +
    "\162\114\163\073\167\161\170\016\172\054\173\166\174" +
    "\027\175\146\176\040\177\140\200\100\201\147\202\076" +
    "\203\036\204\053\206\103\212\354\220\164\223\110\224" +
    "\122\225\062\231\126\001\002\000\154\004\157\006\117" +
    "\007\011\010\066\011\176\012\055\013\064\017\141\033" +
    "\113\044\256\056\163\057\031\067\165\070\013\071\021" +
    "\072\046\073\050\074\145\075\006\076\035\105\254\106" +
    "\142\107\042\110\072\112\060\113\030\114\074\115\052" +
    "\116\136\117\115\124\067\162\114\163\073\167\161\170" +
    "\016\172\054\173\166\174\027\175\146\176\040\177\140" +
    "\200\100\201\147\202\076\203\036\204\053\206\103\212" +
    "\354\220\164\223\110\224\122\225\062\231\126\001\002" +
    "\000\060\032\u0111\141\u0106\143\u0102\144\u0112\145\u0104\146" +
    "\u010b\147\u0113\150\u0117\151\u010d\152\u0100\153\u010a\154\u0116" +
    "\155\u0114\156\u0107\157\u0115\160\u0110\161\u010c\162\u0119\163" +
    "\u0108\164\u010f\165\u010e\166\u0101\171\u0105\001\uff08\000\154" +
    "\004\157\006\117\007\011\010\066\011\176\012\055\013" +
    "\064\017\141\033\113\044\256\056\163\057\031\067\165" +
    "\070\013\071\021\072\046\073\050\074\145\075\006\076" +
    "\035\105\254\106\142\107\042\110\072\112\060\113\030" +
    "\114\074\115\052\116\136\117\115\124\067\162\114\163" +
    "\073\167\161\170\016\172\054\173\166\174\027\175\146" +
    "\176\040\177\140\200\100\201\147\202\076\203\036\204" +
    "\053\206\103\212\354\220\164\223\110\224\122\225\062" +
    "\231\126\001\002\000\154\004\157\006\117\007\011\010" +
    "\066\011\176\012\055\013\064\017\141\033\113\044\256" +
    "\056\163\057\031\067\165\070\013\071\021\072\046\073" +
    "\050\074\145\075\006\076\035\105\254\106\142\107\042" +
    "\110\072\112\060\113\030\114\074\115\052\116\136\117" +
    "\115\124\067\162\114\163\073\167\161\170\016\172\054" +
    "\173\166\174\027\175\146\176\040\177\140\200\100\201" +
    "\147\202\076\203\036\204\053\206\103\212\354\220\164" +
    "\223\110\224\122\225\062\231\126\001\002\000\154\004" +
    "\157\006\117\007\011\010\066\011\176\012\055\013\064" +
    "\017\141\033\113\044\256\056\163\057\031\067\165\070" +
    "\013\071\021\072\046\073\050\074\145\075\006\076\035" +
    "\105\254\106\142\107\042\110\072\112\060\113\030\114" +
    "\074\115\052\116\136\117\115\124\067\162\114\163\073" +
    "\167\161\170\016\172\054\173\166\174\027\175\146\176" +
    "\040\177\140\200\100\201\147\202\076\203\036\204\053" +
    "\206\103\212\354\220\164\223\110\224\122\225\062\231" +
    "\126\001\002\000\154\004\157\006\117\007\011\010\066" +
    "\011\176\012\055\013\064\017\141\033\113\044\256\056" +
    "\163\057\031\067\165\070\013\071\021\072\046\073\050" +
    "\074\145\075\006\076\035\105\254\106\142\107\042\110" +
    "\072\112\060\113\030\114\074\115\052\116\136\117\115" +
    "\124\067\162\114\163\073\167\161\170\016\172\054\173" +
    "\166\174\027\175\146\176\040\177\140\200\100\201\147" +
    "\202\076\203\036\204\053\206\103\212\354\220\164\223" +
    "\110\224\122\225\062\231\126\001\002\000\154\004\157" +
    "\006\117\007\011\010\066\011\176\012\055\013\064\017" +
    "\141\033\113\044\256\056\163\057\031\067\165\070\013" +
    "\071\021\072\046\073\050\074\145\075\006\076\035\105" +
    "\254\106\142\107\042\110\072\112\060\113\030\114\074" +
    "\115\052\116\136\117\115\124\067\162\114\163\073\167" +
    "\161\170\016\172\054\173\166\174\027\175\146\176\040" +
    "\177\140\200\100\201\147\202\076\203\036\204\053\206" +
    "\103\212\354\220\164\223\110\224\122\225\062\231\126" +
    "\001\002\000\154\004\157\006\117\007\011\010\066\011" +
    "\176\012\055\013\064\017\141\033\113\044\256\056\163" +
    "\057\031\067\165\070\013\071\021\072\046\073\050\074" +
    "\145\075\006\076\035\105\254\106\142\107\042\110\072" +
    "\112\060\113\030\114\074\115\052\116\136\117\115\124" +
    "\067\162\114\163\073\167\161\170\016\172\054\173\166" +
    "\174\027\175\146\176\040\177\140\200\100\201\147\202" +
    "\076\203\036\204\053\206\103\212\354\220\164\223\110" +
    "\224\122\225\062\231\126\001\002\000\156\004\157\006" +
    "\117\007\011\010\066\011\176\012\055\013\064\017\141" +
    "\033\113\044\256\056\163\057\031\067\165\070\013\071" +
    "\021\072\046\073\050\074\145\075\006\076\035\105\254" +
    "\106\142\107\042\110\072\112\060\113\030\114\074\115" +
    "\052\116\136\117\115\124\067\162\114\163\073\167\161" +
    "\170\016\172\054\173\166\174\027\175\146\176\040\177" +
    "\140\200\100\201\147\202\076\203\036\204\053\206\103" +
    "\212\354\220\164\222\u0160\223\110\224\122\225\062\231" +
    "\126\001\002\000\154\004\157\006\117\007\011\010\066" +
    "\011\176\012\055\013\064\017\141\033\113\044\256\056" +
    "\163\057\031\067\165\070\013\071\021\072\046\073\050" +
    "\074\145\075\006\076\035\105\254\106\142\107\042\110" +
    "\072\112\060\113\030\114\074\115\052\116\136\117\115" +
    "\124\067\162\114\163\073\167\161\170\016\172\054\173" +
    "\166\174\027\175\146\176\040\177\140\200\100\201\147" +
    "\202\076\203\036\204\053\206\103\212\354\220\164\223" +
    "\110\224\122\225\062\231\126\001\002\000\154\004\157" +
    "\006\117\007\011\010\066\011\176\012\055\013\064\017" +
    "\141\033\113\044\256\056\163\057\031\067\165\070\013" +
    "\071\021\072\046\073\050\074\145\075\006\076\035\105" +
    "\254\106\142\107\042\110\072\112\060\113\030\114\074" +
    "\115\052\116\136\117\115\124\067\162\114\163\073\167" +
    "\161\170\016\172\054\173\166\174\027\175\146\176\040" +
    "\177\140\200\100\201\147\202\076\203\036\204\053\206" +
    "\103\212\354\220\164\223\110\224\122\225\062\231\126" +
    "\001\002\000\154\004\157\006\117\007\011\010\066\011" +
    "\176\012\055\013\064\017\141\033\113\044\256\056\163" +
    "\057\031\067\165\070\013\071\021\072\046\073\050\074" +
    "\145\075\006\076\035\105\254\106\142\107\042\110\072" +
    "\112\060\113\030\114\074\115\052\116\136\117\115\124" +
    "\067\162\114\163\073\167\161\170\016\172\054\173\166" +
    "\174\027\175\146\176\040\177\140\200\100\201\147\202" +
    "\076\203\036\204\053\206\103\212\354\220\164\223\110" +
    "\224\122\225\062\231\126\001\002\000\154\004\157\006" +
    "\117\007\011\010\066\011\176\012\055\013\064\017\141" +
    "\033\113\044\256\056\163\057\031\067\165\070\013\071" +
    "\021\072\046\073\050\074\145\075\006\076\035\105\254" +
    "\106\142\107\042\110\072\112\060\113\030\114\074\115" +
    "\052\116\136\117\115\124\067\162\114\163\073\167\161" +
    "\170\016\172\054\173\166\174\027\175\146\176\040\177" +
    "\140\200\100\201\147\202\076\203\036\204\053\206\103" +
    "\212\354\220\164\223\110\224\122\225\062\231\126\001" +
    "\002\000\154\004\157\006\117\007\011\010\066\011\176" +
    "\012\055\013\064\017\141\033\113\044\256\056\163\057" +
    "\031\067\165\070\013\071\021\072\046\073\050\074\145" +
    "\075\006\076\035\105\254\106\142\107\042\110\072\112" +
    "\060\113\030\114\074\115\052\116\136\117\115\124\067" +
    "\162\114\163\073\167\161\170\016\172\054\173\166\174" +
    "\027\175\146\176\040\177\140\200\100\201\147\202\076" +
    "\203\036\204\053\206\103\212\354\220\164\223\110\224" +
    "\122\225\062\231\126\001\002\000\154\004\157\006\117" +
    "\007\011\010\066\011\176\012\055\013\064\017\141\033" +
    "\113\044\256\056\163\057\031\067\165\070\013\071\021" +
    "\072\046\073\050\074\145\075\006\076\035\105\254\106" +
    "\142\107\042\110\072\112\060\113\030\114\074\115\052" +
    "\116\136\117\115\124\067\162\114\163\073\167\161\170" +
    "\016\172\054\173\166\174\027\175\146\176\040\177\140" +
    "\200\100\201\147\202\076\203\036\204\053\206\103\212" +
    "\354\220\164\223\110\224\122\225\062\231\126\001\002" +
    "\000\154\004\157\006\117\007\011\010\066\011\176\012" +
    "\055\013\064\017\141\033\113\044\256\056\163\057\031" +
    "\067\165\070\013\071\021\072\046\073\050\074\145\075" +
    "\006\076\035\105\254\106\142\107\042\110\072\112\060" +
    "\113\030\114\074\115\052\116\136\117\115\124\067\162" +
    "\114\163\073\167\161\170\016\172\054\173\166\174\027" +
    "\175\146\176\040\177\140\200\100\201\147\202\076\203" +
    "\036\204\053\206\103\212\354\220\164\223\110\224\122" +
    "\225\062\231\126\001\002\000\154\004\157\006\117\007" +
    "\011\010\066\011\176\012\055\013\064\017\141\033\113" +
    "\044\256\056\163\057\031\067\165\070\013\071\021\072" +
    "\046\073\050\074\145\075\006\076\035\105\254\106\142" +
    "\107\042\110\072\112\060\113\030\114\074\115\052\116" +
    "\136\117\115\124\067\162\114\163\073\167\161\170\016" +
    "\172\054\173\166\174\027\175\146\176\040\177\140\200" +
    "\100\201\147\202\076\203\036\204\053\206\103\212\354" +
    "\220\164\223\110\224\122\225\062\231\126\001\002\000" +
    "\154\004\157\006\117\007\011\010\066\011\176\012\055" +
    "\013\064\017\141\033\113\044\256\056\163\057\031\067" +
    "\165\070\013\071\021\072\046\073\050\074\145\075\006" +
    "\076\035\105\254\106\142\107\042\110\072\112\060\113" +
    "\030\114\074\115\052\116\136\117\115\124\067\162\114" +
    "\163\073\167\161\170\016\172\054\173\166\174\027\175" +
    "\146\176\040\177\140\200\100\201\147\202\076\203\036" +
    "\204\053\206\103\212\354\220\164\223\110\224\122\225" +
    "\062\231\126\001\002\000\154\004\157\006\117\007\011" +
    "\010\066\011\176\012\055\013\064\017\141\033\113\044" +
    "\256\056\163\057\031\067\165\070\013\071\021\072\046" +
    "\073\050\074\145\075\006\076\035\105\254\106\142\107" +
    "\042\110\072\112\060\113\030\114\074\115\052\116\136" +
    "\117\115\124\067\162\114\163\073\167\161\170\016\172" +
    "\054\173\166\174\027\175\146\176\040\177\140\200\100" +
    "\201\147\202\076\203\036\204\053\206\103\212\354\220" +
    "\164\223\110\224\122\225\062\231\126\001\002\000\020" +
    "\011\176\013\064\105\u012a\110\u0124\112\060\212\211\223" +
    "\110\001\002\000\154\004\157\006\117\007\011\010\066" +
    "\011\176\012\055\013\064\017\141\033\113\044\256\056" +
    "\163\057\031\067\165\070\013\071\021\072\046\073\050" +
    "\074\145\075\006\076\035\105\254\106\142\107\042\110" +
    "\072\112\060\113\030\114\074\115\052\116\136\117\115" +
    "\124\067\162\114\163\073\167\161\170\016\172\054\173" +
    "\166\174\027\175\146\176\040\177\140\200\100\201\147" +
    "\202\076\203\036\204\053\206\103\212\354\220\164\223" +
    "\110\224\122\225\062\231\126\001\002\000\154\004\157" +
    "\006\117\007\011\010\066\011\176\012\055\013\064\017" +
    "\141\033\113\044\256\056\163\057\031\067\165\070\013" +
    "\071\021\072\046\073\050\074\145\075\006\076\035\105" +
    "\254\106\142\107\042\110\072\112\060\113\030\114\074" +
    "\115\052\116\136\117\115\124\067\162\114\163\073\167" +
    "\161\170\016\172\054\173\166\174\027\175\146\176\040" +
    "\177\140\200\100\201\147\202\076\203\036\204\053\206" +
    "\103\212\354\220\164\223\110\224\122\225\062\231\126" +
    "\001\002\000\154\004\157\006\117\007\011\010\066\011" +
    "\176\012\055\013\064\017\141\033\113\044\256\056\163" +
    "\057\031\067\165\070\013\071\021\072\046\073\050\074" +
    "\145\075\006\076\035\105\254\106\142\107\042\110\072" +
    "\112\060\113\030\114\074\115\052\116\136\117\115\124" +
    "\067\162\114\163\073\167\161\170\016\172\054\173\166" +
    "\174\027\175\146\176\040\177\140\200\100\201\147\202" +
    "\076\203\036\204\053\206\103\212\354\220\164\223\110" +
    "\224\122\225\062\231\126\001\002\000\154\004\157\006" +
    "\117\007\011\010\066\011\176\012\055\013\064\017\141" +
    "\033\113\044\256\056\163\057\031\067\165\070\013\071" +
    "\021\072\046\073\050\074\145\075\006\076\035\105\254" +
    "\106\142\107\042\110\072\112\060\113\030\114\074\115" +
    "\052\116\136\117\115\124\067\162\114\163\073\167\161" +
    "\170\016\172\054\173\166\174\027\175\146\176\040\177" +
    "\140\200\100\201\147\202\076\203\036\204\053\206\103" +
    "\212\354\220\164\223\110\224\122\225\062\231\126\001" +
    "\002\000\154\004\157\006\117\007\011\010\066\011\176" +
    "\012\055\013\064\017\141\033\113\044\256\056\163\057" +
    "\031\067\165\070\013\071\021\072\046\073\050\074\145" +
    "\075\006\076\035\105\254\106\142\107\042\110\072\112" +
    "\060\113\030\114\074\115\052\116\136\117\115\124\067" +
    "\162\114\163\073\167\161\170\016\172\054\173\166\174" +
    "\027\175\146\176\040\177\140\200\100\201\147\202\076" +
    "\203\036\204\053\206\103\212\354\220\164\223\110\224" +
    "\122\225\062\231\126\001\002\000\154\004\157\006\117" +
    "\007\011\010\066\011\176\012\055\013\064\017\141\033" +
    "\113\044\256\056\163\057\031\067\165\070\013\071\021" +
    "\072\046\073\050\074\145\075\006\076\035\105\254\106" +
    "\142\107\042\110\072\112\060\113\030\114\074\115\052" +
    "\116\136\117\115\124\067\162\114\163\073\167\161\170" +
    "\016\172\054\173\166\174\027\175\146\176\040\177\140" +
    "\200\100\201\147\202\076\203\036\204\053\206\103\212" +
    "\354\220\164\223\110\224\122\225\062\231\126\001\002" +
    "\000\154\004\157\006\117\007\011\010\066\011\176\012" +
    "\055\013\064\017\141\033\113\044\256\056\163\057\031" +
    "\067\165\070\013\071\021\072\046\073\050\074\145\075" +
    "\006\076\035\105\254\106\142\107\042\110\072\112\060" +
    "\113\030\114\074\115\052\116\136\117\115\124\067\162" +
    "\114\163\073\167\161\170\016\172\054\173\166\174\027" +
    "\175\146\176\040\177\140\200\100\201\147\202\076\203" +
    "\036\204\053\206\103\212\354\220\164\223\110\224\122" +
    "\225\062\231\126\001\002\000\154\004\157\006\117\007" +
    "\011\010\066\011\176\012\055\013\064\017\141\033\113" +
    "\044\256\056\163\057\031\067\165\070\013\071\021\072" +
    "\046\073\050\074\145\075\006\076\035\105\254\106\142" +
    "\107\042\110\072\112\060\113\030\114\074\115\052\116" +
    "\136\117\115\124\067\162\114\163\073\167\161\170\016" +
    "\172\054\173\166\174\027\175\146\176\040\177\140\200" +
    "\100\201\147\202\076\203\036\204\053\206\103\212\354" +
    "\220\164\223\110\224\122\225\062\231\126\001\002\000" +
    "\012\032\u0111\164\u010f\165\u010e\166\u0101\001\ufef2\000\062" +
    "\032\u0111\123\u0103\141\u0106\143\u0102\144\u0112\145\u0104\146" +
    "\u010b\147\u0113\150\u0117\151\u010d\152\u0100\153\u010a\154\u0116" +
    "\155\u0114\156\u0107\157\u0115\160\u0110\161\u010c\162\u0119\163" +
    "\u0108\164\u010f\165\u010e\166\u0101\171\u0105\001\ufef7\000\034" +
    "\032\u0111\154\u0116\155\u0114\156\u0107\157\u0115\160\u0110\161" +
    "\u010c\162\u0119\163\u0108\164\u010f\165\u010e\166\u0101\171\u0105" +
    "\001\ufee5\000\024\032\u0111\160\u0110\161\u010c\162\u0119\163" +
    "\u0108\164\u010f\165\u010e\166\u0101\171\u0105\001\ufee2\000\024" +
    "\032\u0111\160\u0110\161\u010c\162\u0119\163\u0108\164\u010f\165" +
    "\u010e\166\u0101\171\u0105\001\ufee1\000\024\032\u0111\160\u0110" +
    "\161\u010c\162\u0119\163\u0108\164\u010f\165\u010e\166\u0101\171" +
    "\u0105\001\ufee0\000\044\032\u0111\150\u0117\151\u010d\152\u0100" +
    "\153\u010a\154\u0116\155\u0114\156\u0107\157\u0115\160\u0110\161" +
    "\u010c\162\u0119\163\u0108\164\u010f\165\u010e\166\u0101\171\u0105" +
    "\001\ufef5\000\052\032\u0111\145\u0104\146\u010b\147\u0113\150" +
    "\u0117\151\u010d\152\u0100\153\u010a\154\u0116\155\u0114\156\u0107" +
    "\157\u0115\160\u0110\161\u010c\162\u0119\163\u0108\164\u010f\165" +
    "\u010e\166\u0101\171\u0105\001\ufefa\000\002\001\ufeb2\000\004" +
    "\104\u0153\001\002\000\006\011\176\112\060\001\002\000" +
    "\010\102\u0133\104\ufe68\204\u0134\001\ufe62\000\004\104\u0150" +
    "\001\ufeb3\000\002\001\ufedf\000\004\065\u013a\001\ufeb0\000" +
    "\006\013\064\223\u012f\001\002\000\004\110\u012c\001\002" +
    "\000\002\001\ufeb9\000\006\011\176\112\060\001\002\000" +
    "\002\001\ufeb8\000\006\102\u0133\204\u0134\001\ufe61\000\004" +
    "\102\u0130\001\ufe50\000\154\004\157\006\117\007\011\010" +
    "\066\011\176\012\055\013\064\017\141\033\113\044\256" +
    "\056\163\057\031\067\165\070\013\071\021\072\046\073" +
    "\050\074\145\075\006\076\035\105\254\106\142\107\042" +
    "\110\072\112\060\113\030\114\074\115\052\116\136\117" +
    "\115\124\067\162\114\163\073\167\161\170\016\172\054" +
    "\173\166\174\027\175\146\176\040\177\140\200\100\201" +
    "\147\202\076\203\036\204\053\206\103\212\354\220\164" +
    "\223\110\224\122\225\062\231\126\001\002\000\070\032" +
    "\u0111\103\u0132\121\u0109\122\u0118\123\u0103\141\u0106\143\u0102" +
    "\144\u0112\145\u0104\146\u010b\147\u0113\150\u0117\151\u010d\152" +
    "\u0100\153\u010a\154\u0116\155\u0114\156\u0107\157\u0115\160\u0110" +
    "\161\u010c\162\u0119\163\u0108\164\u010f\165\u010e\166\u0101\171" +
    "\u0105\001\002\000\002\001\ufe5b\000\154\004\157\006\117" +
    "\007\011\010\066\011\176\012\055\013\064\017\141\033" +
    "\113\044\256\056\163\057\031\067\165\070\013\071\021" +
    "\072\046\073\050\074\145\075\006\076\035\105\254\106" +
    "\142\107\042\110\072\112\060\113\030\114\074\115\052" +
    "\116\136\117\115\124\067\162\114\163\073\167\161\170" +
    "\016\172\054\173\166\174\027\175\146\176\040\177\140" +
    "\200\100\201\147\202\076\203\036\204\053\206\103\212" +
    "\354\220\164\223\110\224\122\225\062\231\126\001\002" +
    "\000\154\004\157\006\117\007\011\010\066\011\176\012" +
    "\055\013\064\017\141\033\113\044\256\056\163\057\031" +
    "\067\165\070\013\071\021\072\046\073\050\074\145\075" +
    "\006\076\035\105\254\106\142\107\042\110\072\112\060" +
    "\113\030\114\074\115\052\116\136\117\115\124\067\162" +
    "\114\163\073\167\161\170\016\172\054\173\166\174\027" +
    "\175\146\176\040\177\140\200\100\201\147\202\076\203" +
    "\036\204\053\206\103\212\354\220\164\223\110\224\122" +
    "\225\062\231\126\001\ufe5a\000\066\032\u0111\121\u0109\122" +
    "\u0118\123\u0103\141\u0106\143\u0102\144\u0112\145\u0104\146\u010b" +
    "\147\u0113\150\u0117\151\u010d\152\u0100\153\u010a\154\u0116\155" +
    "\u0114\156\u0107\157\u0115\160\u0110\161\u010c\162\u0119\163\u0108" +
    "\164\u010f\165\u010e\166\u0101\171\u0105\001\ufe59\000\004\205" +
    "\u0137\001\002\000\002\001\ufe5f\000\070\032\u0111\103\u0139" +
    "\121\u0109\122\u0118\123\u0103\141\u0106\143\u0102\144\u0112\145" +
    "\u0104\146\u010b\147\u0113\150\u0117\151\u010d\152\u0100\153\u010a" +
    "\154\u0116\155\u0114\156\u0107\157\u0115\160\u0110\161\u010c\162" +
    "\u0119\163\u0108\164\u010f\165\u010e\166\u0101\171\u0105\001\002" +
    "\000\002\001\ufe5e\000\014\011\176\013\064\102\u0141\112" +
    "\060\223\110\001\002\000\002\001\ufe53\000\002\001\ufe54" +
    "\000\002\001\ufe57\000\002\001\ufeae\000\006\102\u0146\204" +
    "\u0147\001\ufe58\000\006\013\064\223\u012f\001\002\000\154" +
    "\004\157\006\117\007\011\010\066\011\176\012\055\013" +
    "\064\017\141\033\113\044\256\056\163\057\031\067\165" +
    "\070\013\071\021\072\046\073\050\074\145\075\006\076" +
    "\035\105\254\106\142\107\042\110\072\112\060\113\030" +
    "\114\074\115\052\116\136\117\115\124\067\162\114\163" +
    "\073\167\161\170\016\172\054\173\166\174\027\175\146" +
    "\176\040\177\140\200\100\201\147\202\076\203\036\204" +
    "\053\206\103\212\354\220\164\223\110\224\122\225\062" +
    "\231\126\001\002\000\006\102\u0133\204\u0134\001\ufe6c\000" +
    "\070\032\u0111\103\u0144\121\u0109\122\u0118\123\u0103\141\u0106" +
    "\143\u0102\144\u0112\145\u0104\146\u010b\147\u0113\150\u0117\151" +
    "\u010d\152\u0100\153\u010a\154\u0116\155\u0114\156\u0107\157\u0115" +
    "\160\u0110\161\u010c\162\u0119\163\u0108\164\u010f\165\u010e\166" +
    "\u0101\171\u0105\001\002\000\002\001\ufe52\000\006\102\u0133" +
    "\204\u0134\001\ufe6b\000\154\004\157\006\117\007\011\010" +
    "\066\011\176\012\055\013\064\017\141\033\113\044\256" +
    "\056\163\057\031\067\165\070\013\071\021\072\046\073" +
    "\050\074\145\075\006\076\035\105\254\106\142\107\042" +
    "\110\072\112\060\113\030\114\074\115\052\116\136\117" +
    "\115\124\067\162\114\163\073\167\161\170\016\172\054" +
    "\173\166\174\027\175\146\176\040\177\140\200\100\201" +
    "\147\202\076\203\036\204\053\206\103\212\354\220\164" +
    "\223\110\224\122\225\062\231\126\001\002\000\154\004" +
    "\157\006\117\007\011\010\066\011\176\012\055\013\064" +
    "\017\141\033\113\044\256\056\163\057\031\067\165\070" +
    "\013\071\021\072\046\073\050\074\145\075\006\076\035" +
    "\105\254\106\142\107\042\110\072\112\060\113\030\114" +
    "\074\115\052\116\136\117\115\124\067\162\114\163\073" +
    "\167\161\170\016\172\054\173\166\174\027\175\146\176" +
    "\040\177\140\200\100\201\147\202\076\203\036\204\053" +
    "\206\103\212\354\220\164\223\110\224\122\225\062\231" +
    "\126\001\ufe5a\000\004\205\u0149\001\002\000\002\001\ufe56" +
    "\000\070\032\u0111\103\u014b\121\u0109\122\u0118\123\u0103\141" +
    "\u0106\143\u0102\144\u0112\145\u0104\146\u010b\147\u0113\150\u0117" +
    "\151\u010d\152\u0100\153\u010a\154\u0116\155\u0114\156\u0107\157" +
    "\u0115\160\u0110\161\u010c\162\u0119\163\u0108\164\u010f\165\u010e" +
    "\166\u0101\171\u0105\001\002\000\002\001\ufe55\000\004\065" +
    "\u014e\001\ufeb1\000\002\001\ufeaf\000\014\011\176\013\064" +
    "\102\u0141\112\060\223\110\001\002\000\002\001\ufead\000" +
    "\006\013\064\223\110\001\002\000\002\001\ufe6a\000\002" +
    "\001\ufeb7\000\006\013\064\223\110\001\002\000\002\001" +
    "\ufe69\000\020\032\u0111\162\u0119\163\u0108\164\u010f\165\u010e" +
    "\166\u0101\171\u0105\001\ufeed\000\004\032\u0111\001\ufef0\000" +
    "\004\032\u0111\001\ufeef\000\034\032\u0111\154\u0116\155\u0114" +
    "\156\u0107\157\u0115\160\u0110\161\u010c\162\u0119\163\u0108\164" +
    "\u010f\165\u010e\166\u0101\171\u0105\001\ufee4\000\020\032\u0111" +
    "\162\u0119\163\u0108\164\u010f\165\u010e\166\u0101\171\u0105\001" +
    "\ufeec\000\046\032\u0111\147\u0113\150\u0117\151\u010d\152\u0100" +
    "\153\u010a\154\u0116\155\u0114\156\u0107\157\u0115\160\u0110\161" +
    "\u010c\162\u0119\163\u0108\164\u010f\165\u010e\166\u0101\171\u0105" +
    "\001\ufef4\000\034\032\u0111\154\u0116\155\u0114\156\u0107\157" +
    "\u0115\160\u0110\161\u010c\162\u0119\163\u0108\164\u010f\165\u010e" +
    "\166\u0101\171\u0105\001\ufee6\000\064\032\u0111\122\u0118\123" +
    "\u0103\141\u0106\143\u0102\144\u0112\145\u0104\146\u010b\147\u0113" +
    "\150\u0117\151\u010d\152\u0100\153\u010a\154\u0116\155\u0114\156" +
    "\u0107\157\u0115\160\u0110\161\u010c\162\u0119\163\u0108\164\u010f" +
    "\165\u010e\166\u0101\171\u0105\001\ufef9\000\012\032\u0111\164" +
    "\u010f\165\u010e\166\u0101\001\ufef1\000\024\032\u0111\160\u0110" +
    "\161\u010c\162\u0119\163\u0108\164\u010f\165\u010e\166\u0101\171" +
    "\u0105\001\ufee3\000\070\032\u0111\121\u0109\122\u0118\123\u0103" +
    "\141\u0106\143\u0102\144\u0112\145\u0104\146\u010b\147\u0113\150" +
    "\u0117\151\u010d\152\u0100\153\u010a\154\u0116\155\u0114\156\u0107" +
    "\157\u0115\160\u0110\161\u010c\162\u0119\163\u0108\164\u010f\165" +
    "\u010e\166\u0101\171\u0105\222\u0162\001\002\000\154\004\157" +
    "\006\117\007\011\010\066\011\176\012\055\013\064\017" +
    "\141\033\113\044\256\056\163\057\031\067\165\070\013" +
    "\071\021\072\046\073\050\074\145\075\006\076\035\105" +
    "\254\106\142\107\042\110\072\112\060\113\030\114\074" +
    "\115\052\116\136\117\115\124\067\162\114\163\073\167" +
    "\161\170\016\172\054\173\166\174\027\175\146\176\040" +
    "\177\140\200\100\201\147\202\076\203\036\204\053\206" +
    "\103\212\354\220\164\223\110\224\122\225\062\231\126" +
    "\001\002\000\066\032\u0111\121\u0109\122\u0118\123\u0103\141" +
    "\u0106\143\u0102\144\u0112\145\u0104\146\u010b\147\u0113\150\u0117" +
    "\151\u010d\152\u0100\153\u010a\154\u0116\155\u0114\156\u0107\157" +
    "\u0115\160\u0110\161\u010c\162\u0119\163\u0108\164\u010f\165\u010e" +
    "\166\u0101\171\u0105\001\ufeda\000\154\004\157\006\117\007" +
    "\011\010\066\011\176\012\055\013\064\017\141\033\113" +
    "\044\256\056\163\057\031\067\165\070\013\071\021\072" +
    "\046\073\050\074\145\075\006\076\035\105\254\106\142" +
    "\107\042\110\072\112\060\113\030\114\074\115\052\116" +
    "\136\117\115\124\067\162\114\163\073\167\161\170\016" +
    "\172\054\173\166\174\027\175\146\176\040\177\140\200" +
    "\100\201\147\202\076\203\036\204\053\206\103\212\354" +
    "\220\164\223\110\224\122\225\062\231\126\001\002\000" +
    "\066\032\u0111\121\u0109\122\u0118\123\u0103\141\u0106\143\u0102" +
    "\144\u0112\145\u0104\146\u010b\147\u0113\150\u0117\151\u010d\152" +
    "\u0100\153\u010a\154\u0116\155\u0114\156\u0107\157\u0115\160\u0110" +
    "\161\u010c\162\u0119\163\u0108\164\u010f\165\u010e\166\u0101\171" +
    "\u0105\001\ufedb\000\012\032\u0111\164\u010f\165\u010e\166\u0101" +
    "\001\ufef3\000\050\032\u0111\146\u010b\147\u0113\150\u0117\151" +
    "\u010d\152\u0100\153\u010a\154\u0116\155\u0114\156\u0107\157\u0115" +
    "\160\u0110\161\u010c\162\u0119\163\u0108\164\u010f\165\u010e\166" +
    "\u0101\171\u0105\001\ufef6\000\060\032\u0111\141\u0106\143\u0102" +
    "\144\u0112\145\u0104\146\u010b\147\u0113\150\u0117\151\u010d\152" +
    "\u0100\153\u010a\154\u0116\155\u0114\156\u0107\157\u0115\160\u0110" +
    "\161\u010c\162\u0119\163\u0108\164\u010f\165\u010e\166\u0101\171" +
    "\u0105\001\ufef8\000\054\032\u0111\144\u0112\145\u0104\146\u010b" +
    "\147\u0113\150\u0117\151\u010d\152\u0100\153\u010a\154\u0116\155" +
    "\u0114\156\u0107\157\u0115\160\u0110\161\u010c\162\u0119\163\u0108" +
    "\164\u010f\165\u010e\166\u0101\171\u0105\001\ufefb\000\004\032" +
    "\u0111\001\ufeee\000\034\032\u0111\154\u0116\155\u0114\156\u0107" +
    "\157\u0115\160\u0110\161\u010c\162\u0119\163\u0108\164\u010f\165" +
    "\u010e\166\u0101\171\u0105\001\ufee7\000\060\032\u0111\141\u0106" +
    "\143\u0102\144\u0112\145\u0104\146\u010b\147\u0113\150\u0117\151" +
    "\u010d\152\u0100\153\u010a\154\u0116\155\u0114\156\u0107\157\u0115" +
    "\160\u0110\161\u010c\162\u0119\163\u0108\164\u010f\165\u010e\166" +
    "\u0101\171\u0105\001\uff06\000\060\032\u0111\141\u0106\143\u0102" +
    "\144\u0112\145\u0104\146\u010b\147\u0113\150\u0117\151\u010d\152" +
    "\u0100\153\u010a\154\u0116\155\u0114\156\u0107\157\u0115\160\u0110" +
    "\161\u010c\162\u0119\163\u0108\164\u010f\165\u010e\166\u0101\171" +
    "\u0105\001\uff04\000\060\032\u0111\141\u0106\143\u0102\144\u0112" +
    "\145\u0104\146\u010b\147\u0113\150\u0117\151\u010d\152\u0100\153" +
    "\u010a\154\u0116\155\u0114\156\u0107\157\u0115\160\u0110\161\u010c" +
    "\162\u0119\163\u0108\164\u010f\165\u010e\166\u0101\171\u0105\001" +
    "\uff00\000\060\032\u0111\141\u0106\143\u0102\144\u0112\145\u0104" +
    "\146\u010b\147\u0113\150\u0117\151\u010d\152\u0100\153\u010a\154" +
    "\u0116\155\u0114\156\u0107\157\u0115\160\u0110\161\u010c\162\u0119" +
    "\163\u0108\164\u010f\165\u010e\166\u0101\171\u0105\001\uff05\000" +
    "\060\032\u0111\141\u0106\143\u0102\144\u0112\145\u0104\146\u010b" +
    "\147\u0113\150\u0117\151\u010d\152\u0100\153\u010a\154\u0116\155" +
    "\u0114\156\u0107\157\u0115\160\u0110\161\u010c\162\u0119\163\u0108" +
    "\164\u010f\165\u010e\166\u0101\171\u0105\001\uff01\000\060\032" +
    "\u0111\141\u0106\143\u0102\144\u0112\145\u0104\146\u010b\147\u0113" +
    "\150\u0117\151\u010d\152\u0100\153\u010a\154\u0116\155\u0114\156" +
    "\u0107\157\u0115\160\u0110\161\u010c\162\u0119\163\u0108\164\u010f" +
    "\165\u010e\166\u0101\171\u0105\001\uff0a\000\060\032\u0111\141" +
    "\u0106\143\u0102\144\u0112\145\u0104\146\u010b\147\u0113\150\u0117" +
    "\151\u010d\152\u0100\153\u010a\154\u0116\155\u0114\156\u0107\157" +
    "\u0115\160\u0110\161\u010c\162\u0119\163\u0108\164\u010f\165\u010e" +
    "\166\u0101\171\u0105\001\uff07\000\060\032\u0111\141\u0106\143" +
    "\u0102\144\u0112\145\u0104\146\u010b\147\u0113\150\u0117\151\u010d" +
    "\152\u0100\153\u010a\154\u0116\155\u0114\156\u0107\157\u0115\160" +
    "\u0110\161\u010c\162\u0119\163\u0108\164\u010f\165\u010e\166\u0101" +
    "\171\u0105\001\uff03\000\060\032\u0111\141\u0106\143\u0102\144" +
    "\u0112\145\u0104\146\u010b\147\u0113\150\u0117\151\u010d\152\u0100" +
    "\153\u010a\154\u0116\155\u0114\156\u0107\157\u0115\160\u0110\161" +
    "\u010c\162\u0119\163\u0108\164\u010f\165\u010e\166\u0101\171\u0105" +
    "\001\uff09\000\022\011\176\013\064\105\u017a\110\u0176\112" +
    "\060\206\u0179\212\211\223\110\001\002\000\060\032\u0111" +
    "\141\u0106\143\u0102\144\u0112\145\u0104\146\u010b\147\u0113\150" +
    "\u0117\151\u010d\152\u0100\153\u010a\154\u0116\155\u0114\156\u0107" +
    "\157\u0115\160\u0110\161\u010c\162\u0119\163\u0108\164\u010f\165" +
    "\u010e\166\u0101\171\u0105\001\uff0e\000\004\104\u0193\001\002" +
    "\000\006\011\176\112\060\001\002\000\002\001\uff0d\000" +
    "\004\104\u0186\001\002\000\020\011\176\013\064\105\u012a" +
    "\110\u0124\112\060\212\211\223\110\001\002\000\004\110" +
    "\u017f\001\002\000\004\220\u017c\001\ufeb9\000\156\004\157" +
    "\006\117\007\011\010\066\011\176\012\055\013\064\017" +
    "\141\033\113\044\256\056\163\057\031\067\165\070\013" +
    "\071\021\072\046\073\050\074\145\075\006\076\035\105" +
    "\254\106\142\107\042\110\072\112\060\113\030\114\074" +
    "\115\052\116\136\117\115\124\067\147\351\162\114\163" +
    "\073\167\161\170\016\172\054\173\166\174\027\175\146" +
    "\176\040\177\140\200\100\201\147\202\076\203\036\204" +
    "\053\206\103\212\354\220\164\223\110\224\122\225\062" +
    "\231\126\001\uff63\000\004\221\u017e\001\002\000\002\001" +
    "\ufec2\000\006\011\176\112\060\001\002\000\004\220\347" +
    "\001\ufeb8\000\004\220\u0183\001\ufea6\000\002\001\uff0c\000" +
    "\156\004\157\006\117\007\011\010\066\011\176\012\055" +
    "\013\064\017\141\033\113\044\256\056\163\057\031\067" +
    "\165\070\013\071\021\072\046\073\050\074\145\075\006" +
    "\076\035\105\254\106\142\107\042\110\072\112\060\113" +
    "\030\114\074\115\052\116\136\117\115\124\067\147\351" +
    "\162\114\163\073\167\161\170\016\172\054\173\166\174" +
    "\027\175\146\176\040\177\140\200\100\201\147\202\076" +
    "\203\036\204\053\206\103\212\354\220\164\223\110\224" +
    "\122\225\062\231\126\001\uff63\000\004\221\u0185\001\002" +
    "\000\002\001\ufea5\000\014\011\176\013\064\102\u0141\112" +
    "\060\223\110\001\002\000\004\220\u018c\001\002\000\004" +
    "\220\u0189\001\ufe6a\000\156\004\157\006\117\007\011\010" +
    "\066\011\176\012\055\013\064\017\141\033\113\044\256" +
    "\056\163\057\031\067\165\070\013\071\021\072\046\073" +
    "\050\074\145\075\006\076\035\105\254\106\142\107\042" +
    "\110\072\112\060\113\030\114\074\115\052\116\136\117" +
    "\115\124\067\147\351\162\114\163\073\167\161\170\016" +
    "\172\054\173\166\174\027\175\146\176\040\177\140\200" +
    "\100\201\147\202\076\203\036\204\053\206\103\212\354" +
    "\220\164\223\110\224\122\225\062\231\126\001\uff63\000" +
    "\004\221\u018b\001\002\000\002\001\ufebe\000\156\004\157" +
    "\006\117\007\011\010\066\011\176\012\055\013\064\017" +
    "\141\033\113\044\256\056\163\057\031\067\165\070\013" +
    "\071\021\072\046\073\050\074\145\075\006\076\035\105" +
    "\254\106\142\107\042\110\072\112\060\113\030\114\074" +
    "\115\052\116\136\117\115\124\067\147\351\162\114\163" +
    "\073\167\161\170\016\172\054\173\166\174\027\175\146" +
    "\176\040\177\140\200\100\201\147\202\076\203\036\204" +
    "\053\206\103\212\354\220\164\223\110\224\122\225\062" +
    "\231\126\001\uff63\000\004\221\u018e\001\002\000\002\001" +
    "\ufebf\000\004\220\u0190\001\ufeb7\000\156\004\157\006\117" +
    "\007\011\010\066\011\176\012\055\013\064\017\141\033" +
    "\113\044\256\056\163\057\031\067\165\070\013\071\021" +
    "\072\046\073\050\074\145\075\006\076\035\105\254\106" +
    "\142\107\042\110\072\112\060\113\030\114\074\115\052" +
    "\116\136\117\115\124\067\147\351\162\114\163\073\167" +
    "\161\170\016\172\054\173\166\174\027\175\146\176\040" +
    "\177\140\200\100\201\147\202\076\203\036\204\053\206" +
    "\103\212\354\220\164\223\110\224\122\225\062\231\126" +
    "\001\uff63\000\004\221\u0192\001\002\000\002\001\ufec0\000" +
    "\014\011\176\013\064\102\u0141\112\060\223\110\001\002" +
    "\000\004\220\u0199\001\002\000\004\220\u0196\001\ufe69\000" +
    "\156\004\157\006\117\007\011\010\066\011\176\012\055" +
    "\013\064\017\141\033\113\044\256\056\163\057\031\067" +
    "\165\070\013\071\021\072\046\073\050\074\145\075\006" +
    "\076\035\105\254\106\142\107\042\110\072\112\060\113" +
    "\030\114\074\115\052\116\136\117\115\124\067\147\351" +
    "\162\114\163\073\167\161\170\016\172\054\173\166\174" +
    "\027\175\146\176\040\177\140\200\100\201\147\202\076" +
    "\203\036\204\053\206\103\212\354\220\164\223\110\224" +
    "\122\225\062\231\126\001\uff63\000\004\221\u0198\001\002" +
    "\000\002\001\ufebc\000\156\004\157\006\117\007\011\010" +
    "\066\011\176\012\055\013\064\017\141\033\113\044\256" +
    "\056\163\057\031\067\165\070\013\071\021\072\046\073" +
    "\050\074\145\075\006\076\035\105\254\106\142\107\042" +
    "\110\072\112\060\113\030\114\074\115\052\116\136\117" +
    "\115\124\067\147\351\162\114\163\073\167\161\170\016" +
    "\172\054\173\166\174\027\175\146\176\040\177\140\200" +
    "\100\201\147\202\076\203\036\204\053\206\103\212\354" +
    "\220\164\223\110\224\122\225\062\231\126\001\uff63\000" +
    "\004\221\u019b\001\002\000\002\001\ufebd\000\060\032\u0111" +
    "\141\u0106\143\u0102\144\u0112\145\u0104\146\u010b\147\u0113\150" +
    "\u0117\151\u010d\152\u0100\153\u010a\154\u0116\155\u0114\156\u0107" +
    "\157\u0115\160\u0110\161\u010c\162\u0119\163\u0108\164\u010f\165" +
    "\u010e\166\u0101\171\u0105\001\uff02\000\002\001\uff5d\000\002" +
    "\001\ufe79\000\004\147\261\001\uffb1\000\004\220\u01a1\001" +
    "\002\000\022\003\272\011\176\070\263\105\270\110\273" +
    "\112\060\221\uff71\230\267\001\uff68\000\004\221\u01a3\001" +
    "\002\000\004\052\277\001\ufec8\000\004\102\u01a5\001\002" +
    "\000\002\001\uffe3\000\246\003\127\004\157\005\171\006" +
    "\117\007\011\010\066\011\034\012\055\013\064\015\102" +
    "\017\141\020\134\021\131\022\045\024\033\026\111\030" +
    "\172\033\113\035\143\041\057\042\133\043\077\044\116" +
    "\046\151\047\041\051\167\052\252\053\012\055\104\056" +
    "\163\057\031\060\304\061\032\062\156\067\165\070\013" +
    "\071\021\072\046\073\050\074\145\075\006\076\035\102" +
    "\070\103\u01a7\105\254\106\142\107\042\110\072\111\024" +
    "\112\060\113\030\114\074\115\052\116\136\117\115\124" +
    "\067\142\010\162\114\163\073\167\161\170\016\172\054" +
    "\173\166\174\027\175\146\176\040\177\140\200\100\201" +
    "\147\202\076\203\036\204\053\206\103\212\043\213\065" +
    "\214\017\220\164\223\110\224\122\225\062\227\132\231" +
    "\126\001\002\000\002\001\ufec9\000\002\001\uff60\000\002" +
    "\001\ufec1\000\004\017\u01ae\001\002\000\004\142\u01ad\001" +
    "\002\000\002\001\uffb5\000\002\001\uffc6\000\004\221\u01af" +
    "\001\002\000\002\001\uffb4\000\154\004\157\006\117\007" +
    "\011\010\066\011\176\012\055\013\064\017\141\033\113" +
    "\044\256\056\163\057\031\067\165\070\013\071\021\072" +
    "\046\073\050\074\145\075\006\076\035\105\254\106\142" +
    "\107\042\110\072\112\060\113\030\114\074\115\052\116" +
    "\136\117\115\124\067\162\114\163\073\167\161\170\016" +
    "\172\054\173\166\174\027\175\146\176\040\177\140\200" +
    "\100\201\147\202\076\203\036\204\053\206\103\212\354" +
    "\220\164\223\110\224\122\225\062\231\126\001\002\000" +
    "\070\032\u0111\121\u0109\122\u0118\123\u0103\141\u0106\143\u0102" +
    "\144\u0112\145\u0104\146\u010b\147\u0113\150\u0117\151\u010d\152" +
    "\u0100\153\u010a\154\u0116\155\u0114\156\u0107\157\u0115\160\u0110" +
    "\161\u010c\162\u0119\163\u0108\164\u010f\165\u010e\166\u0101\171" +
    "\u0105\221\u01b2\001\002\000\232\003\127\004\157\005\171" +
    "\006\117\007\011\010\066\011\034\012\055\013\064\015" +
    "\102\017\141\020\134\021\131\022\045\024\033\026\111" +
    "\030\172\033\113\035\143\041\057\042\133\043\077\044" +
    "\256\046\151\047\041\051\167\052\252\053\012\055\104" +
    "\056\163\057\031\067\165\070\013\071\021\072\046\073" +
    "\050\074\145\075\006\076\035\102\070\105\254\106\142" +
    "\107\042\110\072\111\024\112\060\113\030\114\074\115" +
    "\052\116\136\117\115\124\067\142\010\162\114\163\073" +
    "\167\161\170\016\172\054\173\166\174\027\175\146\176" +
    "\040\177\140\200\100\201\147\202\076\203\036\204\053" +
    "\206\103\212\043\220\164\222\u01b3\223\110\224\122\225" +
    "\062\231\126\001\002\000\002\001\uffe3\000\002\001\uff7a" +
    "\000\006\210\u01b8\211\u01b7\001\uff76\000\002\001\uffd8\000" +
    "\230\003\127\004\157\005\171\006\117\007\011\010\066" +
    "\011\034\012\055\013\064\015\102\017\141\020\134\021" +
    "\131\022\045\024\033\026\111\030\172\033\113\035\143" +
    "\041\057\042\133\043\077\044\256\046\151\047\041\051" +
    "\167\052\252\053\012\055\104\056\163\057\031\067\165" +
    "\070\013\071\021\072\046\073\050\074\145\075\006\076" +
    "\035\102\070\105\254\106\142\107\042\110\072\111\024" +
    "\112\060\113\030\114\074\115\052\116\136\117\115\124" +
    "\067\142\010\162\114\163\073\167\161\170\016\172\054" +
    "\173\166\174\027\175\146\176\040\177\140\200\100\201" +
    "\147\202\076\203\036\204\053\206\103\212\043\220\164" +
    "\223\110\224\122\225\062\231\126\001\002\000\004\220" +
    "\u01b9\001\002\000\154\004\157\006\117\007\011\010\066" +
    "\011\176\012\055\013\064\017\141\033\113\044\256\056" +
    "\163\057\031\067\165\070\013\071\021\072\046\073\050" +
    "\074\145\075\006\076\035\105\254\106\142\107\042\110" +
    "\072\112\060\113\030\114\074\115\052\116\136\117\115" +
    "\124\067\162\114\163\073\167\161\170\016\172\054\173" +
    "\166\174\027\175\146\176\040\177\140\200\100\201\147" +
    "\202\076\203\036\204\053\206\103\212\354\220\164\223" +
    "\110\224\122\225\062\231\126\001\002\000\070\032\u0111" +
    "\121\u0109\122\u0118\123\u0103\141\u0106\143\u0102\144\u0112\145" +
    "\u0104\146\u010b\147\u0113\150\u0117\151\u010d\152\u0100\153\u010a" +
    "\154\u0116\155\u0114\156\u0107\157\u0115\160\u0110\161\u010c\162" +
    "\u0119\163\u0108\164\u010f\165\u010e\166\u0101\171\u0105\221\u01bb" +
    "\001\002\000\230\003\127\004\157\005\171\006\117\007" +
    "\011\010\066\011\034\012\055\013\064\015\102\017\141" +
    "\020\134\021\131\022\045\024\033\026\111\030\172\033" +
    "\113\035\143\041\057\042\133\043\077\044\256\046\151" +
    "\047\041\051\167\052\252\053\012\055\104\056\163\057" +
    "\031\067\165\070\013\071\021\072\046\073\050\074\145" +
    "\075\006\076\035\102\070\105\254\106\142\107\042\110" +
    "\072\111\024\112\060\113\030\114\074\115\052\116\136" +
    "\117\115\124\067\142\010\162\114\163\073\167\161\170" +
    "\016\172\054\173\166\174\027\175\146\176\040\177\140" +
    "\200\100\201\147\202\076\203\036\204\053\206\103\212" +
    "\043\220\164\223\110\224\122\225\062\231\126\001\002" +
    "\000\002\001\uff79\000\002\001\uff75\000\244\003\127\004" +
    "\157\005\171\006\117\007\011\010\066\011\034\012\055" +
    "\013\064\015\102\017\141\020\134\021\131\022\045\024" +
    "\033\026\111\030\172\033\113\035\143\041\057\042\133" +
    "\043\077\044\116\046\151\047\041\051\167\052\252\053" +
    "\012\055\104\056\163\057\031\060\304\061\032\062\156" +
    "\067\165\070\013\071\021\072\046\073\050\074\145\075" +
    "\006\076\035\102\070\105\254\106\142\107\042\110\072" +
    "\111\024\112\060\113\030\114\074\115\052\116\136\117" +
    "\115\124\067\142\010\162\114\163\073\167\161\170\016" +
    "\172\054\173\166\174\027\175\146\176\040\177\140\200" +
    "\100\201\147\202\076\203\036\204\053\206\103\212\043" +
    "\213\065\214\017\220\164\223\110\224\122\225\062\227" +
    "\132\231\126\001\uff78\000\006\210\u01c2\211\u01c1\001\uff74" +
    "\000\004\207\u01ca\001\002\000\004\222\u01c8\001\002\000" +
    "\004\220\u01c3\001\002\000\154\004\157\006\117\007\011" +
    "\010\066\011\176\012\055\013\064\017\141\033\113\044" +
    "\256\056\163\057\031\067\165\070\013\071\021\072\046" +
    "\073\050\074\145\075\006\076\035\105\254\106\142\107" +
    "\042\110\072\112\060\113\030\114\074\115\052\116\136" +
    "\117\115\124\067\162\114\163\073\167\161\170\016\172" +
    "\054\173\166\174\027\175\146\176\040\177\140\200\100" +
    "\201\147\202\076\203\036\204\053\206\103\212\354\220" +
    "\164\223\110\224\122\225\062\231\126\001\002\000\070" +
    "\032\u0111\121\u0109\122\u0118\123\u0103\141\u0106\143\u0102\144" +
    "\u0112\145\u0104\146\u010b\147\u0113\150\u0117\151\u010d\152\u0100" +
    "\153\u010a\154\u0116\155\u0114\156\u0107\157\u0115\160\u0110\161" +
    "\u010c\162\u0119\163\u0108\164\u010f\165\u010e\166\u0101\171\u0105" +
    "\221\u01c5\001\002\000\004\222\u01c6\001\002\000\002\001" +
    "\uffe3\000\244\003\127\004\157\005\171\006\117\007\011" +
    "\010\066\011\034\012\055\013\064\015\102\017\141\020" +
    "\134\021\131\022\045\024\033\026\111\030\172\033\113" +
    "\035\143\041\057\042\133\043\077\044\116\046\151\047" +
    "\041\051\167\052\252\053\012\055\104\056\163\057\031" +
    "\060\304\061\032\062\156\067\165\070\013\071\021\072" +
    "\046\073\050\074\145\075\006\076\035\102\070\105\254" +
    "\106\142\107\042\110\072\111\024\112\060\113\030\114" +
    "\074\115\052\116\136\117\115\124\067\142\010\162\114" +
    "\163\073\167\161\170\016\172\054\173\166\174\027\175" +
    "\146\176\040\177\140\200\100\201\147\202\076\203\036" +
    "\204\053\206\103\212\043\213\065\214\017\220\164\223" +
    "\110\224\122\225\062\227\132\231\126\001\uff77\000\002" +
    "\001\uffe3\000\244\003\127\004\157\005\171\006\117\007" +
    "\011\010\066\011\034\012\055\013\064\015\102\017\141" +
    "\020\134\021\131\022\045\024\033\026\111\030\172\033" +
    "\113\035\143\041\057\042\133\043\077\044\116\046\151" +
    "\047\041\051\167\052\252\053\012\055\104\056\163\057" +
    "\031\060\304\061\032\062\156\067\165\070\013\071\021" +
    "\072\046\073\050\074\145\075\006\076\035\102\070\105" +
    "\254\106\142\107\042\110\072\111\024\112\060\113\030" +
    "\114\074\115\052\116\136\117\115\124\067\142\010\162" +
    "\114\163\073\167\161\170\016\172\054\173\166\174\027" +
    "\175\146\176\040\177\140\200\100\201\147\202\076\203" +
    "\036\204\053\206\103\212\043\213\065\214\017\220\164" +
    "\223\110\224\122\225\062\227\132\231\126\001\uff73\000" +
    "\004\142\u01cb\001\002\000\002\001\uffd7\000\070\032\u0111" +
    "\121\u0109\122\u0118\123\u0103\141\u0106\142\u01cd\143\u0102\144" +
    "\u0112\145\u0104\146\u010b\147\u0113\150\u0117\151\u010d\152\u0100" +
    "\153\u010a\154\u0116\155\u0114\156\u0107\157\u0115\160\u0110\161" +
    "\u010c\162\u0119\163\u0108\164\u010f\165\u010e\166\u0101\171\u0105" +
    "\001\002\000\002\001\uffbf\000\002\001\ufefc\000\002\001" +
    "\ufe78\000\022\011\176\013\064\067\u01d4\105\u017a\110\u0176" +
    "\112\060\212\211\223\110\001\ufe4b\000\006\120\u01d8\221" +
    "\u01da\001\002\000\002\001\ufe4e\000\002\001\ufe4d\000\004" +
    "\220\u01d5\001\002\000\022\011\176\013\064\067\u01d4\105" +
    "\u017a\110\u0176\112\060\212\211\223\110\001\ufe4b\000\006" +
    "\120\u01d8\221\u01d7\001\002\000\002\001\ufe4c\000\022\011" +
    "\176\013\064\067\u01d4\105\u017a\110\u0176\112\060\212\211" +
    "\223\110\001\ufe4b\000\002\001\ufe4f\000\004\125\u01db\001" +
    "\002\000\154\004\157\006\117\007\011\010\066\011\176" +
    "\012\055\013\064\017\141\033\113\044\256\056\163\057" +
    "\031\067\165\070\013\071\021\072\046\073\050\074\145" +
    "\075\006\076\035\105\254\106\142\107\042\110\072\112" +
    "\060\113\030\114\074\115\052\116\136\117\115\124\067" +
    "\162\114\163\073\167\161\170\016\172\054\173\166\174" +
    "\027\175\146\176\040\177\140\200\100\201\147\202\076" +
    "\203\036\204\053\206\103\212\354\220\164\223\110\224" +
    "\122\225\062\231\126\001\002\000\060\032\u0111\141\u0106" +
    "\143\u0102\144\u0112\145\u0104\146\u010b\147\u0113\150\u0117\151" +
    "\u010d\152\u0100\153\u010a\154\u0116\155\u0114\156\u0107\157\u0115" +
    "\160\u0110\161\u010c\162\u0119\163\u0108\164\u010f\165\u010e\166" +
    "\u0101\171\u0105\001\uff0f\000\004\221\u01e0\001\ufedd\000\070" +
    "\032\u0111\121\u0109\122\u0118\123\u0103\141\u0106\143\u0102\144" +
    "\u0112\145\u0104\146\u010b\147\u0113\150\u0117\151\u010d\152\u0100" +
    "\153\u010a\154\u0116\155\u0114\156\u0107\157\u0115\160\u0110\161" +
    "\u010c\162\u0119\163\u0108\164\u010f\165\u010e\166\u0101\171\u0105" +
    "\221\u01df\001\002\000\002\001\ufede\000\006\065\u01e7\204" +
    "\u01e3\001\uff1a\000\006\065\u01e7\204\u01f9\001\uff1c\000\004" +
    "\065\u01e7\001\uff1b\000\154\004\157\006\117\007\011\010" +
    "\066\011\176\012\055\013\064\017\141\033\113\044\256" +
    "\056\163\057\031\067\165\070\013\071\021\072\046\073" +
    "\050\074\145\075\006\076\035\105\254\106\142\107\042" +
    "\110\072\112\060\113\030\114\074\115\052\116\136\117" +
    "\115\124\067\162\114\163\073\167\161\170\016\172\054" +
    "\173\166\174\027\175\146\176\040\177\140\200\100\201" +
    "\147\202\076\203\036\204\053\206\103\212\354\220\164" +
    "\223\110\224\122\225\062\231\126\001\ufe5a\000\002\001" +
    "\uff20\000\002\001\uff19\000\002\001\ufedc\000\014\011\176" +
    "\013\064\102\u0141\112\060\223\110\001\002\000\004\220" +
    "\u01eb\001\ufe6d\000\004\204\u01f2\001\ufe6f\000\002\001\ufe73" +
    "\000\156\004\157\006\117\007\011\010\066\011\176\012" +
    "\055\013\064\017\141\033\113\044\256\056\163\057\031" +
    "\067\165\070\013\071\021\072\046\073\050\074\145\075" +
    "\006\076\035\105\254\106\142\107\042\110\072\112\060" +
    "\113\030\114\074\115\052\116\136\117\115\124\067\147" +
    "\351\162\114\163\073\167\161\170\016\172\054\173\166" +
    "\174\027\175\146\176\040\177\140\200\100\201\147\202" +
    "\076\203\036\204\053\206\103\212\354\220\164\223\110" +
    "\224\122\225\062\231\126\001\uff63\000\004\204\u01ed\001" +
    "\ufe6e\000\154\004\157\006\117\007\011\010\066\011\176" +
    "\012\055\013\064\017\141\033\113\044\256\056\163\057" +
    "\031\067\165\070\013\071\021\072\046\073\050\074\145" +
    "\075\006\076\035\105\254\106\142\107\042\110\072\112" +
    "\060\113\030\114\074\115\052\116\136\117\115\124\067" +
    "\162\114\163\073\167\161\170\016\172\054\173\166\174" +
    "\027\175\146\176\040\177\140\200\100\201\147\202\076" +
    "\203\036\204\053\206\103\212\354\220\164\223\110\224" +
    "\122\225\062\231\126\001\ufe5a\000\004\205\u01ef\001\002" +
    "\000\002\001\ufe70\000\004\221\u01f1\001\002\000\002\001" +
    "\ufe72\000\154\004\157\006\117\007\011\010\066\011\176" +
    "\012\055\013\064\017\141\033\113\044\256\056\163\057" +
    "\031\067\165\070\013\071\021\072\046\073\050\074\145" +
    "\075\006\076\035\105\254\106\142\107\042\110\072\112" +
    "\060\113\030\114\074\115\052\116\136\117\115\124\067" +
    "\162\114\163\073\167\161\170\016\172\054\173\166\174" +
    "\027\175\146\176\040\177\140\200\100\201\147\202\076" +
    "\203\036\204\053\206\103\212\354\220\164\223\110\224" +
    "\122\225\062\231\126\001\ufe5a\000\004\205\u01f4\001\002" +
    "\000\002\001\ufe71\000\004\205\u01f6\001\002\000\002\001" +
    "\uff1e\000\002\001\uff21\000\004\065\u01e7\001\uff1d\000\154" +
    "\004\157\006\117\007\011\010\066\011\176\012\055\013" +
    "\064\017\141\033\113\044\256\056\163\057\031\067\165" +
    "\070\013\071\021\072\046\073\050\074\145\075\006\076" +
    "\035\105\254\106\142\107\042\110\072\112\060\113\030" +
    "\114\074\115\052\116\136\117\115\124\067\162\114\163" +
    "\073\167\161\170\016\172\054\173\166\174\027\175\146" +
    "\176\040\177\140\200\100\201\147\202\076\203\036\204" +
    "\053\206\103\212\354\220\164\223\110\224\122\225\062" +
    "\231\126\001\ufe5a\000\004\205\u01fb\001\002\000\002\001" +
    "\uff1f\000\020\011\176\013\064\105\u017a\110\u0176\112\060" +
    "\212\211\223\110\001\002\000\002\001\ufe2c\000\006\120" +
    "\u0200\221\u01ff\001\002\000\002\001\ufe33\000\020\011\176" +
    "\013\064\105\u017a\110\u0176\112\060\212\211\223\110\001" +
    "\002\000\002\001\ufe2b\000\004\032\u0111\001\ufee9\000\156" +
    "\004\157\006\117\007\011\010\066\011\176\012\055\013" +
    "\064\017\141\033\113\044\256\056\163\057\031\067\165" +
    "\070\013\071\021\072\046\073\050\074\145\075\006\076" +
    "\035\105\254\106\142\107\042\110\072\112\060\113\030" +
    "\114\074\115\052\116\136\117\115\124\067\162\114\163" +
    "\073\167\161\170\016\172\054\173\166\174\027\175\146" +
    "\176\040\177\140\200\100\201\147\202\076\203\036\204" +
    "\053\206\103\212\354\220\164\221\u0206\223\110\224\122" +
    "\225\062\231\126\001\002\000\002\001\ufed1\000\070\032" +
    "\u0111\121\u0109\122\u0118\123\u0103\141\u0106\143\u0102\144\u0112" +
    "\145\u0104\146\u010b\147\u0113\150\u0117\151\u010d\152\u0100\153" +
    "\u010a\154\u0116\155\u0114\156\u0107\157\u0115\160\u0110\161\u010c" +
    "\162\u0119\163\u0108\164\u010f\165\u010e\166\u0101\171\u0105\221" +
    "\u0207\001\002\000\002\001\ufeab\000\002\001\ufeaa\000\006" +
    "\011\176\112\060\001\002\000\002\001\ufffd\000\014\011" +
    "\u020b\013\064\102\u0141\112\060\223\110\001\002\000\004" +
    "\220\ufe27\001\ufe29\000\002\001\uffce\000\040\125\364\126" +
    "\370\127\365\130\376\131\367\132\375\133\372\134\374" +
    "\135\366\136\363\137\371\140\373\142\u0210\172\ufe78\173" +
    "\ufe78\001\ufe7a\000\004\142\u020f\001\ufe7b\000\002\001\uffcd" +
    "\000\002\001\uffcc\000\004\125\u0212\001\002\000\056\006" +
    "\117\007\011\010\066\011\176\017\141\070\205\071\021" +
    "\072\046\073\050\074\145\075\006\076\200\105\213\106" +
    "\142\107\042\110\204\112\060\162\212\163\202\204\206" +
    "\212\211\231\126\001\002\000\002\001\uff15\000\002\001" +
    "\ufed3\000\002\001\ufed7\000\154\004\157\006\117\007\011" +
    "\010\066\011\176\012\055\013\064\017\141\033\113\044" +
    "\256\056\163\057\031\067\165\070\013\071\021\072\046" +
    "\073\050\074\145\075\006\076\035\105\254\106\142\107" +
    "\042\110\072\112\060\113\030\114\074\115\052\116\136" +
    "\117\115\124\067\162\114\163\073\167\161\170\016\172" +
    "\054\173\166\174\027\175\146\176\040\177\140\200\100" +
    "\201\147\202\076\203\036\204\053\206\103\212\354\220" +
    "\164\223\110\224\122\225\062\231\126\001\002\000\070" +
    "\032\u0111\121\u0109\122\u0118\123\u0103\141\u0106\143\u0102\144" +
    "\u0112\145\u0104\146\u010b\147\u0113\150\u0117\151\u010d\152\u0100" +
    "\153\u010a\154\u0116\155\u0114\156\u0107\157\u0115\160\u0110\161" +
    "\u010c\162\u0119\163\u0108\164\u010f\165\u010e\166\u0101\171\u0105" +
    "\221\u0218\001\002\000\006\102\u021a\222\u021b\001\002\000" +
    "\002\001\uffd3\000\004\142\u022d\001\uff81\000\004\142\u021d" +
    "\001\uff81\000\010\036\u022a\037\u0220\040\u0221\001\002\000" +
    "\002\001\uff81\000\010\036\u021f\037\u0220\040\u0221\001\002" +
    "\000\004\142\u0229\001\002\000\154\004\157\006\117\007" +
    "\011\010\066\011\176\012\055\013\064\017\141\033\113" +
    "\044\256\056\163\057\031\067\165\070\013\071\021\072" +
    "\046\073\050\074\145\075\006\076\035\105\254\106\142" +
    "\107\042\110\072\112\060\113\030\114\074\115\052\116" +
    "\136\117\115\124\067\162\114\163\073\167\161\170\016" +
    "\172\054\173\166\174\027\175\146\176\040\177\140\200" +
    "\100\201\147\202\076\203\036\204\053\206\103\212\354" +
    "\220\164\223\110\224\122\225\062\231\126\001\002\000" +
    "\006\142\u0223\222\u0224\001\002\000\002\001\uffe3\000\002" +
    "\001\uff7d\000\002\001\uff7e\000\244\003\127\004\157\005" +
    "\171\006\117\007\011\010\066\011\034\012\055\013\064" +
    "\015\102\017\141\020\134\021\131\022\045\024\033\026" +
    "\111\030\172\033\113\035\143\041\057\042\133\043\077" +
    "\044\116\046\151\047\041\051\167\052\252\053\012\055" +
    "\104\056\163\057\031\060\304\061\032\062\156\067\165" +
    "\070\013\071\021\072\046\073\050\074\145\075\006\076" +
    "\035\102\070\105\254\106\142\107\042\110\072\111\024" +
    "\112\060\113\030\114\074\115\052\116\136\117\115\124" +
    "\067\142\010\162\114\163\073\167\161\170\016\172\054" +
    "\173\166\174\027\175\146\176\040\177\140\200\100\201" +
    "\147\202\076\203\036\204\053\206\103\212\043\213\065" +
    "\214\017\220\164\223\110\224\122\225\062\227\132\231" +
    "\126\001\uff7f\000\072\032\u0111\121\u0109\122\u0118\123\u0103" +
    "\141\u0106\142\u0223\143\u0102\144\u0112\145\u0104\146\u010b\147" +
    "\u0113\150\u0117\151\u010d\152\u0100\153\u010a\154\u0116\155\u0114" +
    "\156\u0107\157\u0115\160\u0110\161\u010c\162\u0119\163\u0108\164" +
    "\u010f\165\u010e\166\u0101\171\u0105\222\u0224\001\002\000\002" +
    "\001\uffe3\000\244\003\127\004\157\005\171\006\117\007" +
    "\011\010\066\011\034\012\055\013\064\015\102\017\141" +
    "\020\134\021\131\022\045\024\033\026\111\030\172\033" +
    "\113\035\143\041\057\042\133\043\077\044\116\046\151" +
    "\047\041\051\167\052\252\053\012\055\104\056\163\057" +
    "\031\060\304\061\032\062\156\067\165\070\013\071\021" +
    "\072\046\073\050\074\145\075\006\076\035\102\070\105" +
    "\254\106\142\107\042\110\072\111\024\112\060\113\030" +
    "\114\074\115\052\116\136\117\115\124\067\142\010\162" +
    "\114\163\073\167\161\170\016\172\054\173\166\174\027" +
    "\175\146\176\040\177\140\200\100\201\147\202\076\203" +
    "\036\204\053\206\103\212\043\213\065\214\017\220\164" +
    "\223\110\224\122\225\062\227\132\231\126\001\uff80\000" +
    "\002\001\uff82\000\004\142\u022b\001\002\000\002\001\uff83" +
    "\000\010\037\u0220\040\u0221\103\u0230\001\002\000\002\001" +
    "\uff81\000\010\037\u0220\040\u0221\103\u022f\001\002\000\002" +
    "\001\uff84\000\002\001\uff85\000\002\001\ufed5\000\066\032" +
    "\u0111\121\u0109\122\u0118\123\u0103\141\u0106\143\u0102\144\u0112" +
    "\145\u0104\146\u010b\147\u0113\150\u0117\151\u010d\152\u0100\153" +
    "\u010a\154\u0116\155\u0114\156\u0107\157\u0115\160\u0110\161\u010c" +
    "\162\u0119\163\u0108\164\u010f\165\u010e\166\u0101\171\u0105\001" +
    "\ufe2e\000\066\032\u0111\121\u0109\122\u0118\123\u0103\141\u0106" +
    "\143\u0102\144\u0112\145\u0104\146\u010b\147\u0113\150\u0117\151" +
    "\u010d\152\u0100\153\u010a\154\u0116\155\u0114\156\u0107\157\u0115" +
    "\160\u0110\161\u010c\162\u0119\163\u0108\164\u010f\165\u010e\166" +
    "\u0101\171\u0105\001\uff13\000\006\120\u0235\142\u0236\001\002" +
    "\000\154\004\157\006\117\007\011\010\066\011\176\012" +
    "\055\013\064\017\141\033\113\044\256\056\163\057\031" +
    "\067\165\070\013\071\021\072\046\073\050\074\145\075" +
    "\006\076\035\105\254\106\142\107\042\110\072\112\060" +
    "\113\030\114\074\115\052\116\136\117\115\124\067\162" +
    "\114\163\073\167\161\170\016\172\054\173\166\174\027" +
    "\175\146\176\040\177\140\200\100\201\147\202\076\203" +
    "\036\204\053\206\103\212\354\220\164\223\110\224\122" +
    "\225\062\231\126\001\002\000\002\001\uffc9\000\066\032" +
    "\u0111\121\u0109\122\u0118\123\u0103\141\u0106\143\u0102\144\u0112" +
    "\145\u0104\146\u010b\147\u0113\150\u0117\151\u010d\152\u0100\153" +
    "\u010a\154\u0116\155\u0114\156\u0107\157\u0115\160\u0110\161\u010c" +
    "\162\u0119\163\u0108\164\u010f\165\u010e\166\u0101\171\u0105\001" +
    "\uff14\000\002\001\uffd0\000\070\032\u0111\121\u0109\122\u0118" +
    "\123\u0103\141\u0106\142\u023a\143\u0102\144\u0112\145\u0104\146" +
    "\u010b\147\u0113\150\u0117\151\u010d\152\u0100\153\u010a\154\u0116" +
    "\155\u0114\156\u0107\157\u0115\160\u0110\161\u010c\162\u0119\163" +
    "\u0108\164\u010f\165\u010e\166\u0101\171\u0105\001\002\000\002" +
    "\001\uffcf\000\004\022\u023c\001\002\000\004\220\u023d\001" +
    "\002\000\154\004\157\006\117\007\011\010\066\011\176" +
    "\012\055\013\064\017\141\033\113\044\256\056\163\057" +
    "\031\067\165\070\013\071\021\072\046\073\050\074\145" +
    "\075\006\076\035\105\254\106\142\107\042\110\072\112" +
    "\060\113\030\114\074\115\052\116\136\117\115\124\067" +
    "\162\114\163\073\167\161\170\016\172\054\173\166\174" +
    "\027\175\146\176\040\177\140\200\100\201\147\202\076" +
    "\203\036\204\053\206\103\212\354\220\164\223\110\224" +
    "\122\225\062\231\126\001\002\000\070\032\u0111\121\u0109" +
    "\122\u0118\123\u0103\141\u0106\143\u0102\144\u0112\145\u0104\146" +
    "\u010b\147\u0113\150\u0117\151\u010d\152\u0100\153\u010a\154\u0116" +
    "\155\u0114\156\u0107\157\u0115\160\u0110\161\u010c\162\u0119\163" +
    "\u0108\164\u010f\165\u010e\166\u0101\171\u0105\221\u023f\001\002" +
    "\000\004\142\u0240\001\002\000\002\001\uffd5\000\004\011" +
    "\u0243\001\002\000\002\001\uffef\000\004\125\u0244\001\002" +
    "\000\056\006\117\007\011\010\066\011\176\017\141\070" +
    "\205\071\021\072\046\073\050\074\145\075\006\076\200" +
    "\105\213\106\142\107\042\110\204\112\060\162\212\163" +
    "\202\204\206\212\211\231\126\001\002\000\002\001\uff16" +
    "\000\004\063\u0248\001\uff99\000\002\001\uffa7\000\014\003" +
    "\u024b\011\176\105\270\110\273\112\060\001\002\000\004" +
    "\120\u024c\001\uff98\000\002\001\uff95\000\002\001\uff92\000" +
    "\014\003\u024e\011\176\105\270\110\273\112\060\001\002" +
    "\000\002\001\uff94\000\002\001\uff93\000\004\102\u0250\001" +
    "\002\000\002\001\uff52\000\040\003\u025f\045\150\052\u0262" +
    "\054\u0265\061\032\062\156\103\u025e\111\u025d\212\u0261\213" +
    "\u0256\214\u0257\215\u025b\216\u0255\217\u0260\227\132\001\uff2f" +
    "\000\002\001\uffa2\000\002\001\uff4a\000\004\044\u0294\001" +
    "\002\000\002\001\uff2a\000\004\061\u0293\001\uff27\000\004" +
    "\061\u0292\001\uff26\000\002\001\uff53\000\020\044\uff2e\212" +
    "\u0261\213\u028e\214\u028d\215\u025b\216\u0255\217\u0260\001\uff31" +
    "\000\002\001\uffa6\000\002\001\uff29\000\002\001\uff2d\000" +
    "\002\001\uff4c\000\002\001\uffa3\000\002\001\uff4b\000\002" +
    "\001\uff2b\000\002\001\uff28\000\012\011\176\105\270\110" +
    "\273\112\060\001\002\000\004\013\u0267\001\002\000\006" +
    "\120\u0241\142\u0266\001\002\000\002\001\uff30\000\002\001" +
    "\uff50\000\004\125\u026e\001\uff23\000\006\120\u0269\142\u026a" +
    "\001\002\000\004\013\u026b\001\002\000\002\001\uff51\000" +
    "\004\125\u026c\001\uff25\000\056\006\117\007\011\010\066" +
    "\011\176\017\141\070\205\071\021\072\046\073\050\074" +
    "\145\075\006\076\200\105\213\106\142\107\042\110\204" +
    "\112\060\162\212\163\202\204\206\212\211\231\126\001" +
    "\002\000\002\001\uff24\000\056\006\117\007\011\010\066" +
    "\011\176\017\141\070\205\071\021\072\046\073\050\074" +
    "\145\075\006\076\200\105\213\106\142\107\042\110\204" +
    "\112\060\162\212\163\202\204\206\212\211\231\126\001" +
    "\002\000\002\001\uff22\000\010\102\u0273\120\u0272\142\u0275" +
    "\001\002\000\002\001\uff48\000\012\011\176\105\270\110" +
    "\273\112\060\001\002\000\012\011\u027e\105\270\110\273" +
    "\112\060\001\uff44\000\002\001\uff49\000\002\001\uff46\000" +
    "\004\034\u028a\001\002\000\004\142\u0289\001\002\000\012" +
    "\011\u027e\105\270\110\273\112\060\001\uff43\000\004\103" +
    "\u0287\001\002\000\004\226\u0282\001\uff3a\000\004\104\u0280" +
    "\001\002\000\004\142\u027f\001\002\000\002\001\uff42\000" +
    "\004\034\uff3b\001\ufe27\000\002\001\uff40\000\004\011\u0281" +
    "\001\002\000\002\001\uff39\000\012\011\176\105\270\110" +
    "\273\112\060\001\002\000\004\120\u0285\001\uff3e\000\002" +
    "\001\uff3d\000\012\011\176\105\270\110\273\112\060\001" +
    "\002\000\002\001\uff3c\000\002\001\uff45\000\002\001\uff41" +
    "\000\002\001\uff3f\000\016\212\u0261\213\u028e\214\u028d\215" +
    "\u025b\216\u0255\217\u0260\001\uff36\000\004\011\u028f\001\002" +
    "\000\004\142\uff37\001\uff35\000\002\001\uff26\000\002\001" +
    "\uff27\000\002\001\uff38\000\002\001\uff47\000\002\001\uff2c" +
    "\000\002\001\uff9f\000\002\001\uffa0\000\004\147\261\001" +
    "\uffb1\000\006\011\176\112\060\001\002\000\002\001\uff4f" +
    "\000\004\220\u0298\001\002\000\022\003\272\011\176\070" +
    "\263\105\270\110\273\112\060\221\uff71\230\267\001\uff68" +
    "\000\004\221\u029a\001\002\000\002\001\uff4e\000\006\102" +
    "\u029d\142\u029e\001\uff32\000\002\001\uff4d\000\002\001\uffe3" +
    "\000\002\001\uff34\000\246\003\127\004\157\005\171\006" +
    "\117\007\011\010\066\011\034\012\055\013\064\015\102" +
    "\017\141\020\134\021\131\022\045\024\033\026\111\030" +
    "\172\033\113\035\143\041\057\042\133\043\077\044\116" +
    "\046\151\047\041\051\167\052\252\053\012\055\104\056" +
    "\163\057\031\060\304\061\032\062\156\067\165\070\013" +
    "\071\021\072\046\073\050\074\145\075\006\076\035\102" +
    "\070\103\u02a0\105\254\106\142\107\042\110\072\111\024" +
    "\112\060\113\030\114\074\115\052\116\136\117\115\124" +
    "\067\142\010\162\114\163\073\167\161\170\016\172\054" +
    "\173\166\174\027\175\146\176\040\177\140\200\100\201" +
    "\147\202\076\203\036\204\053\206\103\212\043\213\065" +
    "\214\017\220\164\223\110\224\122\225\062\227\132\231" +
    "\126\001\002\000\002\001\uff33\000\006\065\u02b5\204\u02b4" +
    "\001\ufe3c\000\014\013\064\016\u02b3\100\u02a5\101\u02a4\224" +
    "\u02b2\001\002\000\002\001\ufe3e\000\020\011\176\013\064" +
    "\105\u017a\110\u0176\112\060\212\211\223\110\001\002\000" +
    "\154\004\157\006\117\007\011\010\066\011\176\012\u02a9" +
    "\013\064\017\141\033\113\044\256\056\163\057\031\067" +
    "\165\070\013\071\021\072\046\073\050\074\145\075\006" +
    "\076\035\105\254\106\142\107\042\110\072\112\060\113" +
    "\030\114\074\115\052\116\136\117\115\124\067\162\114" +
    "\163\073\167\161\170\016\172\054\173\166\174\027\175" +
    "\146\176\040\177\140\200\100\201\147\202\076\203\036" +
    "\204\053\206\103\212\354\220\164\223\110\224\122\225" +
    "\062\231\126\001\002\000\010\013\064\100\u02a5\101\u02a4" +
    "\001\002\000\002\001\ufe3d\000\070\032\u0111\103\u02ae\121" +
    "\u0109\122\u0118\123\u0103\141\u0106\143\u0102\144\u0112\145\u0104" +
    "\146\u010b\147\u0113\150\u0117\151\u010d\152\u0100\153\u010a\154" +
    "\u0116\155\u0114\156\u0107\157\u0115\160\u0110\161\u010c\162\u0119" +
    "\163\u0108\164\u010f\165\u010e\166\u0101\171\u0105\001\002\000" +
    "\004\204\u02aa\001\ufe8c\000\154\004\157\006\117\007\011" +
    "\010\066\011\176\012\055\013\064\017\141\033\113\044" +
    "\256\056\163\057\031\067\165\070\013\071\021\072\046" +
    "\073\050\074\145\075\006\076\035\105\254\106\142\107" +
    "\042\110\072\112\060\113\030\114\074\115\052\116\136" +
    "\117\115\124\067\162\114\163\073\167\161\170\016\172" +
    "\054\173\166\174\027\175\146\176\040\177\140\200\100" +
    "\201\147\202\076\203\036\204\053\206\103\212\354\220" +
    "\164\223\110\224\122\225\062\231\126\001\002\000\070" +
    "\032\u0111\121\u0109\122\u0118\123\u0103\141\u0106\143\u0102\144" +
    "\u0112\145\u0104\146\u010b\147\u0113\150\u0117\151\u010d\152\u0100" +
    "\153\u010a\154\u0116\155\u0114\156\u0107\157\u0115\160\u0110\161" +
    "\u010c\162\u0119\163\u0108\164\u010f\165\u010e\166\u0101\171\u0105" +
    "\205\u02ac\001\002\000\004\103\u02ad\001\002\000\002\001" +
    "\ufe38\000\002\001\ufe39\000\004\103\u02b0\001\002\000\002" +
    "\001\ufe37\000\002\001\ufe40\000\002\001\ufe86\000\002\001" +
    "\ufe3f\000\012\011\176\013\064\014\u02ba\112\060\001\002" +
    "\000\006\011\176\112\060\001\002\000\002\001\ufe3a\000" +
    "\002\001\ufe34\000\004\205\u02bb\001\002\000\002\001\ufe36" +
    "\000\002\001\ufe35\000\002\001\ufe3b\000\010\011\176\112" +
    "\060\220\262\001\002\000\002\001\uffaf\000\004\220\u02bf" +
    "\001\002\000\022\003\272\011\176\070\263\105\270\110" +
    "\273\112\060\221\uff71\230\267\001\uff68\000\004\221\u02c1" +
    "\001\002\000\002\001\uffae\000\006\003\u02c3\102\u02c4\001" +
    "\002\000\002\001\uffab\000\002\001\uffe3\000\002\001\uffad" +
    "\000\246\003\127\004\157\005\171\006\117\007\011\010" +
    "\066\011\034\012\055\013\064\015\102\017\141\020\134" +
    "\021\131\022\045\024\033\026\111\030\172\033\113\035" +
    "\143\041\057\042\133\043\077\044\116\046\151\047\041" +
    "\051\167\052\252\053\012\055\104\056\163\057\031\060" +
    "\304\061\032\062\156\067\165\070\013\071\021\072\046" +
    "\073\050\074\145\075\006\076\035\102\070\103\u02c7\105" +
    "\254\106\142\107\042\110\072\111\024\112\060\113\030" +
    "\114\074\115\052\116\136\117\115\124\067\142\010\162" +
    "\114\163\073\167\161\170\016\172\054\173\166\174\027" +
    "\175\146\176\040\177\140\200\100\201\147\202\076\203" +
    "\036\204\053\206\103\212\043\213\065\214\017\220\164" +
    "\223\110\224\122\225\062\227\132\231\126\001\002\000" +
    "\002\001\uffac\000\066\032\u0111\121\u0109\122\u0118\123\u0103" +
    "\141\u0106\143\u0102\144\u0112\145\u0104\146\u010b\147\u0113\150" +
    "\u0117\151\u010d\152\u0100\153\u010a\154\u0116\155\u0114\156\u0107" +
    "\157\u0115\160\u0110\161\u010c\162\u0119\163\u0108\164\u010f\165" +
    "\u010e\166\u0101\171\u0105\001\ufe2d\000\012\032\u0111\164\u010f" +
    "\165\u010e\166\u0101\001\ufeeb\000\002\001\uff0b\000\154\004" +
    "\157\006\117\007\011\010\066\011\176\012\055\013\064" +
    "\017\141\033\113\044\256\056\163\057\031\067\165\070" +
    "\013\071\021\072\046\073\050\074\145\075\006\076\035" +
    "\105\254\106\142\107\042\110\072\112\060\113\030\114" +
    "\074\115\052\116\136\117\115\124\067\162\114\163\073" +
    "\167\161\170\016\172\054\173\166\174\027\175\146\176" +
    "\040\177\140\200\100\201\147\202\076\203\036\204\053" +
    "\206\103\212\354\220\164\223\110\224\122\225\062\231" +
    "\126\001\002\000\040\034\u02dd\125\364\126\370\127\365" +
    "\130\376\131\367\132\375\133\372\134\374\135\366\136" +
    "\363\137\371\140\373\172\ufe78\173\ufe78\001\ufe7a\000\004" +
    "\034\u02ce\001\ufe7b\000\020\011\176\013\064\105\u017a\110" +
    "\u0176\112\060\212\211\223\110\001\002\000\004\066\u02d1" +
    "\001\uff91\000\004\221\u02d6\001\002\000\022\011\176\013" +
    "\064\105\u017a\110\u0176\112\060\147\u02d4\212\211\223\110" +
    "\001\002\000\002\001\uff90\000\002\001\uff8f\000\020\011" +
    "\176\013\064\105\u017a\110\u0176\112\060\212\211\223\110" +
    "\001\002\000\002\001\uff8e\000\232\003\127\004\157\005" +
    "\171\006\117\007\011\010\066\011\034\012\055\013\064" +
    "\015\102\017\141\020\134\021\131\022\045\024\033\026" +
    "\111\030\172\033\113\035\143\041\057\042\133\043\077" +
    "\044\256\046\151\047\041\051\167\052\252\053\012\055" +
    "\104\056\163\057\031\067\165\070\013\071\021\072\046" +
    "\073\050\074\145\075\006\076\035\102\070\105\254\106" +
    "\142\107\042\110\072\111\024\112\060\113\030\114\074" +
    "\115\052\116\136\117\115\124\067\142\010\162\114\163" +
    "\073\167\161\170\016\172\054\173\166\174\027\175\146" +
    "\176\040\177\140\200\100\201\147\202\076\203\036\204" +
    "\053\206\103\212\043\220\164\222\u02d7\223\110\224\122" +
    "\225\062\231\126\001\002\000\002\001\uffe3\000\002\001" +
    "\uff8b\000\002\001\uffc3\000\246\003\127\004\157\005\171" +
    "\006\117\007\011\010\066\011\034\012\055\013\064\015" +
    "\102\017\141\020\134\021\131\022\045\024\033\026\111" +
    "\027\u02db\030\172\033\113\035\143\041\057\042\133\043" +
    "\077\044\116\046\151\047\041\051\167\052\252\053\012" +
    "\055\104\056\163\057\031\060\304\061\032\062\156\067" +
    "\165\070\013\071\021\072\046\073\050\074\145\075\006" +
    "\076\035\102\070\105\254\106\142\107\042\110\072\111" +
    "\024\112\060\113\030\114\074\115\052\116\136\117\115" +
    "\124\067\142\010\162\114\163\073\167\161\170\016\172" +
    "\054\173\166\174\027\175\146\176\040\177\140\200\100" +
    "\201\147\202\076\203\036\204\053\206\103\212\043\213" +
    "\065\214\017\220\164\223\110\224\122\225\062\227\132" +
    "\231\126\001\002\000\004\142\u02dc\001\002\000\002\001" +
    "\uff8a\000\022\011\176\013\064\105\u017a\110\u0176\112\060" +
    "\147\u02d4\212\211\223\110\001\002\000\004\066\u02d1\001" +
    "\uff91\000\004\221\u02e0\001\002\000\232\003\127\004\157" +
    "\005\171\006\117\007\011\010\066\011\034\012\055\013" +
    "\064\015\102\017\141\020\134\021\131\022\045\024\033" +
    "\026\111\030\172\033\113\035\143\041\057\042\133\043" +
    "\077\044\256\046\151\047\041\051\167\052\252\053\012" +
    "\055\104\056\163\057\031\067\165\070\013\071\021\072" +
    "\046\073\050\074\145\075\006\076\035\102\070\105\254" +
    "\106\142\107\042\110\072\111\024\112\060\113\030\114" +
    "\074\115\052\116\136\117\115\124\067\142\010\162\114" +
    "\163\073\167\161\170\016\172\054\173\166\174\027\175" +
    "\146\176\040\177\140\200\100\201\147\202\076\203\036" +
    "\204\053\206\103\212\043\220\164\222\u02d7\223\110\224" +
    "\122\225\062\231\126\001\002\000\002\001\uffc4\000\154" +
    "\004\157\006\117\007\011\010\066\011\176\012\055\013" +
    "\064\017\141\033\113\044\256\056\163\057\031\067\165" +
    "\070\013\071\021\072\046\073\050\074\145\075\006\076" +
    "\035\105\254\106\142\107\042\110\072\112\060\113\030" +
    "\114\074\115\052\116\136\117\115\124\067\162\114\163" +
    "\073\167\161\170\016\172\054\173\166\174\027\175\146" +
    "\176\040\177\140\200\100\201\147\202\076\203\036\204" +
    "\053\206\103\212\354\220\164\223\110\224\122\225\062" +
    "\231\126\001\ufe5a\000\004\205\u02e4\001\002\000\002\001" +
    "\ufe67\000\002\001\ufeff\000\002\001\ufefd\000\006\003\u02ea" +
    "\102\u02eb\001\002\000\002\001\ufff4\000\010\003\u02ea\102" +
    "\u02eb\142\u02ee\001\002\000\002\001\uffeb\000\002\001\ufff9" +
    "\000\002\001\uffed\000\002\001\ufff3\000\002\001\uffee\000" +
    "\250\003\127\004\157\005\171\006\117\007\011\010\066" +
    "\011\034\012\055\013\064\015\102\017\141\020\134\021" +
    "\131\022\045\024\033\026\111\030\172\033\113\035\143" +
    "\041\057\042\133\043\077\044\116\045\150\046\151\047" +
    "\041\051\167\052\026\053\012\055\104\056\163\057\031" +
    "\060\061\061\032\062\156\067\165\070\013\071\021\072" +
    "\046\073\050\074\145\075\006\076\035\102\070\103\u02f0" +
    "\105\105\106\142\107\042\110\072\111\024\112\060\113" +
    "\030\114\074\115\052\116\136\117\115\124\067\142\010" +
    "\162\114\163\073\167\161\170\016\172\054\173\166\174" +
    "\027\175\146\176\040\177\140\200\100\201\147\202\076" +
    "\203\036\204\053\206\103\212\043\213\065\214\017\220" +
    "\164\223\110\224\122\225\062\227\132\231\126\001\002" +
    "\000\002\001\uffec\000\002\001\ufffa\000\002\001\ufff1\000" +
    "\020\011\176\013\064\105\u017a\110\u0176\112\060\212\211" +
    "\223\110\001\002\000\002\001\uffb8\000\002\001\uffb6\000" +
    "\006\120\u02f8\221\u02f7\001\002\000\004\142\u02fa\001\002" +
    "\000\020\011\176\013\064\105\u017a\110\u0176\112\060\212" +
    "\211\223\110\001\002\000\002\001\uffb7\000\002\001\uffc5" +
    "\000\004\220\u0183\001\ufea6\000\002\001\uff10\000\002\001" +
    "\ufed4\000\004\142\u02ff\001\002\000\002\001\uffbe\000\002" +
    "\001\ufed2\000\010\102\u0133\204\u0134\220\ufe6b\001\ufe61\000" +
    "\066\032\u0111\121\u0109\122\u0118\123\u0103\141\u0106\143\u0102" +
    "\144\u0112\145\u0104\146\u010b\147\u0113\150\u0117\151\u010d\152" +
    "\u0100\153\u010a\154\u0116\155\u0114\156\u0107\157\u0115\160\u0110" +
    "\161\u010c\162\u0119\163\u0108\164\u010f\165\u010e\166\u0101\171" +
    "\u0105\001\ufe30\000\012\032\u0111\164\u010f\165\u010e\166\u0101" +
    "\001\ufeea\000\006\104\ufeb7\220\u0190\001\ufe88\000\002\001" +
    "\uffe3\000\246\003\127\004\157\005\171\006\117\007\011" +
    "\010\066\011\034\012\055\013\064\015\102\017\141\020" +
    "\134\021\131\022\045\024\033\026\111\030\172\033\113" +
    "\035\143\041\057\042\133\043\077\044\116\046\151\047" +
    "\041\051\167\052\252\053\012\055\104\056\163\057\031" +
    "\060\304\061\032\062\156\067\165\070\013\071\021\072" +
    "\046\073\050\074\145\075\006\076\035\102\070\103\u0307" +
    "\105\254\106\142\107\042\110\072\111\024\112\060\113" +
    "\030\114\074\115\052\116\136\117\115\124\067\142\010" +
    "\162\114\163\073\167\161\170\016\172\054\173\166\174" +
    "\027\175\146\176\040\177\140\200\100\201\147\202\076" +
    "\203\036\204\053\206\103\212\043\213\065\214\017\220" +
    "\164\223\110\224\122\225\062\227\132\231\126\001\002" +
    "\000\002\001\uffd9\000\060\032\u0111\141\u0106\143\u0102\144" +
    "\u0112\145\u0104\146\u010b\147\u0113\150\u0117\151\u010d\152\u0100" +
    "\153\u010a\154\u0116\155\u0114\156\u0107\157\u0115\160\u0110\161" +
    "\u010c\162\u0119\163\u0108\164\u010f\165\u010e\166\u0101\171\u0105" +
    "\001\ufecb\000\014\011\u030a\013\064\102\u0141\112\060\223" +
    "\110\001\002\000\004\220\ufe27\001\ufe2a\000\004\225\u030e" +
    "\001\002\000\012\013\064\016\u02b3\100\u02a5\101\u02a4\001" +
    "\ufea7\000\010\013\064\100\u02a5\101\u02a4\001\ufea8\000\002" +
    "\001\ufecc\000\004\221\u0310\001\002\000\004\142\u0311\001" +
    "\002\000\002\001\ufff5\000\002\001\uffd2\000\070\032\u0111" +
    "\121\u0109\122\u0118\123\u0103\141\u0106\142\u0314\143\u0102\144" +
    "\u0112\145\u0104\146\u010b\147\u0113\150\u0117\151\u010d\152\u0100" +
    "\153\u010a\154\u0116\155\u0114\156\u0107\157\u0115\160\u0110\161" +
    "\u010c\162\u0119\163\u0108\164\u010f\165\u010e\166\u0101\171\u0105" +
    "\001\002\000\002\001\uffd1\000\002\001\ufefe\000\020\011" +
    "\176\013\064\105\u017a\110\u0176\112\060\212\211\223\110" +
    "\001\002\000\070\032\u0111\066\u0324\121\u0109\122\u0118\123" +
    "\u0103\141\u0106\143\u0102\144\u0112\145\u0104\146\u010b\147\u0113" +
    "\150\u0117\151\u010d\152\u0100\153\u010a\154\u0116\155\u0114\156" +
    "\u0107\157\u0115\160\u0110\161\u010c\162\u0119\163\u0108\164\u010f" +
    "\165\u010e\166\u0101\171\u0105\001\ufe45\000\004\120\u031b\001" +
    "\ufe82\000\004\205\u031a\001\002\000\002\001\ufecd\000\156" +
    "\004\157\006\117\007\011\010\066\011\176\012\055\013" +
    "\064\017\141\033\113\044\256\056\163\057\031\067\165" +
    "\070\013\071\021\072\046\073\050\074\145\075\006\076" +
    "\035\105\254\106\142\107\042\110\072\112\060\113\030" +
    "\114\074\115\052\116\136\117\115\124\067\147\u031d\162" +
    "\114\163\073\167\161\170\016\172\054\173\166\174\027" +
    "\175\146\176\040\177\140\200\100\201\147\202\076\203" +
    "\036\204\053\206\103\212\354\220\164\223\110\224\122" +
    "\225\062\231\126\001\ufe81\000\002\001\ufe49\000\020\011" +
    "\176\013\064\105\u017a\110\u0176\112\060\212\211\223\110" +
    "\001\002\000\070\032\u0111\066\u031f\121\u0109\122\u0118\123" +
    "\u0103\141\u0106\143\u0102\144\u0112\145\u0104\146\u010b\147\u0113" +
    "\150\u0117\151\u010d\152\u0100\153\u010a\154\u0116\155\u0114\156" +
    "\u0107\157\u0115\160\u0110\161\u010c\162\u0119\163\u0108\164\u010f" +
    "\165\u010e\166\u0101\171\u0105\001\ufe47\000\156\004\157\006" +
    "\117\007\011\010\066\011\176\012\055\013\064\017\141" +
    "\033\113\044\256\056\163\057\031\067\165\070\013\071" +
    "\021\072\046\073\050\074\145\075\006\076\035\105\254" +
    "\106\142\107\042\110\072\112\060\113\030\114\074\115" +
    "\052\116\136\117\115\124\067\147\u0320\162\114\163\073" +
    "\167\161\170\016\172\054\173\166\174\027\175\146\176" +
    "\040\177\140\200\100\201\147\202\076\203\036\204\053" +
    "\206\103\212\354\220\164\223\110\224\122\225\062\231" +
    "\126\001\002\000\020\011\176\013\064\105\u017a\110\u0176" +
    "\112\060\212\211\223\110\001\002\000\066\032\u0111\121" +
    "\u0109\122\u0118\123\u0103\141\u0106\143\u0102\144\u0112\145\u0104" +
    "\146\u010b\147\u0113\150\u0117\151\u010d\152\u0100\153\u010a\154" +
    "\u0116\155\u0114\156\u0107\157\u0115\160\u0110\161\u010c\162\u0119" +
    "\163\u0108\164\u010f\165\u010e\166\u0101\171\u0105\001\ufe48\000" +
    "\002\001\ufe44\000\002\001\ufe43\000\156\004\157\006\117" +
    "\007\011\010\066\011\176\012\055\013\064\017\141\033" +
    "\113\044\256\056\163\057\031\067\165\070\013\071\021" +
    "\072\046\073\050\074\145\075\006\076\035\105\254\106" +
    "\142\107\042\110\072\112\060\113\030\114\074\115\052" +
    "\116\136\117\115\124\067\147\u0325\162\114\163\073\167" +
    "\161\170\016\172\054\173\166\174\027\175\146\176\040" +
    "\177\140\200\100\201\147\202\076\203\036\204\053\206" +
    "\103\212\354\220\164\223\110\224\122\225\062\231\126" +
    "\001\002\000\020\011\176\013\064\105\u017a\110\u0176\112" +
    "\060\212\211\223\110\001\002\000\066\032\u0111\121\u0109" +
    "\122\u0118\123\u0103\141\u0106\143\u0102\144\u0112\145\u0104\146" +
    "\u010b\147\u0113\150\u0117\151\u010d\152\u0100\153\u010a\154\u0116" +
    "\155\u0114\156\u0107\157\u0115\160\u0110\161\u010c\162\u0119\163" +
    "\u0108\164\u010f\165\u010e\166\u0101\171\u0105\001\ufe46\000\002" +
    "\001\ufe42\000\002\001\ufe41\000\154\004\157\006\117\007" +
    "\011\010\066\011\176\012\055\013\064\017\141\033\113" +
    "\044\256\056\163\057\031\067\165\070\013\071\021\072" +
    "\046\073\050\074\145\075\006\076\035\105\254\106\142" +
    "\107\042\110\072\112\060\113\030\114\074\115\052\116" +
    "\136\117\115\124\067\162\114\163\073\167\161\170\016" +
    "\172\054\173\166\174\027\175\146\176\040\177\140\200" +
    "\100\201\147\202\076\203\036\204\053\206\103\212\354" +
    "\220\164\223\110\224\122\225\062\231\126\001\002\000" +
    "\070\032\u0111\121\u0109\122\u0118\123\u0103\141\u0106\143\u0102" +
    "\144\u0112\145\u0104\146\u010b\147\u0113\150\u0117\151\u010d\152" +
    "\u0100\153\u010a\154\u0116\155\u0114\156\u0107\157\u0115\160\u0110" +
    "\161\u010c\162\u0119\163\u0108\164\u010f\165\u010e\166\u0101\171" +
    "\u0105\221\u032b\001\002\000\002\001\ufe2f\000\014\011\176" +
    "\013\064\102\u0141\112\060\223\110\001\002\000\004\220" +
    "\u01eb\001\ufe6d\000\002\001\ufe74\000\004\065\u01e7\001\ufe77" +
    "\000\002\001\ufe75\000\002\001\uffaa\000\004\063\u0333\001" +
    "\uff9d\000\014\003\u033f\011\176\105\270\110\273\112\060" +
    "\001\002\000\004\003\u0336\001\uffa4\000\004\064\u0338\001" +
    "\uff97\000\002\001\uffa5\000\002\001\uffa9\000\014\003\u024b" +
    "\011\176\105\270\110\273\112\060\001\002\000\004\120" +
    "\u024c\001\uff96\000\004\102\u033b\001\002\000\002\001\uff52" +
    "\000\040\003\u025f\045\150\052\u0262\054\u0265\061\032\062" +
    "\156\103\u025e\111\u025d\212\u0261\213\u0256\214\u0257\215\u025b" +
    "\216\u0255\217\u0260\227\132\001\uff2f\000\002\001\uffa8\000" +
    "\002\001\uff9c\000\002\001\uff9b\000\154\004\157\006\117" +
    "\007\011\010\066\011\176\012\055\013\064\017\141\033" +
    "\113\044\256\056\163\057\031\067\165\070\013\071\021" +
    "\072\046\073\050\074\145\075\006\076\035\105\254\106" +
    "\142\107\042\110\072\112\060\113\030\114\074\115\052" +
    "\116\136\117\115\124\067\162\114\163\073\167\161\170" +
    "\016\172\054\173\166\174\027\175\146\176\040\177\140" +
    "\200\100\201\147\202\076\203\036\204\053\206\103\212" +
    "\354\220\164\223\110\224\122\225\062\231\126\001\002" +
    "\000\070\032\u0111\121\u0109\122\u0118\123\u0103\141\u0106\143" +
    "\u0102\144\u0112\145\u0104\146\u010b\147\u0113\150\u0117\151\u010d" +
    "\152\u0100\153\u010a\154\u0116\155\u0114\156\u0107\157\u0115\160" +
    "\u0110\161\u010c\162\u0119\163\u0108\164\u010f\165\u010e\166\u0101" +
    "\171\u0105\221\u0342\001\002\000\232\003\127\004\157\005" +
    "\171\006\117\007\011\010\066\011\034\012\055\013\064" +
    "\015\102\017\141\020\134\021\131\022\045\024\033\026" +
    "\111\030\172\033\113\035\143\041\057\042\133\043\077" +
    "\044\256\046\151\047\041\051\167\052\252\053\012\055" +
    "\104\056\163\057\031\067\165\070\013\071\021\072\046" +
    "\073\050\074\145\075\006\076\035\102\070\105\254\106" +
    "\142\107\042\110\072\111\024\112\060\113\030\114\074" +
    "\115\052\116\136\117\115\124\067\142\010\162\114\163" +
    "\073\167\161\170\016\172\054\173\166\174\027\175\146" +
    "\176\040\177\140\200\100\201\147\202\076\203\036\204" +
    "\053\206\103\212\043\220\164\222\u0343\223\110\224\122" +
    "\225\062\231\126\001\002\000\002\001\uffe3\000\002\001" +
    "\uffd6\000\002\001\uff7c\000\246\003\127\004\157\005\171" +
    "\006\117\007\011\010\066\011\034\012\055\013\064\015" +
    "\102\017\141\020\134\021\131\022\045\023\u0347\024\033" +
    "\026\111\030\172\033\113\035\143\041\057\042\133\043" +
    "\077\044\116\046\151\047\041\051\167\052\252\053\012" +
    "\055\104\056\163\057\031\060\304\061\032\062\156\067" +
    "\165\070\013\071\021\072\046\073\050\074\145\075\006" +
    "\076\035\102\070\105\254\106\142\107\042\110\072\111" +
    "\024\112\060\113\030\114\074\115\052\116\136\117\115" +
    "\124\067\142\010\162\114\163\073\167\161\170\016\172" +
    "\054\173\166\174\027\175\146\176\040\177\140\200\100" +
    "\201\147\202\076\203\036\204\053\206\103\212\043\213" +
    "\065\214\017\220\164\223\110\224\122\225\062\227\132" +
    "\231\126\001\002\000\004\142\u0348\001\002\000\002\001" +
    "\uff7b\000\154\004\157\006\117\007\011\010\066\011\176" +
    "\012\055\013\064\017\141\033\113\044\256\056\163\057" +
    "\031\067\165\070\013\071\021\072\046\073\050\074\145" +
    "\075\006\076\035\105\254\106\142\107\042\110\072\112" +
    "\060\113\030\114\074\115\052\116\136\117\115\124\067" +
    "\162\114\163\073\167\161\170\016\172\054\173\166\174" +
    "\027\175\146\176\040\177\140\200\100\201\147\202\076" +
    "\203\036\204\053\206\103\212\354\220\164\223\110\224" +
    "\122\225\062\231\126\001\ufe5a\000\004\205\u034b\001\002" +
    "\000\002\001\ufe66\000\004\125\u0353\001\uff55\000\006\120" +
    "\u034e\142\u034f\001\002\000\004\013\u0350\001\002\000\002" +
    "\001\uffca\000\004\125\u0351\001\uff57\000\056\006\117\007" +
    "\011\010\066\011\176\017\141\070\205\071\021\072\046" +
    "\073\050\074\145\075\006\076\200\105\213\106\142\107" +
    "\042\110\204\112\060\162\212\163\202\204\206\212\211" +
    "\231\126\001\002\000\002\001\uff56\000\056\006\117\007" +
    "\011\010\066\011\176\017\141\070\205\071\021\072\046" +
    "\073\050\074\145\075\006\076\200\105\213\106\142\107" +
    "\042\110\204\112\060\162\212\163\202\204\206\212\211" +
    "\231\126\001\002\000\002\001\uff54\000\002\001\uffe3\000" +
    "\246\003\127\004\157\005\171\006\117\007\011\010\066" +
    "\011\034\012\055\013\064\015\102\017\141\020\134\021" +
    "\131\022\045\024\033\026\111\030\172\033\113\035\143" +
    "\041\057\042\133\043\077\044\116\046\151\047\041\051" +
    "\167\052\252\053\012\055\104\056\163\057\031\060\304" +
    "\061\032\062\156\067\165\070\013\071\021\072\046\073" +
    "\050\074\145\075\006\076\035\102\070\103\u0357\105\254" +
    "\106\142\107\042\110\072\111\024\112\060\113\030\114" +
    "\074\115\052\116\136\117\115\124\067\142\010\162\114" +
    "\163\073\167\161\170\016\172\054\173\166\174\027\175" +
    "\146\176\040\177\140\200\100\201\147\202\076\203\036" +
    "\204\053\206\103\212\043\213\065\214\017\220\164\223" +
    "\110\224\122\225\062\227\132\231\126\001\002\000\004" +
    "\050\u0358\001\002\000\004\220\u0359\001\002\000\012\011" +
    "\176\105\270\110\273\112\060\001\002\000\004\013\064" +
    "\001\002\000\004\221\u035c\001\002\000\004\102\u035d\001" +
    "\002\000\002\001\uffe3\000\246\003\127\004\157\005\171" +
    "\006\117\007\011\010\066\011\034\012\055\013\064\015" +
    "\102\017\141\020\134\021\131\022\045\024\033\026\111" +
    "\030\172\033\113\035\143\041\057\042\133\043\077\044" +
    "\116\046\151\047\041\051\167\052\252\053\012\055\104" +
    "\056\163\057\031\060\304\061\032\062\156\067\165\070" +
    "\013\071\021\072\046\073\050\074\145\075\006\076\035" +
    "\102\070\103\u035f\105\254\106\142\107\042\110\072\111" +
    "\024\112\060\113\030\114\074\115\052\116\136\117\115" +
    "\124\067\142\010\162\114\163\073\167\161\170\016\172" +
    "\054\173\166\174\027\175\146\176\040\177\140\200\100" +
    "\201\147\202\076\203\036\204\053\206\103\212\043\213" +
    "\065\214\017\220\164\223\110\224\122\225\062\227\132" +
    "\231\126\001\002\000\004\050\u0360\001\uffbc\000\004\220" +
    "\u0365\001\002\000\002\001\uffc0\000\002\001\uffbb\000\004" +
    "\050\u0360\001\uffbd\000\002\001\uffba\000\012\011\176\105" +
    "\270\110\273\112\060\001\002\000\004\013\u0367\001\002" +
    "\000\004\221\u0368\001\002\000\004\102\u0369\001\002\000" +
    "\002\001\uffe3\000\246\003\127\004\157\005\171\006\117" +
    "\007\011\010\066\011\034\012\055\013\064\015\102\017" +
    "\141\020\134\021\131\022\045\024\033\026\111\030\172" +
    "\033\113\035\143\041\057\042\133\043\077\044\116\046" +
    "\151\047\041\051\167\052\252\053\012\055\104\056\163" +
    "\057\031\060\304\061\032\062\156\067\165\070\013\071" +
    "\021\072\046\073\050\074\145\075\006\076\035\102\070" +
    "\103\u036b\105\254\106\142\107\042\110\072\111\024\112" +
    "\060\113\030\114\074\115\052\116\136\117\115\124\067" +
    "\142\010\162\114\163\073\167\161\170\016\172\054\173" +
    "\166\174\027\175\146\176\040\177\140\200\100\201\147" +
    "\202\076\203\036\204\053\206\103\212\043\213\065\214" +
    "\017\220\164\223\110\224\122\225\062\227\132\231\126" +
    "\001\002\000\002\001\uffb9\000\002\001\ufed6\000\002\001" +
    "\ufed0\000\014\013\064\016\u02b3\077\u0370\100\u02a5\101\u02a4" +
    "\001\002\000\012\013\064\077\244\100\u02a5\101\u02a4\001" +
    "\002\000\002\001\ufe85\000\002\001\uffdd\000\154\004\157" +
    "\006\117\007\011\010\066\011\176\012\055\013\064\017" +
    "\141\033\113\044\256\056\163\057\031\067\165\070\013" +
    "\071\021\072\046\073\050\074\145\075\006\076\035\105" +
    "\254\106\142\107\042\110\072\112\060\113\030\114\074" +
    "\115\052\116\136\117\115\124\067\162\114\163\073\167" +
    "\161\170\016\172\054\173\166\174\027\175\146\176\040" +
    "\177\140\200\100\201\147\202\076\203\036\204\053\206" +
    "\103\212\354\220\164\223\110\224\122\225\062\231\126" +
    "\001\uff12\000\066\032\u0111\121\u0109\122\u0118\123\u0103\141" +
    "\u0106\143\u0102\144\u0112\145\u0104\146\u010b\147\u0113\150\u0117" +
    "\151\u010d\152\u0100\153\u010a\154\u0116\155\u0114\156\u0107\157" +
    "\u0115\160\u0110\161\u010c\162\u0119\163\u0108\164\u010f\165\u010e" +
    "\166\u0101\171\u0105\001\uff17\000\004\142\u0378\001\002\000" +
    "\004\120\u0376\001\uff11\000\154\004\157\006\117\007\011" +
    "\010\066\011\176\012\055\013\064\017\141\033\113\044" +
    "\256\056\163\057\031\067\165\070\013\071\021\072\046" +
    "\073\050\074\145\075\006\076\035\105\254\106\142\107" +
    "\042\110\072\112\060\113\030\114\074\115\052\116\136" +
    "\117\115\124\067\162\114\163\073\167\161\170\016\172" +
    "\054\173\166\174\027\175\146\176\040\177\140\200\100" +
    "\201\147\202\076\203\036\204\053\206\103\212\354\220" +
    "\164\223\110\224\122\225\062\231\126\001\002\000\066" +
    "\032\u0111\121\u0109\122\u0118\123\u0103\141\u0106\143\u0102\144" +
    "\u0112\145\u0104\146\u010b\147\u0113\150\u0117\151\u010d\152\u0100" +
    "\153\u010a\154\u0116\155\u0114\156\u0107\157\u0115\160\u0110\161" +
    "\u010c\162\u0119\163\u0108\164\u010f\165\u010e\166\u0101\171\u0105" +
    "\001\uff18\000\154\004\157\006\117\007\011\010\066\011" +
    "\176\012\055\013\064\017\141\033\113\044\256\056\163" +
    "\057\031\067\165\070\013\071\021\072\046\073\050\074" +
    "\145\075\006\076\035\105\254\106\142\107\042\110\072" +
    "\112\060\113\030\114\074\115\052\116\136\117\115\124" +
    "\067\162\114\163\073\167\161\170\016\172\054\173\166" +
    "\174\027\175\146\176\040\177\140\200\100\201\147\202" +
    "\076\203\036\204\053\206\103\212\354\220\164\223\110" +
    "\224\122\225\062\231\126\001\uff12\000\004\142\u037a\001" +
    "\002\000\154\004\157\006\117\007\011\010\066\011\176" +
    "\012\055\013\064\017\141\033\113\044\256\056\163\057" +
    "\031\067\165\070\013\071\021\072\046\073\050\074\145" +
    "\075\006\076\035\105\254\106\142\107\042\110\072\112" +
    "\060\113\030\114\074\115\052\116\136\117\115\124\067" +
    "\162\114\163\073\167\161\170\016\172\054\173\166\174" +
    "\027\175\146\176\040\177\140\200\100\201\147\202\076" +
    "\203\036\204\053\206\103\212\354\220\164\223\110\224" +
    "\122\225\062\231\126\001\uff12\000\004\221\u037c\001\002" +
    "\000\232\003\127\004\157\005\171\006\117\007\011\010" +
    "\066\011\034\012\055\013\064\015\102\017\141\020\134" +
    "\021\131\022\045\024\033\026\111\030\172\033\113\035" +
    "\143\041\057\042\133\043\077\044\256\046\151\047\041" +
    "\051\167\052\252\053\012\055\104\056\163\057\031\067" +
    "\165\070\013\071\021\072\046\073\050\074\145\075\006" +
    "\076\035\102\070\105\254\106\142\107\042\110\072\111" +
    "\024\112\060\113\030\114\074\115\052\116\136\117\115" +
    "\124\067\142\010\162\114\163\073\167\161\170\016\172" +
    "\054\173\166\174\027\175\146\176\040\177\140\200\100" +
    "\201\147\202\076\203\036\204\053\206\103\212\043\220" +
    "\164\222\u037e\223\110\224\122\225\062\231\126\001\002" +
    "\000\002\001\uffd4\000\002\001\uffe3\000\002\001\uff8d\000" +
    "\246\003\127\004\157\005\171\006\117\007\011\010\066" +
    "\011\034\012\055\013\064\015\102\017\141\020\134\021" +
    "\131\022\045\024\033\025\u0381\026\111\030\172\033\113" +
    "\035\143\041\057\042\133\043\077\044\116\046\151\047" +
    "\041\051\167\052\252\053\012\055\104\056\163\057\031" +
    "\060\304\061\032\062\156\067\165\070\013\071\021\072" +
    "\046\073\050\074\145\075\006\076\035\102\070\105\254" +
    "\106\142\107\042\110\072\111\024\112\060\113\030\114" +
    "\074\115\052\116\136\117\115\124\067\142\010\162\114" +
    "\163\073\167\161\170\016\172\054\173\166\174\027\175" +
    "\146\176\040\177\140\200\100\201\147\202\076\203\036" +
    "\204\053\206\103\212\043\213\065\214\017\220\164\223" +
    "\110\224\122\225\062\227\132\231\126\001\002\000\004" +
    "\142\u0382\001\002\000\002\001\uff8c\000\020\011\176\013" +
    "\064\105\u017a\110\u0176\112\060\212\211\223\110\001\002" +
    "\000\004\221\u0385\001\002\000\002\001\ufe32\000\066\032" +
    "\u0111\121\u0109\122\u0118\123\u0103\141\u0106\143\u0102\144\u0112" +
    "\145\u0104\146\u010b\147\u0113\150\u0117\151\u010d\152\u0100\153" +
    "\u010a\154\u0116\155\u0114\156\u0107\157\u0115\160\u0110\161\u010c" +
    "\162\u0119\163\u0108\164\u010f\165\u010e\166\u0101\171\u0105\001" +
    "\ufe31\000\002\001\ufed8\000\004\034\u0392\001\uffe8\000\002" +
    "\001\uffe9\000\006\011\176\112\060\001\002\000\006\120" +
    "\u038c\142\u038d\001\002\000\010\011\176\110\u038a\112\060" +
    "\001\002\000\002\001\ufff0\000\002\001\uffea\000\004\034" +
    "\u0390\001\uffe6\000\004\011\u0391\001\002\000\002\001\uffe5" +
    "\000\004\011\u0393\001\002\000\002\001\uffe7\000\002\001" +
    "\uffc7\000\002\001\ufee8\000\156\004\157\006\117\007\011" +
    "\010\066\011\176\012\055\013\064\017\141\033\113\044" +
    "\256\056\163\057\031\067\165\070\013\071\021\072\046" +
    "\073\050\074\145\075\006\076\035\105\254\106\142\107" +
    "\042\110\072\112\060\113\030\114\074\115\052\116\136" +
    "\117\115\124\067\147\u0316\162\114\163\073\167\161\170" +
    "\016\172\054\173\166\174\027\175\146\176\040\177\140" +
    "\200\100\201\147\202\076\203\036\204\053\206\103\212" +
    "\354\220\164\223\110\224\122\225\062\231\126\001\ufe4a" +
    "\000\004\221\u0398\001\002\000\002\001\ufece\000\006\120" +
    "\u03a2\142\u03a3\001\002\000\002\001\uff5a\000\022\011\176" +
    "\013\064\102\u039f\105\u017a\110\u0176\112\060\212\211\223" +
    "\110\001\002\000\002\001\uff5b\000\002\001\uff59\000\002" +
    "\001\ufe7a\000\154\004\157\006\117\007\011\010\066\011" +
    "\176\012\055\013\064\017\141\033\113\044\256\056\163" +
    "\057\031\067\165\070\013\071\021\072\046\073\050\074" +
    "\145\075\006\076\035\105\254\106\142\107\042\110\072" +
    "\112\060\113\030\114\074\115\052\116\136\117\115\124" +
    "\067\162\114\163\073\167\161\170\016\172\054\173\166" +
    "\174\027\175\146\176\040\177\140\200\100\201\147\202" +
    "\076\203\036\204\053\206\103\212\354\220\164\223\110" +
    "\224\122\225\062\231\126\001\002\000\070\032\u0111\103" +
    "\u03a1\121\u0109\122\u0118\123\u0103\141\u0106\143\u0102\144\u0112" +
    "\145\u0104\146\u010b\147\u0113\150\u0117\151\u010d\152\u0100\153" +
    "\u010a\154\u0116\155\u0114\156\u0107\157\u0115\160\u0110\161\u010c" +
    "\162\u0119\163\u0108\164\u010f\165\u010e\166\u0101\171\u0105\001" +
    "\002\000\002\001\uff58\000\006\013\u039a\223\u039b\001\002" +
    "\000\002\001\uffcb\000\002\001\uff5c\000\156\004\157\006" +
    "\117\007\011\010\066\011\176\012\055\013\064\017\141" +
    "\033\113\044\256\056\163\057\031\067\165\070\013\071" +
    "\021\072\046\073\050\074\145\075\006\076\035\105\254" +
    "\106\142\107\042\110\072\112\060\113\030\114\074\115" +
    "\052\116\136\117\115\124\067\147\351\162\114\163\073" +
    "\167\161\170\016\172\054\173\166\174\027\175\146\176" +
    "\040\177\140\200\100\201\147\202\076\203\036\204\053" +
    "\206\103\212\354\220\164\223\110\224\122\225\062\231" +
    "\126\001\uff63\000\004\221\u03a7\001\002\000\002\001\ufebb" +
    "\000\002\001\000" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u03a6\000\006\003\003\010\004\001\001\000\002\001" +
    "\001\000\110\004\157\005\154\012\167\013\161\016\120" +
    "\060\151\061\043\064\117\066\014\072\017\073\055\074" +
    "\152\075\127\102\074\113\070\114\136\115\123\120\062" +
    "\123\124\134\111\135\134\136\022\142\143\143\024\144" +
    "\046\151\153\153\105\154\006\156\021\160\122\162\100" +
    "\164\036\170\050\214\013\217\106\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\047\u0398\050\u039b\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\064\004\157\005\154" +
    "\060\151\061\043\064\117\066\014\072\u0394\073\055\074" +
    "\152\075\127\102\074\113\070\114\136\120\062\136\022" +
    "\151\153\153\105\154\006\156\021\160\122\162\100\164" +
    "\036\170\050\214\013\217\106\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\004\u0387\005\154\006\u0388\007\u038a\021\u01aa\114\136\001" +
    "\001\000\064\004\157\005\154\060\151\061\043\064\117" +
    "\066\014\072\u0386\073\055\074\152\075\127\102\074\113" +
    "\070\114\136\120\062\136\022\151\153\153\105\154\006" +
    "\156\021\160\122\162\100\164\036\170\050\214\013\217" +
    "\106\001\001\000\064\004\157\005\154\060\151\061\043" +
    "\064\117\066\014\072\u0385\073\055\074\152\075\127\102" +
    "\074\113\070\114\136\120\062\136\022\151\153\153\105" +
    "\154\006\156\021\160\122\162\100\164\036\170\050\214" +
    "\013\217\106\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\107\u036d\111" +
    "\u02a2\160\u02a0\001\001\000\064\004\157\005\154\060\151" +
    "\061\043\064\117\066\014\072\u036c\073\055\074\152\075" +
    "\127\102\074\113\070\114\136\120\062\136\022\151\153" +
    "\153\105\154\006\156\021\160\122\162\100\164\036\170" +
    "\050\214\013\217\106\001\001\000\002\001\001\000\064" +
    "\004\157\005\154\060\151\061\043\064\117\066\014\072" +
    "\u036b\073\055\074\152\075\127\102\074\113\070\114\136" +
    "\120\062\136\022\151\153\153\105\154\006\156\021\160" +
    "\122\162\100\164\036\170\050\214\013\217\106\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\051\u034c\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\070\004\157\005\154\060\151\061\043" +
    "\064\117\066\014\072\u0316\073\055\074\152\075\127\102" +
    "\074\105\u0318\106\u0317\113\070\114\136\120\062\136\022" +
    "\151\153\153\105\154\006\156\021\160\122\162\100\164" +
    "\036\170\050\214\013\217\106\001\001\000\044\004\u017a" +
    "\005\154\061\043\073\055\074\u0174\075\127\102\074\114" +
    "\136\120\u0177\136\u01ce\153\u0314\154\006\156\021\160\122" +
    "\164\036\170\050\217\106\001\001\000\002\001\001\000" +
    "\002\001\001\000\064\004\157\005\154\060\151\061\043" +
    "\064\117\066\014\072\u0312\073\055\074\152\075\127\102" +
    "\074\113\070\114\136\120\062\136\022\151\153\153\105" +
    "\154\006\156\021\160\122\162\100\164\036\170\050\214" +
    "\013\217\106\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\107\u030b\110\u030a\111\u02a2\160\u02a0\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\064\004\157\005\154\060\151\061\043\064" +
    "\117\066\014\072\u0307\073\055\074\152\075\127\102\074" +
    "\113\070\114\136\120\062\136\022\151\153\153\105\154" +
    "\006\156\021\160\122\162\100\164\036\170\050\214\013" +
    "\217\106\001\001\000\004\222\u0304\001\001\000\002\001" +
    "\001\000\010\004\u0303\005\154\114\136\001\001\000\064" +
    "\004\157\005\154\060\151\061\043\064\117\066\014\072" +
    "\u0302\073\055\074\152\075\127\102\074\113\070\114\136" +
    "\120\062\136\022\151\153\153\105\154\006\156\021\160" +
    "\122\162\100\164\036\170\050\214\013\217\106\001\001" +
    "\000\064\004\157\005\154\060\151\061\043\064\117\066" +
    "\014\072\u0301\073\055\074\152\075\127\102\074\113\070" +
    "\114\136\120\062\136\022\151\153\153\105\154\006\156" +
    "\021\160\122\162\100\164\036\170\050\214\013\217\106" +
    "\001\001\000\010\073\u0300\075\127\160\122\001\001\000" +
    "\064\004\157\005\154\060\151\061\043\064\117\066\014" +
    "\072\u02ff\073\055\074\152\075\127\102\074\113\070\114" +
    "\136\120\062\136\022\151\153\153\105\154\006\156\021" +
    "\160\122\162\100\164\036\170\050\214\013\217\106\001" +
    "\001\000\002\001\001\000\064\004\157\005\154\060\151" +
    "\061\043\064\117\066\014\072\u02fc\073\055\074\152\075" +
    "\127\102\074\113\070\114\136\120\062\136\022\151\153" +
    "\153\105\154\006\156\021\160\122\162\100\164\036\170" +
    "\050\214\013\217\106\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\004\u012a\005\154\073\u0124\074\u0122\075" +
    "\127\102\u0128\114\136\120\u0125\156\021\160\122\161\u02fa" +
    "\163\u0121\164\u0127\001\001\000\002\001\001\000\012\004" +
    "\u02e7\005\154\114\136\221\u02e6\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\064\004\157\005\154\060\151\061\043" +
    "\064\117\066\014\072\u02c9\073\055\074\152\075\127\102" +
    "\074\113\070\114\136\120\062\136\022\151\153\153\105" +
    "\154\006\156\021\160\122\162\100\164\036\170\050\214" +
    "\013\217\106\001\001\000\064\004\157\005\154\060\151" +
    "\061\043\064\117\066\014\072\u02c8\073\055\074\152\075" +
    "\127\102\074\113\070\114\136\120\062\136\022\151\153" +
    "\153\105\154\006\156\021\160\122\162\100\164\036\170" +
    "\050\214\013\217\106\001\001\000\064\004\157\005\154" +
    "\060\151\061\043\064\117\066\014\072\u02c7\073\055\074" +
    "\152\075\127\102\074\113\070\114\136\120\062\136\022" +
    "\151\153\153\105\154\006\156\021\160\122\162\100\164" +
    "\036\170\050\214\013\217\106\001\001\000\004\054\u02bb" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\107\u02a1\111\u02a2\160\u02a0\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\070\004\157" +
    "\005\154\013\u023a\016\120\060\151\061\043\064\117\066" +
    "\014\072\017\073\055\074\152\075\127\102\074\113\070" +
    "\114\136\120\062\136\022\151\153\153\105\154\006\156" +
    "\021\160\122\162\100\164\036\170\050\214\013\217\106" +
    "\001\001\000\002\001\001\000\064\004\157\005\154\060" +
    "\151\061\043\064\117\066\014\072\u0238\073\055\074\152" +
    "\075\127\102\074\113\070\114\136\120\062\136\022\151" +
    "\153\153\105\154\006\156\021\160\122\162\100\164\036" +
    "\170\050\214\013\217\106\001\001\000\066\004\157\005" +
    "\154\055\u0233\060\151\061\043\064\117\066\014\072\u0232" +
    "\073\055\074\152\075\127\102\074\113\070\114\136\120" +
    "\062\136\022\151\153\153\105\154\006\156\021\160\122" +
    "\162\100\164\036\170\050\214\013\217\106\001\001\000" +
    "\002\001\001\000\064\004\157\005\154\060\151\061\043" +
    "\064\117\066\014\072\u0231\073\055\074\152\075\127\102" +
    "\074\113\070\114\136\120\062\136\022\151\153\153\105" +
    "\154\006\156\021\160\122\162\100\164\036\170\050\214" +
    "\013\217\106\001\001\000\002\001\001\000\064\004\157" +
    "\005\154\060\151\061\043\064\117\066\014\072\u0230\073" +
    "\055\074\152\075\127\102\074\113\070\114\136\120\062" +
    "\136\022\151\153\153\105\154\006\156\021\160\122\162" +
    "\100\164\036\170\050\214\013\217\106\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\064\004\157\005\154\060\151" +
    "\061\043\064\117\066\014\072\u0214\073\055\074\152\075" +
    "\127\102\074\113\070\114\136\120\062\136\022\151\153" +
    "\153\105\154\006\156\021\160\122\162\100\164\036\170" +
    "\050\214\013\217\106\001\001\000\064\004\157\005\154" +
    "\060\151\061\043\064\117\066\014\072\u0213\073\055\074" +
    "\152\075\127\102\074\113\070\114\136\120\062\136\022" +
    "\151\153\153\105\154\006\156\021\160\122\162\100\164" +
    "\036\170\050\214\013\217\106\001\001\000\002\001\001" +
    "\000\064\004\157\005\154\060\u020d\061\043\064\117\066" +
    "\014\072\351\073\055\074\152\075\127\102\074\113\070" +
    "\114\136\120\062\136\u020c\151\153\153\105\154\006\156" +
    "\021\160\122\162\100\164\036\170\050\214\013\217\106" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\062\u0203" +
    "\001\001\000\002\001\001\000\064\004\157\005\154\060" +
    "\151\061\043\064\117\066\014\072\u0201\073\055\074\152" +
    "\075\127\102\074\113\070\114\136\120\062\136\022\151" +
    "\153\153\105\154\006\156\021\160\122\162\100\164\036" +
    "\170\050\214\013\217\106\001\001\000\002\001\001\000" +
    "\002\001\001\000\064\004\157\005\154\060\151\061\043" +
    "\064\117\066\014\072\u01dd\073\055\074\152\075\127\102" +
    "\074\113\070\114\136\120\062\136\022\151\153\153\105" +
    "\154\006\156\021\160\122\162\100\164\036\170\050\214" +
    "\u01dc\217\106\001\001\000\002\001\001\000\044\004\u017a" +
    "\005\154\061\043\073\055\074\u0174\075\127\102\074\114" +
    "\136\120\u0177\136\u01ce\153\u01cd\154\006\156\021\160\122" +
    "\164\036\170\050\217\106\001\001\000\064\004\157\005" +
    "\154\060\151\061\043\064\117\066\014\072\u01cb\073\055" +
    "\074\152\075\127\102\074\113\070\114\136\120\062\136" +
    "\022\151\153\153\105\154\006\156\021\160\122\162\100" +
    "\164\036\170\050\214\013\217\106\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\027\173" +
    "\114\174\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\004\213\005\154\064\200\065\207" +
    "\114\136\120\206\167\202\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\004\213\005\154\064\200\065\240" +
    "\114\136\120\206\167\202\001\001\000\002\001\001\000" +
    "\010\004\237\005\154\114\136\001\001\000\002\001\001" +
    "\000\024\004\213\005\154\064\200\065\223\067\221\071" +
    "\222\114\136\120\206\167\202\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\004\213\005" +
    "\154\064\200\065\216\114\136\120\206\167\202\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\004\215\005" +
    "\154\114\136\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\070\227\001\001\000\002\001\001\000\020\004\213" +
    "\005\154\064\200\065\225\114\136\120\206\167\202\001" +
    "\001\000\002\001\001\000\020\004\213\005\154\064\200" +
    "\065\230\114\136\120\206\167\202\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\004\213\005\154\064\200" +
    "\065\232\114\136\120\206\167\202\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\004\213\005\154\064\200" +
    "\065\223\067\235\071\222\114\136\120\206\167\202\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\072\004\157\005\154\013\256\016\120" +
    "\026\252\060\151\061\043\064\117\066\014\072\017\073" +
    "\055\074\152\075\127\102\074\113\070\114\136\120\062" +
    "\136\022\151\153\153\105\154\006\156\021\160\122\162" +
    "\100\164\036\170\050\214\013\217\106\001\001\000\004" +
    "\114\246\001\001\000\002\001\001\000\020\004\213\005" +
    "\154\064\200\065\250\114\136\120\206\167\202\001\001" +
    "\000\002\001\001\000\004\021\u01aa\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\014\341\001\001\000\004" +
    "\054\257\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\004\263\005\154\040\274\043\265" +
    "\044\273\114\136\121\270\150\264\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\004\325\005\154\114\136\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\041\277\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\014\301" +
    "\001\001\000\106\004\157\005\154\013\307\015\302\016" +
    "\120\060\151\061\043\064\117\066\014\072\017\073\055" +
    "\074\152\075\127\102\074\113\070\114\136\115\123\120" +
    "\062\134\304\135\306\136\022\142\143\143\024\144\046" +
    "\151\153\153\105\154\006\156\021\160\122\162\100\164" +
    "\036\170\050\214\013\217\106\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\042\315\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\004\327\005\154\114\136\001\001\000\002\001" +
    "\001\000\016\004\263\005\154\044\331\114\136\121\270" +
    "\150\264\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\004\213\005\154\064\200\065\335" +
    "\114\136\120\206\167\202\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\004\213\005\154\064\200\065\340" +
    "\114\136\120\206\167\202\001\001\000\002\001\001\000" +
    "\106\004\157\005\154\013\307\015\302\016\120\060\151" +
    "\061\043\064\117\066\014\072\017\073\055\074\152\075" +
    "\127\102\074\113\070\114\136\115\123\120\062\134\304" +
    "\135\306\136\022\142\143\143\024\144\046\151\153\153" +
    "\105\154\006\156\021\160\122\162\100\164\036\170\050" +
    "\214\013\217\106\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\004\345\005\154\114\136\001\001\000\002" +
    "\001\001\000\070\004\157\005\154\045\347\046\354\060" +
    "\355\061\043\064\117\066\014\072\351\073\055\074\152" +
    "\075\127\102\074\113\070\114\136\120\062\136\352\151" +
    "\153\153\105\154\006\156\021\160\122\162\100\164\036" +
    "\170\050\214\013\217\106\001\001\000\002\001\001\000" +
    "\044\004\u017a\005\154\061\043\073\055\074\u0174\075\127" +
    "\102\074\114\136\117\u01a7\120\u0177\136\u019d\154\006\156" +
    "\021\160\122\164\036\170\050\217\106\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\064\004\157\005\154\060\361" +
    "\061\043\064\117\066\014\072\351\073\055\074\152\075" +
    "\127\102\074\113\070\114\136\120\062\136\360\151\153" +
    "\153\105\154\006\156\021\160\122\162\100\164\036\170" +
    "\050\214\013\217\106\001\001\000\044\004\u017a\005\154" +
    "\061\043\073\055\074\u0174\075\127\102\074\114\136\117" +
    "\u019c\120\u0177\136\u019d\154\006\156\021\160\122\164\036" +
    "\170\050\217\106\001\001\000\002\001\001\000\002\001" +
    "\001\000\064\004\157\005\154\060\151\061\043\064\117" +
    "\066\014\072\u019b\073\055\074\152\075\127\102\074\113" +
    "\070\114\136\120\062\136\022\151\153\153\105\154\006" +
    "\156\021\160\122\162\100\164\036\170\050\214\013\217" +
    "\106\001\001\000\064\004\157\005\154\060\151\061\043" +
    "\064\117\066\014\072\u0173\073\055\074\152\075\127\102" +
    "\074\113\070\114\136\120\062\136\022\151\153\153\105" +
    "\154\006\156\021\160\122\162\100\164\036\170\050\214" +
    "\013\217\106\001\001\000\064\004\157\005\154\060\151" +
    "\061\043\064\117\066\014\072\u0171\073\055\074\152\075" +
    "\127\102\074\113\070\114\136\120\062\136\022\151\153" +
    "\153\105\154\006\156\021\160\122\162\100\164\036\170" +
    "\050\214\013\217\106\001\001\000\064\004\157\005\154" +
    "\060\151\061\043\064\117\066\014\072\u0170\073\055\074" +
    "\152\075\127\102\074\113\070\114\136\120\062\136\022" +
    "\151\153\153\105\154\006\156\021\160\122\162\100\164" +
    "\036\170\050\214\013\217\106\001\001\000\064\004\157" +
    "\005\154\060\151\061\043\064\117\066\014\072\u016f\073" +
    "\055\074\152\075\127\102\074\113\070\114\136\120\062" +
    "\136\022\151\153\153\105\154\006\156\021\160\122\162" +
    "\100\164\036\170\050\214\013\217\106\001\001\000\064" +
    "\004\157\005\154\060\151\061\043\064\117\066\014\072" +
    "\u016e\073\055\074\152\075\127\102\074\113\070\114\136" +
    "\120\062\136\022\151\153\153\105\154\006\156\021\160" +
    "\122\162\100\164\036\170\050\214\013\217\106\001\001" +
    "\000\064\004\157\005\154\060\151\061\043\064\117\066" +
    "\014\072\u016d\073\055\074\152\075\127\102\074\113\070" +
    "\114\136\120\062\136\022\151\153\153\105\154\006\156" +
    "\021\160\122\162\100\164\036\170\050\214\013\217\106" +
    "\001\001\000\064\004\157\005\154\060\151\061\043\064" +
    "\117\066\014\072\u016c\073\055\074\152\075\127\102\074" +
    "\113\070\114\136\120\062\136\022\151\153\153\105\154" +
    "\006\156\021\160\122\162\100\164\036\170\050\214\013" +
    "\217\106\001\001\000\064\004\157\005\154\060\151\061" +
    "\043\064\117\066\014\072\u016b\073\055\074\152\075\127" +
    "\102\074\113\070\114\136\120\062\136\022\151\153\153" +
    "\105\154\006\156\021\160\122\162\100\164\036\170\050" +
    "\214\013\217\106\001\001\000\064\004\157\005\154\060" +
    "\151\061\043\064\117\066\014\072\u016a\073\055\074\152" +
    "\075\127\102\074\113\070\114\136\120\062\136\022\151" +
    "\153\153\105\154\006\156\021\160\122\162\100\164\036" +
    "\170\050\214\013\217\106\001\001\000\064\004\157\005" +
    "\154\060\151\061\043\064\117\066\014\072\u0169\073\055" +
    "\074\152\075\127\102\074\113\070\114\136\120\062\136" +
    "\022\151\153\153\105\154\006\156\021\160\122\162\100" +
    "\164\036\170\050\214\013\217\106\001\001\000\064\004" +
    "\157\005\154\060\151\061\043\064\117\066\014\072\376" +
    "\073\055\074\152\075\127\102\074\113\070\114\136\120" +
    "\062\136\022\151\153\153\105\154\006\156\021\160\122" +
    "\162\100\164\036\170\050\214\013\217\106\001\001\000" +
    "\002\001\001\000\064\004\157\005\154\060\151\061\043" +
    "\064\117\066\014\072\u0168\073\055\074\152\075\127\102" +
    "\074\113\070\114\136\120\062\136\022\151\153\153\105" +
    "\154\006\156\021\160\122\162\100\164\036\170\050\214" +
    "\013\217\106\001\001\000\064\004\157\005\154\060\151" +
    "\061\043\064\117\066\014\072\u0167\073\055\074\152\075" +
    "\127\102\074\113\070\114\136\120\062\136\022\151\153" +
    "\153\105\154\006\156\021\160\122\162\100\164\036\170" +
    "\050\214\013\217\106\001\001\000\064\004\157\005\154" +
    "\060\151\061\043\064\117\066\014\072\u0166\073\055\074" +
    "\152\075\127\102\074\113\070\114\136\120\062\136\022" +
    "\151\153\153\105\154\006\156\021\160\122\162\100\164" +
    "\036\170\050\214\013\217\106\001\001\000\064\004\157" +
    "\005\154\060\151\061\043\064\117\066\014\072\u0165\073" +
    "\055\074\152\075\127\102\074\113\070\114\136\120\062" +
    "\136\022\151\153\153\105\154\006\156\021\160\122\162" +
    "\100\164\036\170\050\214\013\217\106\001\001\000\064" +
    "\004\157\005\154\060\151\061\043\064\117\066\014\072" +
    "\u0164\073\055\074\152\075\127\102\074\113\070\114\136" +
    "\120\062\136\022\151\153\153\105\154\006\156\021\160" +
    "\122\162\100\164\036\170\050\214\013\217\106\001\001" +
    "\000\064\004\157\005\154\060\151\061\043\064\117\066" +
    "\014\072\u0163\073\055\074\152\075\127\102\074\113\070" +
    "\114\136\120\062\136\022\151\153\153\105\154\006\156" +
    "\021\160\122\162\100\164\036\170\050\214\013\217\106" +
    "\001\001\000\064\004\157\005\154\060\151\061\043\064" +
    "\117\066\014\072\u015e\073\055\074\152\075\127\102\074" +
    "\113\070\114\136\120\062\136\022\151\153\153\105\154" +
    "\006\156\021\160\122\162\100\164\036\170\050\214\013" +
    "\217\106\001\001\000\064\004\157\005\154\060\151\061" +
    "\043\064\117\066\014\072\u015d\073\055\074\152\075\127" +
    "\102\074\113\070\114\136\120\062\136\022\151\153\153" +
    "\105\154\006\156\021\160\122\162\100\164\036\170\050" +
    "\214\013\217\106\001\001\000\064\004\157\005\154\060" +
    "\151\061\043\064\117\066\014\072\u015c\073\055\074\152" +
    "\075\127\102\074\113\070\114\136\120\062\136\022\151" +
    "\153\153\105\154\006\156\021\160\122\162\100\164\036" +
    "\170\050\214\013\217\106\001\001\000\064\004\157\005" +
    "\154\060\151\061\043\064\117\066\014\072\u015b\073\055" +
    "\074\152\075\127\102\074\113\070\114\136\120\062\136" +
    "\022\151\153\153\105\154\006\156\021\160\122\162\100" +
    "\164\036\170\050\214\013\217\106\001\001\000\064\004" +
    "\157\005\154\060\151\061\043\064\117\066\014\072\u015a" +
    "\073\055\074\152\075\127\102\074\113\070\114\136\120" +
    "\062\136\022\151\153\153\105\154\006\156\021\160\122" +
    "\162\100\164\036\170\050\214\013\217\106\001\001\000" +
    "\064\004\157\005\154\060\151\061\043\064\117\066\014" +
    "\072\u0159\073\055\074\152\075\127\102\074\113\070\114" +
    "\136\120\062\136\022\151\153\153\105\154\006\156\021" +
    "\160\122\162\100\164\036\170\050\214\013\217\106\001" +
    "\001\000\064\004\157\005\154\060\151\061\043\064\117" +
    "\066\014\072\u0158\073\055\074\152\075\127\102\074\113" +
    "\070\114\136\120\062\136\022\151\153\153\105\154\006" +
    "\156\021\160\122\162\100\164\036\170\050\214\013\217" +
    "\106\001\001\000\064\004\157\005\154\060\151\061\043" +
    "\064\117\066\014\072\u0157\073\055\074\152\075\127\102" +
    "\074\113\070\114\136\120\062\136\022\151\153\153\105" +
    "\154\006\156\021\160\122\162\100\164\036\170\050\214" +
    "\013\217\106\001\001\000\064\004\157\005\154\060\151" +
    "\061\043\064\117\066\014\072\u0156\073\055\074\152\075" +
    "\127\102\074\113\070\114\136\120\062\136\022\151\153" +
    "\153\105\154\006\156\021\160\122\162\100\164\036\170" +
    "\050\214\013\217\106\001\001\000\064\004\157\005\154" +
    "\060\151\061\043\064\117\066\014\072\u0155\073\055\074" +
    "\152\075\127\102\074\113\070\114\136\120\062\136\022" +
    "\151\153\153\105\154\006\156\021\160\122\162\100\164" +
    "\036\170\050\214\013\217\106\001\001\000\064\004\157" +
    "\005\154\060\151\061\043\064\117\066\014\072\u0154\073" +
    "\055\074\152\075\127\102\074\113\070\114\136\120\062" +
    "\136\022\151\153\153\105\154\006\156\021\160\122\162" +
    "\100\164\036\170\050\214\013\217\106\001\001\000\034" +
    "\004\u012a\005\154\073\u0124\074\u0122\075\127\102\u0128\114" +
    "\136\120\u0125\156\021\160\122\161\u0126\163\u0121\164\u0127" +
    "\001\001\000\064\004\157\005\154\060\151\061\043\064" +
    "\117\066\014\072\u0120\073\055\074\152\075\127\102\074" +
    "\113\070\114\136\120\062\136\022\151\153\153\105\154" +
    "\006\156\021\160\122\162\100\164\036\170\050\214\013" +
    "\217\106\001\001\000\064\004\157\005\154\060\151\061" +
    "\043\064\117\066\014\072\u011f\073\055\074\152\075\127" +
    "\102\074\113\070\114\136\120\062\136\022\151\153\153" +
    "\105\154\006\156\021\160\122\162\100\164\036\170\050" +
    "\214\013\217\106\001\001\000\064\004\157\005\154\060" +
    "\151\061\043\064\117\066\014\072\u011e\073\055\074\152" +
    "\075\127\102\074\113\070\114\136\120\062\136\022\151" +
    "\153\153\105\154\006\156\021\160\122\162\100\164\036" +
    "\170\050\214\013\217\106\001\001\000\064\004\157\005" +
    "\154\060\151\061\043\064\117\066\014\072\u011d\073\055" +
    "\074\152\075\127\102\074\113\070\114\136\120\062\136" +
    "\022\151\153\153\105\154\006\156\021\160\122\162\100" +
    "\164\036\170\050\214\013\217\106\001\001\000\064\004" +
    "\157\005\154\060\151\061\043\064\117\066\014\072\u011c" +
    "\073\055\074\152\075\127\102\074\113\070\114\136\120" +
    "\062\136\022\151\153\153\105\154\006\156\021\160\122" +
    "\162\100\164\036\170\050\214\013\217\106\001\001\000" +
    "\064\004\157\005\154\060\151\061\043\064\117\066\014" +
    "\072\u011b\073\055\074\152\075\127\102\074\113\070\114" +
    "\136\120\062\136\022\151\153\153\105\154\006\156\021" +
    "\160\122\162\100\164\036\170\050\214\013\217\106\001" +
    "\001\000\064\004\157\005\154\060\151\061\043\064\117" +
    "\066\014\072\u011a\073\055\074\152\075\127\102\074\113" +
    "\070\114\136\120\062\136\022\151\153\153\105\154\006" +
    "\156\021\160\122\162\100\164\036\170\050\214\013\217" +
    "\106\001\001\000\064\004\157\005\154\060\151\061\043" +
    "\064\117\066\014\072\u0119\073\055\074\152\075\127\102" +
    "\074\113\070\114\136\120\062\136\022\151\153\153\105" +
    "\154\006\156\021\160\122\162\100\164\036\170\050\214" +
    "\013\217\106\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\004\u0151\005\154\114" +
    "\136\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\073\u012d\075\127\160" +
    "\122\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\004\u012c\005\154\114\136\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\064\004\157\005\154" +
    "\060\151\061\043\064\117\066\014\072\u0130\073\055\074" +
    "\152\075\127\102\074\113\070\114\136\120\062\136\022" +
    "\151\153\153\105\154\006\156\021\160\122\162\100\164" +
    "\036\170\050\214\013\217\106\001\001\000\002\001\001" +
    "\000\002\001\001\000\064\004\157\005\154\060\151\061" +
    "\043\064\117\066\014\072\u0137\073\055\074\152\075\127" +
    "\102\074\113\070\114\136\120\062\136\022\151\153\153" +
    "\105\154\006\156\021\160\122\162\100\164\036\170\050" +
    "\214\013\217\106\001\001\000\066\004\157\005\154\060" +
    "\151\061\043\064\117\066\014\072\u0134\073\055\074\152" +
    "\075\127\076\u0135\102\074\113\070\114\136\120\062\136" +
    "\022\151\153\153\105\154\006\156\021\160\122\162\100" +
    "\164\036\170\050\214\013\217\106\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\073\u0141\075\127\077\u013d\100" +
    "\u013e\101\u013b\102\u013f\114\u013a\154\u013c\160\122\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\165\u014b\001\001\000\002\001\001\000\010\073\u0144" +
    "\075\127\160\122\001\001\000\064\004\157\005\154\060" +
    "\151\061\043\064\117\066\014\072\u0142\073\055\074\152" +
    "\075\127\102\074\113\070\114\136\120\062\136\022\151" +
    "\153\153\105\154\006\156\021\160\122\162\100\164\036" +
    "\170\050\214\013\217\106\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\064" +
    "\004\157\005\154\060\151\061\043\064\117\066\014\072" +
    "\u0149\073\055\074\152\075\127\102\074\113\070\114\136" +
    "\120\062\136\022\151\153\153\105\154\006\156\021\160" +
    "\122\162\100\164\036\170\050\214\013\217\106\001\001" +
    "\000\066\004\157\005\154\060\151\061\043\064\117\066" +
    "\014\072\u0134\073\055\074\152\075\127\076\u0147\102\074" +
    "\113\070\114\136\120\062\136\022\151\153\153\105\154" +
    "\006\156\021\160\122\162\100\164\036\170\050\214\013" +
    "\217\106\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\166\u014c\001\001" +
    "\000\002\001\001\000\024\073\u0141\075\127\077\u014e\100" +
    "\u013e\101\u013b\102\u013f\114\u013a\154\u013c\160\122\001\001" +
    "\000\002\001\001\000\014\073\u0141\075\127\102\u013f\154" +
    "\u0150\160\122\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\073\u0141\075\127\102\u013f\154\u0153\160\122\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\064\004" +
    "\157\005\154\060\151\061\043\064\117\066\014\072\u0160" +
    "\073\055\074\152\075\127\102\074\113\070\114\136\120" +
    "\062\136\022\151\153\153\105\154\006\156\021\160\122" +
    "\162\100\164\036\170\050\214\013\217\106\001\001\000" +
    "\002\001\001\000\064\004\157\005\154\060\151\061\043" +
    "\064\117\066\014\072\u0162\073\055\074\152\075\127\102" +
    "\074\113\070\114\136\120\062\136\022\151\153\153\105" +
    "\154\006\156\021\160\122\162\100\164\036\170\050\214" +
    "\013\217\106\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\004\u017a\005\154\061\043\073" +
    "\055\074\u0174\075\127\102\074\114\136\120\u0177\136\u0176" +
    "\154\006\156\021\160\122\164\036\170\050\217\106\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\004\u018e" +
    "\005\154\114\136\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\004\u012a\005\154\073\u0124\074\u0122\075\127" +
    "\102\u0128\114\136\120\u0125\156\021\160\122\161\u0180\163" +
    "\u0121\164\u0127\001\001\000\002\001\001\000\002\001\001" +
    "\000\070\004\157\005\154\045\u017c\046\354\060\355\061" +
    "\043\064\117\066\014\072\351\073\055\074\152\075\127" +
    "\102\074\113\070\114\136\120\062\136\352\151\153\153" +
    "\105\154\006\156\021\160\122\162\100\164\036\170\050" +
    "\214\013\217\106\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\004\u017f\005\154\114\136\001\001\000\002" +
    "\001\001\000\004\063\u0181\001\001\000\002\001\001\000" +
    "\070\004\157\005\154\045\u0183\046\354\060\355\061\043" +
    "\064\117\066\014\072\351\073\055\074\152\075\127\102" +
    "\074\113\070\114\136\120\062\136\352\151\153\153\105" +
    "\154\006\156\021\160\122\162\100\164\036\170\050\214" +
    "\013\217\106\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\073\u0141\075\127\101\u0186\102\u013f\114\u013a\154" +
    "\u0187\160\122\001\001\000\002\001\001\000\002\001\001" +
    "\000\070\004\157\005\154\045\u0189\046\354\060\355\061" +
    "\043\064\117\066\014\072\351\073\055\074\152\075\127" +
    "\102\074\113\070\114\136\120\062\136\352\151\153\153" +
    "\105\154\006\156\021\160\122\162\100\164\036\170\050" +
    "\214\013\217\106\001\001\000\002\001\001\000\002\001" +
    "\001\000\070\004\157\005\154\045\u018c\046\354\060\355" +
    "\061\043\064\117\066\014\072\351\073\055\074\152\075" +
    "\127\102\074\113\070\114\136\120\062\136\352\151\153" +
    "\153\105\154\006\156\021\160\122\162\100\164\036\170" +
    "\050\214\013\217\106\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\070\004\157\005\154\045" +
    "\u0190\046\354\060\355\061\043\064\117\066\014\072\351" +
    "\073\055\074\152\075\127\102\074\113\070\114\136\120" +
    "\062\136\352\151\153\153\105\154\006\156\021\160\122" +
    "\162\100\164\036\170\050\214\013\217\106\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\073\u0141\075\127" +
    "\101\u0193\102\u013f\114\u013a\154\u0194\160\122\001\001\000" +
    "\002\001\001\000\002\001\001\000\070\004\157\005\154" +
    "\045\u0196\046\354\060\355\061\043\064\117\066\014\072" +
    "\351\073\055\074\152\075\127\102\074\113\070\114\136" +
    "\120\062\136\352\151\153\153\105\154\006\156\021\160" +
    "\122\162\100\164\036\170\050\214\013\217\106\001\001" +
    "\000\002\001\001\000\002\001\001\000\070\004\157\005" +
    "\154\045\u0199\046\354\060\355\061\043\064\117\066\014" +
    "\072\351\073\055\074\152\075\127\102\074\113\070\114" +
    "\136\120\062\136\352\151\153\153\105\154\006\156\021" +
    "\160\122\162\100\164\036\170\050\214\013\217\106\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\054\u019f\001" +
    "\001\000\002\001\001\000\022\004\263\005\154\040\u01a1" +
    "\043\265\044\273\114\136\121\270\150\264\001\001\000" +
    "\002\001\001\000\004\041\u01a3\001\001\000\002\001\001" +
    "\000\004\014\u01a5\001\001\000\106\004\157\005\154\013" +
    "\307\015\302\016\120\060\151\061\043\064\117\066\014" +
    "\072\017\073\055\074\152\075\127\102\074\113\070\114" +
    "\136\115\123\120\062\134\304\135\306\136\022\142\143" +
    "\143\024\144\046\151\153\153\105\154\006\156\021\160" +
    "\122\162\100\164\036\170\050\214\013\217\106\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\064\004" +
    "\157\005\154\060\151\061\043\064\117\066\014\072\u01b0" +
    "\073\055\074\152\075\127\102\074\113\070\114\136\120" +
    "\062\136\022\151\153\153\105\154\006\156\021\160\122" +
    "\162\100\164\036\170\050\214\013\217\106\001\001\000" +
    "\002\001\001\000\070\004\157\005\154\013\u01b3\016\120" +
    "\060\151\061\043\064\117\066\014\072\017\073\055\074" +
    "\152\075\127\102\074\113\070\114\136\120\062\136\022" +
    "\151\153\153\105\154\006\156\021\160\122\162\100\164" +
    "\036\170\050\214\013\217\106\001\001\000\004\014\u01bd" +
    "\001\001\000\004\034\u01b4\001\001\000\004\036\u01b5\001" +
    "\001\000\002\001\001\000\070\004\157\005\154\013\u01bc" +
    "\016\120\060\151\061\043\064\117\066\014\072\017\073" +
    "\055\074\152\075\127\102\074\113\070\114\136\120\062" +
    "\136\022\151\153\153\105\154\006\156\021\160\122\162" +
    "\100\164\036\170\050\214\013\217\106\001\001\000\002" +
    "\001\001\000\064\004\157\005\154\060\151\061\043\064" +
    "\117\066\014\072\u01b9\073\055\074\152\075\127\102\074" +
    "\113\070\114\136\120\062\136\022\151\153\153\105\154" +
    "\006\156\021\160\122\162\100\164\036\170\050\214\013" +
    "\217\106\001\001\000\002\001\001\000\070\004\157\005" +
    "\154\013\u01bb\016\120\060\151\061\043\064\117\066\014" +
    "\072\017\073\055\074\152\075\127\102\074\113\070\114" +
    "\136\120\062\136\022\151\153\153\105\154\006\156\021" +
    "\160\122\162\100\164\036\170\050\214\013\217\106\001" +
    "\001\000\002\001\001\000\002\001\001\000\110\004\157" +
    "\005\154\013\307\015\302\016\120\035\u01be\060\151\061" +
    "\043\064\117\066\014\072\017\073\055\074\152\075\127" +
    "\102\074\113\070\114\136\115\123\120\062\134\304\135" +
    "\306\136\022\142\143\143\024\144\046\151\153\153\105" +
    "\154\006\156\021\160\122\162\100\164\036\170\050\214" +
    "\013\217\106\001\001\000\004\037\u01bf\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\064\004" +
    "\157\005\154\060\151\061\043\064\117\066\014\072\u01c3" +
    "\073\055\074\152\075\127\102\074\113\070\114\136\120" +
    "\062\136\022\151\153\153\105\154\006\156\021\160\122" +
    "\162\100\164\036\170\050\214\013\217\106\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\014\u01c6\001\001" +
    "\000\106\004\157\005\154\013\307\015\302\016\120\060" +
    "\151\061\043\064\117\066\014\072\017\073\055\074\152" +
    "\075\127\102\074\113\070\114\136\115\123\120\062\134" +
    "\304\135\306\136\022\142\143\143\024\144\046\151\153" +
    "\153\105\154\006\156\021\160\122\162\100\164\036\170" +
    "\050\214\013\217\106\001\001\000\004\014\u01c8\001\001" +
    "\000\106\004\157\005\154\013\307\015\302\016\120\060" +
    "\151\061\043\064\117\066\014\072\017\073\055\074\152" +
    "\075\127\102\074\113\070\114\136\115\123\120\062\134" +
    "\304\135\306\136\022\142\143\143\024\144\046\151\153" +
    "\153\105\154\006\156\021\160\122\162\100\164\036\170" +
    "\050\214\013\217\106\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\046\004\u017a\005\154\061\043" +
    "\073\055\074\u0174\075\127\102\074\103\u01d0\104\u01d1\114" +
    "\136\120\u0177\136\u01d2\154\006\156\021\160\122\164\036" +
    "\170\050\217\106\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\046\004\u017a" +
    "\005\154\061\043\073\055\074\u0174\075\127\102\074\103" +
    "\u01d5\104\u01d1\114\136\120\u0177\136\u01d2\154\006\156\021" +
    "\160\122\164\036\170\050\217\106\001\001\000\002\001" +
    "\001\000\002\001\001\000\044\004\u017a\005\154\061\043" +
    "\073\055\074\u0174\075\127\102\074\104\u01d8\114\136\120" +
    "\u0177\136\u01d2\154\006\156\021\160\122\164\036\170\050" +
    "\217\106\001\001\000\002\001\001\000\002\001\001\000" +
    "\064\004\157\005\154\060\151\061\043\064\117\066\014" +
    "\072\u01db\073\055\074\152\075\127\102\074\113\070\114" +
    "\136\120\062\136\022\151\153\153\105\154\006\156\021" +
    "\160\122\162\100\164\036\170\050\214\013\217\106\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\155\u01e3\210\u01e1\211\u01e0\212" +
    "\u01e4\213\u01e5\001\001\000\006\155\u01e3\210\u01f7\001\001" +
    "\000\004\155\u01f6\001\001\000\066\004\157\005\154\060" +
    "\151\061\043\064\117\066\014\072\u0134\073\055\074\152" +
    "\075\127\076\u01f4\102\074\113\070\114\136\120\062\136" +
    "\022\151\153\153\105\154\006\156\021\160\122\162\100" +
    "\164\036\170\050\214\013\217\106\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\073\u0141" +
    "\075\127\077\u01e7\100\u013e\101\u013b\102\u013f\114\u013a\154" +
    "\u013c\160\122\001\001\000\010\132\u01e9\215\u01eb\216\u01e8" +
    "\001\001\000\002\001\001\000\002\001\001\000\070\004" +
    "\157\005\154\045\u01ef\046\354\060\355\061\043\064\117" +
    "\066\014\072\351\073\055\074\152\075\127\102\074\113" +
    "\070\114\136\120\062\136\352\151\153\153\105\154\006" +
    "\156\021\160\122\162\100\164\036\170\050\214\013\217" +
    "\106\001\001\000\002\001\001\000\066\004\157\005\154" +
    "\060\151\061\043\064\117\066\014\072\u0134\073\055\074" +
    "\152\075\127\076\u01ed\102\074\113\070\114\136\120\062" +
    "\136\022\151\153\153\105\154\006\156\021\160\122\162" +
    "\100\164\036\170\050\214\013\217\106\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\066\004\157\005\154\060\151\061\043\064\117" +
    "\066\014\072\u0134\073\055\074\152\075\127\076\u01f2\102" +
    "\074\113\070\114\136\120\062\136\022\151\153\153\105" +
    "\154\006\156\021\160\122\162\100\164\036\170\050\214" +
    "\013\217\106\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\155\u01f6\001\001\000\066\004\157\005\154\060\151" +
    "\061\043\064\117\066\014\072\u0134\073\055\074\152\075" +
    "\127\076\u01f9\102\074\113\070\114\136\120\062\136\022" +
    "\151\153\153\105\154\006\156\021\160\122\162\100\164" +
    "\036\170\050\214\013\217\106\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\004\u017a\005\154\061\043\073" +
    "\055\074\u0174\075\127\102\074\114\136\120\u0177\136\u01fc" +
    "\154\006\156\021\157\u01fd\160\122\164\036\170\050\217" +
    "\106\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\004\u017a\005\154\061\043\073\055\074" +
    "\u0174\075\127\102\074\114\136\120\u0177\136\u0200\154\006" +
    "\156\021\160\122\164\036\170\050\217\106\001\001\000" +
    "\002\001\001\000\002\001\001\000\064\004\157\005\154" +
    "\060\151\061\043\064\117\066\014\072\u0204\073\055\074" +
    "\152\075\127\102\074\113\070\114\136\120\062\136\022" +
    "\151\153\153\105\154\006\156\021\160\122\162\100\164" +
    "\036\170\050\214\013\217\106\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\114\u0208\001\001\000\002\001\001\000\020\073\u0141" +
    "\075\127\101\u0193\102\u013f\114\u013a\154\u0194\160\122\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\004\213\005\154\064\200\065\u0212" +
    "\114\136\120\206\167\202\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\064\004\157\005\154" +
    "\060\151\061\043\064\117\066\014\072\u0216\073\055\074" +
    "\152\075\127\102\074\113\070\114\136\120\062\136\022" +
    "\151\153\153\105\154\006\156\021\160\122\162\100\164" +
    "\036\170\050\214\013\217\106\001\001\000\002\001\001" +
    "\000\004\030\u0218\001\001\000\002\001\001\000\004\031" +
    "\u022b\001\001\000\004\031\u021b\001\001\000\002\001\001" +
    "\000\004\031\u021d\001\001\000\002\001\001\000\002\001" +
    "\001\000\064\004\157\005\154\060\151\061\043\064\117" +
    "\066\014\072\u0225\073\055\074\152\075\127\102\074\113" +
    "\070\114\136\120\062\136\022\151\153\153\105\154\006" +
    "\156\021\160\122\162\100\164\036\170\050\214\013\217" +
    "\106\001\001\000\004\032\u0221\001\001\000\004\014\u0224" +
    "\001\001\000\002\001\001\000\002\001\001\000\106\004" +
    "\157\005\154\013\307\015\302\016\120\060\151\061\043" +
    "\064\117\066\014\072\017\073\055\074\152\075\127\102" +
    "\074\113\070\114\136\115\123\120\062\134\304\135\306" +
    "\136\022\142\143\143\024\144\046\151\153\153\105\154" +
    "\006\156\021\160\122\162\100\164\036\170\050\214\013" +
    "\217\106\001\001\000\004\032\u0226\001\001\000\004\014" +
    "\u0227\001\001\000\106\004\157\005\154\013\307\015\302" +
    "\016\120\060\151\061\043\064\117\066\014\072\017\073" +
    "\055\074\152\075\127\102\074\113\070\114\136\115\123" +
    "\120\062\134\304\135\306\136\022\142\143\143\024\144" +
    "\046\151\153\153\105\154\006\156\021\160\122\162\100" +
    "\164\036\170\050\214\013\217\106\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\031\u022d\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\064\004\157\005" +
    "\154\060\151\061\043\064\117\066\014\072\u0236\073\055" +
    "\074\152\075\127\102\074\113\070\114\136\120\062\136" +
    "\022\151\153\153\105\154\006\156\021\160\122\162\100" +
    "\164\036\170\050\214\013\217\106\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\064\004\157\005\154\060\151\061\043\064\117\066\014" +
    "\072\u023d\073\055\074\152\075\127\102\074\113\070\114" +
    "\136\120\062\136\022\151\153\153\105\154\006\156\021" +
    "\160\122\162\100\164\036\170\050\214\013\217\106\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\004\213\005\154\064\200\065\u0244\114\136\120\206" +
    "\167\202\001\001\000\002\001\001\000\004\116\u0246\001" +
    "\001\000\004\227\u024e\001\001\000\014\004\263\005\154" +
    "\114\136\121\u0249\147\u0248\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\004\263\005\154" +
    "\114\136\121\u024c\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\052\u0250\001\001\000\032" +
    "\053\u0257\115\123\123\u0263\124\u0253\130\u0258\131\u025b\135" +
    "\u0251\143\024\144\046\152\u0262\171\u0259\174\u0252\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\131\u0290\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\004\263\005\154\114\136\121\u0270\175\u026f" +
    "\001\001\000\004\122\u0267\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\004\213\005\154\064\200\065\u026c\114\136" +
    "\120\206\167\202\001\001\000\002\001\001\000\020\004" +
    "\213\005\154\064\200\065\u026e\114\136\120\206\167\202" +
    "\001\001\000\002\001\001\000\004\176\u0273\001\001\000" +
    "\002\001\001\000\012\004\263\005\154\114\136\121\u028f" +
    "\001\001\000\030\004\263\005\154\114\136\121\u027a\177" +
    "\u0278\200\u0277\201\u027c\202\u027b\204\u0275\205\u0279\206\u0276" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\004\263\005\154\114\136" +
    "\121\u027a\201\u0287\202\u027b\204\u0275\205\u0279\206\u0276\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\004\263\005\154\114\136\121\u0283\203\u0282\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\004\263\005\154" +
    "\114\136\121\u0285\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\131\u028b" +
    "\207\u028a\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\054\u0294\001\001\000\004\114\u0295\001\001" +
    "\000\004\230\u0296\001\001\000\002\001\001\000\022\004" +
    "\263\005\154\040\u0298\043\265\044\273\114\136\121\270" +
    "\150\264\001\001\000\002\001\001\000\004\231\u029a\001" +
    "\001\000\004\125\u029b\001\001\000\002\001\001\000\004" +
    "\014\u029e\001\001\000\002\001\001\000\106\004\157\005" +
    "\154\013\307\015\302\016\120\060\151\061\043\064\117" +
    "\066\014\072\017\073\055\074\152\075\127\102\074\113" +
    "\070\114\136\115\123\120\062\134\304\135\306\136\022" +
    "\142\143\143\024\144\046\151\153\153\105\154\006\156" +
    "\021\160\122\162\100\164\036\170\050\214\013\217\106" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\111" +
    "\u02b0\160\u02a0\001\001\000\002\001\001\000\042\004\u017a" +
    "\005\154\061\043\073\055\074\u0174\075\127\102\074\114" +
    "\136\120\u0177\136\u02ae\154\006\156\021\160\122\164\036" +
    "\170\050\217\106\001\001\000\064\004\157\005\154\060" +
    "\151\061\043\064\117\066\014\072\u02a7\073\055\074\152" +
    "\075\127\102\074\113\070\114\136\120\062\136\022\151" +
    "\153\153\105\154\006\156\021\160\122\162\100\164\036" +
    "\170\050\214\013\217\106\001\001\000\006\111\u02a6\160" +
    "\u02a0\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\064\004\157\005\154\060\151\061\043\064" +
    "\117\066\014\072\u02aa\073\055\074\152\075\127\102\074" +
    "\113\070\114\136\120\062\136\022\151\153\153\105\154" +
    "\006\156\021\160\122\162\100\164\036\170\050\214\013" +
    "\217\106\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\112\u02b7\114\u02b8\160\u02b6\001\001\000\004" +
    "\114\u02b5\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\114\u02bc\001\001\000\004\223\u02bd\001" +
    "\001\000\002\001\001\000\022\004\263\005\154\040\u02bf" +
    "\043\265\044\273\114\136\121\270\150\264\001\001\000" +
    "\002\001\001\000\004\224\u02c1\001\001\000\004\172\u02c4" +
    "\001\001\000\002\001\001\000\004\014\u02c5\001\001\000" +
    "\002\001\001\000\106\004\157\005\154\013\307\015\302" +
    "\016\120\060\151\061\043\064\117\066\014\072\017\073" +
    "\055\074\152\075\127\102\074\113\070\114\136\115\123" +
    "\120\062\134\304\135\306\136\022\142\143\143\024\144" +
    "\046\151\153\153\105\154\006\156\021\160\122\162\100" +
    "\164\036\170\050\214\013\217\106\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\064\004\157\005\154\060\u02cc\061\043\064\117\066" +
    "\014\072\351\073\055\074\152\075\127\102\074\113\070" +
    "\114\136\120\062\136\u02cb\151\153\153\105\154\006\156" +
    "\021\160\122\162\100\164\036\170\050\214\013\217\106" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\004" +
    "\u017a\005\154\061\043\073\055\074\u0174\075\127\102\074" +
    "\114\136\120\u0177\136\u02ce\154\006\156\021\160\122\164" +
    "\036\170\050\217\106\001\001\000\004\022\u02cf\001\001" +
    "\000\002\001\001\000\044\004\u017a\005\154\023\u02d1\061" +
    "\043\073\055\074\u0174\075\127\102\074\114\136\120\u0177" +
    "\136\u02d2\154\006\156\021\160\122\164\036\170\050\217" +
    "\106\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\004\u017a\005\154\061\043\073\055\074\u0174\075\127\102" +
    "\074\114\136\120\u0177\136\u02d4\154\006\156\021\160\122" +
    "\164\036\170\050\217\106\001\001\000\002\001\001\000" +
    "\072\004\157\005\154\013\u02d7\016\120\025\u02d8\060\151" +
    "\061\043\064\117\066\014\072\017\073\055\074\152\075" +
    "\127\102\074\113\070\114\136\120\062\136\022\151\153" +
    "\153\105\154\006\156\021\160\122\162\100\164\036\170" +
    "\050\214\013\217\106\001\001\000\004\014\u02d9\001\001" +
    "\000\002\001\001\000\002\001\001\000\106\004\157\005" +
    "\154\013\307\015\302\016\120\060\151\061\043\064\117" +
    "\066\014\072\017\073\055\074\152\075\127\102\074\113" +
    "\070\114\136\115\123\120\062\134\304\135\306\136\022" +
    "\142\143\143\024\144\046\151\153\153\105\154\006\156" +
    "\021\160\122\162\100\164\036\170\050\214\013\217\106" +
    "\001\001\000\002\001\001\000\002\001\001\000\044\004" +
    "\u017a\005\154\023\u02dd\061\043\073\055\074\u0174\075\127" +
    "\102\074\114\136\120\u0177\136\u02d2\154\006\156\021\160" +
    "\122\164\036\170\050\217\106\001\001\000\004\022\u02de" +
    "\001\001\000\002\001\001\000\072\004\157\005\154\013" +
    "\u02d7\016\120\025\u02e0\060\151\061\043\064\117\066\014" +
    "\072\017\073\055\074\152\075\127\102\074\113\070\114" +
    "\136\120\062\136\022\151\153\153\105\154\006\156\021" +
    "\160\122\162\100\164\036\170\050\214\013\217\106\001" +
    "\001\000\002\001\001\000\066\004\157\005\154\060\151" +
    "\061\043\064\117\066\014\072\u0134\073\055\074\152\075" +
    "\127\076\u02e2\102\074\113\070\114\136\120\062\136\022" +
    "\151\153\153\105\154\006\156\021\160\122\162\100\164" +
    "\036\170\050\214\013\217\106\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\127\u02f1\001\001\000\004\220\u02e8\001\001\000\006" +
    "\126\u02ec\127\u02eb\001\001\000\002\001\001\000\004\011" +
    "\u02ee\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\110\004\157\005\154\012\u02f0\013\161\016" +
    "\120\060\151\061\043\064\117\066\014\072\017\073\055" +
    "\074\152\075\127\102\074\113\070\114\136\115\123\120" +
    "\062\123\124\134\111\135\134\136\022\142\143\143\024" +
    "\144\046\151\153\153\105\154\006\156\021\160\122\162" +
    "\100\164\036\170\050\214\013\217\106\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\046\004" +
    "\u017a\005\154\017\u02f5\020\u02f3\061\043\073\055\074\u0174" +
    "\075\127\102\074\114\136\120\u0177\136\u02f4\154\006\156" +
    "\021\160\122\164\036\170\050\217\106\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\044\004\u017a\005\154\020\u02f8\061\043\073\055" +
    "\074\u0174\075\127\102\074\114\136\120\u0177\136\u02f4\154" +
    "\006\156\021\160\122\164\036\170\050\217\106\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\063\u02fb\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\u0305\001\001\000\106\004\157\005\154\013\307\015" +
    "\302\016\120\060\151\061\043\064\117\066\014\072\017" +
    "\073\055\074\152\075\127\102\074\113\070\114\136\115" +
    "\123\120\062\134\304\135\306\136\022\142\143\143\024" +
    "\144\046\151\153\153\105\154\006\156\021\160\122\162" +
    "\100\164\036\170\050\214\013\217\106\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\073\u0141\075\127\101" +
    "\u0186\102\u013f\114\u013a\154\u0187\160\122\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\111\u02b0\160\u02a0\001" +
    "\001\000\006\111\u02a6\160\u02a0\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\044\004\u017a\005\154\061\043\073\055\074" +
    "\u0174\075\127\102\074\114\136\117\u0327\120\u0177\136\u019d" +
    "\154\006\156\021\160\122\164\036\170\050\217\106\001" +
    "\001\000\002\001\001\000\004\070\u031b\001\001\000\002" +
    "\001\001\000\002\001\001\000\064\004\157\005\154\060" +
    "\151\061\043\064\117\066\014\072\u031d\073\055\074\152" +
    "\075\127\102\074\113\070\114\136\120\062\136\022\151" +
    "\153\153\105\154\006\156\021\160\122\162\100\164\036" +
    "\170\050\214\013\217\106\001\001\000\002\001\001\000" +
    "\044\004\u017a\005\154\061\043\073\055\074\u0174\075\127" +
    "\102\074\114\136\117\u0322\120\u0177\136\u019d\154\006\156" +
    "\021\160\122\164\036\170\050\217\106\001\001\000\002" +
    "\001\001\000\064\004\157\005\154\060\151\061\043\064" +
    "\117\066\014\072\u0320\073\055\074\152\075\127\102\074" +
    "\113\070\114\136\120\062\136\022\151\153\153\105\154" +
    "\006\156\021\160\122\162\100\164\036\170\050\214\013" +
    "\217\106\001\001\000\044\004\u017a\005\154\061\043\073" +
    "\055\074\u0174\075\127\102\074\114\136\117\u0321\120\u0177" +
    "\136\u019d\154\006\156\021\160\122\164\036\170\050\217" +
    "\106\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\064\004\157\005\154\060\151\061\043\064" +
    "\117\066\014\072\u0325\073\055\074\152\075\127\102\074" +
    "\113\070\114\136\120\062\136\022\151\153\153\105\154" +
    "\006\156\021\160\122\162\100\164\036\170\050\214\013" +
    "\217\106\001\001\000\044\004\u017a\005\154\061\043\073" +
    "\055\074\u0174\075\127\102\074\114\136\117\u0326\120\u0177" +
    "\136\u019d\154\006\156\021\160\122\164\036\170\050\217" +
    "\106\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\064\004\157\005\154\060\151\061\043\064" +
    "\117\066\014\072\u0329\073\055\074\152\075\127\102\074" +
    "\113\070\114\136\120\062\136\022\151\153\153\105\154" +
    "\006\156\021\160\122\162\100\164\036\170\050\214\013" +
    "\217\106\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\073\u0141\075\127\077\u032c\100\u013e\101\u013b\102\u013f" +
    "\114\u013a\154\u013c\160\122\001\001\000\010\132\u032d\215" +
    "\u01eb\216\u01e8\001\001\000\004\133\u032e\001\001\000\004" +
    "\155\u032f\001\001\000\002\001\001\000\004\225\u0331\001" +
    "\001\000\004\145\u0333\001\001\000\012\004\263\005\154" +
    "\114\136\121\u033d\001\001\000\004\173\u0334\001\001\000" +
    "\004\146\u0336\001\001\000\002\001\001\000\004\226\u0339" +
    "\001\001\000\014\004\263\005\154\114\136\121\u0249\147" +
    "\u0338\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\052\u033b\001\001\000\032\053\u0257\115\123\123\u0263\124" +
    "\u0253\130\u0258\131\u025b\135\u0251\143\024\144\046\152\u0262" +
    "\171\u033c\174\u0252\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\064\004\157\005\154\060\151" +
    "\061\043\064\117\066\014\072\u0340\073\055\074\152\075" +
    "\127\102\074\113\070\114\136\120\062\136\022\151\153" +
    "\153\105\154\006\156\021\160\122\162\100\164\036\170" +
    "\050\214\013\217\106\001\001\000\002\001\001\000\072" +
    "\004\157\005\154\013\u0344\016\120\033\u0343\060\151\061" +
    "\043\064\117\066\014\072\017\073\055\074\152\075\127" +
    "\102\074\113\070\114\136\120\062\136\022\151\153\153" +
    "\105\154\006\156\021\160\122\162\100\164\036\170\050" +
    "\214\013\217\106\001\001\000\004\014\u0345\001\001\000" +
    "\002\001\001\000\002\001\001\000\106\004\157\005\154" +
    "\013\307\015\302\016\120\060\151\061\043\064\117\066" +
    "\014\072\017\073\055\074\152\075\127\102\074\113\070" +
    "\114\136\115\123\120\062\134\304\135\306\136\022\142" +
    "\143\143\024\144\046\151\153\153\105\154\006\156\021" +
    "\160\122\162\100\164\036\170\050\214\013\217\106\001" +
    "\001\000\002\001\001\000\002\001\001\000\066\004\157" +
    "\005\154\060\151\061\043\064\117\066\014\072\u0134\073" +
    "\055\074\152\075\127\076\u0349\102\074\113\070\114\136" +
    "\120\062\136\022\151\153\153\105\154\006\156\021\160" +
    "\122\162\100\164\036\170\050\214\013\217\106\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\004\213\005\154\064\200\065\u0351\114" +
    "\136\120\206\167\202\001\001\000\002\001\001\000\020" +
    "\004\213\005\154\064\200\065\u0353\114\136\120\206\167" +
    "\202\001\001\000\002\001\001\000\004\014\u0355\001\001" +
    "\000\106\004\157\005\154\013\307\015\302\016\120\060" +
    "\151\061\043\064\117\066\014\072\017\073\055\074\152" +
    "\075\127\102\074\113\070\114\136\115\123\120\062\134" +
    "\304\135\306\136\022\142\143\143\024\144\046\151\153" +
    "\153\105\154\006\156\021\160\122\162\100\164\036\170" +
    "\050\214\013\217\106\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\004\263\005\154\114\136\121\u0359\001" +
    "\001\000\004\160\u035a\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\014\u035d\001\001\000\106\004\157\005" +
    "\154\013\307\015\302\016\120\060\151\061\043\064\117" +
    "\066\014\072\017\073\055\074\152\075\127\102\074\113" +
    "\070\114\136\115\123\120\062\134\304\135\306\136\022" +
    "\142\143\143\024\144\046\151\153\153\105\154\006\156" +
    "\021\160\122\162\100\164\036\170\050\214\013\217\106" +
    "\001\001\000\010\137\u0360\140\u0362\141\u0361\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\141\u0363\001\001\000\002\001\001\000\012\004\263\005" +
    "\154\114\136\121\u0365\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\014\u0369\001\001\000" +
    "\106\004\157\005\154\013\307\015\302\016\120\060\151" +
    "\061\043\064\117\066\014\072\017\073\055\074\152\075" +
    "\127\102\074\113\070\114\136\115\123\120\062\134\304" +
    "\135\306\136\022\142\143\143\024\144\046\151\153\153" +
    "\105\154\006\156\021\160\122\162\100\164\036\170\050" +
    "\214\013\217\106\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\111\u02b0\160\u02a0\001\001" +
    "\000\006\111\u02a6\160\u02a0\001\001\000\002\001\001\000" +
    "\002\001\001\000\070\004\157\005\154\056\u0373\057\u0374" +
    "\060\151\061\043\064\117\066\014\072\u0372\073\055\074" +
    "\152\075\127\102\074\113\070\114\136\120\062\136\022" +
    "\151\153\153\105\154\006\156\021\160\122\162\100\164" +
    "\036\170\050\214\013\217\106\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\064\004\157\005" +
    "\154\060\151\061\043\064\117\066\014\072\u0376\073\055" +
    "\074\152\075\127\102\074\113\070\114\136\120\062\136" +
    "\022\151\153\153\105\154\006\156\021\160\122\162\100" +
    "\164\036\170\050\214\013\217\106\001\001\000\002\001" +
    "\001\000\070\004\157\005\154\056\u0378\057\u0374\060\151" +
    "\061\043\064\117\066\014\072\u0372\073\055\074\152\075" +
    "\127\102\074\113\070\114\136\120\062\136\022\151\153" +
    "\153\105\154\006\156\021\160\122\162\100\164\036\170" +
    "\050\214\013\217\106\001\001\000\002\001\001\000\070" +
    "\004\157\005\154\056\u037a\057\u0374\060\151\061\043\064" +
    "\117\066\014\072\u0372\073\055\074\152\075\127\102\074" +
    "\113\070\114\136\120\062\136\022\151\153\153\105\154" +
    "\006\156\021\160\122\162\100\164\036\170\050\214\013" +
    "\217\106\001\001\000\002\001\001\000\072\004\157\005" +
    "\154\013\u037e\016\120\024\u037c\060\151\061\043\064\117" +
    "\066\014\072\017\073\055\074\152\075\127\102\074\113" +
    "\070\114\136\120\062\136\022\151\153\153\105\154\006" +
    "\156\021\160\122\162\100\164\036\170\050\214\013\217" +
    "\106\001\001\000\002\001\001\000\004\014\u037f\001\001" +
    "\000\002\001\001\000\106\004\157\005\154\013\307\015" +
    "\302\016\120\060\151\061\043\064\117\066\014\072\017" +
    "\073\055\074\152\075\127\102\074\113\070\114\136\115" +
    "\123\120\062\134\304\135\306\136\022\142\143\143\024" +
    "\144\046\151\153\153\105\154\006\156\021\160\122\162" +
    "\100\164\036\170\050\214\013\217\106\001\001\000\002" +
    "\001\001\000\002\001\001\000\042\004\u017a\005\154\061" +
    "\043\073\055\074\u0174\075\127\102\074\114\136\120\u0177" +
    "\136\u0383\154\006\156\021\160\122\164\036\170\050\217" +
    "\106\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\004\u038e\005\154\114\136\001\001\000\002" +
    "\001\001\000\012\004\u0387\005\154\006\u038d\114\136\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\070" +
    "\004\157\005\154\060\151\061\043\064\117\066\014\072" +
    "\u0316\073\055\074\152\075\127\102\074\105\u0396\106\u0317" +
    "\113\070\114\136\120\062\136\022\151\153\153\105\154" +
    "\006\156\021\160\122\162\100\164\036\170\050\214\013" +
    "\217\106\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\044\004\u017a\005\154" +
    "\061\043\073\055\074\u0174\075\127\102\074\114\136\120" +
    "\u0177\136\u039d\151\u039c\154\006\156\021\160\122\164\036" +
    "\170\050\217\106\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\064\004\157\005\154\060\151" +
    "\061\043\064\117\066\014\072\u039f\073\055\074\152\075" +
    "\127\102\074\113\070\114\136\120\062\136\022\151\153" +
    "\153\105\154\006\156\021\160\122\162\100\164\036\170" +
    "\050\214\013\217\106\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\050\u03a3\001\001\000\002\001\001\000" +
    "\002\001\001\000\070\004\157\005\154\045\u03a5\046\354" +
    "\060\355\061\043\064\117\066\014\072\351\073\055\074" +
    "\152\075\127\102\074\113\070\114\136\120\062\136\352" +
    "\151\153\153\105\154\006\156\021\160\122\162\100\164" +
    "\036\170\050\214\013\217\106\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CompilerAstParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CompilerAstParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CompilerAstParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	class ModifierDocPair {
		public int modifier;
		public PHPDocBlock doc;
		
		public ModifierDocPair(int modifier, PHPDocBlock doc) {
			this.modifier = modifier;
			this.doc = doc;
		}
	}
	
	public Expression createDispatch(Expression dispatcher, Expression property) {

		if (property.getKind() == ASTNodeKinds.REFLECTION_CALL_EXPRESSION) {
			((ReflectionCallExpression) property).setReceiver (dispatcher);
			dispatcher = property;
		} else if (property.getKind() == ASTNodeKinds.METHOD_INVOCATION) {
			PHPCallExpression callExpression = (PHPCallExpression) property;
			dispatcher = new PHPCallExpression(dispatcher.sourceStart(), callExpression.sourceEnd(), dispatcher, callExpression.getCallName(), callExpression.getArgs());
		} else {
			dispatcher =  new FieldAccess(dispatcher.sourceStart(), property.sourceEnd(), dispatcher, property);
		}

		return dispatcher;
	}

	protected String getTokenName(int token) {
		return PhpTokenNames.getName(token);
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$CompilerAstParser$actions {
  private final CompilerAstParser parser;

  /** Constructor */
  CUP$CompilerAstParser$actions(CompilerAstParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$CompilerAstParser$do_action(
    int                        CUP$CompilerAstParser$act_num,
    java_cup.runtime.lr_parser CUP$CompilerAstParser$parser,
    java.util.Stack            CUP$CompilerAstParser$stack,
    int                        CUP$CompilerAstParser$top)
    throws java.lang.Exception
    {
      if (CUP$CompilerAstParser$act_num < 100) {
        return CUP$CompilerAstParser$do_action1(
             CUP$CompilerAstParser$act_num, CUP$CompilerAstParser$parser,CUP$CompilerAstParser$stack,CUP$CompilerAstParser$top);
      }
      else       if (CUP$CompilerAstParser$act_num < 200) {
        return CUP$CompilerAstParser$do_action2(
             CUP$CompilerAstParser$act_num, CUP$CompilerAstParser$parser,CUP$CompilerAstParser$stack,CUP$CompilerAstParser$top);
      }
      else       if (CUP$CompilerAstParser$act_num < 300) {
        return CUP$CompilerAstParser$do_action3(
             CUP$CompilerAstParser$act_num, CUP$CompilerAstParser$parser,CUP$CompilerAstParser$stack,CUP$CompilerAstParser$top);
      }
      else       if (CUP$CompilerAstParser$act_num < 400) {
        return CUP$CompilerAstParser$do_action4(
             CUP$CompilerAstParser$act_num, CUP$CompilerAstParser$parser,CUP$CompilerAstParser$stack,CUP$CompilerAstParser$top);
      }
      else  {
        return CUP$CompilerAstParser$do_action5(
             CUP$CompilerAstParser$act_num, CUP$CompilerAstParser$parser,CUP$CompilerAstParser$stack,CUP$CompilerAstParser$top);
      }
    }


  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$CompilerAstParser$do_action1(
    int                        CUP$CompilerAstParser$act_num,
    java_cup.runtime.lr_parser CUP$CompilerAstParser$parser,
    java.util.Stack            CUP$CompilerAstParser$stack,
    int                        CUP$CompilerAstParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CompilerAstParser$result;

      /* select the action based on the action number */
      switch (CUP$CompilerAstParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // thestart ::= top_statement_list 
            {
              ModuleDeclaration RESULT = null;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object statementList = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	PHPModuleDeclaration program = parser.getModuleDeclaration();

	PhpAstLexer phpAstLexer = (PhpAstLexer) parser.getScanner();
	List commentList = phpAstLexer.getCommentList();
	Iterator i = commentList.iterator();
	while (i.hasNext()) {
		Object c = i.next();
		if (c instanceof VarComment) {
			program.getVarComments().add((VarComment)c);
		} else if (c instanceof PHPDocBlock) {
			program.getPhpDocBlocks().add((PHPDocBlock) c);
		}
	}
	
	program.setStart(statementListleft);
	program.setEnd(statementListright + 1);
	RESULT = program; 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(1/*thestart*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= thestart EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		ModuleDeclaration start_val = (ModuleDeclaration)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		RESULT = start_val;
              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$CompilerAstParser$parser.done_parsing();
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // namespace_name ::= namespace_name_list 
            {
              FullyQualifiedReference RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	StringBuilder namespaceNameBuf = new StringBuilder();
	FullyQualifiedReference fullyQualifiedName = null;
	Iterator i = list.iterator();
	while (i.hasNext()) {
		String s = (String) i.next();
		if (i.hasNext()) {
			if (namespaceNameBuf.length() != 0) {
				namespaceNameBuf.append('\\');
			}
			namespaceNameBuf.append(s);
		} else {
			NamespaceReference namespaceRef = (namespaceNameBuf.length() != 0) ? 
				new NamespaceReference(listleft, listright - s.length() - 1, namespaceNameBuf.toString()) : null;
			fullyQualifiedName = new FullyQualifiedReference(listleft, listright, s, namespaceRef);
		}
	}
	RESULT = fullyQualifiedName;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(2/*namespace_name*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // namespace_name_list ::= string_st 
            {
              List RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	List list = new LinkedList();
	list.add(name);
	RESULT = list;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(3/*namespace_name_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // namespace_name_list ::= namespace_name_list T_NS_SEPARATOR string_st 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	list.add(name);
	RESULT = list;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(3/*namespace_name_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // top_statement_list ::= top_statement_list top_statement 
            {
              Object RESULT = null;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object statementList = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	if(statement != null) {
		parser.addStatement(statement);
		if(parser.pendingStatement != null){
			parser.addStatement(parser.pendingStatement);
			parser.pendingStatement = null;
		}
	}
	while(!parser.declarations.isEmpty()) {
		parser.addStatement(parser.declarations.pop());
	}

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(6/*top_statement_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // top_statement_list ::= 
            {
              Object RESULT = null;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(6/*top_statement_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // namespace_statement_list ::= namespace_statement_list top_statement 
            {
              List RESULT = null;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	// Ignore null statements
	if(statement != null) {
		statementList.add(statement);
		if(statement.getKind() == ASTNodeKinds.AST_ERROR){
			if(!parser.declarations.isEmpty()) {
				Statement node = parser.declarations.peek();
				if(node.sourceStart() == statement.sourceStart() && node.sourceEnd() == statement.sourceEnd()) {
					statementList.add(parser.declarations.pop());
				}
			}		
		}
	}
	if(!(parser.declarations.peek() instanceof NamespaceDeclaration)) {
		statementList.add(parser.declarations.pop());
	}
	RESULT = statementList;	

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(7/*namespace_statement_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // namespace_statement_list ::= 
            {
              List RESULT = null;
		
	RESULT = new LinkedList();

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(7/*namespace_statement_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // top_statement ::= statement 
            {
              Statement RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = statement;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(8/*top_statement*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // top_statement ::= function_declaration_statement 
            {
              Statement RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		PHPMethodDeclaration statement = (PHPMethodDeclaration)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = statement; 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(8/*top_statement*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // top_statement ::= class_declaration_statement 
            {
              Statement RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = statement; 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(8/*top_statement*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // top_statement ::= T_HALT_COMPILER T_OPEN_PARENTHESE T_CLOSE_PARENTHESE T_SEMICOLON 
            {
              Statement RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object statement = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	// Note: we never generate T_HALT_COMPILER
	RESULT = null;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(8/*top_statement*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$0 ::= 
            {
              Object RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		FullyQualifiedReference name = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;

	NamespaceDeclaration namespace = new NamespaceDeclaration(startleft, nameright, nameleft, nameright, name.getFullyQualifiedName(), null, null);
	parser.addDeclarationStatement(namespace);
	parser.declarations.push(namespace);

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(142/*NT$0*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // top_statement ::= T_NAMESPACE namespace_name NT$0 named_namespace_body 
            {
              Statement RESULT = null;
              // propagate RESULT from NT$0
              if ( ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value != null )
                RESULT = (Statement) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		FullyQualifiedReference name = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Statement body = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = body;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(8/*top_statement*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$1 ::= 
            {
              Object RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;

	NamespaceDeclaration namespace = new NamespaceDeclaration(startleft, startright, startright, startright, NamespaceDeclaration.GLOBAL, null, null);
	parser.addDeclarationStatement(namespace);
	parser.declarations.push(namespace);

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(143/*NT$1*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // top_statement ::= T_NAMESPACE NT$1 namespace_body 
            {
              Statement RESULT = null;
              // propagate RESULT from NT$1
              if ( ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value != null )
                RESULT = (Statement) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Statement body = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = body;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(8/*top_statement*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // top_statement ::= T_USE use_declarations T_SEMICOLON 
            {
              Statement RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int useDeclListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int useDeclListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List useDeclList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	parser.declarations.push(new UseStatement(startleft, endright, useDeclList));

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(8/*top_statement*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // top_statement ::= constant_declaration T_SEMICOLON 
            {
              Statement RESULT = null;
		int decListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int decListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List decList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		
	Iterator i = decList.iterator();
	while (i.hasNext()) {
		ASTNode[] decl = (ASTNode[]) i.next();
		ConstantReference constant = (ConstantReference)decl[0];
		Expression initializer = (Expression)decl[1];
		
		PHPDocBlock docBlock = null;
		if (decl.length == 3) {
			docBlock = (PHPDocBlock)decl[2];
		}
		int start = constant.sourceStart();
		int end = (initializer == null ? constant.sourceEnd() : initializer.sourceEnd());
		parser.declarations.push(new ConstantDeclaration(constant, initializer, decListleft, end, docBlock));
	}

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(8/*top_statement*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // named_namespace_body ::= T_SEMICOLON 
            {
              Statement RESULT = null;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	NamespaceDeclaration namespaceDeclaration = (NamespaceDeclaration)parser.declarations.pop();
	namespaceDeclaration.setEnd(endright);
	namespaceDeclaration.setBracketed(false);

	parser.currentNamespace = namespaceDeclaration;

	parser.metUnbracketedNSDecl = true;
	if (parser.metBracketedNSDecl) {
		parser.reportError(new ASTError(namespaceDeclaration.sourceStart(), endright), "Cannot mix bracketed namespace declarations with unbracketed namespace declarations");
	}
	
	RESULT = namespaceDeclaration;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(84/*named_namespace_body*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // named_namespace_body ::= namespace_body 
            {
              Statement RESULT = null;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Statement body = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = body;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(84/*named_namespace_body*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // namespace_body ::= T_CURLY_OPEN namespace_statement_list T_CURLY_CLOSE 
            {
              Statement RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	NamespaceDeclaration namespaceDeclaration = (NamespaceDeclaration)parser.declarations.pop();
	namespaceDeclaration.getBody().setStart(startleft);
	namespaceDeclaration.getBody().setEnd(endright);
	namespaceDeclaration.getBody().getStatements().clear();
	namespaceDeclaration.getBody().acceptStatements(statementList);
	namespaceDeclaration.setEnd(endright);
	
	parser.metBracketedNSDecl = true;
	if (parser.metUnbracketedNSDecl) {
		parser.reportError(new ASTError(namespaceDeclaration.sourceStart(), endright), "Cannot mix bracketed namespace declarations with unbracketed namespace declarations");
	}
	
	RESULT = namespaceDeclaration;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(85/*namespace_body*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // namespace_body ::= error 
            {
              Statement RESULT = null;
		int theErrorleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int theErrorright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object theError = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = (NamespaceDeclaration)parser.declarations.pop();

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(85/*namespace_body*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // use_declarations ::= use_declarations T_COMMA use_declaration 
            {
              List RESULT = null;
		int useDeclListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int useDeclListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List useDeclList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int useDeclleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int useDeclright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		UsePart useDecl = (UsePart)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	useDeclList.add(useDecl);
	RESULT = useDeclList;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(5/*use_declarations*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // use_declarations ::= use_declaration 
            {
              List RESULT = null;
		int useDeclleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int useDeclright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		UsePart useDecl = (UsePart)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	List useDeclList = new LinkedList();
	useDeclList.add(useDecl);
	RESULT = useDeclList;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(5/*use_declarations*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // use_declaration ::= namespace_name 
            {
              UsePart RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		FullyQualifiedReference name = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	UsePart usePart = new UsePart(name, null);
	RESULT = usePart;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(4/*use_declaration*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // use_declaration ::= namespace_name T_AS T_STRING 
            {
              UsePart RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		FullyQualifiedReference name = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int aliasNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int aliasNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		String aliasName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	UsePart usePart = new UsePart(name, 
		new SimpleReference(aliasNameleft, aliasNameright, aliasName));
	RESULT = usePart;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(4/*use_declaration*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // use_declaration ::= T_NS_SEPARATOR namespace_name 
            {
              UsePart RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		FullyQualifiedReference name = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	NamespaceReference namespace = name.getNamespace();
	if (namespace == null) {
		namespace = new NamespaceReference(sleft, sright, "");
		name.setNamespace(namespace);
	}
		namespace.setGlobal(true);
		namespace.setStart(namespace.sourceStart() - 1);

	UsePart usePart = new UsePart(name, null);
	RESULT = usePart;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(4/*use_declaration*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // use_declaration ::= T_NS_SEPARATOR namespace_name T_AS T_STRING 
            {
              UsePart RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		FullyQualifiedReference name = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int aliasNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int aliasNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		String aliasName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	NamespaceReference namespace = name.getNamespace();
	if (namespace == null) {
		namespace = new NamespaceReference(sleft, sright, "");
		name.setNamespace(namespace);
	}
		namespace.setGlobal(true);
		namespace.setStart(namespace.sourceStart() - 1);
	
	UsePart usePart = new UsePart(name,
		new SimpleReference(aliasNameleft, aliasNameright, aliasName));
	RESULT = usePart;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(4/*use_declaration*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // inner_statement_list ::= inner_statement_list inner_statement 
            {
              List RESULT = null;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	// Ignore null statements
	if(statement != null) {
		statementList.add(statement);
		if(statement.getKind() == ASTNodeKinds.AST_ERROR){
			if(!parser.declarations.isEmpty()) {
				Statement node = parser.declarations.peek();
				if(node.sourceStart() == statement.sourceStart() && node.sourceEnd() == statement.sourceEnd()) {
					statementList.add(parser.declarations.pop());
				}
			}		
		}
	}
	RESULT = statementList;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(10/*inner_statement_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // inner_statement_list ::= 
            {
              List RESULT = null;
		 
	RESULT = new LinkedList(); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(10/*inner_statement_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // inner_statement ::= statement 
            {
              Statement RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = statement; 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(11/*inner_statement*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // inner_statement ::= function_declaration_statement 
            {
              Statement RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		PHPMethodDeclaration statement = (PHPMethodDeclaration)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = statement; 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(11/*inner_statement*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // inner_statement ::= class_declaration_statement 
            {
              Statement RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = statement; 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(11/*inner_statement*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // inner_statement ::= T_HALT_COMPILER T_OPEN_PARENTHESE T_CLOSE_PARENTHESE T_SEMICOLON 
            {
              Statement RESULT = null;
		int haltleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int haltright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object halt = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int closeleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int closeright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object close = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		 
	// Note: we never generate K_HALT_COMPILER
	RESULT = null;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(11/*inner_statement*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // statement ::= unticked_statement 
            {
              Statement RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = statement; 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(9/*statement*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // statement ::= T_STRING T_NEKUDOTAIM 
            {
              Statement RESULT = null;
		int labelleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		String label = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = new GotoLabel(labelleft, endright, label);

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(9/*statement*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // statement ::= error 
            {
              Statement RESULT = null;
		int theErrorleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int theErrorright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object theError = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	parser.reportError();
	ASTError error = new ASTError(theErrorleft, theErrorright);
	RESULT = error;	

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(9/*statement*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // statement ::= T_VAR_COMMENT 
            {
              Statement RESULT = null;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(9/*statement*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // NT$2 ::= 
            {
              Object RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;

	Block block = new Block(tokenleft, tokenleft, new LinkedList());
	parser.declarations.push(block);
	

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(144/*NT$2*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // unticked_statement ::= T_CURLY_OPEN NT$2 inner_statement_list T_CURLY_CLOSE 
            {
              Statement RESULT = null;
              // propagate RESULT from NT$2
              if ( ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value != null )
                RESULT = (Statement) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	Block block = (Block)parser.declarations.pop();
	block.setEnd(endright);
	block.getStatements().clear();
	block.acceptStatements(statementList);
	
	RESULT = block;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(12/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // unticked_statement ::= T_IF T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE statement elseif_list else_single 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int iftrueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int iftrueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Statement iftrue = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int elseifleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int elseifright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List[] elseif = (List[])((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int iffalseleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int iffalseright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Statement iffalse = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	Expression innerCondition = null;	
	Statement trueStatement = null;
	Statement falseStatement = iffalse;
		
	for (int i=0 ; i < elseif[0].size() ; i++) {
		innerCondition = (Expression)elseif[0].get(i);	
	 	trueStatement = (Statement)elseif[1].get(i);
	 	int start = ((Integer)elseif[2].get(i)).intValue();
		falseStatement = new IfStatement(start, iffalseright, innerCondition, trueStatement, falseStatement);
	}
	IfStatement ifStatement = new IfStatement(tokenleft, iffalseright, condition, iftrue, falseStatement);		
	
	RESULT = ifStatement;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(12/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // unticked_statement ::= T_IF T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE T_NEKUDOTAIM inner_statement_list new_elseif_list new_else_single T_ENDIF T_SEMICOLON 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-9)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-9)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-9)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).right;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).value;
		int colonleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		Object colon = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int ifTrueStatementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int ifTrueStatementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		List ifTrueStatementList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int elseifleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int elseifright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		List[] elseif = (List[])((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int iffalseleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int iffalseright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Statement iffalse = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	Expression innerCondition = null;	
	Statement trueStatement = null;
	Statement falseStatement = iffalse;
		
	for (int i=0 ; i < elseif[0].size() ; i++) {
		innerCondition = (Expression)elseif[0].get(i);	
	 	trueStatement = (Statement)elseif[1].get(i);
	 	int start = ((Integer)elseif[2].get(i)).intValue();
		falseStatement = new IfStatement(start, iffalseright, innerCondition, trueStatement, falseStatement);
	}
	Block block = new Block(colonleft, ifTrueStatementListright, ifTrueStatementList);
	IfStatement ifStatement = new IfStatement(tokenleft, iffalseright, condition, block, falseStatement);		
	
	RESULT = ifStatement;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(12/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-9)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // unticked_statement ::= T_WHILE T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE while_statement 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	WhileStatement whileStatement = new WhileStatement(tokenleft, statementright, expr, statement);			
	RESULT = whileStatement;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(12/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // unticked_statement ::= T_DO statement T_WHILE T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE T_SEMICOLON 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	DoStatement doStatement = new DoStatement(tokenleft, endright, expr, statement);			
	RESULT = doStatement;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(12/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // unticked_statement ::= T_FOR T_OPEN_PARENTHESE for_expr T_SEMICOLON for_expr T_SEMICOLON for_expr T_CLOSE_PARENTHESE for_statement 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).value;
		int initializationsleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).left;
		int initializationsright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).right;
		List initializations = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).value;
		int conditionsleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int conditionsright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		List conditions = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int increasementsleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int increasementsright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List increasements = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
				
	ForStatement forStatement = new ForStatement(tokenleft, statementright, initializations, conditions, increasements, statement);			
	RESULT = forStatement;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(12/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // unticked_statement ::= T_SWITCH T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE switch_case_list 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int caseBlockleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int caseBlockright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Block caseBlock = (Block)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	SwitchStatement switchStatement = new SwitchStatement(tokenleft, caseBlockright, expr, caseBlock);
	RESULT = switchStatement;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(12/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // unticked_statement ::= T_BREAK T_SEMICOLON 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new BreakStatement(tokenleft, endright); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(12/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // unticked_statement ::= T_BREAK expr T_SEMICOLON 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new BreakStatement(tokenleft, endright, expr); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(12/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // unticked_statement ::= T_CONTINUE T_SEMICOLON 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new ContinueStatement(tokenleft, endright); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(12/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // unticked_statement ::= T_CONTINUE expr T_SEMICOLON 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new ContinueStatement(tokenleft, endright, expr); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(12/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // unticked_statement ::= T_RETURN T_SEMICOLON 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new ReturnStatement(tokenleft, endright); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(12/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // unticked_statement ::= T_RETURN expr_without_variable T_SEMICOLON 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new ReturnStatement(tokenleft, endright, expr); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(12/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // unticked_statement ::= T_RETURN variable T_SEMICOLON 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new ReturnStatement(tokenleft, endright, expr); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(12/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // unticked_statement ::= T_GLOBAL global_var_list T_SEMICOLON 
            {
              Statement RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	GlobalStatement  global = new GlobalStatement(startleft, endright, list);
	RESULT = global;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(12/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // unticked_statement ::= T_STATIC static_var_list T_SEMICOLON 
            {
              Statement RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		PHPDocBlock start = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	StaticStatement s = new StaticStatement(startleft, endright, list);
	RESULT = s;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(12/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // unticked_statement ::= T_ECHO echo_expr_list T_SEMICOLON 
            {
              Statement RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List exprList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new EchoStatement(startleft, endright, exprList); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(12/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // unticked_statement ::= T_INLINE_HTML 
            {
              Statement RESULT = null;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(12/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // unticked_statement ::= expr T_SEMICOLON 
            {
              Statement RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	ExpressionStatement expressionStatement = new ExpressionStatement(exprleft, endright, expr);
	RESULT = expressionStatement;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(12/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // unticked_statement ::= T_USE use_filename T_SEMICOLON 
            {
              Statement RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	PHPCallArgumentsList list = new PHPCallArgumentsList(expr.sourceStart(), expr.sourceEnd());
	list.addNode(expr);
	SimpleReference functionName = new SimpleReference(startleft, startright, "use");
	PHPCallExpression functionInvocation = new PHPCallExpression(startleft, exprright, null, functionName, list);
	ExpressionStatement expressionStatement = new ExpressionStatement(startleft, endright, functionInvocation);
	RESULT = expressionStatement;	

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(12/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // unticked_statement ::= T_UNSET T_OPEN_PARENTHESE unset_variables T_CLOSE_PARENTHESE T_SEMICOLON 
            {
              Statement RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int openParleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int openParright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object openPar = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		PHPCallArgumentsList list = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int closeParleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int closeParright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object closePar = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	list.setStart(openParright);
	list.setEnd(closeParleft);
	SimpleReference functionName = new SimpleReference(startleft, startright, "unset");
	PHPCallExpression functionInvocation = new PHPCallExpression(startleft, closeParright, null, functionName, list);
	ExpressionStatement expressionStatement = new ExpressionStatement(startleft, endright, functionInvocation);
	RESULT = expressionStatement;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(12/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // unticked_statement ::= T_FOREACH T_OPEN_PARENTHESE variable T_AS foreach_variable foreach_optional_arg T_CLOSE_PARENTHESE foreach_statement 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int argleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression arg = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	ForEachStatement forEachStatement = null;
	if (arg == null) {
		forEachStatement = new ForEachStatement(tokenleft, statementright, expr, var, statement);
	} else {
		forEachStatement = new ForEachStatement(tokenleft, statementright, expr, var, arg, statement);
	}
	RESULT = forEachStatement;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(12/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // unticked_statement ::= T_FOREACH T_OPEN_PARENTHESE expr_without_variable T_AS variable foreach_optional_arg T_CLOSE_PARENTHESE foreach_statement 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int argleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression arg = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	ForEachStatement forEachStatement = null;
	if (arg == null) {
		forEachStatement = new ForEachStatement(tokenleft, statementright, expr, var, statement);
	} else {
		forEachStatement = new ForEachStatement(tokenleft, statementright, expr, var, arg, statement);
	}
	RESULT = forEachStatement;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(12/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // unticked_statement ::= T_DECLARE T_OPEN_PARENTHESE declare_list T_CLOSE_PARENTHESE declare_statement 
            {
              Statement RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int listsleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int listsright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List[] lists = (List[])((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	DeclareStatement declare = new DeclareStatement(startleft, statementright, lists[0], lists[1], statement);
	RESULT = declare;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(12/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // unticked_statement ::= T_SEMICOLON 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new EmptyStatement(tokenleft, tokenright); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(12/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // unticked_statement ::= T_TRY T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE T_CATCH T_OPEN_PARENTHESE fully_qualified_class_name tracked_variable T_CLOSE_PARENTHESE T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE additional_catches 
            {
              Statement RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-12)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-12)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-12)).value;
		int tryBlockStartleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-11)).left;
		int tryBlockStartright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-11)).right;
		Object tryBlockStart = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-11)).value;
		int tryListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-10)).left;
		int tryListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-10)).right;
		List tryList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-10)).value;
		int tryBlockEndleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-9)).left;
		int tryBlockEndright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-9)).right;
		Object tryBlockEnd = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-9)).value;
		int catch_wordleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).left;
		int catch_wordright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).right;
		Object catch_word = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).right;
		TypeReference className = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		VariableReference var = (VariableReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int catchBlockStartleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int catchBlockStartright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object catchBlockStart = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int catchListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int catchListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List catchList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int catchBlockEndleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int catchBlockEndright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object catchBlockEnd = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int catchesListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int catchesListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		List catchesList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	Block tryBlock = new Block(tryBlockStartleft, tryBlockEndright, tryList);
	Block catchBlock = new Block(catchBlockStartleft, catchBlockEndright, catchList);
	CatchClause catchClause = new CatchClause(catch_wordleft, catchBlockEndright, className, var, catchBlock);
	((LinkedList) catchesList).addFirst(catchClause);
	TryStatement tryStatement = new TryStatement(startleft, catchesListright, tryBlock, catchesList);
	RESULT = tryStatement;	

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(12/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-12)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // unticked_statement ::= T_THROW expr T_SEMICOLON 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new ThrowStatement(tokenleft, endright, expr); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(12/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // unticked_statement ::= T_GOTO T_STRING T_SEMICOLON 
            {
              Statement RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int labelleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		String label = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = new GotoStatement(startleft, endright, label);

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(12/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // additional_catches ::= non_empty_additional_catches 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = list;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(93/*additional_catches*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // additional_catches ::= 
            {
              List RESULT = null;
		
	List list = new LinkedList();
	RESULT = list;	

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(93/*additional_catches*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // non_empty_additional_catches ::= additional_catch 
            {
              List RESULT = null;
		int catch_statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int catch_statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		CatchClause catch_statement = (CatchClause)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	List list = new LinkedList();
	list.add(catch_statement);
	RESULT = list;	

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(94/*non_empty_additional_catches*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // non_empty_additional_catches ::= non_empty_additional_catches additional_catch 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int catch_statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int catch_statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		CatchClause catch_statement = (CatchClause)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	list.add(catch_statement);
	RESULT = list;	

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(94/*non_empty_additional_catches*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // additional_catch ::= T_CATCH T_OPEN_PARENTHESE fully_qualified_class_name T_VARIABLE T_CLOSE_PARENTHESE T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              CatchClause RESULT = null;
		int catch_wordleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).left;
		int catch_wordright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).right;
		Object catch_word = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		TypeReference className = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int catchBlockStartleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int catchBlockStartright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object catchBlockStart = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int catchListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int catchListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List catchList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int catchBlockEndleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int catchBlockEndright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object catchBlockEnd = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	Block catchBlock = new Block(catchBlockStartleft, catchBlockEndright, catchList);
	VariableReference variable = new VariableReference(varleft, varright, var, PHPVariableKind.LOCAL);
	CatchClause catchClause = new CatchClause(catch_wordleft, catchBlockEndright, className, variable, catchBlock);
	RESULT = catchClause;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(95/*additional_catch*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // unset_variables ::= unset_variable 
            {
              PHPCallArgumentsList RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	PHPCallArgumentsList list = new PHPCallArgumentsList();
	list.addNode(var);
	RESULT = list;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(13/*unset_variables*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // unset_variables ::= unset_variables T_COMMA unset_variable 
            {
              PHPCallArgumentsList RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		PHPCallArgumentsList list = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	list.addNode(var);
	RESULT = list;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(13/*unset_variables*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // unset_variable ::= variable 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = var;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(14/*unset_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // use_filename ::= T_CONSTANT_ENCAPSED_STRING 
            {
              Expression RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, scalar, Scalar.TYPE_STRING);
	RESULT = s;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(15/*use_filename*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // use_filename ::= T_OPEN_PARENTHESE T_CONSTANT_ENCAPSED_STRING T_CLOSE_PARENTHESE 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	Scalar s = new Scalar(startleft, endright, scalar, Scalar.TYPE_STRING);
	RESULT = s;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(15/*use_filename*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // function_declaration_statement ::= unticked_function_declaration_statement 
            {
              PHPMethodDeclaration RESULT = null;
		int functionDeclarationleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int functionDeclarationright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		PHPMethodDeclaration functionDeclaration = (PHPMethodDeclaration)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = functionDeclaration;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(90/*function_declaration_statement*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // class_declaration_statement ::= unticked_class_declaration_statement 
            {
              Statement RESULT = null;
		int classDeclarationleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int classDeclarationright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Statement classDeclaration = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = classDeclaration;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(91/*class_declaration_statement*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // is_reference ::= 
            {
              Boolean RESULT = null;
		
	RESULT = Boolean.FALSE;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(42/*is_reference*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // is_reference ::= T_REFERENCE 
            {
              Boolean RESULT = null;
		
	RESULT = Boolean.TRUE;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(42/*is_reference*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // NT$3 ::= 
            {
              Object RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		PHPDocBlock start = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;

	PHPMethodDeclaration functionDeclaration = new PHPMethodDeclaration(startleft, functionNameright, functionNameleft, functionNameright, functionName, 0, null, new Block(functionNameright,functionNameright,null), isReference.booleanValue(), start);
	parser.addDeclarationStatement(functionDeclaration);
	parser.declarations.push(functionDeclaration);

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(145/*NT$3*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // NT$4 ::= 
            {
              Object RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).right;
		PHPDocBlock start = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List paramList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int closeParentheseleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int closeParentheseright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object closeParenthese = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;

	PHPMethodDeclaration functionDeclaration = (PHPMethodDeclaration)parser.declarations.peek();
	functionDeclaration.acceptArguments(paramList);
	functionDeclaration.setEnd(closeParentheseright);

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(146/*NT$4*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // unticked_function_declaration_statement ::= T_FUNCTION is_reference string_st NT$3 T_OPEN_PARENTHESE parameter_list T_CLOSE_PARENTHESE NT$4 function_body 
            {
              PHPMethodDeclaration RESULT = null;
              // propagate RESULT from NT$3
              if ( ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value != null )
                RESULT = (PHPMethodDeclaration) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
              // propagate RESULT from NT$4
              if ( ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value != null )
                RESULT = (PHPMethodDeclaration) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).right;
		PHPDocBlock start = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		List paramList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int closeParentheseleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int closeParentheseright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object closeParenthese = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		PHPMethodDeclaration body = (PHPMethodDeclaration)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = body;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(96/*unticked_function_declaration_statement*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // function_body ::= T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              PHPMethodDeclaration RESULT = null;
		int blockStartleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int blockStartright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object blockStart = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int blockEndleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int blockEndright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object blockEnd = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	PHPMethodDeclaration functionDeclaration = (PHPMethodDeclaration)parser.declarations.pop();
	Block block = functionDeclaration.getBody();
	block.setStart(blockStartleft);
	block.setEnd(blockEndright);
	block.getStatements().clear();
	block.acceptStatements(statementList);
	functionDeclaration.setEnd(blockEndright);
	RESULT = functionDeclaration;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(120/*function_body*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // function_body ::= error 
            {
              PHPMethodDeclaration RESULT = null;
		int theErrorleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int theErrorright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object theError = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = (PHPMethodDeclaration)parser.declarations.pop();

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(120/*function_body*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // NT$5 ::= 
            {
              Object RESULT = null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		CompilerAstParser.ModifierDocPair modifier = (CompilerAstParser.ModifierDocPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;

	ClassDeclaration classDeclaration;
	if(modifier.modifier==org.eclipse.php.core.compiler.IPHPModifiers.AccTrait){
		classDeclaration = new TraitDeclaration(modifierleft ,classNameright, 
			classNameleft, classNameright, modifier.modifier, className, null, null, 
			new Block(classNameright,classNameright,null), modifier.doc);
	}else{
		classDeclaration = new ClassDeclaration(modifierleft ,classNameright, 
			classNameleft, classNameright, modifier.modifier, className, null, null, 
			new Block(classNameright,classNameright,null), modifier.doc);
	}
	classDeclaration.setRecovered(true);
	parser.addDeclarationStatement(classDeclaration);
	parser.declarations.push(classDeclaration);

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(147/*NT$5*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // NT$6 ::= 
            {
              Object RESULT = null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		CompilerAstParser.ModifierDocPair modifier = (CompilerAstParser.ModifierDocPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int superClassleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int superClassright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		TypeReference superClass = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int interfacesleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int interfacesright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		List interfaces = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;

	ClassDeclaration classDeclaration = (ClassDeclaration)parser.declarations.peek();
	if (superClass != null) {
		classDeclaration.setSuperClass(superClass);
	}
	if (interfaces != null) {
		classDeclaration.setInterfaceList(interfaces);
	}
	classDeclaration.setEnd(interfacesright);
	classDeclaration.getBody().setStart(interfacesright);
	classDeclaration.getBody().setEnd(interfacesright);

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(148/*NT$6*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // unticked_class_declaration_statement ::= class_entry_type T_STRING NT$5 extends_from errorOrNot implements_list NT$6 T_CURLY_OPEN class_statement_list class_closure 
            {
              Statement RESULT = null;
              // propagate RESULT from NT$5
              if ( ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).value != null )
                RESULT = (Statement) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).value;
              // propagate RESULT from NT$6
              if ( ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value != null )
                RESULT = (Statement) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-9)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-9)).right;
		CompilerAstParser.ModifierDocPair modifier = (CompilerAstParser.ModifierDocPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-9)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).value;
		int superClassleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).left;
		int superClassright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).right;
		TypeReference superClass = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).value;
		int interfacesleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int interfacesright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		List interfaces = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int blockStartleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int blockStartright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object blockStart = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object statementList = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int blockEndleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int blockEndright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Statement blockEnd = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	if(blockEnd != null) {
		parser.reportError(new ASTError(statementListright - 1, statementListright), "syntax error, unfinished class declaration");
		parser.pendingStatement = blockEnd;
	}
	ClassDeclaration classDeclaration = (ClassDeclaration)parser.declarations.pop();
	classDeclaration.setRecovered(false);
	classDeclaration.setEnd(blockEndright);
	classDeclaration.getBody().setStart(blockStartleft);
	classDeclaration.getBody().setEnd(blockEndright);
	RESULT = classDeclaration;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(97/*unticked_class_declaration_statement*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-9)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // NT$7 ::= 
            {
              Object RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		PHPDocBlock start = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int interfacesleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int interfacesright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		List interfaces = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;

	InterfaceDeclaration interfaceDeclaration = new InterfaceDeclaration(startleft ,interfacesright, classNameleft, classNameright, className, interfaces, new Block(interfacesright,interfacesright,null), start);
	interfaceDeclaration.setRecovered(true);
	parser.declarations.push(interfaceDeclaration);

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(149/*NT$7*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // unticked_class_declaration_statement ::= interface_entry T_STRING interface_extends_list NT$7 T_CURLY_OPEN class_statement_list class_closure 
            {
              Statement RESULT = null;
              // propagate RESULT from NT$7
              if ( ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value != null )
                RESULT = (Statement) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).right;
		PHPDocBlock start = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int interfacesleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int interfacesright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		List interfaces = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int blockStartleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int blockStartright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object blockStart = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object statementList = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int blockEndleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int blockEndright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Statement blockEnd = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	if(blockEnd != null) {
		parser.reportError(new ASTError(statementListright - 1, statementListright), "syntax error, unfinished class declaration");
		parser.pendingStatement = blockEnd;
	}

	InterfaceDeclaration interfaceDeclaration = (InterfaceDeclaration)parser.declarations.pop();
	interfaceDeclaration.setRecovered(false);
	interfaceDeclaration.setEnd(blockEndright);
	interfaceDeclaration.getBody().setStart(blockStartleft);
	interfaceDeclaration.getBody().setEnd(blockEndright);
	RESULT = interfaceDeclaration;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(97/*unticked_class_declaration_statement*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // errorOrNot ::= error 
            {
              Object RESULT = null;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(121/*errorOrNot*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // errorOrNot ::= 
            {
              Object RESULT = null;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(121/*errorOrNot*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // class_closure ::= T_CURLY_CLOSE 
            {
              Statement RESULT = null;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(119/*class_closure*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // class_closure ::= class_declaration_statement 
            {
              Statement RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = statement;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(119/*class_closure*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // class_entry_type ::= T_CLASS 
            {
              CompilerAstParser.ModifierDocPair RESULT = null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		PHPDocBlock value = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccDefault, value); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(98/*class_entry_type*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // class_entry_type ::= T_ABSTRACT T_CLASS 
            {
              CompilerAstParser.ModifierDocPair RESULT = null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		PHPDocBlock value = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccAbstract, value);

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(98/*class_entry_type*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // class_entry_type ::= T_FINAL T_CLASS 
            {
              CompilerAstParser.ModifierDocPair RESULT = null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		PHPDocBlock value = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccFinal, value);

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(98/*class_entry_type*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // class_entry_type ::= T_TRAIT 
            {
              CompilerAstParser.ModifierDocPair RESULT = null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		PHPDocBlock value = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = parser.new ModifierDocPair(org.eclipse.php.core.compiler.IPHPModifiers.AccTrait, value);

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(98/*class_entry_type*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$CompilerAstParser$do_action2(
    int                        CUP$CompilerAstParser$act_num,
    java_cup.runtime.lr_parser CUP$CompilerAstParser$parser,
    java.util.Stack            CUP$CompilerAstParser$stack,
    int                        CUP$CompilerAstParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CompilerAstParser$result;

      /* select the action based on the action number */
      switch (CUP$CompilerAstParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // extends_from ::= 
            {
              TypeReference RESULT = null;
		
	RESULT = null;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(99/*extends_from*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // extends_from ::= T_EXTENDS fully_qualified_class_name 
            {
              TypeReference RESULT = null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		TypeReference className = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = className;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(99/*extends_from*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // extends_from ::= T_EXTENDS error 
            {
              TypeReference RESULT = null;
		int theErrorleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int theErrorright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object theError = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	parser.reportError(new ASTError(theErrorleft, theErrorright));

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(99/*extends_from*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // interface_entry ::= T_INTERFACE 
            {
              PHPDocBlock RESULT = null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		PHPDocBlock value = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = value;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(75/*interface_entry*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // interface_extends_list ::= 
            {
              List RESULT = null;
		
	List list = new LinkedList();
	RESULT = list;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(76/*interface_extends_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // interface_extends_list ::= T_EXTENDS interface_list 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = list;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(76/*interface_extends_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // implements_list ::= 
            {
              List RESULT = null;
		
	List list = new LinkedList();
	RESULT = list;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(100/*implements_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // implements_list ::= T_IMPLEMENTS interface_list 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = list;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(100/*implements_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // interface_list ::= fully_qualified_class_name 
            {
              List RESULT = null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		TypeReference className = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	List list = new LinkedList();
	if(className != null) {
		list.add(className);
	}
	RESULT = list;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(101/*interface_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // interface_list ::= interface_list T_COMMA fully_qualified_class_name 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		TypeReference className = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	list.add(className);
	RESULT = list;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(101/*interface_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // interface_list ::= interface_list T_COMMA error 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int commaleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int commaright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object comma = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int theErrorleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int theErrorright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object theError = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	parser.reportError(new ASTError(theErrorleft, theErrorright));
	RESULT = list;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(101/*interface_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // interface_list ::= error 
            {
              List RESULT = null;
		int theErrorleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int theErrorright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object theError = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	parser.reportError(new ASTError(theErrorleft, theErrorright));
	RESULT = new LinkedList();

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(101/*interface_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // foreach_optional_arg ::= 
            {
              Expression RESULT = null;
		 
	RESULT = null;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(16/*foreach_optional_arg*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // foreach_optional_arg ::= T_DOUBLE_ARROW foreach_variable 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = var;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(16/*foreach_optional_arg*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // foreach_variable ::= variable 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = var;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(17/*foreach_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // foreach_variable ::= T_REFERENCE variable 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	ReferenceExpression reference = new ReferenceExpression (startleft, varright, var);
	RESULT = reference;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(17/*foreach_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // for_statement ::= statement 
            {
              Statement RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = statement;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(18/*for_statement*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // for_statement ::= T_NEKUDOTAIM inner_statement_list T_ENDFOR T_SEMICOLON 
            {
              Statement RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		
	Block block = new Block(startleft, statementListright, statementList);
	RESULT = block;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(18/*for_statement*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // foreach_statement ::= statement 
            {
              Statement RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = statement;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(19/*foreach_statement*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // foreach_statement ::= T_NEKUDOTAIM inner_statement_list T_ENDFOREACH T_SEMICOLON 
            {
              Statement RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		
	Block block = new Block(startleft, statementListright, statementList);
	RESULT = block;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(19/*foreach_statement*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // declare_statement ::= statement 
            {
              Statement RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = statement;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(20/*declare_statement*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // declare_statement ::= T_NEKUDOTAIM inner_statement_list T_ENDDECLARE T_SEMICOLON 
            {
              Statement RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		
	Block block = new Block(startleft, statementListright, statementList);
	RESULT = block;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(20/*declare_statement*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // declare_list ::= string_st T_EQUAL static_scalar 
            {
              List[] RESULT = null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String key = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	List listKeys = new LinkedList();
	List listValues = new LinkedList();
	
	listKeys.add(key);
	listValues.add(value);

	List[] returnList = new List[] { listKeys, listValues };
	RESULT = returnList;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(21/*declare_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // declare_list ::= declare_list T_COMMA string_st T_EQUAL static_scalar 
            {
              List[] RESULT = null;
		int listsleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int listsright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		List[] lists = (List[])((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int keyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String key = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	lists[0].add(key);
	lists[1].add(value);
	RESULT = lists;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(21/*declare_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // switch_case_list ::= T_CURLY_OPEN case_list T_CURLY_CLOSE 
            {
              Block RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	Block block = new Block(startleft, endright, caseList);	
	RESULT = block; 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(22/*switch_case_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // switch_case_list ::= T_CURLY_OPEN T_SEMICOLON case_list T_CURLY_CLOSE 
            {
              Block RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	Block block = new Block(startleft, endright, caseList);	
	RESULT = block; 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(22/*switch_case_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // switch_case_list ::= T_NEKUDOTAIM case_list T_ENDSWITCH T_SEMICOLON 
            {
              Block RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	Block block = new Block(startleft, endright, caseList);	
	RESULT = block; 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(22/*switch_case_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // switch_case_list ::= T_NEKUDOTAIM T_SEMICOLON case_list T_ENDSWITCH T_SEMICOLON 
            {
              Block RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	Block block = new Block(startleft, endright, caseList);	
	RESULT = block; 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(22/*switch_case_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // case_list ::= 
            {
              List RESULT = null;
		
	RESULT = new LinkedList(); // of SwitchCase

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(23/*case_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // case_list ::= case_list T_CASE expr case_separator inner_statement_list 
            {
              List RESULT = null;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		List statements = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	SwitchCase switchCase = new SwitchCase(tokenleft, statementsright, expr, statements, false);
	if (caseList == null) {
		caseList = new LinkedList(); // of switchCase
	}
	caseList.add(switchCase);
	RESULT = caseList;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(23/*case_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // case_list ::= case_list T_DEFAULT case_separator inner_statement_list 
            {
              List RESULT = null;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		List statements = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	SwitchCase switchCase = new SwitchCase(tokenleft, statementsright, null, statements, true);
	if (caseList == null) {
		caseList = new LinkedList(); // of SwitchCase
	}
	caseList.add(switchCase);
	RESULT = caseList;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(23/*case_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // case_separator ::= T_NEKUDOTAIM 
            {
              Object RESULT = null;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(24/*case_separator*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // case_separator ::= T_SEMICOLON 
            {
              Object RESULT = null;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(24/*case_separator*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // while_statement ::= statement 
            {
              Statement RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = statement;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(25/*while_statement*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // while_statement ::= T_NEKUDOTAIM inner_statement_list T_ENDWHILE T_SEMICOLON 
            {
              Statement RESULT = null;
		int colonleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object colon = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		
	Block block = new Block(colonleft, statementListright, statementList);
	RESULT = block;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(25/*while_statement*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // elseif_list ::= 
            {
              List[] RESULT = null;
		
	List listConditions = new LinkedList();
	List listStatements = new LinkedList();
	List listTokens = new LinkedList();
	
	List[] returnList = new List[] { listConditions, listStatements, listTokens };
	
	RESULT = returnList;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(26/*elseif_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // elseif_list ::= elseif_list T_ELSEIF T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE statement 
            {
              List[] RESULT = null;
		int elseifListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int elseifListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		List[] elseifList = (List[])((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int iftrueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int iftrueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Statement iftrue = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
			
	((LinkedList)elseifList[0]).addFirst(condition);
	((LinkedList)elseifList[1]).addFirst(iftrue);
	((LinkedList)elseifList[2]).addFirst(new Integer(tokenleft));

	RESULT = elseifList;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(26/*elseif_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // new_elseif_list ::= 
            {
              List[] RESULT = null;
		
	List listConditions = new LinkedList();
	List listStatements = new LinkedList();
	List listTokens = new LinkedList();
	
	List[] returnList = new List[] { listConditions, listStatements, listTokens };
	
	RESULT = returnList;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(27/*new_elseif_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // new_elseif_list ::= new_elseif_list T_ELSEIF T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE T_NEKUDOTAIM inner_statement_list 
            {
              List[] RESULT = null;
		int elseifListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).left;
		int elseifListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).right;
		List[] elseifList = (List[])((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int colonleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object colon = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
			
	Block block = new Block(colonleft, statementListright, statementList);
	((LinkedList)elseifList[0]).addFirst(condition);
	((LinkedList)elseifList[1]).addFirst(block);
	((LinkedList)elseifList[2]).addFirst(new Integer(tokenleft));

	RESULT = elseifList;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(27/*new_elseif_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // else_single ::= 
            {
              Statement RESULT = null;
		
	RESULT = null;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(28/*else_single*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // else_single ::= T_ELSE statement 
            {
              Statement RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = statement;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(28/*else_single*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // new_else_single ::= 
            {
              Statement RESULT = null;
		
	RESULT = null;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(29/*new_else_single*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // new_else_single ::= T_ELSE T_NEKUDOTAIM inner_statement_list 
            {
              Statement RESULT = null;
		int colonleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object colon = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	Block block = new Block(colonleft, statementListright, statementList);
	RESULT = block;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(29/*new_else_single*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // parameter_list ::= non_empty_parameter_list 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = list;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(30/*parameter_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // parameter_list ::= 
            {
              List RESULT = null;
		
	List list = new LinkedList();
	RESULT = list;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(30/*parameter_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // non_empty_parameter_list ::= parameter 
            {
              List RESULT = null;
		int parameterleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int parameterright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		FormalParameter parameter = (FormalParameter)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	List list = new LinkedList();
	if(parameter != null) {
		list.add(parameter);
	}
	RESULT = list;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(33/*non_empty_parameter_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // non_empty_parameter_list ::= non_empty_parameter_list T_COMMA parameter 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int parameterleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int parameterright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		FormalParameter parameter = (FormalParameter)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	if(parameter != null) {
		list.add(parameter);
	}
	RESULT = list;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(33/*non_empty_parameter_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // non_empty_parameter_list ::= non_empty_parameter_list T_COMMA 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int commaleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int commaright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object comma = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	parser.reportError(new ASTError(commaleft, commaright), "syntax error, unexpected ','");
	RESULT = list;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(33/*non_empty_parameter_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // parameter ::= optional_class_type T_VARIABLE 
            {
              FormalParameter RESULT = null;
		int classTypeleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int classTyperight = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		TypeReference classType = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	int start = classType == null ? varleft : classTypeleft;
	VariableReference v = new VariableReference(varleft, varright, var, PHPVariableKind.LOCAL);
	FormalParameter parameter = new FormalParameter(start, varright, classType, v);
	RESULT = parameter;	

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(34/*parameter*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // parameter ::= optional_class_type T_REFERENCE T_VARIABLE 
            {
              FormalParameter RESULT = null;
		int classTypeleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int classTyperight = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		TypeReference classType = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int refleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object ref = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	int start = classType == null ? refleft : classTypeleft;
	VariableReference v = new VariableReference(varleft, varright, var, PHPVariableKind.LOCAL);
	FormalParameter parameter = new FormalParameterByReference(start, varright, classType, v);
	RESULT = parameter;	

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(34/*parameter*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // parameter ::= optional_class_type T_VARIABLE T_EQUAL static_scalar 
            {
              FormalParameter RESULT = null;
		int classTypeleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int classTyperight = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		TypeReference classType = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression scalar = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	int start = classType == null ? varleft : classTypeleft;
	VariableReference v = new VariableReference(varleft, varright, var, PHPVariableKind.LOCAL);
	FormalParameter parameter = new FormalParameter(start, scalarright, classType, v, scalar);
	RESULT = parameter;	

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(34/*parameter*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // parameter ::= optional_class_type T_REFERENCE T_VARIABLE T_EQUAL static_scalar 
            {
              FormalParameter RESULT = null;
		int classTypeleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int classTyperight = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		TypeReference classType = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int refleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object ref = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression scalar = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	int start = classType == null ? refleft : classTypeleft;
	VariableReference v = new VariableReference(varleft, varright, var, PHPVariableKind.LOCAL);
	FormalParameter parameter = new FormalParameterByReference(start, scalarright, classType, v, scalar);
	RESULT = parameter;	

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(34/*parameter*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // parameter ::= error 
            {
              FormalParameter RESULT = null;
		int theErrorleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int theErrorright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object theError = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	parser.reportError(new ASTError(theErrorleft, theErrorright));
	RESULT = null;	

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(34/*parameter*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // optional_class_type ::= 
            {
              TypeReference RESULT = null;
		
	RESULT = null;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(102/*optional_class_type*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // optional_class_type ::= fully_qualified_class_name 
            {
              TypeReference RESULT = null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		TypeReference className = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = className;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(102/*optional_class_type*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // optional_class_type ::= T_ARRAY 
            {
              TypeReference RESULT = null;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object array = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	TypeReference reference = new TypeReference(arrayleft, arrayright, "array");
	RESULT = reference;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(102/*optional_class_type*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // optional_class_type ::= T_CALLABLE 
            {
              TypeReference RESULT = null;
		int callableleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int callableright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object callable = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	TypeReference reference = new TypeReference(callableleft, callableright, "callable");
	RESULT = reference;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(102/*optional_class_type*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // function_call_parameter_list ::= non_empty_function_call_parameter_list 
            {
              PHPCallArgumentsList RESULT = null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		PHPCallArgumentsList paramsList = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = paramsList;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(35/*function_call_parameter_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // function_call_parameter_list ::= 
            {
              PHPCallArgumentsList RESULT = null;
		
	PHPCallArgumentsList list = new PHPCallArgumentsList();
	RESULT = list;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(35/*function_call_parameter_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // non_empty_function_call_parameter_list ::= expr_without_variable 
            {
              PHPCallArgumentsList RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	PHPCallArgumentsList paramsList = new PHPCallArgumentsList();
	paramsList.addNode(var);	
	RESULT = paramsList;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(36/*non_empty_function_call_parameter_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // non_empty_function_call_parameter_list ::= variable 
            {
              PHPCallArgumentsList RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	PHPCallArgumentsList paramsList = new PHPCallArgumentsList();
	paramsList.addNode(var);	
	RESULT = paramsList;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(36/*non_empty_function_call_parameter_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // non_empty_function_call_parameter_list ::= T_REFERENCE w_variable 
            {
              PHPCallArgumentsList RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	PHPCallArgumentsList paramsList = new PHPCallArgumentsList();
	Expression var_ref = new ReferenceExpression(startleft, varright, var);
	paramsList.addNode(var_ref);	
	RESULT = paramsList;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(36/*non_empty_function_call_parameter_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // non_empty_function_call_parameter_list ::= non_empty_function_call_parameter_list T_COMMA expr_without_variable 
            {
              PHPCallArgumentsList RESULT = null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		PHPCallArgumentsList paramsList = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	paramsList.addNode(var);
	RESULT = paramsList;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(36/*non_empty_function_call_parameter_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // non_empty_function_call_parameter_list ::= non_empty_function_call_parameter_list T_COMMA variable 
            {
              PHPCallArgumentsList RESULT = null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		PHPCallArgumentsList paramsList = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	paramsList.addNode(var);	
	RESULT = paramsList;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(36/*non_empty_function_call_parameter_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // non_empty_function_call_parameter_list ::= non_empty_function_call_parameter_list T_COMMA T_REFERENCE w_variable 
            {
              PHPCallArgumentsList RESULT = null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		PHPCallArgumentsList paramsList = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	Expression var_ref = new ReferenceExpression(startleft, varright, var);
	paramsList.addNode(var_ref);
	RESULT = paramsList;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(36/*non_empty_function_call_parameter_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // global_var_list ::= global_var_list T_COMMA global_var 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	list.add(var);
	RESULT = list;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(37/*global_var_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // global_var_list ::= global_var 
            {
              List RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	List list = new LinkedList();
	list.add(var);
	RESULT = list;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(37/*global_var_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // global_var ::= T_VARIABLE 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	VariableReference variable = new VariableReference(varleft, varright, var);
	RESULT = variable;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(38/*global_var*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // global_var ::= T_DOLLAR r_variable 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	ReflectionVariableReference ref = new ReflectionVariableReference(startleft, varright, var);
	RESULT = ref;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(38/*global_var*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // global_var ::= T_DOLLAR T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression varName = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	ReflectionVariableReference var = new ReflectionVariableReference(startleft, endright, varName);
	RESULT = var;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(38/*global_var*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // static_var_list ::= static_var_list T_COMMA T_VARIABLE 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	VariableReference v = new VariableReference(varleft, varright, var); 
	list.add(v);
	RESULT = list;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(39/*static_var_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // static_var_list ::= static_var_list T_COMMA T_VARIABLE T_EQUAL static_scalar 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	VariableReference v = new VariableReference(varleft, varright, var); 
	Assignment assignment = new Assignment(varleft, exprright, v, Assignment.OP_EQUAL, expr); 
	list.add(assignment);
	RESULT = list;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(39/*static_var_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // static_var_list ::= T_VARIABLE 
            {
              List RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	VariableReference v = new VariableReference(varleft, varright, var); 
	List list = new LinkedList();
	list.add(v);
	RESULT = list;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(39/*static_var_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // static_var_list ::= T_VARIABLE T_EQUAL static_scalar 
            {
              List RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	VariableReference v = new VariableReference(varleft, varright, var); 
	Assignment assignment = new Assignment(varleft, exprright, v, Assignment.OP_EQUAL, expr); 
	List list = new LinkedList();
	list.add(assignment);
	RESULT = list;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(39/*static_var_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // class_statement_list ::= class_statement_list class_statement 
            {
              Object RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int classStatementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int classStatementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object classStatement = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	if(!(parser.declarations.peek() instanceof TypeDeclaration)) {
		parser.declarations.pop();
	}

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(40/*class_statement_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // class_statement_list ::= 
            {
              Object RESULT = null;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(40/*class_statement_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // class_statement ::= variable_modifiers class_variable_declaration T_SEMICOLON 
            {
              Object RESULT = null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		CompilerAstParser.ModifierDocPair modifier = (CompilerAstParser.ModifierDocPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int decListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int decListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List decList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		
	Iterator i = decList.iterator();
	while (i.hasNext()) {
		ASTNode[] decl = (ASTNode[]) i.next();
		VariableReference variable = (VariableReference)decl[0];
		Expression initializer = (Expression)decl[1];
		int start = variable.sourceStart();
		int end = (initializer == null ? variable.sourceEnd() : initializer.sourceEnd());
		parser.addDeclarationStatement(new PHPFieldDeclaration(variable, initializer, start, end, modifier.modifier, modifierleft, modifier.doc));
	}

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(41/*class_statement*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // class_statement ::= constant_declaration T_SEMICOLON 
            {
              Object RESULT = null;
		int decListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int decListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List decList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		
	Iterator i = decList.iterator();
	while (i.hasNext()) {
		ASTNode[] decl = (ASTNode[]) i.next();
		ConstantReference constant = (ConstantReference)decl[0];
		Expression initializer = (Expression)decl[1];
		
		PHPDocBlock docBlock = null;
		if (decl.length == 3) {
			docBlock = (PHPDocBlock)decl[2];
		}
		int start = constant.sourceStart();
		int end = (initializer == null ? constant.sourceEnd() : initializer.sourceEnd());
		parser.addDeclarationStatement(new ConstantDeclaration(constant, initializer, decListleft, end, docBlock));
	}

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(41/*class_statement*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // NT$8 ::= 
            {
              Object RESULT = null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		CompilerAstParser.ModifierDocPair modifier = (CompilerAstParser.ModifierDocPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		PHPDocBlock start = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;

	int methodStart = modifier == null ? startleft : modifierleft;
	int modifierValue = modifier == null ? Modifiers.AccPublic : modifier.modifier;
	PHPDocBlock docBlock = start;
	if (modifier != null && modifier.doc != null) {
		docBlock = modifier.doc;
	}
	PHPMethodDeclaration methodDeclaration = new PHPMethodDeclaration(methodStart, functionNameright, functionNameleft, functionNameright, functionName, modifierValue, null, new Block(functionNameright, functionNameright, null), isReference.booleanValue(), docBlock);
	parser.addDeclarationStatement(methodDeclaration);
	parser.declarations.push(methodDeclaration);

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(150/*NT$8*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // NT$9 ::= 
            {
              Object RESULT = null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).right;
		CompilerAstParser.ModifierDocPair modifier = (CompilerAstParser.ModifierDocPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).right;
		PHPDocBlock start = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List paramList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int closeParentheseleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int closeParentheseright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object closeParenthese = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;

	PHPMethodDeclaration functionDeclaration = (PHPMethodDeclaration)parser.declarations.peek();
	functionDeclaration.acceptArguments(paramList);
	functionDeclaration.setEnd(closeParentheseright);

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(151/*NT$9*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // class_statement ::= method_modifiers T_FUNCTION is_reference string_st NT$8 T_OPEN_PARENTHESE parameter_list T_CLOSE_PARENTHESE NT$9 method_body 
            {
              Object RESULT = null;
              // propagate RESULT from NT$8
              if ( ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
              // propagate RESULT from NT$9
              if ( ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-9)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-9)).right;
		CompilerAstParser.ModifierDocPair modifier = (CompilerAstParser.ModifierDocPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-9)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).right;
		PHPDocBlock start = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		List paramList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int closeParentheseleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int closeParentheseright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object closeParenthese = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Statement body = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	PHPMethodDeclaration methodDeclaration = (PHPMethodDeclaration)parser.declarations.pop();
	if(body instanceof ASTError) {
		parser.reportError(new ASTError(methodDeclaration.sourceEnd() - 1, methodDeclaration.sourceEnd()), "syntax error, unfinished method declaration");
	}
	TypeDeclaration type = (TypeDeclaration)parser.declarations.peek();
	methodDeclaration.setDeclaringTypeName(type.getName());

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(41/*class_statement*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-9)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // class_statement ::= T_VAR_COMMENT 
            {
              Object RESULT = null;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(41/*class_statement*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // class_statement ::= error 
            {
              Object RESULT = null;
		int theErrorleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int theErrorright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object theError = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	parser.reportError();
	ASTError error = new ASTError(theErrorleft, theErrorright);
	parser.addDeclarationStatement(error);

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(41/*class_statement*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // class_statement ::= trait_use_statement 
            {
              Object RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		TraitUseStatement statement = (TraitUseStatement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = statement;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(41/*class_statement*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // trait_use_statement ::= T_USE trait_list trait_adaptations 
            {
              TraitUseStatement RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int adaptationsleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int adaptationsright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		List adaptations = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	TraitUseStatement traitUseStatement = new TraitUseStatement(startleft,adaptationsright,list,adaptations);
	parser.addDeclarationStatement(traitUseStatement);
	parser.declarations.push(traitUseStatement);
	RESULT = traitUseStatement;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(122/*trait_use_statement*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // trait_list ::= fully_qualified_class_name 
            {
              List RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		TypeReference name = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	List<TypeReference> traitList = new LinkedList<TypeReference>();
	traitList.add(name);
	RESULT = traitList;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(123/*trait_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // trait_list ::= trait_list T_COMMA fully_qualified_class_name 
            {
              List RESULT = null;
		int traitListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int traitListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List traitList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		TypeReference name = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	traitList.add(name);
	RESULT = traitList;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(123/*trait_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // trait_adaptations ::= T_SEMICOLON 
            {
              List RESULT = null;
		
	RESULT = null;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(124/*trait_adaptations*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // trait_adaptations ::= T_CURLY_OPEN trait_adaptation_list T_CURLY_CLOSE 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		
	RESULT = list;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(124/*trait_adaptations*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // trait_adaptation_list ::= 
            {
              List RESULT = null;
		
	RESULT = null;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(125/*trait_adaptation_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // trait_adaptation_list ::= non_empty_trait_adaptation_list 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = list;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(125/*trait_adaptation_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // non_empty_trait_adaptation_list ::= trait_adaptation_statement 
            {
              List RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		TraitStatement statement = (TraitStatement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	List<TraitStatement> taList = new LinkedList<TraitStatement>();
	taList.add(statement);
	RESULT = taList;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(126/*non_empty_trait_adaptation_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // non_empty_trait_adaptation_list ::= non_empty_trait_adaptation_list trait_adaptation_statement 
            {
              List RESULT = null;
		int taListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int taListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List taList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		TraitStatement statement = (TraitStatement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	taList.add(statement);
	RESULT = taList;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(126/*non_empty_trait_adaptation_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // trait_adaptation_statement ::= trait_precedence T_SEMICOLON 
            {
              TraitStatement RESULT = null;
		int precedenceleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int precedenceright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		TraitPrecedence precedence = (TraitPrecedence)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	TraitPrecedenceStatement traitPrecedenceStatement = new TraitPrecedenceStatement(precedenceleft,endright,precedence);
	RESULT = traitPrecedenceStatement;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(127/*trait_adaptation_statement*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // trait_adaptation_statement ::= trait_alias T_SEMICOLON 
            {
              TraitStatement RESULT = null;
		int aliasleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int aliasright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		TraitAlias alias = (TraitAlias)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	TraitAliasStatement traitAliasStatement = new TraitAliasStatement(aliasleft,endright,alias);
	RESULT = traitAliasStatement;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(127/*trait_adaptation_statement*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // trait_precedence ::= trait_method_reference_fully_qualified T_INSTEADOF trait_reference_list 
            {
              TraitPrecedence RESULT = null;
		int methodReferenceleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int methodReferenceright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		FullyQualifiedTraitMethodReference methodReference = (FullyQualifiedTraitMethodReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int trListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int trListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		List trList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	TraitPrecedence traitPrecedence = new TraitPrecedence(methodReferenceleft,trListright,methodReference,trList);
	RESULT = traitPrecedence;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(128/*trait_precedence*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // trait_reference_list ::= fully_qualified_class_name 
            {
              List RESULT = null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		TypeReference className = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	List<TypeReference> trList = new LinkedList<TypeReference>();
	trList.add(className);
	RESULT = trList;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(129/*trait_reference_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // trait_reference_list ::= trait_reference_list T_COMMA fully_qualified_class_name 
            {
              List RESULT = null;
		int trListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int trListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List trList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		TypeReference className = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	trList.add(className);
	RESULT = trList;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(129/*trait_reference_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // trait_method_reference ::= T_STRING 
            {
              Expression RESULT = null;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	SimpleReference name = new SimpleReference(functionNameleft, functionNameright, functionName);
	RESULT = name;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(130/*trait_method_reference*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // trait_method_reference ::= trait_method_reference_fully_qualified 
            {
              Expression RESULT = null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		FullyQualifiedTraitMethodReference className = (FullyQualifiedTraitMethodReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = className;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(130/*trait_method_reference*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$CompilerAstParser$do_action3(
    int                        CUP$CompilerAstParser$act_num,
    java_cup.runtime.lr_parser CUP$CompilerAstParser$parser,
    java.util.Stack            CUP$CompilerAstParser$stack,
    int                        CUP$CompilerAstParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CompilerAstParser$result;

      /* select the action based on the action number */
      switch (CUP$CompilerAstParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // trait_method_reference_fully_qualified ::= fully_qualified_class_name T_PAAMAYIM_NEKUDOTAYIM T_STRING 
            {
              FullyQualifiedTraitMethodReference RESULT = null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		TypeReference className = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	SimpleReference name = new SimpleReference(functionNameleft, functionNameright, functionName);
	FullyQualifiedTraitMethodReference methodReference = new FullyQualifiedTraitMethodReference(classNameleft, functionNameright, className, functionName); 
	RESULT = methodReference;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(131/*trait_method_reference_fully_qualified*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // trait_alias ::= trait_method_reference T_AS trait_modifiers T_STRING 
            {
              TraitAlias RESULT = null;
		int referenceleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int referenceright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Expression reference = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		CompilerAstParser.ModifierDocPair modifier = (CompilerAstParser.ModifierDocPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	int modifierValue = modifier == null ? Modifiers.AccPublic : modifier.modifier;
	TraitAlias alias = new TraitAlias(reference,modifierValue,
		new SimpleReference(functionNameleft, functionNameright, functionName));
	RESULT = alias;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(132/*trait_alias*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // trait_alias ::= trait_method_reference T_AS member_modifier 
            {
              TraitAlias RESULT = null;
		int referenceleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int referenceright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression reference = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		CompilerAstParser.ModifierDocPair modifier = (CompilerAstParser.ModifierDocPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	int modifierValue = modifier == null ? Modifiers.AccPublic : modifier.modifier;
	TraitAlias alias = new TraitAlias(reference,modifierValue,null);
	RESULT = alias;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(132/*trait_alias*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // trait_modifiers ::= 
            {
              CompilerAstParser.ModifierDocPair RESULT = null;
		
	RESULT = null;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(133/*trait_modifiers*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // trait_modifiers ::= member_modifier 
            {
              CompilerAstParser.ModifierDocPair RESULT = null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		CompilerAstParser.ModifierDocPair modifier = (CompilerAstParser.ModifierDocPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = modifier;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(133/*trait_modifiers*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // method_body ::= T_SEMICOLON 
            {
              Statement RESULT = null;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	PHPMethodDeclaration methodDeclaration = (PHPMethodDeclaration)parser.declarations.peek();
	methodDeclaration.getBody().setStart(endleft);
	methodDeclaration.getBody().setEnd(endright);
	methodDeclaration.setEnd(endright);
	RESULT = null;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(83/*method_body*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // method_body ::= T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              Statement RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	PHPMethodDeclaration methodDeclaration = (PHPMethodDeclaration)parser.declarations.peek();
	methodDeclaration.getBody().setStart(startleft);
	methodDeclaration.getBody().setEnd(endright);
	methodDeclaration.getBody().getStatements().clear();
	methodDeclaration.getBody().acceptStatements(statementList);
	methodDeclaration.setEnd(endright);
	RESULT = null;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(83/*method_body*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // method_body ::= 
            {
              Statement RESULT = null;
		
	parser.reportError();
	RESULT = new ASTError(0,0);

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(83/*method_body*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // variable_modifiers ::= non_empty_member_modifiers 
            {
              CompilerAstParser.ModifierDocPair RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	int result = 0;
	PHPDocBlock docBlock = null;
	for (Iterator it = list.iterator(); it.hasNext() ; ) {
		CompilerAstParser.ModifierDocPair modifier = (CompilerAstParser.ModifierDocPair)it.next();
		if (modifier.doc != null) {
			docBlock = modifier.doc;
		}
		result |= modifier.modifier;
	}
	RESULT = parser.new ModifierDocPair(result, docBlock);

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(104/*variable_modifiers*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // variable_modifiers ::= T_VAR 
            {
              CompilerAstParser.ModifierDocPair RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		PHPDocBlock var = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccPublic, var);

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(104/*variable_modifiers*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // method_modifiers ::= 
            {
              CompilerAstParser.ModifierDocPair RESULT = null;
		
	RESULT = null;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(82/*method_modifiers*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // method_modifiers ::= non_empty_member_modifiers 
            {
              CompilerAstParser.ModifierDocPair RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	int result = 0;
	PHPDocBlock docBlock = null;
	for (Iterator it = list.iterator(); it.hasNext() ; ) {
		CompilerAstParser.ModifierDocPair modifier = (CompilerAstParser.ModifierDocPair)it.next();
		if (modifier.doc != null) {
			docBlock = modifier.doc;
		}
		result |= modifier.modifier;
	}
	RESULT = parser.new ModifierDocPair(result, docBlock);

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(82/*method_modifiers*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // non_empty_member_modifiers ::= member_modifier 
            {
              List RESULT = null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		CompilerAstParser.ModifierDocPair modifier = (CompilerAstParser.ModifierDocPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	List list = new LinkedList();
	list.add(modifier);
	RESULT = list;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(86/*non_empty_member_modifiers*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // non_empty_member_modifiers ::= non_empty_member_modifiers member_modifier 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		CompilerAstParser.ModifierDocPair modifier = (CompilerAstParser.ModifierDocPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	list.add(modifier);
	RESULT = list;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(86/*non_empty_member_modifiers*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // member_modifier ::= T_PUBLIC 
            {
              CompilerAstParser.ModifierDocPair RESULT = null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		PHPDocBlock value = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccPublic, value);

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(87/*member_modifier*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // member_modifier ::= T_PROTECTED 
            {
              CompilerAstParser.ModifierDocPair RESULT = null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		PHPDocBlock value = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccProtected, value);

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(87/*member_modifier*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // member_modifier ::= T_PRIVATE 
            {
              CompilerAstParser.ModifierDocPair RESULT = null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		PHPDocBlock value = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccPrivate, value);

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(87/*member_modifier*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // member_modifier ::= T_STATIC 
            {
              CompilerAstParser.ModifierDocPair RESULT = null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		PHPDocBlock value = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccStatic, value);

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(87/*member_modifier*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // member_modifier ::= T_ABSTRACT 
            {
              CompilerAstParser.ModifierDocPair RESULT = null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		PHPDocBlock value = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccAbstract, value);

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(87/*member_modifier*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // member_modifier ::= T_FINAL 
            {
              CompilerAstParser.ModifierDocPair RESULT = null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		PHPDocBlock value = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccFinal, value);

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(87/*member_modifier*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // class_variable_declaration ::= class_variable_declaration T_COMMA T_VARIABLE 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	VariableReference varId = new VariableReference(varleft, varright, var);
	list.add(new ASTNode[] {varId, null});
	RESULT = list;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(80/*class_variable_declaration*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // class_variable_declaration ::= class_variable_declaration T_COMMA T_VARIABLE T_EQUAL static_scalar 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	VariableReference varId = new VariableReference(varleft, varright, var);
	list.add(new ASTNode[] {varId, expr});
	RESULT = list;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(80/*class_variable_declaration*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // class_variable_declaration ::= T_VARIABLE 
            {
              List RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	List list = new LinkedList();
	VariableReference varId = new VariableReference(varleft, varright, var);
	list.add(new ASTNode[] {varId, null});
	RESULT = list;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(80/*class_variable_declaration*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // class_variable_declaration ::= T_VARIABLE T_EQUAL static_scalar 
            {
              List RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	List list = new LinkedList();
	VariableReference varId = new VariableReference(varleft, varright, var);
	list.add(new ASTNode[] {varId, expr});
	RESULT = list;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(80/*class_variable_declaration*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // chaining_method_or_property ::= chaining_method_or_property variable_property 
            {
              ChainingMethodPropertyList RESULT = null;
		int chaining_method_or_propertyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int chaining_method_or_propertyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		ChainingMethodPropertyList chaining_method_or_property = (ChainingMethodPropertyList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int vpleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int vpright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression vp = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	chaining_method_or_property.addNode(vp);
	RESULT = chaining_method_or_property;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(134/*chaining_method_or_property*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // chaining_method_or_property ::= variable_property 
            {
              ChainingMethodPropertyList RESULT = null;
		int vpleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int vpright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression vp = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	ChainingMethodPropertyList chaining_method_or_property = new ChainingMethodPropertyList();
	chaining_method_or_property.addNode(vp);
	RESULT = chaining_method_or_property;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(134/*chaining_method_or_property*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // chaining_dereference ::= chaining_dereference T_OPEN_RECT dim_offset T_CLOSE_RECT 
            {
              PHPArrayDereferenceList RESULT = null;
		int arrayDereferenceListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int arrayDereferenceListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		PHPArrayDereferenceList arrayDereferenceList = (PHPArrayDereferenceList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	DereferenceNode var = new DereferenceNode(index,startleft, endright);
	arrayDereferenceList.addNode(var);
	RESULT = arrayDereferenceList;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(135/*chaining_dereference*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // chaining_dereference ::= T_OPEN_RECT dim_offset T_CLOSE_RECT 
            {
              PHPArrayDereferenceList RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	PHPArrayDereferenceList arrayDereferenceList = new PHPArrayDereferenceList();
	DereferenceNode var = new DereferenceNode(index,startleft, endright);
	arrayDereferenceList.addNode(var);
	RESULT = arrayDereferenceList;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(135/*chaining_dereference*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // chaining_instance_call ::= chaining_dereference chaining_method_or_property 
            {
              ChainingInstanceCall RESULT = null;
		int arrayDereferenceListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int arrayDereferenceListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		PHPArrayDereferenceList arrayDereferenceList = (PHPArrayDereferenceList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int chaining_method_or_propertyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int chaining_method_or_propertyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		ChainingMethodPropertyList chaining_method_or_property = (ChainingMethodPropertyList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	ChainingInstanceCall call = new ChainingInstanceCall(arrayDereferenceList,chaining_method_or_property); 
	RESULT = call;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(136/*chaining_instance_call*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // chaining_instance_call ::= chaining_dereference 
            {
              ChainingInstanceCall RESULT = null;
		int arrayDereferenceListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int arrayDereferenceListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		PHPArrayDereferenceList arrayDereferenceList = (PHPArrayDereferenceList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	ChainingInstanceCall call = new ChainingInstanceCall(arrayDereferenceList,null); 
	RESULT = call;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(136/*chaining_instance_call*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // chaining_instance_call ::= chaining_method_or_property 
            {
              ChainingInstanceCall RESULT = null;
		int chaining_method_or_propertyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int chaining_method_or_propertyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		ChainingMethodPropertyList chaining_method_or_property = (ChainingMethodPropertyList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	ChainingInstanceCall call = new ChainingInstanceCall(null,chaining_method_or_property); 
	RESULT = call;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(136/*chaining_instance_call*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // instance_call ::= 
            {
              ChainingInstanceCall RESULT = null;
		
	RESULT = null;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(137/*instance_call*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // instance_call ::= chaining_instance_call 
            {
              ChainingInstanceCall RESULT = null;
		int callleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int callright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		ChainingInstanceCall call = (ChainingInstanceCall)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = call;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(137/*instance_call*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // non_empty_for_expr ::= non_empty_for_expr T_COMMA expr 
            {
              List RESULT = null;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List exprList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	exprList.add(expr);
	RESULT = exprList;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(45/*non_empty_for_expr*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // non_empty_for_expr ::= expr 
            {
              List RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	List exprList = new LinkedList();
	exprList.add(expr);
	RESULT = exprList;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(45/*non_empty_for_expr*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // constant_declaration ::= constant_declaration T_COMMA T_STRING T_EQUAL static_scalar 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int constNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int constNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String constName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	ConstantReference constId = new ConstantReference(constNameleft, constNameright, constName);
	list.add(new ASTNode[] {constId, expr});
	RESULT = list;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(81/*constant_declaration*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // constant_declaration ::= T_CONST T_STRING T_EQUAL static_scalar 
            {
              List RESULT = null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		PHPDocBlock value = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int constNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int constNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String constName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	List list = new LinkedList();
	ConstantReference constId = new ConstantReference(constNameleft, constNameright, constName);
	list.add(new ASTNode[] {constId, expr, value});
	RESULT = list;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(81/*constant_declaration*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // echo_expr_list ::= echo_expr_list T_COMMA expr 
            {
              List RESULT = null;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List exprList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	exprList.add(expr);
	RESULT = exprList;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(43/*echo_expr_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // echo_expr_list ::= expr 
            {
              List RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	List exprList = new LinkedList();
	exprList.add(expr);
	RESULT = exprList;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(43/*echo_expr_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // for_expr ::= 
            {
              List RESULT = null;
		
	RESULT = new LinkedList();

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(44/*for_expr*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // for_expr ::= non_empty_for_expr 
            {
              List RESULT = null;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		List exprList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = exprList;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(44/*for_expr*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // new_expr ::= T_NEW class_name_reference ctor_arguments 
            {
              ClassInstanceCreation RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int ctorleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int ctorright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		PHPCallArgumentsList ctor = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	if (ctor.sourceStart() == 0) {
		ctor.setStart(classNameright);
		ctor.setEnd(classNameright);
	}
	ClassInstanceCreation classInstanceCreation = new ClassInstanceCreation(startleft, ctorright, className, ctor);
	RESULT = classInstanceCreation;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(138/*new_expr*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // expr_without_variable ::= T_LIST T_OPEN_PARENTHESE assignment_list T_CLOSE_PARENTHESE T_EQUAL expr 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int varListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		List varList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int closeleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int closeright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object close = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	ListVariable vars = new ListVariable(startleft, closeright, varList);
	Assignment list = new Assignment(startleft, exprright, vars, Assignment.OP_EQUAL, expr);
	RESULT = list; 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // expr_without_variable ::= variable T_EQUAL expr 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new Assignment(varleft, exprright, var, Assignment.OP_EQUAL, expr); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // expr_without_variable ::= variable T_EQUAL T_REFERENCE variable 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int reftokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int reftokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object reftoken = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int refvarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int refvarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression refvar = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new Assignment(varleft, refvarright, var, Assignment.OP_REF_EQUAL, refvar); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // expr_without_variable ::= variable T_EQUAL T_REFERENCE T_NEW class_name_reference ctor_arguments 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int reftokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int reftokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object reftoken = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int ctorleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int ctorright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		PHPCallArgumentsList ctor = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	if (ctor.sourceStart() == 0) {
		ctor.setStart(classNameright);
		ctor.setEnd(classNameright);
	}
	ClassInstanceCreation classInstanceCreation = new ClassInstanceCreation(startleft, ctorright, className, ctor);
	Assignment assignment = new Assignment(varleft, ctorright, var, Assignment.OP_REF_EQUAL, classInstanceCreation);
	RESULT = assignment;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // expr_without_variable ::= T_CLONE expr 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	CloneExpression clone = new CloneExpression(startleft, exprright, expr);
	RESULT = clone;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // expr_without_variable ::= variable T_PLUS_EQUAL expr 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new Assignment(varleft, exprright, var , Assignment.OP_PLUS_EQUAL, expr); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // expr_without_variable ::= variable T_MINUS_EQUAL expr 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new Assignment(varleft, exprright, var , Assignment.OP_MINUS_EQUAL, expr); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // expr_without_variable ::= variable T_MUL_EQUAL expr 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new Assignment(varleft, exprright, var , Assignment.OP_MUL_EQUAL, expr); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // expr_without_variable ::= variable T_DIV_EQUAL expr 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 	
	RESULT = new Assignment(varleft, exprright, var , Assignment.OP_DIV_EQUAL, expr); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // expr_without_variable ::= variable T_CONCAT_EQUAL expr 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new Assignment(varleft, exprright, var , Assignment.OP_CONCAT_EQUAL, expr); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // expr_without_variable ::= variable T_MOD_EQUAL expr 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new Assignment(varleft, exprright, var , Assignment.OP_MOD_EQUAL, expr); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // expr_without_variable ::= variable T_AND_EQUAL expr 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new Assignment(varleft, exprright, var , Assignment.OP_AND_EQUAL, expr); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // expr_without_variable ::= variable T_OR_EQUAL expr 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new Assignment(varleft, exprright, var , Assignment.OP_OR_EQUAL, expr); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // expr_without_variable ::= variable T_XOR_EQUAL expr 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new Assignment(varleft, exprright, var , Assignment.OP_XOR_EQUAL, expr); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // expr_without_variable ::= variable T_SL_EQUAL expr 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new Assignment(varleft, exprright, var , Assignment.OP_SL_EQUAL, expr); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // expr_without_variable ::= variable T_SR_EQUAL expr 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new Assignment(varleft, exprright, var , Assignment.OP_SR_EQUAL, expr); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // expr_without_variable ::= rw_variable T_INC 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new PostfixExpression(varleft, tokenright, var , PostfixExpression.OP_INC); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // expr_without_variable ::= T_INC rw_variable 
            {
              Expression RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new PrefixExpression(tokenleft, varright, var , PrefixExpression.OP_INC); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // expr_without_variable ::= rw_variable T_DEC 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new PostfixExpression(varleft, tokenright, var , PostfixExpression.OP_DEC); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // expr_without_variable ::= T_DEC rw_variable 
            {
              Expression RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new PrefixExpression(tokenleft, varright, var , PrefixExpression.OP_DEC); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // expr_without_variable ::= expr T_BOOLEAN_OR expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_BOOL_OR, expr2); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // expr_without_variable ::= expr T_BOOLEAN_AND expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_BOOL_AND, expr2); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // expr_without_variable ::= expr T_LOGICAL_OR expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_STRING_OR, expr2); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // expr_without_variable ::= expr T_LOGICAL_AND expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_STRING_AND, expr2); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // expr_without_variable ::= expr T_LOGICAL_XOR expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_STRING_XOR, expr2);

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // expr_without_variable ::= expr T_OR expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_OR, expr2); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // expr_without_variable ::= expr T_REFERENCE expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_AND, expr2); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // expr_without_variable ::= expr T_KOVA expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_XOR, expr2); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // expr_without_variable ::= expr T_NEKUDA expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_CONCAT, expr2); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // expr_without_variable ::= expr T_PLUS expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_PLUS, expr2); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // expr_without_variable ::= expr T_MINUS expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_MINUS, expr2); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // expr_without_variable ::= expr T_TIMES expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_MUL, expr2); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // expr_without_variable ::= expr T_DIV expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_DIV, expr2); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // expr_without_variable ::= expr T_PRECENT expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_MOD, expr2); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // expr_without_variable ::= expr T_SL expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_SL, expr2); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // expr_without_variable ::= expr T_SR expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_SR, expr2); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // expr_without_variable ::= T_PLUS expr 
            {
              Expression RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new UnaryOperation(tokenleft, exprright, expr , UnaryOperation.OP_PLUS); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // expr_without_variable ::= T_MINUS expr 
            {
              Expression RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new UnaryOperation(tokenleft, exprright, expr , UnaryOperation.OP_MINUS); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // expr_without_variable ::= T_NOT expr 
            {
              Expression RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new UnaryOperation(tokenleft, exprright, expr , UnaryOperation.OP_NOT); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // expr_without_variable ::= T_TILDA expr 
            {
              Expression RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new UnaryOperation(tokenleft, exprright, expr , UnaryOperation.OP_TILDA); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // expr_without_variable ::= expr T_IS_IDENTICAL expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_IS_IDENTICAL, expr2); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // expr_without_variable ::= expr T_IS_NOT_IDENTICAL expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_IS_NOT_IDENTICAL, expr2); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // expr_without_variable ::= expr T_IS_EQUAL expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_IS_EQUAL, expr2); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // expr_without_variable ::= expr T_IS_NOT_EQUAL expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_IS_NOT_EQUAL, expr2); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // expr_without_variable ::= expr T_RGREATER expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_RGREATER, expr2); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // expr_without_variable ::= expr T_IS_SMALLER_OR_EQUAL expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_IS_SMALLER_OR_EQUAL, expr2); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // expr_without_variable ::= expr T_LGREATER expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_LGREATER, expr2); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // expr_without_variable ::= expr T_IS_GREATER_OR_EQUAL expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_IS_GREATER_OR_EQUAL, expr2); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // expr_without_variable ::= expr T_INSTANCEOF class_name_reference 
            {
              Expression RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new InstanceOfExpression(exprleft, classNameright, expr , className); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // expr_without_variable ::= T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = expr; 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // expr_without_variable ::= new_expr 
            {
              Expression RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		ClassInstanceCreation expr = (ClassInstanceCreation)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = expr; 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // expr_without_variable ::= T_OPEN_PARENTHESE new_expr T_CLOSE_PARENTHESE instance_call 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		ClassInstanceCreation expr = (ClassInstanceCreation)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int callleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int callright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		ChainingInstanceCall call = (ChainingInstanceCall)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	expr.setChainingInstanceCall(call);
	
	if (call.getChainingMethodPropertyList() != null
		&& !call.getChainingMethodPropertyList()
			.getChilds().isEmpty()) {
		// then get the aggregated list of properties (->...->...->...)
		List list = call.getChainingMethodPropertyList()
			.getChilds();
		
		// now create the dispatch(es) nodes 
		Expression dispatcher = expr;
	
		Iterator listIt = list.iterator();
		while (listIt.hasNext()) {
			Expression property = (Expression)listIt.next();
			dispatcher = parser.createDispatch(dispatcher, property);
		}	
		RESULT = dispatcher;
	}else{
		RESULT = expr; 
	}

	
	

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // expr_without_variable ::= expr T_QUESTION_MARK expr T_NEKUDOTAIM expr 
            {
              Expression RESULT = null;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int ifTrueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int ifTrueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression ifTrue = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int ifFalseleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int ifFalseright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression ifFalse = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new ConditionalExpression(conditionleft, ifFalseright, condition , ifTrue, ifFalse); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // expr_without_variable ::= expr T_QUESTION_MARK T_NEKUDOTAIM expr 
            {
              Expression RESULT = null;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int ifFalseleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int ifFalseright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression ifFalse = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new ConditionalExpression(conditionleft, ifFalseright, condition , null, ifFalse); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // expr_without_variable ::= internal_functions_in_yacc 
            {
              Expression RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = expr;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // expr_without_variable ::= T_INT_CAST expr 
            {
              Expression RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new CastExpression(tokenleft, exprright, expr , CastExpression.TYPE_INT); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // expr_without_variable ::= T_DOUBLE_CAST expr 
            {
              Expression RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new CastExpression(tokenleft, exprright, expr , CastExpression.TYPE_REAL); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // expr_without_variable ::= T_STRING_CAST expr 
            {
              Expression RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new CastExpression(tokenleft, exprright, expr , CastExpression.TYPE_STRING); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$CompilerAstParser$do_action4(
    int                        CUP$CompilerAstParser$act_num,
    java_cup.runtime.lr_parser CUP$CompilerAstParser$parser,
    java.util.Stack            CUP$CompilerAstParser$stack,
    int                        CUP$CompilerAstParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CompilerAstParser$result;

      /* select the action based on the action number */
      switch (CUP$CompilerAstParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // expr_without_variable ::= T_ARRAY_CAST expr 
            {
              Expression RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new CastExpression(tokenleft, exprright, expr , CastExpression.TYPE_ARRAY); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // expr_without_variable ::= T_OBJECT_CAST expr 
            {
              Expression RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new CastExpression(tokenleft, exprright, expr , CastExpression.TYPE_OBJECT); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // expr_without_variable ::= T_BOOL_CAST expr 
            {
              Expression RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new CastExpression(tokenleft, exprright, expr , CastExpression.TYPE_BOOL); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // expr_without_variable ::= T_UNSET_CAST expr 
            {
              Expression RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = new CastExpression(tokenleft, exprright, expr , CastExpression.TYPE_UNSET); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // expr_without_variable ::= T_EXIT exit_expr 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	PHPCallArgumentsList list = new PHPCallArgumentsList();
	if (expr != null) {
		list.addNode(expr);
		list.setStart(expr.sourceStart());
		list.setEnd(expr.sourceEnd());
	} else {
		list.setStart(startright);
		list.setEnd(startright);
	}
	SimpleReference functionName = new SimpleReference(startleft, startright, start);
	PHPCallExpression result = new PHPCallExpression(startleft, exprright, null, functionName, list);
	RESULT = result;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // expr_without_variable ::= T_AT expr 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	IgnoreError ignoreError = new IgnoreError(startleft, exprright, expr);
	RESULT = ignoreError;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // expr_without_variable ::= scalar 
            {
              Expression RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression scalar = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = scalar; 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // expr_without_variable ::= T_ARRAY T_OPEN_PARENTHESE array_pair_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	Expression expr = new ArrayCreation(startleft, endright, list);
	RESULT = expr;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // expr_without_variable ::= T_OPEN_RECT array_pair_list T_CLOSE_RECT 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	Expression expr = new ArrayCreation(startleft, endright, list);
	RESULT = expr;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // expr_without_variable ::= T_BACKQUATE backticks_expr T_BACKQUATE 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	BackTickExpression backTickExpression = new BackTickExpression(startleft, endright, list);
	RESULT = backTickExpression;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // expr_without_variable ::= T_PRINT expr 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	PHPCallArgumentsList list = new PHPCallArgumentsList();
	if (expr != null) {
		list.addNode(expr);
		list.setStart(expr.sourceStart());
		list.setEnd(expr.sourceEnd());
	} else {
		list.setStart(startright);
		list.setEnd(startright);
	}
	SimpleReference name = new SimpleReference(startleft, startright, "print");
	PHPCallExpression result = new PHPCallExpression(startleft, exprright, null, name, list);
	RESULT = result;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // expr_without_variable ::= T_FUNCTION is_reference T_OPEN_PARENTHESE parameter_list T_CLOSE_PARENTHESE lexical_vars T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              Expression RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).right;
		PHPDocBlock s = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		List paramList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int varsListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int varsListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		List varsList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int blockStartleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int blockStartright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object blockStart = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int blockEndleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int blockEndright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object blockEnd = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = new LambdaFunctionDeclaration(sleft, blockEndright, paramList, varsList, 
		new Block(blockStartleft, blockEndright, list), isReference.booleanValue());

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // expr_without_variable ::= T_STATIC T_FUNCTION is_reference T_OPEN_PARENTHESE parameter_list T_CLOSE_PARENTHESE lexical_vars T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              Expression RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).right;
		PHPDocBlock s = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		List paramList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int varsListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int varsListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		List varsList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int blockStartleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int blockStartright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object blockStart = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int blockEndleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int blockEndright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object blockEnd = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = new LambdaFunctionDeclaration(sleft, blockEndright, paramList, varsList, 
		new Block(blockStartleft, blockEndright, list), isReference.booleanValue(),true);

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(46/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-9)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // lexical_vars ::= 
            {
              List RESULT = null;
		
	RESULT = null;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(31/*lexical_vars*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // lexical_vars ::= T_USE T_OPEN_PARENTHESE lexical_var_list T_CLOSE_PARENTHESE 
            {
              List RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = list;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(31/*lexical_vars*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // lexical_var_list ::= lexical_var_list T_COMMA T_VARIABLE 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	VariableReference v = new VariableReference(varleft, varright, var);
	list.add(v);
	RESULT = list;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(32/*lexical_var_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // lexical_var_list ::= lexical_var_list T_COMMA T_REFERENCE T_VARIABLE 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int refleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object ref = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	list.add(new ReferenceExpression (refleft, varright, new VariableReference(varleft, varright, var)));
	RESULT = list;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(32/*lexical_var_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // lexical_var_list ::= T_VARIABLE 
            {
              List RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	List list = new LinkedList();
	list.add(new VariableReference(varleft, varright, var));
	RESULT = list;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(32/*lexical_var_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // lexical_var_list ::= T_REFERENCE T_VARIABLE 
            {
              List RESULT = null;
		int refleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object ref = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	List list = new LinkedList();
	list.add(new ReferenceExpression (refleft, varright, new VariableReference(varleft, varright, var)));
	RESULT = list;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(32/*lexical_var_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // function_call ::= namespace_name T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT = null;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		FullyQualifiedReference functionName = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		PHPCallArgumentsList parameters = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	parameters.setStart(startright);
	parameters.setEnd(endleft);
	RESULT = new PHPCallExpression(functionNameleft, endright, null, functionName, parameters); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(47/*function_call*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // function_call ::= T_NAMESPACE T_NS_SEPARATOR namespace_name T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT = null;
		int namespaceleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int namespaceright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		Object namespace = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		FullyQualifiedReference functionName = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		PHPCallArgumentsList parameters = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	parameters.setStart(startright);
	parameters.setEnd(endleft);
	if (functionName.getNamespace() != null) {
		functionName.getNamespace().setLocal(true);
	}
	RESULT = new PHPCallExpression(namespaceleft, endright, null, functionName, parameters); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(47/*function_call*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // function_call ::= T_NS_SEPARATOR namespace_name T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		FullyQualifiedReference functionName = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		PHPCallArgumentsList parameters = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	parameters.setStart(startright);
	parameters.setEnd(endleft);
	NamespaceReference namespace = functionName.getNamespace();
	if (namespace == null) {
		namespace = new NamespaceReference(sleft, sright, "");
		functionName.setNamespace(namespace);
	}
		namespace.setGlobal(true);
		namespace.setStart(namespace.sourceStart() - 1);
	RESULT = new PHPCallExpression(sleft, endright, null, functionName, parameters); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(47/*function_call*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // function_call ::= class_name T_PAAMAYIM_NEKUDOTAYIM variable_name T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT = null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Expression functionName = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		PHPCallArgumentsList parameters = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	parameters.setStart(startright);
	parameters.setEnd(endleft);
	SimpleReference name;
	if(functionName instanceof SimpleReference){
		name = (SimpleReference)functionName;
	}else{
		name = new SimpleReference(functionNameleft, functionNameleft, "");
	}
	StaticMethodInvocation staticMethodInvocation = new StaticMethodInvocation(classNameleft, endright, className, functionName,name, parameters); 
	RESULT = staticMethodInvocation;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(47/*function_call*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // function_call ::= class_name T_PAAMAYIM_NEKUDOTAYIM variable_without_objects T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT = null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int reflectionNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int reflectionNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Expression reflectionName = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		PHPCallArgumentsList parameters = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	parameters.setStart(startright);
	parameters.setEnd(endleft); 
	ReflectionStaticMethodInvocation functionInvocation = new ReflectionStaticMethodInvocation(classNameleft, endright, className, reflectionName, parameters); 
	RESULT = functionInvocation;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(47/*function_call*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // function_call ::= variable_class_name T_PAAMAYIM_NEKUDOTAYIM variable_name T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT = null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Expression functionName = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		PHPCallArgumentsList parameters = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	parameters.setStart(startright);
	parameters.setEnd(endleft);
	SimpleReference name;
	if(functionName instanceof SimpleReference){
		name = (SimpleReference)functionName;
	}else{
		name = new SimpleReference(functionNameleft, functionNameleft, "");
	}
	StaticMethodInvocation staticMethodInvocation = new StaticMethodInvocation(classNameleft, endright, className, functionName,name, parameters); 
	RESULT = staticMethodInvocation; 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(47/*function_call*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // function_call ::= variable_class_name T_PAAMAYIM_NEKUDOTAYIM variable_without_objects T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT = null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int reflectionNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int reflectionNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Expression reflectionName = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		PHPCallArgumentsList parameters = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	parameters.setStart(startright);
	parameters.setEnd(endleft); 
	ReflectionStaticMethodInvocation functionInvocation = new ReflectionStaticMethodInvocation(classNameleft, endright, className, reflectionName, parameters); 
	RESULT = functionInvocation; 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(47/*function_call*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // function_call ::= variable_without_objects T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT = null;
		int reflectionNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int reflectionNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Expression reflectionName = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		PHPCallArgumentsList parameters = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	parameters.setStart(startright);
	parameters.setEnd(endleft);
	RESULT = new ReflectionCallExpression(reflectionNameleft, endright, null, reflectionName, parameters); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(47/*function_call*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // class_name ::= T_STATIC 
            {
              Expression RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		PHPDocBlock s = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = new FullyQualifiedReference(sleft, sright, "static", null);

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(78/*class_name*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // class_name ::= namespace_name 
            {
              Expression RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		FullyQualifiedReference name = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = name;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(78/*class_name*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // class_name ::= T_NAMESPACE T_NS_SEPARATOR namespace_name 
            {
              Expression RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		FullyQualifiedReference name = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	if (name.getNamespace() != null) {
		name.getNamespace().setLocal(true);
	}
	RESULT = name;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(78/*class_name*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // class_name ::= T_NS_SEPARATOR namespace_name 
            {
              Expression RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		FullyQualifiedReference name = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	NamespaceReference namespace = name.getNamespace();
	if (namespace == null) {
		namespace = new NamespaceReference(sleft, sright, "");
		name.setNamespace(namespace);
	}
		namespace.setGlobal(true);
		namespace.setStart(namespace.sourceStart() - 1);
	RESULT = name;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(78/*class_name*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // fully_qualified_class_name ::= namespace_name 
            {
              TypeReference RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		FullyQualifiedReference name = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = name;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(79/*fully_qualified_class_name*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // fully_qualified_class_name ::= T_NAMESPACE T_NS_SEPARATOR namespace_name 
            {
              TypeReference RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		FullyQualifiedReference name = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	if (name.getNamespace() != null) {
		name.getNamespace().setLocal(true);
	}
	RESULT = name;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(79/*fully_qualified_class_name*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // fully_qualified_class_name ::= T_NS_SEPARATOR namespace_name 
            {
              TypeReference RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		FullyQualifiedReference name = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	NamespaceReference namespace = name.getNamespace();
	if (namespace == null) {
		namespace = new NamespaceReference(sleft, sright, "");
		name.setNamespace(namespace);
	}
		namespace.setGlobal(true);
		namespace.setStart(namespace.sourceStart() - 1);
	RESULT = name;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(79/*fully_qualified_class_name*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // class_name_reference ::= class_name 
            {
              Expression RESULT = null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = className;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(111/*class_name_reference*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // class_name_reference ::= dynamic_class_name_reference 
            {
              Expression RESULT = null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = className;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(111/*class_name_reference*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // dynamic_class_name_reference ::= base_variable T_OBJECT_OPERATOR object_property dynamic_class_name_variable_properties 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int firstVarPropertyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int firstVarPropertyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression firstVarProperty = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int propertyListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int propertyListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		List propertyList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	// then get the aggregated list of properties (->...->...->...)
	LinkedList list = (LinkedList) propertyList;
	list.addFirst(firstVarProperty);
	
	// now create the dispatch(es) nodes 
	Expression dispatcher = var;

	Iterator listIt = list.iterator();
	while (listIt.hasNext()) {
		Expression property = (Expression)listIt.next();
		dispatcher = parser.createDispatch(dispatcher, property);
	}	
	
	RESULT = dispatcher;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(113/*dynamic_class_name_reference*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // dynamic_class_name_reference ::= base_variable 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	 RESULT = var;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(113/*dynamic_class_name_reference*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // dynamic_class_name_variable_properties ::= dynamic_class_name_variable_properties dynamic_class_name_variable_property 
            {
              List RESULT = null;
		int variablesleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int variablesright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List variables = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	variables.add(var);
	RESULT = variables;	

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(115/*dynamic_class_name_variable_properties*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // dynamic_class_name_variable_properties ::= 
            {
              List RESULT = null;
		
	RESULT = new LinkedList();

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(115/*dynamic_class_name_variable_properties*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // dynamic_class_name_variable_property ::= T_OBJECT_OPERATOR object_property 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = var;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(116/*dynamic_class_name_variable_property*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // exit_expr ::= 
            {
              Expression RESULT = null;
		
	RESULT = null;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(48/*exit_expr*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // exit_expr ::= T_OPEN_PARENTHESE T_CLOSE_PARENTHESE 
            {
              Expression RESULT = null;
		
	RESULT = null;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(48/*exit_expr*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // exit_expr ::= T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE 
            {
              Expression RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		
	RESULT = expr;	

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(48/*exit_expr*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // backticks_expr ::= 
            {
              List RESULT = null;
		
	RESULT = new LinkedList();

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(70/*backticks_expr*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // backticks_expr ::= T_ENCAPSED_AND_WHITESPACE 
            {
              List RESULT = null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	List list = new LinkedList();
	Scalar scalar = new Scalar(stringleft, stringright, string, string == null ? Scalar.TYPE_UNKNOWN : Scalar.TYPE_STRING);
	list.add(scalar);
	RESULT = list;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(70/*backticks_expr*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // backticks_expr ::= encaps_list 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = list;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(70/*backticks_expr*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // ctor_arguments ::= 
            {
              PHPCallArgumentsList RESULT = null;
		
	RESULT = new PHPCallArgumentsList();

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(49/*ctor_arguments*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 348: // ctor_arguments ::= T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              PHPCallArgumentsList RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		PHPCallArgumentsList paramsList = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	paramsList.setStart(startright);
	paramsList.setEnd(endleft);
	RESULT = paramsList;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(49/*ctor_arguments*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 349: // common_scalar ::= T_LNUMBER 
            {
              Expression RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, scalar, Scalar.TYPE_INT);
	RESULT = s;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(50/*common_scalar*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 350: // common_scalar ::= T_DNUMBER 
            {
              Expression RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	Scalar s = new Scalar(scalarleft, scalarright, scalar, Scalar.TYPE_REAL);
	RESULT = s;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(50/*common_scalar*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 351: // common_scalar ::= T_BNUMBER 
            {
              Expression RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, scalar, Scalar.TYPE_BIN);
	RESULT = s;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(50/*common_scalar*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 352: // common_scalar ::= T_CONSTANT_ENCAPSED_STRING 
            {
              Expression RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	Scalar s = new Scalar(scalarleft, scalarright, scalar, Scalar.TYPE_STRING);
	RESULT = s;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(50/*common_scalar*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 353: // common_scalar ::= T_LINE 
            {
              Expression RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, "__LINE__", Scalar.TYPE_SYSTEM);
	RESULT = s;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(50/*common_scalar*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 354: // common_scalar ::= T_FILE 
            {
              Expression RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, "__FILE__", Scalar.TYPE_SYSTEM);
	RESULT = s;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(50/*common_scalar*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 355: // common_scalar ::= T_DIR 
            {
              Expression RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, "__DIR__", Scalar.TYPE_SYSTEM);
	RESULT = s;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(50/*common_scalar*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 356: // common_scalar ::= T_CLASS_C 
            {
              Expression RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, "__CLASS__", Scalar.TYPE_SYSTEM);
	RESULT = s;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(50/*common_scalar*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 357: // common_scalar ::= T_TRAIT_C 
            {
              Expression RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, "__TRAIT__", Scalar.TYPE_SYSTEM);
	RESULT = s;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(50/*common_scalar*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 358: // common_scalar ::= T_METHOD_C 
            {
              Expression RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, "__METHOD__", Scalar.TYPE_SYSTEM);
	RESULT = s;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(50/*common_scalar*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 359: // common_scalar ::= T_FUNC_C 
            {
              Expression RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, "__FUNCTION__", Scalar.TYPE_SYSTEM);
	RESULT = s;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(50/*common_scalar*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 360: // common_scalar ::= T_NS_C 
            {
              Expression RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = new Scalar(scalarleft, scalarright, "__NAMESPACE__", Scalar.TYPE_SYSTEM);

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(50/*common_scalar*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 361: // common_scalar ::= T_START_HEREDOC T_ENCAPSED_AND_WHITESPACE T_END_HEREDOC 
            {
              Expression RESULT = null;
		int labelleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String label = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	List list = new LinkedList();
	list.add(new Scalar(stringleft, stringright, string, string == null ? Scalar.TYPE_UNKNOWN : Scalar.TYPE_STRING));
	RESULT = new Quote(labelleft, eright, list, label.charAt(0) == '\'' ? Quote.QT_NOWDOC : Quote.QT_HEREDOC);

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(50/*common_scalar*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 362: // common_scalar ::= T_START_HEREDOC T_END_HEREDOC 
            {
              Expression RESULT = null;
		int labelleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		String label = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = new Quote(labelleft, eright, new LinkedList(), label.charAt(0) == '\'' ? Quote.QT_NOWDOC : Quote.QT_HEREDOC);

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(50/*common_scalar*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 363: // static_scalar ::= common_scalar 
            {
              Expression RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression scalar = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = scalar;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(51/*static_scalar*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 364: // static_scalar ::= namespace_name 
            {
              Expression RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		FullyQualifiedReference name = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	if (name.getNamespace() == null) {
		RESULT = new Scalar(nameleft, nameright, name.getName(), Scalar.TYPE_STRING);
	} else {
		RESULT = name;
	}

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(51/*static_scalar*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 365: // static_scalar ::= T_NAMESPACE T_NS_SEPARATOR namespace_name 
            {
              Expression RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		FullyQualifiedReference name = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	if (name.getNamespace() != null) {
		name.getNamespace().setLocal(true);
	}
	RESULT = name;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(51/*static_scalar*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 366: // static_scalar ::= T_NS_SEPARATOR namespace_name 
            {
              Expression RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		FullyQualifiedReference name = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	NamespaceReference namespace = name.getNamespace();
	if (namespace == null) {
		namespace = new NamespaceReference(sleft, sright, "");
		name.setNamespace(namespace);
	}
		namespace.setGlobal(true);
		namespace.setStart(namespace.sourceStart() - 1);
	RESULT = name;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(51/*static_scalar*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 367: // static_scalar ::= T_PLUS static_scalar 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	UnaryOperation op = new UnaryOperation(startleft, exprright, expr, UnaryOperation.OP_PLUS);
	RESULT = op;	

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(51/*static_scalar*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 368: // static_scalar ::= T_MINUS static_scalar 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	UnaryOperation op = new UnaryOperation(startleft, exprright, expr, UnaryOperation.OP_MINUS);
	RESULT = op;	

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(51/*static_scalar*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 369: // static_scalar ::= T_ARRAY T_OPEN_PARENTHESE static_array_pair_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	ArrayCreation array = new ArrayCreation(startleft, endright, list);
	RESULT = array;	

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(51/*static_scalar*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 370: // static_scalar ::= T_OPEN_RECT static_array_pair_list T_CLOSE_RECT 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	ArrayCreation array = new ArrayCreation(startleft, endright, list);
	RESULT = array;	

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(51/*static_scalar*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 371: // static_scalar ::= static_class_constant 
            {
              Expression RESULT = null;
		int classConstantleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int classConstantright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		StaticConstantAccess classConstant = (StaticConstantAccess)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = classConstant;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(51/*static_scalar*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 372: // static_class_constant ::= class_name T_PAAMAYIM_NEKUDOTAYIM T_STRING 
            {
              StaticConstantAccess RESULT = null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	ConstantReference vname = new ConstantReference(varNameleft, varNameright, varName);
	StaticConstantAccess constant = new StaticConstantAccess(classNameleft, varNameright, className, vname); 
	RESULT = constant;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(117/*static_class_constant*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 373: // scalar ::= T_STRING_VARNAME 
            {
              Expression RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	// TODO: check if this is a scalar
	Scalar s = new Scalar(scalarleft, scalarright, scalar, Scalar.TYPE_STRING);
	RESULT = s;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(52/*scalar*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 374: // scalar ::= class_constant 
            {
              Expression RESULT = null;
		int classConstantleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int classConstantright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		StaticConstantAccess classConstant = (StaticConstantAccess)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = classConstant;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(52/*scalar*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 375: // scalar ::= namespace_name 
            {
              Expression RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		FullyQualifiedReference name = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	if (name.getNamespace() == null) {
		RESULT = new Scalar(nameleft, nameright, name.getName(), Scalar.TYPE_STRING);
	} else {
		RESULT = name;
	}

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(52/*scalar*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 376: // scalar ::= T_NAMESPACE T_NS_SEPARATOR namespace_name 
            {
              Expression RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		FullyQualifiedReference name = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	if (name.getNamespace() != null) {
		name.getNamespace().setLocal(true);
	}
	RESULT = name;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(52/*scalar*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 377: // scalar ::= T_NS_SEPARATOR namespace_name 
            {
              Expression RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		FullyQualifiedReference name = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	NamespaceReference namespace = name.getNamespace();
	if (namespace == null) {
		namespace = new NamespaceReference(sleft, sright, "");
		name.setNamespace(namespace);
	}
		namespace.setGlobal(true);
		namespace.setStart(namespace.sourceStart() - 1);
	RESULT = name;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(52/*scalar*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 378: // scalar ::= common_scalar 
            {
              Expression RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression scalar = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = scalar;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(52/*scalar*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 379: // scalar ::= T_QUATE encaps_list T_QUATE 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	Quote quote = new Quote(startleft, endright, list, Quote.QT_QUOTE);
	RESULT = quote;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(52/*scalar*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 380: // scalar ::= T_START_HEREDOC encaps_list T_END_HEREDOC 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	Quote hereDoc = new Quote(startleft, endright, list, Quote.QT_HEREDOC);
	RESULT = hereDoc;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(52/*scalar*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 381: // static_array_pair_list ::= 
            {
              List RESULT = null;
		
	List list = new LinkedList();
	RESULT = list;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(53/*static_array_pair_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 382: // static_array_pair_list ::= non_empty_static_array_pair_list possible_comma 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		
	RESULT = list;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(53/*static_array_pair_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 383: // possible_comma ::= 
            {
              Object RESULT = null;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(54/*possible_comma*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 384: // possible_comma ::= T_COMMA 
            {
              Object RESULT = null;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(54/*possible_comma*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 385: // non_empty_static_array_pair_list ::= non_empty_static_array_pair_list T_COMMA static_scalar T_DOUBLE_ARROW static_scalar 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int keyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	ArrayElement element = new ArrayElement(keyleft, valueright, key, value);
	list.add(element);
	RESULT = list;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(55/*non_empty_static_array_pair_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 386: // non_empty_static_array_pair_list ::= non_empty_static_array_pair_list T_COMMA static_scalar 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	ArrayElement element = new ArrayElement(valueleft, valueright, value);
	list.add(element);
	RESULT = list;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(55/*non_empty_static_array_pair_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 387: // non_empty_static_array_pair_list ::= static_scalar T_DOUBLE_ARROW static_scalar 
            {
              List RESULT = null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	List list = new LinkedList();
	ArrayElement element = new ArrayElement(keyleft, valueright, key, value);
	list.add(element);
	RESULT = list;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(55/*non_empty_static_array_pair_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 388: // non_empty_static_array_pair_list ::= static_scalar 
            {
              List RESULT = null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	List list = new LinkedList();
	ArrayElement element = new ArrayElement(valueleft, valueright, value);
	list.add(element);
	RESULT = list;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(55/*non_empty_static_array_pair_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 389: // expr ::= r_variable 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 RESULT = var; 
              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(56/*expr*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 390: // expr ::= expr_without_variable 
            {
              Expression RESULT = null;
		int ewvleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int ewvright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression ewv = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 RESULT = ewv; 
              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(56/*expr*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 391: // r_variable ::= variable 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 RESULT = var; 
              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(103/*r_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 392: // w_variable ::= variable 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 RESULT = var; 
              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(77/*w_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 393: // rw_variable ::= variable 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 RESULT = var; 
              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(105/*rw_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 394: // variable ::= base_variable_with_function_calls T_OBJECT_OPERATOR object_property method_or_not variable_properties 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int memberPropertyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int memberPropertyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression memberProperty = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		PHPCallArgumentsList paramsList = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int propertyListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int propertyListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		List propertyList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	// get the last property 
	Expression firstVarProperty = null;
	if (paramsList == null) {
		firstVarProperty = memberProperty;
	} else {
		if (memberProperty.getClass().equals(SimpleReference.class)) {
			firstVarProperty = new PHPCallExpression(memberPropertyleft, paramsListright, null, (SimpleReference)memberProperty, paramsList);
		} else {
			firstVarProperty = new ReflectionCallExpression(memberPropertyleft, paramsListright, null, memberProperty, paramsList);
		}
	}

	// then get the aggregated list of properties (->...->...->...)
	LinkedList list = (LinkedList) propertyList;
	list.addFirst(firstVarProperty);
	
	// now create the dispatch(es) nodes 
	Expression dispatcher = var;
	
	Iterator listIt = list.iterator();
	while (listIt.hasNext()) {
		Expression property = (Expression)listIt.next();
		dispatcher = parser.createDispatch(dispatcher, property);
	}

	RESULT = dispatcher;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(92/*variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 395: // variable ::= base_variable_with_function_calls 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = var; 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(92/*variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 396: // variable_properties ::= variable_properties variable_property 
            {
              List RESULT = null;
		int variablesleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int variablesright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List variables = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int variablePropertyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int variablePropertyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression variableProperty = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	variables.add(variableProperty);
	RESULT = variables;	

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(89/*variable_properties*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 397: // variable_properties ::= 
            {
              List RESULT = null;
		
	RESULT = new LinkedList();

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(89/*variable_properties*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 398: // variable_property ::= T_OBJECT_OPERATOR object_property method_or_not 
            {
              Expression RESULT = null;
		int memberPropertyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int memberPropertyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression memberProperty = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		PHPCallArgumentsList paramsList = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	Expression result = null;
	if (paramsList == null) {
		result = memberProperty;
	} else {
		if (memberProperty.getClass().equals(SimpleReference.class)) {
			result = new PHPCallExpression(memberPropertyleft, paramsListright, null, (SimpleReference)memberProperty, paramsList);
		} else {
			result = new ReflectionCallExpression(memberPropertyleft, paramsListright, null, memberProperty, paramsList);
		}
	}
	RESULT = result;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(107/*variable_property*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 399: // method ::= T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              PHPCallArgumentsList RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		PHPCallArgumentsList paramsList = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	paramsList.setStart(startright);
	paramsList.setEnd(endleft);
	RESULT = paramsList;	

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(139/*method*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$CompilerAstParser$do_action5(
    int                        CUP$CompilerAstParser$act_num,
    java_cup.runtime.lr_parser CUP$CompilerAstParser$parser,
    java.util.Stack            CUP$CompilerAstParser$stack,
    int                        CUP$CompilerAstParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CompilerAstParser$result;

      /* select the action based on the action number */
      switch (CUP$CompilerAstParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 400: // array_method_dereference ::= array_method_dereference T_OPEN_RECT dim_offset T_CLOSE_RECT 
            {
              PHPCallArgumentsList RESULT = null;
		int dereferenceleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int dereferenceright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		PHPCallArgumentsList dereference = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	DereferenceNode var = new DereferenceNode(index,startleft, endright);
	dereference.getArrayDereferenceList().addNode(var);
	RESULT = dereference;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(140/*array_method_dereference*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 401: // array_method_dereference ::= method T_OPEN_RECT dim_offset T_CLOSE_RECT 
            {
              PHPCallArgumentsList RESULT = null;
		int methodleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int methodright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		PHPCallArgumentsList method = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	PHPArrayDereferenceList arrayDereferenceList = new PHPArrayDereferenceList(method);
	method.setArrayDereferenceList(arrayDereferenceList);
	DereferenceNode var = new DereferenceNode( index,startleft, endright);
	arrayDereferenceList.addNode(var);
	RESULT = method;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(140/*array_method_dereference*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 402: // method_or_not ::= array_method_dereference 
            {
              PHPCallArgumentsList RESULT = null;
		int dereferenceleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int dereferenceright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		PHPCallArgumentsList dereference = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	//RESULT = (PHPCallArgumentsList)dereference.getParent();
	RESULT = dereference;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(88/*method_or_not*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 403: // method_or_not ::= method 
            {
              PHPCallArgumentsList RESULT = null;
		int methodleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int methodright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		PHPCallArgumentsList method = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = method;	

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(88/*method_or_not*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 404: // method_or_not ::= 
            {
              PHPCallArgumentsList RESULT = null;
		
	RESULT = null;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(88/*method_or_not*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 405: // variable_without_objects ::= reference_variable 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = var; 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(106/*variable_without_objects*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 406: // variable_without_objects ::= simple_indirect_reference reference_variable 
            {
              Expression RESULT = null;
		int ref_countleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int ref_countright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Integer ref_count = (Integer)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	// the ref_count counts the number of reflection (DOLLAR sign) so now we should 
	// accomulate the dolars into reflection variables
	Expression finalVar = var;
	for (int i=0; i<ref_count.intValue(); i++) {
		finalVar = new ReflectionVariableReference(ref_countright - i - 1, varright, finalVar);				
	}
	RESULT = finalVar;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(106/*variable_without_objects*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 407: // static_member ::= class_name T_PAAMAYIM_NEKUDOTAYIM variable_without_objects 
            {
              StaticFieldAccess RESULT = null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	StaticFieldAccess staticFieldAccess = new StaticFieldAccess(classNameleft, varright, className, var);
	RESULT = staticFieldAccess;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(108/*static_member*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 408: // static_member ::= variable_class_name T_PAAMAYIM_NEKUDOTAYIM variable_without_objects 
            {
              StaticFieldAccess RESULT = null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	StaticFieldAccess staticFieldAccess = new StaticFieldAccess(classNameleft, varright, className, var);
	RESULT = staticFieldAccess;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(108/*static_member*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 409: // variable_class_name ::= reference_variable 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = var;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(58/*variable_class_name*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 410: // array_function_dereference ::= array_function_dereference T_OPEN_RECT dim_offset T_CLOSE_RECT 
            {
              Expression RESULT = null;
		int methodleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int methodright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Expression method = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	if(method instanceof Dereferencable){
		Dereferencable dereferencable=(Dereferencable)method;
		DereferenceNode var = new DereferenceNode( index,startleft, endright);
		dereferencable.getArrayDereferenceList().addNode(var);
		RESULT = method;
	}else{
		RESULT = null;
	}

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(141/*array_function_dereference*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 411: // array_function_dereference ::= function_call T_OPEN_RECT dim_offset T_CLOSE_RECT 
            {
              Expression RESULT = null;
		int methodleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int methodright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Expression method = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	if(method instanceof Dereferencable){
		Dereferencable dereferencable=(Dereferencable)method;
		PHPArrayDereferenceList arrayDereferenceList = new PHPArrayDereferenceList(method);
		DereferenceNode var = new DereferenceNode( index,startleft, endright);
		arrayDereferenceList.addNode(var);
		dereferencable.setArrayDereferenceList(arrayDereferenceList);
		RESULT = method;
	}else{
		RESULT = null;
	}

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(141/*array_function_dereference*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 412: // base_variable_with_function_calls ::= base_variable 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 RESULT = var; 
              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(118/*base_variable_with_function_calls*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 413: // base_variable_with_function_calls ::= function_call 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 RESULT = var; 
              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(118/*base_variable_with_function_calls*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 414: // base_variable_with_function_calls ::= array_function_dereference 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 RESULT = var; 
              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(118/*base_variable_with_function_calls*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 415: // base_variable ::= reference_variable 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = var; 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(114/*base_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 416: // base_variable ::= simple_indirect_reference reference_variable 
            {
              Expression RESULT = null;
		int ref_countleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int ref_countright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Integer ref_count = (Integer)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	// the ref_count counts the number of reflection (DOLLAR sign) so now we should 
	// accomulate the dolars into reflection variables
	Expression finalVar = var;
	for (int i=0; i<ref_count.intValue(); i++) {
		finalVar = new ReflectionVariableReference(ref_countright - i - 1, varright, finalVar);				
	}
	RESULT = finalVar;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(114/*base_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 417: // base_variable ::= static_member 
            {
              Expression RESULT = null;
		int staticFieldAccessleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int staticFieldAccessright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		StaticFieldAccess staticFieldAccess = (StaticFieldAccess)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = staticFieldAccess;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(114/*base_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 418: // reference_variable ::= reference_variable T_OPEN_RECT dim_offset T_CLOSE_RECT 
            {
              Expression RESULT = null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Expression varName = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	Expression var;
	if(varName.getKind() == ExpressionConstants.E_IDENTIFIER) { // VariableReference - $a
		var = new ArrayVariableReference(varNameleft, endright, ((SimpleReference)varName).getName(), index, ArrayVariableReference.VARIABLE_ARRAY);
	} else {
		var = new ReflectionArrayVariableReference(varNameleft, endright, varName, index, ReflectionArrayVariableReference.VARIABLE_ARRAY);
	}
	RESULT = var;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(57/*reference_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 419: // reference_variable ::= reference_variable T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              Expression RESULT = null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Expression varName = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	Expression var;
	if(varName.getKind() == ExpressionConstants.E_IDENTIFIER) { // VariableReference - $a
		var = new ArrayVariableReference(varNameleft, endright, ((SimpleReference)varName).getName(), index, ArrayVariableReference.VARIABLE_HASHTABLE);
	} else {
		var = new ReflectionArrayVariableReference(varNameleft, endright, varName, index, ReflectionArrayVariableReference.VARIABLE_HASHTABLE);
	}
	RESULT = var;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(57/*reference_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 420: // reference_variable ::= compound_variable 
            {
              Expression RESULT = null;
		int comp_varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int comp_varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression comp_var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 RESULT = comp_var; 
              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(57/*reference_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 421: // compound_variable ::= tracked_variable 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		VariableReference var = (VariableReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 RESULT = var; 
              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(59/*compound_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 422: // compound_variable ::= T_DOLLAR T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	ReflectionVariableReference var = new ReflectionVariableReference(startleft, endright, expr);
	RESULT = var;	 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(59/*compound_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 423: // dim_offset ::= 
            {
              Expression RESULT = null;
		 
	RESULT = null;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(60/*dim_offset*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 424: // dim_offset ::= expr 
            {
              Expression RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = expr; 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(60/*dim_offset*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 425: // object_property ::= object_dim_list 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 
	RESULT = var; 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(61/*object_property*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 426: // object_property ::= variable_without_objects 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = var;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(61/*object_property*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 427: // object_dim_list ::= object_dim_list T_OPEN_RECT dim_offset T_CLOSE_RECT 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	Expression varArray;
	if(var.getKind() == ExpressionConstants.E_IDENTIFIER) { // VariableReference - $a
		varArray = new ArrayVariableReference(varleft, endright, ((SimpleReference)var).getName(), index, ArrayVariableReference.VARIABLE_ARRAY);
	} else {
		varArray = new ReflectionArrayVariableReference(varleft, endright, var, index, ReflectionArrayVariableReference.VARIABLE_ARRAY);
	}
	RESULT = varArray;	

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(62/*object_dim_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 428: // object_dim_list ::= object_dim_list T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	Expression varArray;
	if(var.getKind() == ExpressionConstants.E_IDENTIFIER) { // VariableReference - $a
		varArray = new ArrayVariableReference(varleft, endright, ((SimpleReference)var).getName(), index, ArrayVariableReference.VARIABLE_HASHTABLE);
	} else {
		varArray = new ReflectionArrayVariableReference(varleft, endright, var, index, ReflectionArrayVariableReference.VARIABLE_HASHTABLE);
	}
	RESULT = varArray;	

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(62/*object_dim_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 429: // object_dim_list ::= variable_name 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 RESULT = var; 
              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(62/*object_dim_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 430: // variable_name ::= string_st 
            {
              Expression RESULT = null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = new SimpleReference(varNameleft, varNameright, varName); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(63/*variable_name*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 431: // variable_name ::= T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = new ReflectionVariableReference(startleft, endright, expr); 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(63/*variable_name*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 432: // simple_indirect_reference ::= T_DOLLAR 
            {
              Integer RESULT = null;
		
	RESULT = new Integer(1);

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(64/*simple_indirect_reference*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 433: // simple_indirect_reference ::= simple_indirect_reference T_DOLLAR 
            {
              Integer RESULT = null;
		int refleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Integer ref = (Integer)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		
	RESULT = new Integer(1 + ref.intValue());

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(64/*simple_indirect_reference*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 434: // assignment_list ::= assignment_list T_COMMA assignment_list_element 
            {
              List RESULT = null;
		int listElementsleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int listElementsright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List listElements = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int elementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int elementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression element = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	if (element != null) {
		listElements.add(element);
	}
	RESULT = listElements;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(65/*assignment_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 435: // assignment_list ::= assignment_list_element 
            {
              List RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	List listElements = new LinkedList();
	if (var != null) {
		listElements.add(var);	
	}
	RESULT = listElements;
	;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(65/*assignment_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 436: // assignment_list_element ::= variable 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = var;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(66/*assignment_list_element*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 437: // assignment_list_element ::= T_LIST T_OPEN_PARENTHESE assignment_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int varListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List varList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	ListVariable vars = new ListVariable(startleft, endright, varList);
	RESULT = vars;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(66/*assignment_list_element*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 438: // assignment_list_element ::= 
            {
              Expression RESULT = null;
		
	RESULT = null;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(66/*assignment_list_element*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 439: // array_pair_list ::= 
            {
              List RESULT = null;
		
	List list = new LinkedList();
	RESULT = list;	

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(67/*array_pair_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 440: // array_pair_list ::= non_empty_array_pair_list possible_comma 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		
	RESULT = list;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(67/*array_pair_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 441: // non_empty_array_pair_list ::= non_empty_array_pair_list T_COMMA expr T_DOUBLE_ARROW expr 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int keyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	ArrayElement element = new ArrayElement(keyleft, valueright, key, value);
	list.add(element);
	RESULT = list;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(68/*non_empty_array_pair_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 442: // non_empty_array_pair_list ::= non_empty_array_pair_list T_COMMA expr 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	ArrayElement element = new ArrayElement(exprleft, exprright, expr);
	list.add(element);
	RESULT = list;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(68/*non_empty_array_pair_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 443: // non_empty_array_pair_list ::= expr T_DOUBLE_ARROW expr 
            {
              List RESULT = null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	List list = new LinkedList();
	ArrayElement element = new ArrayElement(keyleft, valueright, key, value);
	list.add(element);
	RESULT = list;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(68/*non_empty_array_pair_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 444: // non_empty_array_pair_list ::= expr 
            {
              List RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	List list = new LinkedList();
	ArrayElement element = new ArrayElement(exprleft, exprright, expr);
	list.add(element);
	RESULT = list;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(68/*non_empty_array_pair_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 445: // non_empty_array_pair_list ::= non_empty_array_pair_list T_COMMA expr T_DOUBLE_ARROW T_REFERENCE w_variable 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int keyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	ReferenceExpression value = new ReferenceExpression(startleft, varright, var);
	ArrayElement element = new ArrayElement(keyleft, varright, key, value);	
	list.add(element);
	RESULT = list;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(68/*non_empty_array_pair_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 446: // non_empty_array_pair_list ::= non_empty_array_pair_list T_COMMA T_REFERENCE w_variable 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	ReferenceExpression ref = new ReferenceExpression(startleft, varright, var);
	ArrayElement element = new ArrayElement(startleft, varright, ref);	
	list.add(element);
	RESULT = list;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(68/*non_empty_array_pair_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 447: // non_empty_array_pair_list ::= expr T_DOUBLE_ARROW T_REFERENCE w_variable 
            {
              List RESULT = null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	List list = new LinkedList();
	ReferenceExpression value = new ReferenceExpression(startleft, varright, var);
	ArrayElement element = new ArrayElement(keyleft, varright, key, value);	
	list.add(element);
	RESULT = list;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(68/*non_empty_array_pair_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 448: // non_empty_array_pair_list ::= T_REFERENCE w_variable 
            {
              List RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	List list = new LinkedList();
	ReferenceExpression ref = new ReferenceExpression(startleft, varright, var);
	ArrayElement element = new ArrayElement(startleft, varright, ref);	
	list.add(element);
	RESULT = list;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(68/*non_empty_array_pair_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 449: // encaps_list ::= encaps_list encaps_var 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	list.add(var);
	RESULT = list;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(69/*encaps_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 450: // encaps_list ::= encaps_list T_ENCAPSED_AND_WHITESPACE 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	Scalar scalar = new Scalar(stringleft, stringright, string, string == null ? Scalar.TYPE_UNKNOWN : Scalar.TYPE_STRING);
	list.add(scalar);
	RESULT = list;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(69/*encaps_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 451: // encaps_list ::= encaps_var 
            {
              List RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	List list = new LinkedList();
	list.add(var);
	RESULT = list;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(69/*encaps_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 452: // encaps_list ::= T_ENCAPSED_AND_WHITESPACE encaps_var 
            {
              List RESULT = null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	List list = new LinkedList();
	Scalar scalar = new Scalar(stringleft, stringright, string, string == null ? Scalar.TYPE_UNKNOWN : Scalar.TYPE_STRING);
	list.add(scalar);
	list.add(var);
	RESULT = list;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(69/*encaps_list*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 453: // encaps_var ::= tracked_variable 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		VariableReference var = (VariableReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = var;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(71/*encaps_var*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 454: // encaps_var ::= tracked_variable T_OPEN_RECT encaps_var_offset T_CLOSE_RECT 
            {
              Expression RESULT = null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		VariableReference varName = (VariableReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	VariableReference var = new ArrayVariableReference(varNameleft, endright, varName.getName(), index, ArrayVariableReference.VARIABLE_ARRAY);
	RESULT = var;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(71/*encaps_var*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 455: // encaps_var ::= tracked_variable T_OBJECT_OPERATOR string_st 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		VariableReference var = (VariableReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	VariableReference property = new VariableReference(stringleft, stringright, string);
	Expression dispatch = parser.createDispatch(var, property);
	RESULT = dispatch;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(71/*encaps_var*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 456: // encaps_var ::= T_DOLLAR_OPEN_CURLY_BRACES expr T_CURLY_CLOSE 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	ReflectionVariableReference var = new ReflectionVariableReference(startleft, endright, expr);
	RESULT = var;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(71/*encaps_var*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 457: // encaps_var ::= T_DOLLAR_OPEN_CURLY_BRACES T_STRING_VARNAME T_OPEN_RECT expr T_CLOSE_RECT T_CURLY_CLOSE 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	VariableReference indexedVar = new ArrayVariableReference(startleft, endright, varName, index, ArrayVariableReference.VARIABLE_ARRAY);
	RESULT = indexedVar;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(71/*encaps_var*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 458: // encaps_var ::= T_CURLY_OPEN_WITH_DOLAR variable T_CURLY_CLOSE 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	ReflectionVariableReference ref = new ReflectionVariableReference(startleft, endright, var);
	RESULT = ref;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(71/*encaps_var*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 459: // encaps_var_offset ::= string_st 
            {
              Expression RESULT = null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	Scalar scalar = new Scalar(stringleft,stringright, string, Scalar.TYPE_STRING);
	RESULT = scalar;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(72/*encaps_var_offset*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 460: // encaps_var_offset ::= T_NUM_STRING 
            {
              Expression RESULT = null;
		int numleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	Scalar scalar = new Scalar(numleft,numright, num, Scalar.TYPE_REAL);
	RESULT = scalar;	

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(72/*encaps_var_offset*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 461: // encaps_var_offset ::= tracked_variable 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		VariableReference var = (VariableReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = var;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(72/*encaps_var_offset*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 462: // internal_functions_in_yacc ::= T_ISSET T_OPEN_PARENTHESE isset_variables T_CLOSE_PARENTHESE 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int openParleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int openParright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object openPar = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		PHPCallArgumentsList varList = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	varList.setStart(openParright);
	varList.setEnd(endleft);
	SimpleReference name = new SimpleReference(startleft, startright, "isset");
	PHPCallExpression result = new PHPCallExpression(startleft, endright, null, name, varList);
	RESULT = result;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(73/*internal_functions_in_yacc*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 463: // internal_functions_in_yacc ::= T_EMPTY T_OPEN_PARENTHESE variable T_CLOSE_PARENTHESE 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int openParleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int openParright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object openPar = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	SimpleReference name = new SimpleReference(startleft, startright, "empty");
	PHPCallArgumentsList varList = new PHPCallArgumentsList(openParright, endleft);
	varList.addNode(var);
	PHPCallExpression result = new PHPCallExpression(startleft, endright, null, name, varList);
	RESULT = result;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(73/*internal_functions_in_yacc*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 464: // internal_functions_in_yacc ::= T_INCLUDE expr 
            {
              Expression RESULT = null;
		int includeleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int includeright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		String include = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	Include result = new Include(includeleft, exprright, expr, Include.IT_INCLUDE);
	RESULT = result;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(73/*internal_functions_in_yacc*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 465: // internal_functions_in_yacc ::= T_INCLUDE_ONCE expr 
            {
              Expression RESULT = null;
		int includeleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int includeright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		String include = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	Include result = new Include(includeleft, exprright, expr, Include.IT_INCLUDE_ONCE);
	RESULT = result;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(73/*internal_functions_in_yacc*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 466: // internal_functions_in_yacc ::= T_EVAL T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int openParleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int openParright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object openPar = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	SimpleReference name = new SimpleReference(startleft, startright, "eval");
	PHPCallArgumentsList exprList = new PHPCallArgumentsList(openParright, endleft);
	exprList.addNode(expr);
	PHPCallExpression result = new PHPCallExpression(startleft, endright, null, name, exprList);
	RESULT = result;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(73/*internal_functions_in_yacc*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 467: // internal_functions_in_yacc ::= T_REQUIRE expr 
            {
              Expression RESULT = null;
		int includeleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int includeright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		String include = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	Include result = new Include(includeleft, exprright, expr, Include.IT_REQUIRE);
	RESULT = result;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(73/*internal_functions_in_yacc*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 468: // internal_functions_in_yacc ::= T_REQUIRE_ONCE expr 
            {
              Expression RESULT = null;
		int includeleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int includeright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		String include = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	Include result = new Include(includeleft, exprright, expr, Include.IT_REQUIRE_ONCE);
	RESULT = result;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(73/*internal_functions_in_yacc*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 469: // isset_variables ::= variable 
            {
              PHPCallArgumentsList RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	PHPCallArgumentsList list = new PHPCallArgumentsList();
	list.addNode(var);
	RESULT = list;	

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(109/*isset_variables*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 470: // isset_variables ::= isset_variables T_COMMA variable 
            {
              PHPCallArgumentsList RESULT = null;
		int varListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		PHPCallArgumentsList varList = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	varList.addNode(var);
	RESULT = varList;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(109/*isset_variables*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 471: // class_constant ::= class_name T_PAAMAYIM_NEKUDOTAYIM T_STRING 
            {
              StaticConstantAccess RESULT = null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	ConstantReference name = new ConstantReference(varNameleft, varNameright, varName);
	StaticConstantAccess constant = new StaticConstantAccess(classNameleft, varNameright, className, name); 
	RESULT = constant;

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(112/*class_constant*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 472: // class_constant ::= variable_class_name T_PAAMAYIM_NEKUDOTAYIM T_STRING 
            {
              StaticConstantAccess RESULT = null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	ConstantReference name = new ConstantReference(varNameleft, varNameright, varName);
	StaticConstantAccess constant = new StaticConstantAccess(classNameleft, varNameright, className, name); 
	RESULT = constant; 

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(112/*class_constant*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 473: // tracked_variable ::= T_VARIABLE 
            {
              VariableReference RESULT = null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		
	RESULT = new VariableReference(varNameleft, varNameright, varName, PHPVariableKind.LOCAL);

              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(110/*tracked_variable*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 474: // string_st ::= T_STRING 
            {
              String RESULT = null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 RESULT = value; 
              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(74/*string_st*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 475: // string_st ::= T_DEFINE 
            {
              String RESULT = null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).value;
		 RESULT = value; 
              CUP$CompilerAstParser$result = new java_cup.runtime.Symbol(74/*string_st*/, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-0)).right, RESULT);
            }
          return CUP$CompilerAstParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

