/* The following code was generated by JFlex 1.4.1 on 8/28/13 12:37 PM */

/*******************************************************************************
 * Copyright (c) 2006 Zend Corporation and IBM Corporation.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Zend and IBM - Initial implementation
 *******************************************************************************/

package org.eclipse.php.internal.core.documentModel.parser.php53;

import org.eclipse.php.internal.core.util.collections.IntHashtable;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 8/28/13 12:37 PM from the specification file
 * <tt>highlighting_scanner.jflex</tt>
 */
public class PhpLexer extends org.eclipse.php.internal.core.documentModel.parser.AbstractPhpLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int ST_PHP_LINE_COMMENT = 12;
  public static final int ST_PHP_NOWDOC = 6;
  public static final int ST_PHP_DOUBLE_QUOTES = 2;
  public static final int ST_PHP_COMMENT = 10;
  public static final int ST_PHP_BACKQUOTE = 3;
  public static final int ST_PHP_END_NOWDOC = 14;
  public static final int ST_PHP_DOC_COMMENT = 11;
  public static final int ST_PHP_END_HEREDOC = 7;
  public static final int ST_PHP_VAR_OFFSET = 9;
  public static final int YYINITIAL = 0;
  public static final int ST_PHP_IN_SCRIPTING = 1;
  public static final int ST_PHP_LOOKING_FOR_PROPERTY = 8;
  public static final int ST_PHP_HEREDOC = 5;
  public static final int ST_PHP_HIGHLIGHTING_ERROR = 13;
  public static final int ST_PHP_QUOTES_AFTER_VARIABLE = 4;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\12\1\11\2\0\1\15\22\0\1\12\1\26\1\17\1\74"+
    "\1\16\1\32\1\33\1\73\1\63\1\64\1\30\1\25\1\13\1\4"+
    "\1\2\1\31\1\5\11\1\1\61\1\14\1\27\1\23\1\24\1\75"+
    "\1\76\1\40\1\7\1\47\1\42\1\3\1\45\1\56\1\52\1\43"+
    "\1\65\1\55\1\54\1\60\1\41\1\36\1\57\1\67\1\37\1\50"+
    "\1\44\1\46\1\62\1\53\1\6\1\51\1\10\1\71\1\20\1\72"+
    "\1\35\1\66\1\21\1\40\1\7\1\47\1\42\1\3\1\45\1\56"+
    "\1\52\1\43\1\65\1\55\1\54\1\60\1\41\1\36\1\57\1\67"+
    "\1\37\1\50\1\44\1\46\1\62\1\53\1\6\1\51\1\10\1\22"+
    "\1\34\1\70\1\13\201\10\uff00\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\1\2\10\0\1\3\1\4\1\5\1\6"+
    "\1\5\1\4\3\6\1\7\1\5\1\10\1\5\1\11"+
    "\1\12\1\13\1\14\12\5\17\6\1\5\1\6\1\5"+
    "\1\6\1\15\1\3\1\16\1\2\1\17\1\20\2\17"+
    "\1\2\3\17\3\21\3\1\3\3\3\2\2\3\1\0"+
    "\1\3\1\22\1\23\1\22\1\24\1\25\1\24\1\26"+
    "\1\25\1\6\1\27\2\30\3\31\3\32\2\33\1\34"+
    "\1\35\1\0\1\3\2\4\1\36\6\6\1\37\2\0"+
    "\1\6\1\0\2\40\2\0\1\17\2\0\2\36\1\41"+
    "\1\42\1\36\4\6\1\43\4\6\1\44\2\6\1\45"+
    "\27\6\1\46\1\6\12\0\1\6\4\0\1\47\2\50"+
    "\1\51\1\52\1\50\3\0\3\53\1\54\3\0\1\55"+
    "\2\1\2\50\1\56\2\2\5\0\1\57\4\0\1\60"+
    "\1\4\1\47\1\61\1\62\20\0\1\63\1\0\7\6"+
    "\1\4\1\0\1\6\1\40\2\0\4\6\1\64\4\6"+
    "\1\65\5\6\1\66\1\6\1\67\5\6\1\70\17\6"+
    "\1\71\12\0\7\6\1\72\1\73\1\1\1\74\1\2"+
    "\3\0\1\75\4\0\1\57\40\0\1\76\1\0\1\77"+
    "\6\6\1\100\1\101\1\6\1\102\1\6\1\40\3\0"+
    "\1\103\1\0\5\6\1\104\6\6\1\105\2\6\1\106"+
    "\7\6\1\107\1\6\1\110\3\6\1\111\1\112\6\6"+
    "\12\0\10\6\3\0\1\75\25\0\1\113\14\0\1\114"+
    "\2\6\1\115\4\6\1\116\1\117\1\120\2\121\3\0"+
    "\3\6\1\122\7\6\1\123\1\6\1\124\1\125\1\6"+
    "\1\126\1\6\1\127\1\130\1\131\2\6\1\132\2\6"+
    "\1\133\3\6\7\0\1\134\2\0\10\6\7\0\1\135"+
    "\1\136\3\0\1\137\4\0\1\140\5\0\1\141\10\0"+
    "\2\6\1\142\2\6\1\143\2\0\1\144\14\6\1\145"+
    "\1\146\1\147\2\6\1\150\1\151\4\0\10\6\16\0"+
    "\1\152\3\0\1\153\5\0\1\154\2\0\1\155\1\0"+
    "\1\156\4\6\1\157\2\6\1\160\1\161\1\6\1\162"+
    "\2\6\1\163\3\6\1\164\2\0\1\6\1\165\6\6"+
    "\3\0\1\166\1\0\1\167\1\170\3\0\1\171\1\0"+
    "\1\172\3\0\1\173\2\0\1\174\2\0\1\175\1\0"+
    "\3\6\1\176\1\177\5\6\1\200\1\201\2\6\1\202"+
    "\3\6\1\203\1\6\1\204\13\0\1\205\1\0\1\206"+
    "\1\207\2\6\1\210\1\211\1\212\3\6\1\213\2\6"+
    "\1\214\2\6\1\0\1\215\2\0\1\216\1\217\2\0"+
    "\1\220\2\0\1\221\1\222\1\223\1\6\1\224\1\225"+
    "\3\6\1\226\1\227\1\230\2\0\1\231\1\232\1\0"+
    "\4\6\1\233\1\234\1\235\1\236\1\6\1\237\1\6"+
    "\1\240\2\6\1\241";

  private static int [] zzUnpackAction() {
    int [] result = new int[789];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\77\0\176\0\275\0\374\0\u013b\0\u017a\0\u01b9"+
    "\0\u01f8\0\u0237\0\u0276\0\u02b5\0\u02f4\0\u0333\0\u0372\0\0"+
    "\0\u03b1\0\u03f0\0\u042f\0\u046e\0\u04ad\0\u04ec\0\u052b\0\u056a"+
    "\0\u05a9\0\0\0\0\0\u05e8\0\u0627\0\0\0\0\0\0"+
    "\0\u0666\0\u06a5\0\u06e4\0\u0723\0\u0762\0\u07a1\0\u07e0\0\u081f"+
    "\0\u085e\0\u089d\0\u08dc\0\u091b\0\u095a\0\u0999\0\u09d8\0\u0a17"+
    "\0\u0a56\0\u0a95\0\u0ad4\0\u0b13\0\u0b52\0\u0b91\0\u0bd0\0\u0c0f"+
    "\0\u0c4e\0\u0c8d\0\u0ccc\0\u0d0b\0\u0d4a\0\0\0\u0d89\0\0"+
    "\0\u0dc8\0\u0e07\0\0\0\u0e46\0\u0e85\0\u0ec4\0\u0f03\0\u0f42"+
    "\0\u0f81\0\0\0\u0fc0\0\u0fff\0\u103e\0\u107d\0\u10bc\0\u10fb"+
    "\0\u113a\0\u1179\0\u11b8\0\u11f7\0\u1236\0\u1275\0\u12b4\0\u12f3"+
    "\0\u12f3\0\0\0\u1332\0\u1371\0\u13b0\0\0\0\u13ef\0\0"+
    "\0\u142e\0\u146d\0\0\0\u14ac\0\u14eb\0\0\0\u152a\0\u1569"+
    "\0\u15a8\0\0\0\u15e7\0\0\0\u1626\0\0\0\u1665\0\u16a4"+
    "\0\u16e3\0\u1722\0\u1761\0\0\0\u17a0\0\u17df\0\u181e\0\u185d"+
    "\0\u189c\0\u18db\0\0\0\u191a\0\u1959\0\u1998\0\u0d89\0\u19d7"+
    "\0\u1a16\0\u0627\0\u1a55\0\0\0\u1a94\0\u1ad3\0\u07a1\0\u1b12"+
    "\0\u1b51\0\u1b90\0\u056a\0\u1bcf\0\u1c0e\0\u1c4d\0\u1c8c\0\u056a"+
    "\0\u1ccb\0\u1d0a\0\u1d49\0\u1d88\0\u056a\0\u1dc7\0\u1e06\0\u056a"+
    "\0\u1e45\0\u1e84\0\u1ec3\0\u1f02\0\u1f41\0\u1f80\0\u1fbf\0\u1ffe"+
    "\0\u203d\0\u207c\0\u20bb\0\u20fa\0\u2139\0\u2178\0\u21b7\0\u21f6"+
    "\0\u2235\0\u2274\0\u22b3\0\u22f2\0\u2331\0\u2370\0\u23af\0\0"+
    "\0\u23ee\0\u242d\0\u0d0b\0\u246c\0\u24ab\0\u24ea\0\u2529\0\u2568"+
    "\0\u25a7\0\u25e6\0\u2625\0\u2664\0\u26a3\0\u26e2\0\u0e46\0\u2721"+
    "\0\u2760\0\u26e2\0\0\0\0\0\0\0\u2721\0\u279f\0\u0f42"+
    "\0\u27de\0\u279f\0\0\0\u27de\0\0\0\u281d\0\u113a\0\u285c"+
    "\0\u10bc\0\u289b\0\u28da\0\u281d\0\u285c\0\u1236\0\u2919\0\u2958"+
    "\0\u2997\0\u29d6\0\u2a15\0\u2a54\0\u2a93\0\0\0\u2ad2\0\u2b11"+
    "\0\u2b50\0\u1275\0\0\0\u2b8f\0\u2bce\0\0\0\0\0\u2c0d"+
    "\0\u2c4c\0\u2c8b\0\u2cca\0\u2d09\0\u2d48\0\u2d87\0\u2dc6\0\u2e05"+
    "\0\u2e44\0\u2e83\0\u2ec2\0\u2f01\0\u2f40\0\u2f7f\0\u2fbe\0\0"+
    "\0\u2ffd\0\u303c\0\u307b\0\u30ba\0\u30f9\0\u3138\0\u3177\0\u31b6"+
    "\0\u191a\0\u31f5\0\u3234\0\u3273\0\u32b2\0\u32f1\0\u3330\0\u336f"+
    "\0\u33ae\0\u33ed\0\u056a\0\u342c\0\u346b\0\u34aa\0\u34e9\0\u056a"+
    "\0\u3528\0\u3567\0\u35a6\0\u35e5\0\u3624\0\u056a\0\u3663\0\u36a2"+
    "\0\u36e1\0\u3720\0\u375f\0\u379e\0\u37dd\0\u056a\0\u381c\0\u385b"+
    "\0\u389a\0\u38d9\0\u3918\0\u3957\0\u3996\0\u39d5\0\u3a14\0\u3a53"+
    "\0\u3a92\0\u3ad1\0\u3b10\0\u3b4f\0\u3b8e\0\u056a\0\u3bcd\0\u3c0c"+
    "\0\u3c4b\0\u3c8a\0\u3cc9\0\u3d08\0\u3d47\0\u3d86\0\u3dc5\0\u3e04"+
    "\0\u3e43\0\u3e82\0\u3ec1\0\u3f00\0\u3f3f\0\u3f7e\0\u3fbd\0\0"+
    "\0\0\0\u3ffc\0\0\0\u403b\0\u407a\0\u40b9\0\u40f8\0\u40b9"+
    "\0\u4137\0\u4176\0\u41b5\0\u12b4\0\u40b9\0\u41f4\0\u4233\0\u4272"+
    "\0\u42b1\0\u42f0\0\u432f\0\u436e\0\u43ad\0\u43ec\0\u442b\0\u446a"+
    "\0\u44a9\0\u44e8\0\u4527\0\u4566\0\u45a5\0\u45e4\0\u4623\0\u4662"+
    "\0\u46a1\0\u46e0\0\u471f\0\u475e\0\u479d\0\u47dc\0\u481b\0\u485a"+
    "\0\u4899\0\u48d8\0\u4917\0\u4956\0\u4995\0\0\0\u49d4\0\u056a"+
    "\0\u4a13\0\u4a52\0\u4a91\0\u4ad0\0\u4b0f\0\u4b4e\0\u056a\0\u4b8d"+
    "\0\u4bcc\0\u056a\0\u4c0b\0\u4c4a\0\u4c89\0\u4cc8\0\u4d07\0\u4d46"+
    "\0\u4d85\0\u4dc4\0\u4e03\0\u4e42\0\u4e81\0\u4ec0\0\u056a\0\u4eff"+
    "\0\u4f3e\0\u4f7d\0\u4fbc\0\u4ffb\0\u503a\0\u056a\0\u5079\0\u50b8"+
    "\0\u056a\0\u50f7\0\u5136\0\u5175\0\u51b4\0\u51f3\0\u5232\0\u5271"+
    "\0\u056a\0\u52b0\0\u056a\0\u52ef\0\u532e\0\u536d\0\u056a\0\u056a"+
    "\0\u53ac\0\u53eb\0\u542a\0\u5469\0\u54a8\0\u54e7\0\u5526\0\u5565"+
    "\0\u55a4\0\u55e3\0\u5622\0\u5661\0\u56a0\0\u56df\0\u571e\0\u575d"+
    "\0\u579c\0\u57db\0\u581a\0\u5859\0\u5898\0\u58d7\0\u5916\0\u5955"+
    "\0\u5994\0\u59d3\0\u5a12\0\0\0\u5a51\0\u5a90\0\u5acf\0\u5b0e"+
    "\0\u5b4d\0\u5b8c\0\u5bcb\0\u5c0a\0\u5c49\0\u5c88\0\u5cc7\0\u5d06"+
    "\0\u5d45\0\u5d84\0\u5dc3\0\u5e02\0\u5e41\0\u5e80\0\u5ebf\0\u5efe"+
    "\0\u5f3d\0\0\0\u5f7c\0\u5fbb\0\u5ffa\0\u6039\0\u6078\0\u60b7"+
    "\0\u60f6\0\u6135\0\u6174\0\u61b3\0\u61f2\0\u6231\0\0\0\u6270"+
    "\0\u62af\0\u056a\0\u62ee\0\u632d\0\u636c\0\u63ab\0\u056a\0\u056a"+
    "\0\u19d7\0\0\0\u63ea\0\u6429\0\u6468\0\u64a7\0\u64e6\0\u6525"+
    "\0\u6564\0\u056a\0\u65a3\0\u65e2\0\u6621\0\u6660\0\u669f\0\u66de"+
    "\0\u671d\0\u056a\0\u675c\0\u056a\0\u056a\0\u679b\0\u056a\0\u67da"+
    "\0\u056a\0\u056a\0\u056a\0\u6819\0\u6858\0\u056a\0\u6897\0\u68d6"+
    "\0\u056a\0\u6915\0\u6954\0\u6993\0\u69d2\0\u6a11\0\u6a50\0\u6a8f"+
    "\0\u6ace\0\u6b0d\0\u6b4c\0\0\0\u6b8b\0\u6bca\0\u6c09\0\u6c48"+
    "\0\u6c87\0\u6cc6\0\u6d05\0\u6d44\0\u6d83\0\u6dc2\0\u6e01\0\u6e40"+
    "\0\u6e7f\0\u6ebe\0\u6efd\0\u6f3c\0\u6f7b\0\u6fba\0\0\0\u6ff9"+
    "\0\u7038\0\u7077\0\0\0\u70b6\0\u70f5\0\u7134\0\u7173\0\0"+
    "\0\u71b2\0\u71f1\0\u7230\0\u726f\0\u72ae\0\0\0\u72ed\0\u732c"+
    "\0\u736b\0\u73aa\0\u73e9\0\u7428\0\u7467\0\u74a6\0\u74e5\0\u7524"+
    "\0\u7563\0\u75a2\0\u75e1\0\u056a\0\u7620\0\u4d46\0\u056a\0\u765f"+
    "\0\u769e\0\u76dd\0\u771c\0\u775b\0\u779a\0\u77d9\0\u7818\0\u7857"+
    "\0\u7896\0\u78d5\0\u7914\0\u056a\0\u056a\0\u056a\0\u7953\0\u7992"+
    "\0\u056a\0\u056a\0\u79d1\0\u7a10\0\u7a4f\0\u7a8e\0\u7acd\0\u7b0c"+
    "\0\u7b4b\0\u7b8a\0\u7bc9\0\u7c08\0\u7c47\0\u7c86\0\u7cc5\0\u7d04"+
    "\0\u7d43\0\u7d82\0\u7dc1\0\u7e00\0\u7e3f\0\u7e7e\0\u7ebd\0\u7efc"+
    "\0\u7f3b\0\u7f7a\0\u7fb9\0\u7ff8\0\0\0\u8037\0\u8076\0\u80b5"+
    "\0\0\0\u80f4\0\u8133\0\u8172\0\u81b1\0\u81f0\0\0\0\u822f"+
    "\0\u826e\0\0\0\u82ad\0\u056a\0\u82ec\0\u832b\0\u836a\0\u83a9"+
    "\0\u056a\0\u83e8\0\u8427\0\u056a\0\u056a\0\u8466\0\u84a5\0\u84e4"+
    "\0\u8523\0\u056a\0\u8562\0\u85a1\0\u85e0\0\u056a\0\u861f\0\u865e"+
    "\0\u869d\0\u056a\0\u86dc\0\u871b\0\u875a\0\u8799\0\u87d8\0\u8817"+
    "\0\u8856\0\u8895\0\u88d4\0\0\0\u8913\0\0\0\0\0\u8952"+
    "\0\u8991\0\u89d0\0\0\0\u8a0f\0\0\0\u8a4e\0\u8a8d\0\u8acc"+
    "\0\u8b0b\0\u8b4a\0\u8b89\0\0\0\u8bc8\0\u8c07\0\0\0\u8c46"+
    "\0\u8c85\0\u8cc4\0\u8d03\0\u056a\0\u056a\0\u8d42\0\u8d81\0\u8dc0"+
    "\0\u8dff\0\u8e3e\0\u056a\0\u056a\0\u8e7d\0\u8ebc\0\u056a\0\u8efb"+
    "\0\u8f3a\0\u8f79\0\u056a\0\u8fb8\0\0\0\u8ff7\0\u9036\0\u9075"+
    "\0\u90b4\0\u90f3\0\u9132\0\u9171\0\u91b0\0\u91ef\0\u922e\0\u926d"+
    "\0\0\0\u92ac\0\0\0\0\0\u92eb\0\u932a\0\u056a\0\u056a"+
    "\0\u056a\0\u9369\0\u93a8\0\u93e7\0\u056a\0\u9426\0\u9465\0\u056a"+
    "\0\u94a4\0\u94e3\0\u9522\0\0\0\u9561\0\u95a0\0\0\0\0"+
    "\0\u95df\0\u961e\0\0\0\u965d\0\u969c\0\0\0\u056a\0\u056a"+
    "\0\u96db\0\u056a\0\u056a\0\u971a\0\u9759\0\u9798\0\u056a\0\0"+
    "\0\0\0\u97d7\0\u9816\0\0\0\0\0\u9855\0\u9894\0\u98d3"+
    "\0\u9912\0\u9951\0\0\0\0\0\0\0\u056a\0\u9990\0\u056a"+
    "\0\u99cf\0\u056a\0\u9a0e\0\u9a4d\0\u056a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[789];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\77\0\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\2\31\1\32\1\33\1\31\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\46\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64"+
    "\1\65\2\30\1\66\1\67\1\30\1\70\1\71\1\30"+
    "\1\72\1\73\1\74\1\32\1\30\1\75\1\30\1\76"+
    "\2\32\1\77\1\100\2\32\16\101\1\102\1\103\1\104"+
    "\1\101\1\105\54\101\16\106\1\107\1\106\1\110\1\103"+
    "\1\111\54\106\4\112\1\113\15\112\1\114\54\112\3\115"+
    "\1\116\2\115\3\116\1\117\3\115\1\117\1\120\1\115"+
    "\1\121\1\115\1\122\13\115\23\116\1\115\1\116\2\115"+
    "\3\116\7\115\3\123\1\124\2\123\3\124\1\125\3\123"+
    "\1\125\20\123\23\124\1\123\1\124\2\123\3\124\7\123"+
    "\3\126\1\127\2\126\3\127\1\130\3\126\1\131\20\126"+
    "\23\127\1\126\1\127\2\126\3\127\7\126\3\132\1\133"+
    "\1\134\1\132\3\133\2\31\2\132\1\31\20\132\23\133"+
    "\1\132\1\133\2\132\3\133\7\132\1\20\1\135\1\136"+
    "\1\30\1\136\1\137\3\30\2\140\2\136\1\140\1\141"+
    "\1\136\1\140\15\136\3\30\1\142\17\30\1\136\1\30"+
    "\2\136\3\30\1\136\1\32\1\143\2\140\2\136\30\144"+
    "\1\145\46\144\30\146\1\147\45\146\1\150\11\151\1\152"+
    "\3\151\1\153\6\151\1\154\5\151\1\155\42\151\1\154"+
    "\1\151\11\156\2\157\2\156\1\157\61\156\11\20\1\160"+
    "\3\20\1\161\61\20\1\0\1\21\1\162\1\163\1\0"+
    "\1\21\72\0\1\162\3\0\1\162\15\0\1\164\54\0"+
    "\1\30\1\0\1\30\1\0\1\30\1\165\2\30\25\0"+
    "\3\30\1\166\5\30\1\167\4\30\1\170\3\30\1\171"+
    "\1\0\1\172\2\0\3\30\13\0\1\164\16\0\1\164"+
    "\1\173\53\0\1\21\1\162\1\163\1\0\1\21\1\174"+
    "\71\0\1\30\1\0\1\30\1\0\4\30\25\0\1\53"+
    "\22\30\1\0\1\30\2\0\3\30\10\0\1\30\1\0"+
    "\1\30\1\0\4\30\6\0\1\35\7\0\1\175\6\0"+
    "\1\30\1\176\21\30\1\0\1\30\2\0\3\30\3\0"+
    "\1\177\4\0\1\30\1\0\1\30\1\0\4\30\25\0"+
    "\23\30\1\0\1\30\2\0\3\30\20\0\2\31\2\0"+
    "\1\31\64\0\1\200\2\0\3\200\25\0\6\200\1\201"+
    "\14\200\1\0\1\200\2\0\3\200\7\0\16\202\1\203"+
    "\1\204\1\205\1\202\1\206\54\202\23\0\1\207\1\164"+
    "\75\0\1\164\1\207\75\0\1\164\1\0\1\164\74\0"+
    "\1\207\76\0\2\164\2\0\1\210\72\0\1\164\76\0"+
    "\1\164\4\0\1\211\1\100\70\0\1\164\1\212\75\0"+
    "\1\164\7\0\1\164\66\0\1\164\10\0\1\164\43\0"+
    "\1\30\1\0\1\30\1\0\4\30\25\0\1\30\1\213"+
    "\21\30\1\0\1\30\2\0\3\30\10\0\1\30\1\0"+
    "\1\214\1\0\4\30\25\0\23\30\1\0\1\30\2\0"+
    "\3\30\10\0\1\30\1\0\1\30\1\0\2\30\1\215"+
    "\1\30\25\0\1\30\1\216\1\30\1\217\6\30\1\220"+
    "\10\30\1\0\1\30\2\0\3\30\10\0\1\30\1\0"+
    "\1\221\1\0\4\30\25\0\2\30\1\222\5\30\1\223"+
    "\12\30\1\0\1\30\2\0\3\30\10\0\1\30\1\0"+
    "\1\224\1\0\4\30\25\0\1\225\4\30\1\226\15\30"+
    "\1\0\1\30\2\0\3\30\10\0\1\30\1\0\1\30"+
    "\1\0\4\30\25\0\3\30\1\227\3\30\1\230\12\30"+
    "\1\231\1\0\1\30\2\0\3\30\10\0\1\30\1\0"+
    "\1\30\1\0\4\30\25\0\1\30\1\232\12\30\1\233"+
    "\6\30\1\0\1\30\2\0\3\30\10\0\1\30\1\0"+
    "\1\30\1\0\4\30\25\0\1\234\1\235\1\236\2\30"+
    "\1\237\2\30\1\240\12\30\1\0\1\30\2\0\3\30"+
    "\10\0\1\30\1\0\1\30\1\0\4\30\25\0\3\30"+
    "\1\241\6\30\1\242\10\30\1\0\1\30\2\0\3\30"+
    "\10\0\1\30\1\0\1\30\1\0\4\30\25\0\1\243"+
    "\1\30\1\244\13\30\1\245\4\30\1\0\1\30\2\0"+
    "\3\30\10\0\1\30\1\0\1\246\1\0\4\30\25\0"+
    "\6\30\1\247\6\30\1\250\5\30\1\0\1\30\2\0"+
    "\3\30\10\0\1\30\1\0\1\30\1\0\4\30\25\0"+
    "\14\30\1\251\6\30\1\0\1\30\2\0\3\30\10\0"+
    "\1\30\1\0\1\30\1\0\4\30\25\0\5\30\1\252"+
    "\15\30\1\0\1\30\2\0\3\30\10\0\1\30\1\0"+
    "\1\30\1\0\4\30\25\0\1\253\15\30\1\254\4\30"+
    "\1\0\1\30\2\0\3\30\10\0\1\30\1\0\1\30"+
    "\1\0\4\30\25\0\1\30\1\255\1\256\5\30\1\257"+
    "\12\30\1\0\1\30\2\0\3\30\70\0\1\260\16\0"+
    "\1\30\1\0\1\30\1\0\4\30\25\0\2\30\1\261"+
    "\20\30\1\0\1\30\2\0\3\30\16\0\1\262\2\0"+
    "\1\263\23\0\1\264\1\265\1\266\1\0\1\267\1\270"+
    "\1\0\1\271\1\272\1\0\1\273\27\0\1\30\1\0"+
    "\1\30\1\0\4\30\25\0\23\30\1\0\1\30\2\0"+
    "\1\30\1\274\1\30\7\0\20\177\1\275\52\177\1\204"+
    "\3\177\16\101\1\276\1\0\1\277\1\101\1\300\57\101"+
    "\1\301\2\101\3\301\5\101\1\302\1\303\1\277\1\101"+
    "\1\304\13\101\23\301\1\101\1\301\2\101\3\301\124\101"+
    "\1\305\1\303\1\277\1\101\1\306\54\101\16\106\1\307"+
    "\1\106\1\310\1\0\1\311\57\106\1\301\2\106\3\301"+
    "\5\106\1\312\1\106\1\310\1\313\1\304\13\106\23\301"+
    "\1\106\1\301\2\106\3\301\124\106\1\305\1\106\1\310"+
    "\1\313\1\314\54\106\24\0\1\315\70\0\1\305\60\0"+
    "\11\115\1\117\3\115\1\117\1\316\1\115\1\317\1\115"+
    "\1\320\55\115\1\116\1\115\1\116\1\115\4\116\1\321"+
    "\2\115\1\322\1\321\1\316\1\115\1\317\1\115\1\320"+
    "\13\115\23\116\1\115\1\116\2\115\3\116\12\115\1\323"+
    "\2\115\3\323\1\117\3\115\1\117\1\316\1\115\1\317"+
    "\1\115\1\320\13\115\23\323\1\115\1\323\2\115\3\323"+
    "\12\115\1\301\2\115\3\301\1\117\3\115\1\117\1\324"+
    "\1\115\1\317\1\115\1\304\13\115\23\301\1\115\1\301"+
    "\2\115\3\301\20\115\1\117\3\115\1\117\72\115\1\117"+
    "\3\115\1\117\1\305\1\115\1\317\1\115\1\325\54\115"+
    "\11\123\1\125\3\123\1\125\62\123\1\124\1\123\1\124"+
    "\1\123\4\124\1\326\2\123\1\327\1\326\20\123\23\124"+
    "\1\123\1\124\2\123\3\124\12\123\1\330\2\123\3\330"+
    "\1\125\3\123\1\125\20\123\23\330\1\123\1\330\2\123"+
    "\3\330\7\123\3\331\1\332\2\331\3\332\1\0\2\331"+
    "\1\333\1\0\20\331\23\332\1\331\1\332\2\331\3\332"+
    "\7\331\1\334\1\335\1\334\1\335\1\334\4\335\1\336"+
    "\2\334\1\337\1\336\20\334\23\335\1\334\1\335\2\334"+
    "\3\335\7\334\3\340\1\341\2\340\3\341\1\130\2\340"+
    "\1\342\1\130\20\340\23\341\1\340\1\341\2\340\3\341"+
    "\7\340\1\0\1\133\1\0\1\133\1\0\4\133\25\0"+
    "\23\133\1\0\1\133\2\0\3\133\33\0\1\343\53\0"+
    "\1\135\3\0\1\135\72\0\1\344\3\0\1\344\1\174"+
    "\73\0\1\345\2\0\3\345\25\0\23\345\1\0\1\345"+
    "\2\0\3\345\10\0\1\30\1\0\1\30\1\0\4\30"+
    "\25\0\10\30\1\223\12\30\1\0\1\30\2\0\3\30"+
    "\7\0\30\144\1\0\46\144\31\0\1\346\76\0\1\347"+
    "\50\0\1\350\33\0\1\351\1\352\1\353\1\354\1\355"+
    "\1\356\1\357\1\360\1\361\1\362\3\0\1\363\1\0"+
    "\1\364\1\365\1\366\1\0\1\367\14\0\11\151\1\152"+
    "\3\151\1\152\6\151\1\152\5\151\1\152\42\151\1\152"+
    "\1\151\11\0\1\370\111\0\1\212\63\0\2\157\2\0"+
    "\1\157\64\0\1\371\2\0\3\371\25\0\23\371\1\0"+
    "\1\371\2\0\3\371\12\0\1\371\2\0\3\371\1\160"+
    "\24\0\23\371\1\0\1\371\2\0\3\371\10\0\1\162"+
    "\1\0\1\163\1\0\1\162\72\0\1\344\2\0\2\344"+
    "\17\0\1\344\52\0\1\30\1\0\1\30\1\0\4\30"+
    "\25\0\5\30\1\372\1\373\14\30\1\0\1\30\2\0"+
    "\3\30\10\0\1\30\1\0\1\30\1\0\4\30\25\0"+
    "\4\30\1\374\16\30\1\0\1\30\2\0\3\30\10\0"+
    "\1\30\1\0\1\30\1\0\4\30\25\0\14\30\1\375"+
    "\6\30\1\0\1\30\2\0\3\30\10\0\1\30\1\0"+
    "\1\30\1\0\4\30\25\0\12\30\1\376\10\30\1\0"+
    "\1\30\2\0\3\30\10\0\1\30\1\0\1\30\1\0"+
    "\4\30\25\0\21\30\1\377\1\30\1\0\1\30\2\0"+
    "\3\30\10\0\1\30\1\0\1\30\1\0\4\30\25\0"+
    "\2\30\1\u0100\20\30\1\0\1\30\2\0\3\30\10\0"+
    "\1\u0101\1\0\1\u0101\1\0\1\u0101\1\0\1\u0101\30\0"+
    "\1\u0101\1\0\1\u0101\2\0\1\u0101\1\0\1\u0101\56\0"+
    "\1\u0102\50\0\1\30\1\0\1\u0103\1\0\4\30\25\0"+
    "\23\30\1\0\1\30\2\0\3\30\10\0\1\200\1\0"+
    "\1\200\1\0\4\200\25\0\23\200\1\0\1\200\2\0"+
    "\3\200\10\0\1\200\1\0\1\200\1\0\4\200\25\0"+
    "\14\200\1\u0104\6\200\1\0\1\200\2\0\3\200\7\0"+
    "\3\202\1\0\2\202\3\0\5\202\1\203\1\204\1\205"+
    "\1\202\1\0\13\202\23\0\1\202\1\0\2\202\3\0"+
    "\124\202\1\0\1\204\1\205\1\202\1\206\54\202\23\0"+
    "\1\164\3\0\1\u0105\77\0\1\u0106\57\0\2\212\2\0"+
    "\1\212\62\0\1\30\1\0\1\30\1\0\4\30\25\0"+
    "\6\30\1\u0107\14\30\1\0\1\30\2\0\2\30\1\u0108"+
    "\10\0\1\30\1\0\1\30\1\0\4\30\25\0\12\30"+
    "\1\u0109\10\30\1\0\1\30\2\0\3\30\10\0\1\30"+
    "\1\0\1\30\1\0\4\30\25\0\1\30\1\u010a\21\30"+
    "\1\0\1\30\2\0\3\30\10\0\1\30\1\0\1\30"+
    "\1\0\4\30\25\0\4\30\1\213\16\30\1\0\1\30"+
    "\2\0\3\30\10\0\1\30\1\0\1\30\1\0\4\30"+
    "\25\0\15\30\1\u010b\5\30\1\0\1\30\2\0\3\30"+
    "\10\0\1\30\1\0\1\30\1\0\4\30\25\0\22\30"+
    "\1\u010c\1\0\1\30\2\0\3\30\10\0\1\30\1\0"+
    "\1\30\1\0\4\30\25\0\16\30\1\u010d\4\30\1\0"+
    "\1\30\2\0\3\30\10\0\1\30\1\0\1\30\1\0"+
    "\4\30\25\0\7\30\1\u010e\1\30\1\u010f\11\30\1\0"+
    "\1\30\2\0\3\30\10\0\1\30\1\0\1\u0110\1\0"+
    "\4\30\25\0\23\30\1\0\1\30\2\0\3\30\10\0"+
    "\1\30\1\0\1\30\1\0\4\30\25\0\6\30\1\u0111"+
    "\2\30\1\u0112\1\u0113\10\30\1\0\1\30\2\0\3\30"+
    "\10\0\1\30\1\0\1\30\1\0\4\30\25\0\21\30"+
    "\1\u0114\1\30\1\0\1\30\2\0\3\30\10\0\1\30"+
    "\1\0\1\30\1\0\4\30\25\0\10\30\1\u0115\2\30"+
    "\1\u0116\7\30\1\0\1\30\2\0\3\30\10\0\1\30"+
    "\1\0\1\30\1\0\4\30\25\0\1\30\1\u0117\21\30"+
    "\1\0\1\30\2\0\3\30\10\0\1\30\1\0\1\30"+
    "\1\0\4\30\25\0\1\30\1\u0118\21\30\1\0\1\30"+
    "\2\0\3\30\10\0\1\30\1\0\1\30\1\0\4\30"+
    "\25\0\1\u0119\22\30\1\0\1\30\2\0\3\30\10\0"+
    "\1\30\1\0\1\30\1\0\4\30\25\0\16\30\1\u011a"+
    "\4\30\1\0\1\30\2\0\3\30\10\0\1\30\1\0"+
    "\1\30\1\0\4\30\25\0\3\30\1\u011b\17\30\1\0"+
    "\1\30\2\0\3\30\10\0\1\30\1\0\1\30\1\0"+
    "\4\30\25\0\3\30\1\u011c\17\30\1\0\1\30\2\0"+
    "\3\30\10\0\1\30\1\0\1\30\1\0\4\30\25\0"+
    "\12\30\1\u011d\10\30\1\0\1\30\2\0\3\30\10\0"+
    "\1\30\1\0\1\u011e\1\0\4\30\25\0\23\30\1\0"+
    "\1\30\2\0\3\30\10\0\1\30\1\0\1\30\1\0"+
    "\4\30\25\0\3\30\1\u011f\17\30\1\0\1\30\2\0"+
    "\3\30\10\0\1\30\1\0\1\30\1\0\4\30\25\0"+
    "\6\30\1\u0120\3\30\1\u0121\10\30\1\0\1\30\2\0"+
    "\3\30\10\0\1\30\1\0\1\30\1\0\4\30\25\0"+
    "\1\u0122\22\30\1\0\1\30\2\0\3\30\10\0\1\30"+
    "\1\0\1\30\1\0\4\30\25\0\16\30\1\u0123\4\30"+
    "\1\0\1\30\2\0\3\30\10\0\1\30\1\0\1\30"+
    "\1\0\4\30\25\0\2\30\1\u0124\20\30\1\0\1\30"+
    "\2\0\3\30\10\0\1\30\1\0\1\30\1\0\4\30"+
    "\25\0\5\30\1\u0125\15\30\1\0\1\30\2\0\3\30"+
    "\10\0\1\30\1\0\1\30\1\0\4\30\25\0\5\30"+
    "\1\u0126\15\30\1\0\1\30\2\0\3\30\10\0\1\30"+
    "\1\0\1\30\1\0\4\30\25\0\12\30\1\u0127\10\30"+
    "\1\0\1\30\2\0\3\30\10\0\1\30\1\0\1\30"+
    "\1\0\4\30\25\0\6\30\1\u0128\14\30\1\0\1\30"+
    "\2\0\3\30\10\0\1\30\1\0\1\30\1\0\4\30"+
    "\25\0\1\u0129\22\30\1\0\1\30\2\0\3\30\10\0"+
    "\1\30\1\0\1\30\1\0\4\30\25\0\1\u012a\4\30"+
    "\1\u012b\15\30\1\0\1\30\2\0\3\30\10\0\1\30"+
    "\1\0\1\30\1\0\4\30\25\0\1\30\1\u012c\21\30"+
    "\1\0\1\30\2\0\3\30\10\0\1\30\1\0\1\30"+
    "\1\0\2\30\1\u012d\1\30\25\0\23\30\1\0\1\30"+
    "\2\0\3\30\10\0\1\30\1\0\1\30\1\0\4\30"+
    "\25\0\1\30\1\u012e\21\30\1\0\1\30\2\0\3\30"+
    "\45\0\1\u012f\4\0\1\u0130\42\0\1\u0131\72\0\1\u0132"+
    "\132\0\1\u0133\75\0\1\u0134\101\0\1\u0135\111\0\1\u0136"+
    "\63\0\1\u0137\101\0\1\u0138\33\0\1\30\1\0\1\30"+
    "\1\0\4\30\25\0\3\30\1\u0139\1\u013a\2\30\1\u013b"+
    "\1\30\1\u013c\2\30\1\u013d\1\30\1\u013e\3\30\1\u013f"+
    "\1\0\1\30\2\0\3\30\7\0\77\177\3\101\1\0"+
    "\2\101\3\0\5\101\1\302\1\303\1\277\1\101\1\0"+
    "\13\101\23\0\1\101\1\0\2\101\3\0\25\101\1\0"+
    "\1\303\1\277\1\101\1\306\54\101\1\0\1\301\1\0"+
    "\1\301\1\0\4\301\25\0\23\301\1\0\1\301\2\0"+
    "\3\301\1\0\1\u0140\5\0\3\106\1\0\2\106\3\0"+
    "\5\106\1\312\1\106\1\310\1\313\1\0\13\106\23\0"+
    "\1\106\1\0\2\106\3\0\25\106\1\0\1\106\1\310"+
    "\1\313\1\314\54\106\3\115\1\0\2\115\3\0\1\117"+
    "\3\115\1\117\1\324\1\115\1\317\1\115\1\0\13\115"+
    "\23\0\1\115\1\0\2\115\3\0\20\115\1\117\3\115"+
    "\1\117\1\0\1\115\1\317\1\115\1\325\65\115\1\321"+
    "\3\115\1\321\1\316\1\115\1\317\1\115\1\320\55\115"+
    "\1\323\1\115\1\323\1\115\4\323\1\u0141\2\115\1\u0142"+
    "\1\u0141\1\316\1\115\1\317\1\115\1\320\13\115\23\323"+
    "\1\115\1\323\2\115\3\323\7\115\11\123\1\326\3\123"+
    "\1\326\62\123\1\330\1\123\1\330\1\123\4\330\1\u0143"+
    "\2\123\1\u0144\1\u0143\20\123\23\330\1\123\1\330\2\123"+
    "\3\330\7\123\3\342\1\u0145\2\342\3\u0145\1\u0146\3\342"+
    "\1\u0146\20\342\23\u0145\1\342\1\u0145\2\342\3\u0145\10\342"+
    "\1\u0147\1\342\1\u0145\1\342\1\u0147\3\u0145\1\u0148\2\342"+
    "\1\u0149\1\u0148\20\342\23\u0145\1\342\1\u0145\2\342\3\u0145"+
    "\7\342\3\333\1\u014a\2\333\3\u014a\1\0\3\333\1\0"+
    "\20\333\23\u014a\1\333\1\u014a\2\333\3\u014a\7\333\3\u014b"+
    "\1\u014c\2\u014b\3\u014c\1\u0148\3\u014b\1\u0148\20\u014b\23\u014c"+
    "\1\u014b\1\u014c\2\u014b\3\u014c\10\u014b\1\u014c\1\u014b\1\u014c"+
    "\1\u014b\4\u014c\1\u014d\2\u014b\1\u014e\1\u014d\20\u014b\23\u014c"+
    "\1\u014b\1\u014c\2\u014b\3\u014c\7\u014b\11\u014f\1\336\3\u014f"+
    "\1\336\61\u014f\3\340\1\u0150\2\340\3\u0150\1\u0146\2\340"+
    "\1\342\1\u0146\20\340\23\u0150\1\340\1\u0150\2\340\3\u0150"+
    "\7\340\1\u0151\1\341\1\u0151\1\341\1\u0151\4\341\1\u014d"+
    "\2\u0151\1\u014e\1\u014d\20\u0151\23\341\1\u0151\1\341\2\u0151"+
    "\3\341\7\u0151\1\0\1\344\3\0\1\344\72\0\1\345"+
    "\1\0\1\345\1\0\4\345\25\0\23\345\1\0\1\345"+
    "\2\0\3\345\15\0\1\u0152\73\0\1\u0153\102\0\1\u0154"+
    "\36\0\1\u0155\1\u0156\67\0\1\u0157\41\0\1\u0158\134\0"+
    "\1\u0159\14\0\1\u015a\56\0\1\u015b\7\0\1\u015c\3\0"+
    "\1\u015d\67\0\1\u015e\103\0\1\u015f\64\0\1\u0160\1\0"+
    "\1\u0161\41\0\1\u0162\37\0\1\u0163\1\u0164\1\0\1\u0165"+
    "\73\0\1\u0166\107\0\1\u0167\61\0\1\u0168\1\u0169\41\0"+
    "\1\u016a\34\0\1\u016b\41\0\1\u016c\34\0\1\u016d\37\0"+
    "\1\371\1\0\1\371\1\0\4\371\1\u016e\2\0\1\u016f"+
    "\1\u016e\20\0\23\371\1\0\1\371\2\0\3\371\10\0"+
    "\1\30\1\0\1\30\1\0\4\30\25\0\6\30\1\u0170"+
    "\14\30\1\0\1\30\2\0\3\30\10\0\1\30\1\0"+
    "\1\u0171\1\0\4\30\25\0\23\30\1\0\1\30\2\0"+
    "\3\30\10\0\1\30\1\0\1\30\1\0\4\30\25\0"+
    "\4\30\1\u0172\1\u0173\1\30\1\u0174\2\30\1\u0175\2\30"+
    "\1\u0176\5\30\1\0\1\30\2\0\3\30\10\0\1\30"+
    "\1\0\1\30\1\0\4\30\25\0\1\u0177\22\30\1\0"+
    "\1\30\2\0\3\30\10\0\1\30\1\0\1\u0178\1\0"+
    "\4\30\25\0\23\30\1\0\1\30\2\0\3\30\10\0"+
    "\1\30\1\0\1\30\1\0\4\30\25\0\6\30\1\u0179"+
    "\14\30\1\0\1\30\2\0\3\30\10\0\1\30\1\0"+
    "\1\30\1\0\4\30\25\0\16\30\1\u017a\4\30\1\0"+
    "\1\30\2\0\3\30\36\0\1\u0105\50\0\1\30\1\0"+
    "\1\30\1\0\4\30\25\0\2\30\1\u017b\20\30\1\0"+
    "\1\30\2\0\3\30\10\0\1\200\1\0\1\200\1\0"+
    "\4\200\25\0\5\200\1\u017c\15\200\1\0\1\200\2\0"+
    "\3\200\12\0\1\u017d\2\0\3\u017d\1\0\1\u0105\4\0"+
    "\1\u017e\16\0\23\u017d\1\0\1\u017d\2\0\3\u017d\3\0"+
    "\1\u017f\14\0\2\u0180\2\0\1\u0180\56\0\1\u0181\3\0"+
    "\1\30\1\0\1\30\1\0\4\30\25\0\10\30\1\u0182"+
    "\12\30\1\0\1\30\2\0\3\30\10\0\1\30\1\0"+
    "\1\30\1\0\4\30\25\0\10\30\1\u0183\12\30\1\0"+
    "\1\30\2\0\3\30\10\0\1\30\1\0\1\30\1\0"+
    "\4\30\25\0\6\30\1\u0184\14\30\1\0\1\30\2\0"+
    "\3\30\10\0\1\30\1\0\1\30\1\0\4\30\25\0"+
    "\2\30\1\u0185\20\30\1\0\1\30\2\0\3\30\10\0"+
    "\1\30\1\0\1\u0186\1\0\4\30\25\0\23\30\1\0"+
    "\1\30\2\0\3\30\10\0\1\30\1\0\1\30\1\0"+
    "\4\30\25\0\16\30\1\u0187\4\30\1\0\1\30\2\0"+
    "\3\30\10\0\1\30\1\0\1\30\1\0\4\30\25\0"+
    "\2\30\1\u0188\20\30\1\0\1\30\2\0\3\30\10\0"+
    "\1\30\1\0\1\30\1\0\4\30\25\0\16\30\1\u0189"+
    "\4\30\1\0\1\30\2\0\3\30\10\0\1\30\1\0"+
    "\1\u018a\1\0\4\30\25\0\23\30\1\0\1\30\2\0"+
    "\3\30\10\0\1\30\1\0\1\30\1\0\4\30\25\0"+
    "\16\30\1\u018b\4\30\1\0\1\30\2\0\3\30\10\0"+
    "\1\30\1\0\1\30\1\0\4\30\25\0\6\30\1\u018c"+
    "\14\30\1\0\1\30\2\0\3\30\10\0\1\30\1\0"+
    "\1\30\1\0\4\30\25\0\16\30\1\u018d\4\30\1\0"+
    "\1\30\2\0\3\30\10\0\1\30\1\0\1\u018e\1\0"+
    "\4\30\25\0\23\30\1\0\1\30\2\0\3\30\10\0"+
    "\1\30\1\0\1\30\1\0\4\30\25\0\1\u018f\22\30"+
    "\1\0\1\30\2\0\3\30\10\0\1\30\1\0\1\u0190"+
    "\1\0\4\30\25\0\23\30\1\0\1\30\2\0\3\30"+
    "\10\0\1\30\1\0\1\30\1\0\4\30\25\0\22\30"+
    "\1\u0191\1\0\1\30\2\0\3\30\10\0\1\30\1\0"+
    "\1\30\1\0\4\30\25\0\12\30\1\u0192\10\30\1\0"+
    "\1\30\2\0\3\30\10\0\1\30\1\0\1\30\1\0"+
    "\4\30\25\0\2\30\1\u0193\20\30\1\0\1\30\2\0"+
    "\3\30\10\0\1\30\1\0\1\30\1\0\4\30\25\0"+
    "\11\30\1\u0194\11\30\1\0\1\30\2\0\3\30\10\0"+
    "\1\30\1\0\1\u0195\1\0\4\30\25\0\23\30\1\0"+
    "\1\30\2\0\3\30\10\0\1\30\1\0\1\30\1\0"+
    "\4\30\25\0\6\30\1\u0196\3\30\1\u0197\10\30\1\0"+
    "\1\30\2\0\3\30\10\0\1\30\1\0\1\30\1\0"+
    "\4\30\25\0\11\30\1\u0198\11\30\1\0\1\30\2\0"+
    "\3\30\10\0\1\30\1\0\1\u0199\1\0\4\30\25\0"+
    "\23\30\1\0\1\30\2\0\3\30\10\0\1\30\1\0"+
    "\1\30\1\0\4\30\25\0\3\30\1\u019a\17\30\1\0"+
    "\1\30\2\0\3\30\10\0\1\30\1\0\1\30\1\0"+
    "\4\30\25\0\7\30\1\u019b\13\30\1\0\1\30\2\0"+
    "\3\30\10\0\1\30\1\0\1\30\1\0\4\30\25\0"+
    "\6\30\1\u019c\14\30\1\0\1\30\2\0\3\30\10\0"+
    "\1\30\1\0\1\30\1\0\4\30\25\0\6\30\1\u019d"+
    "\14\30\1\0\1\30\2\0\3\30\10\0\1\30\1\0"+
    "\1\30\1\0\4\30\25\0\16\30\1\u019e\4\30\1\0"+
    "\1\30\2\0\3\30\10\0\1\30\1\0\1\30\1\0"+
    "\4\30\25\0\6\30\1\u019f\14\30\1\0\1\30\2\0"+
    "\3\30\10\0\1\30\1\0\1\30\1\0\4\30\25\0"+
    "\1\u01a0\22\30\1\0\1\30\2\0\3\30\10\0\1\30"+
    "\1\0\1\30\1\0\2\30\1\u01a1\1\30\25\0\23\30"+
    "\1\0\1\30\2\0\3\30\10\0\1\30\1\0\1\30"+
    "\1\0\4\30\25\0\6\30\1\u01a2\14\30\1\0\1\30"+
    "\2\0\3\30\10\0\1\30\1\0\1\30\1\0\4\30"+
    "\25\0\3\30\1\u01a3\17\30\1\0\1\u01a4\2\0\3\30"+
    "\10\0\1\30\1\0\1\u01a5\1\0\4\30\25\0\23\30"+
    "\1\0\1\30\2\0\3\30\10\0\1\30\1\0\1\30"+
    "\1\0\4\30\25\0\16\30\1\u01a6\4\30\1\0\1\30"+
    "\2\0\3\30\45\0\1\u01a7\101\0\1\u01a8\122\0\1\u01a9"+
    "\51\0\1\u01aa\75\0\1\u01ab\105\0\1\u01ac\74\0\1\u01ad"+
    "\70\0\1\u01ae\110\0\1\u01af\65\0\1\u01b0\40\0\1\30"+
    "\1\0\1\30\1\0\4\30\25\0\2\30\1\u01b1\20\30"+
    "\1\0\1\30\2\0\3\30\10\0\1\30\1\0\1\30"+
    "\1\0\4\30\25\0\5\30\1\u01b2\15\30\1\0\1\30"+
    "\2\0\3\30\10\0\1\30\1\0\1\30\1\0\4\30"+
    "\25\0\5\30\1\u01b3\2\30\1\u01b4\12\30\1\0\1\30"+
    "\2\0\3\30\10\0\1\30\1\0\1\30\1\0\4\30"+
    "\25\0\16\30\1\u01b5\4\30\1\0\1\30\2\0\3\30"+
    "\10\0\1\30\1\0\1\30\1\0\4\30\25\0\2\30"+
    "\1\u01b6\20\30\1\0\1\30\2\0\3\30\10\0\1\30"+
    "\1\0\1\30\1\0\4\30\25\0\5\30\1\u01b7\15\30"+
    "\1\0\1\30\2\0\3\30\10\0\1\30\1\0\1\u01b8"+
    "\1\0\4\30\25\0\23\30\1\0\1\30\2\0\3\30"+
    "\7\0\11\115\1\u0141\3\115\1\u0141\1\316\1\115\1\317"+
    "\1\115\1\320\54\115\11\123\1\u0143\3\123\1\u0143\61\123"+
    "\1\331\1\u01b9\1\331\1\u01b9\1\331\4\u01b9\1\336\2\331"+
    "\1\u01ba\1\336\20\331\23\u01b9\1\331\1\u01b9\2\331\3\u01b9"+
    "\7\331\11\u01bb\1\0\2\u01bb\2\0\61\u01bb\1\331\1\332"+
    "\1\331\1\332\1\331\4\332\1\u01bc\2\331\1\u01bd\1\u01bc"+
    "\20\331\23\332\1\331\1\332\2\331\3\332\12\331\1\332"+
    "\2\331\3\332\1\u01bc\2\331\1\333\1\u01bc\20\331\23\332"+
    "\1\331\1\332\2\331\3\332\7\331\1\333\1\u014a\1\333"+
    "\1\u014a\1\333\4\u014a\1\u01bc\2\333\1\u01bd\1\u01bc\20\333"+
    "\23\u014a\1\333\1\u014a\2\333\3\u014a\7\333\11\334\1\u01bc"+
    "\2\334\1\u014f\1\u01bc\72\334\1\336\2\334\1\u014f\1\336"+
    "\61\334\11\u014f\1\u01bc\3\u014f\1\u01bc\61\u014f\1\340\1\u0150"+
    "\1\340\1\u0150\1\340\4\u0150\1\u014d\2\340\1\u01be\1\u014d"+
    "\20\340\23\u0150\1\340\1\u0150\2\340\3\u0150\7\340\3\u0151"+
    "\1\341\2\u0151\3\341\1\u0148\2\u0151\1\u014b\1\u0148\20\u0151"+
    "\23\341\1\u0151\1\341\2\u0151\3\341\7\u0151\40\0\1\u01bf"+
    "\6\0\1\u01c0\73\0\1\u01c1\102\0\1\u01c2\72\0\1\u01c3"+
    "\101\0\1\u01c4\107\0\1\u01c5\66\0\1\u01c6\6\0\1\u01c7"+
    "\63\0\1\u01c8\73\0\1\u01c9\77\0\1\u01ca\100\0\1\u01cb"+
    "\71\0\1\u01cc\100\0\1\u01cd\12\0\1\u01ce\25\0\1\u01cf"+
    "\152\0\1\u01d0\63\0\1\u01d1\35\0\1\u01d2\134\0\1\u01d3"+
    "\75\0\1\u01d4\45\0\1\u01d5\130\0\1\u01d6\5\0\1\u01d7"+
    "\65\0\1\u01d8\76\0\1\u01d9\77\0\1\u01da\7\0\1\u01db"+
    "\73\0\1\u01dc\110\0\1\u01dd\57\0\1\u01de\76\0\1\u01df"+
    "\50\0\1\u016e\3\0\1\u016e\62\0\1\30\1\0\1\30"+
    "\1\0\4\30\25\0\3\30\1\u01e0\17\30\1\0\1\30"+
    "\2\0\3\30\10\0\1\30\1\0\1\u01e1\1\0\4\30"+
    "\25\0\23\30\1\0\1\30\2\0\3\30\10\0\1\30"+
    "\1\0\1\30\1\0\4\30\25\0\7\30\1\u01e2\13\30"+
    "\1\0\1\30\2\0\3\30\10\0\1\30\1\0\1\30"+
    "\1\0\4\30\25\0\1\u01e3\22\30\1\0\1\30\2\0"+
    "\3\30\10\0\1\30\1\0\1\30\1\0\4\30\25\0"+
    "\15\30\1\u01e4\5\30\1\0\1\30\2\0\3\30\10\0"+
    "\1\30\1\0\1\30\1\0\4\30\25\0\14\30\1\u01e5"+
    "\6\30\1\0\1\30\2\0\3\30\10\0\1\30\1\0"+
    "\1\30\1\0\4\30\25\0\5\30\1\u01e6\15\30\1\0"+
    "\1\30\2\0\3\30\10\0\1\30\1\0\1\30\1\0"+
    "\4\30\25\0\13\30\1\u01e7\7\30\1\0\1\30\2\0"+
    "\3\30\10\0\1\30\1\0\1\30\1\0\4\30\25\0"+
    "\17\30\1\u01e8\3\30\1\0\1\30\2\0\3\30\10\0"+
    "\1\200\1\0\1\200\1\0\4\200\25\0\12\200\1\u01e9"+
    "\10\200\1\0\1\200\2\0\3\200\10\0\1\u017d\1\0"+
    "\1\u017d\1\0\4\u017d\1\u01ea\3\0\1\u01eb\20\0\23\u017d"+
    "\1\0\1\u017d\2\0\3\u017d\12\0\1\u01ec\2\0\3\u01ec"+
    "\25\0\23\u01ec\1\0\1\u01ec\2\0\3\u01ec\12\0\1\u01ed"+
    "\2\0\3\u01ed\25\0\23\u01ed\1\0\1\u01ed\2\0\3\u01ed"+
    "\20\0\2\u0180\2\0\1\u0180\157\0\1\u01ee\1\0\1\30"+
    "\1\0\1\30\1\0\4\30\25\0\1\30\1\u01ef\21\30"+
    "\1\0\1\30\2\0\3\30\10\0\1\30\1\0\1\30"+
    "\1\0\4\30\25\0\5\30\1\u01f0\15\30\1\0\1\30"+
    "\2\0\3\30\10\0\1\30\1\0\1\30\1\0\4\30"+
    "\25\0\1\30\1\u01f1\21\30\1\0\1\30\2\0\3\30"+
    "\10\0\1\30\1\0\1\30\1\0\4\30\25\0\13\30"+
    "\1\u01f2\7\30\1\0\1\30\2\0\3\30\10\0\1\30"+
    "\1\0\1\30\1\0\4\30\25\0\12\30\1\u01f3\10\30"+
    "\1\0\1\30\2\0\3\30\10\0\1\30\1\0\1\30"+
    "\1\0\4\30\25\0\10\30\1\u01f4\12\30\1\0\1\30"+
    "\2\0\3\30\10\0\1\30\1\0\1\30\1\0\4\30"+
    "\25\0\2\30\1\u01f5\20\30\1\0\1\30\2\0\3\30"+
    "\10\0\1\30\1\0\1\30\1\0\4\30\25\0\1\30"+
    "\1\u01f6\21\30\1\0\1\30\2\0\3\30\10\0\1\30"+
    "\1\0\1\30\1\0\4\30\25\0\10\30\1\u01f7\12\30"+
    "\1\0\1\30\2\0\3\30\10\0\1\30\1\0\1\30"+
    "\1\0\4\30\25\0\2\30\1\u01f8\20\30\1\0\1\30"+
    "\2\0\3\30\10\0\1\30\1\0\1\u01f9\1\0\4\30"+
    "\25\0\23\30\1\0\1\30\2\0\3\30\10\0\1\30"+
    "\1\0\1\30\1\0\4\30\25\0\15\30\1\u01fa\5\30"+
    "\1\0\1\30\2\0\3\30\10\0\1\30\1\0\1\30"+
    "\1\0\4\30\25\0\2\30\1\u01fb\20\30\1\0\1\30"+
    "\2\0\3\30\10\0\1\30\1\0\1\u01fc\1\0\4\30"+
    "\25\0\23\30\1\0\1\30\2\0\3\30\10\0\1\30"+
    "\1\0\1\30\1\0\4\30\25\0\16\30\1\u01fd\4\30"+
    "\1\0\1\30\2\0\3\30\10\0\1\30\1\0\1\30"+
    "\1\0\4\30\25\0\6\30\1\u01fe\14\30\1\0\1\30"+
    "\2\0\3\30\10\0\1\30\1\0\1\30\1\0\4\30"+
    "\25\0\6\30\1\u01ff\14\30\1\0\1\30\2\0\3\30"+
    "\10\0\1\30\1\0\1\30\1\0\4\30\25\0\5\30"+
    "\1\u0200\15\30\1\0\1\30\2\0\3\30\10\0\1\30"+
    "\1\0\1\30\1\0\4\30\25\0\6\30\1\u0201\14\30"+
    "\1\0\1\30\2\0\3\30\10\0\1\30\1\0\1\30"+
    "\1\0\4\30\25\0\14\30\1\u0202\6\30\1\0\1\30"+
    "\2\0\3\30\10\0\1\30\1\0\1\u0203\1\0\4\30"+
    "\25\0\23\30\1\0\1\30\2\0\3\30\10\0\1\30"+
    "\1\0\1\30\1\0\4\30\25\0\5\30\1\u0204\15\30"+
    "\1\0\1\30\2\0\3\30\10\0\1\30\1\0\1\30"+
    "\1\0\4\30\25\0\11\30\1\u0205\11\30\1\0\1\30"+
    "\2\0\3\30\10\0\1\30\1\0\1\u0206\1\0\4\30"+
    "\25\0\23\30\1\0\1\30\2\0\3\30\10\0\1\30"+
    "\1\0\1\30\1\0\4\30\25\0\2\30\1\u0207\20\30"+
    "\1\0\1\30\2\0\3\30\10\0\1\30\1\0\1\u0208"+
    "\1\0\4\30\25\0\23\30\1\0\1\30\2\0\3\30"+
    "\10\0\1\30\1\0\1\30\1\0\4\30\25\0\6\30"+
    "\1\u0209\14\30\1\0\1\30\2\0\3\30\10\0\1\30"+
    "\1\0\1\30\1\0\4\30\25\0\2\30\1\u020a\20\30"+
    "\1\0\1\30\2\0\3\30\10\0\1\30\1\0\1\30"+
    "\1\0\4\30\25\0\3\30\1\u020b\17\30\1\0\1\30"+
    "\2\0\3\30\10\0\1\30\1\0\1\30\1\0\4\30"+
    "\25\0\5\30\1\u020c\15\30\1\0\1\30\2\0\3\30"+
    "\63\0\1\u020d\62\0\1\u020e\41\0\1\u020f\147\0\1\u0210"+
    "\62\0\1\u0211\45\0\1\u0212\72\0\1\u0213\6\0\1\u0210"+
    "\51\0\1\u0214\52\0\1\u0215\41\0\1\u0215\136\0\1\u0216"+
    "\34\0\1\30\1\0\1\30\1\0\4\30\25\0\22\30"+
    "\1\u0217\1\0\1\30\2\0\3\30\10\0\1\30\1\0"+
    "\1\30\1\0\4\30\25\0\1\30\1\u0218\21\30\1\0"+
    "\1\30\2\0\3\30\10\0\1\30\1\0\1\30\1\0"+
    "\4\30\25\0\16\30\1\u0219\4\30\1\0\1\30\2\0"+
    "\3\30\10\0\1\30\1\0\1\30\1\0\4\30\25\0"+
    "\3\30\1\u021a\17\30\1\0\1\30\2\0\3\30\10\0"+
    "\1\30\1\0\1\30\1\0\4\30\25\0\2\30\1\u021b"+
    "\20\30\1\0\1\30\2\0\3\30\10\0\1\30\1\0"+
    "\1\30\1\0\4\30\25\0\16\30\1\u021c\4\30\1\0"+
    "\1\30\2\0\3\30\10\0\1\30\1\0\1\30\1\0"+
    "\4\30\25\0\3\30\1\u021d\17\30\1\0\1\30\2\0"+
    "\3\30\10\0\1\30\1\0\1\30\1\0\4\30\25\0"+
    "\6\30\1\u021e\14\30\1\0\1\30\2\0\3\30\7\0"+
    "\1\342\1\u0145\1\342\1\u0145\1\342\4\u0145\1\u014d\2\342"+
    "\1\u01be\1\u014d\20\342\23\u0145\1\342\1\u0145\2\342\3\u0145"+
    "\7\342\3\333\1\u014a\2\333\3\u014a\1\336\3\333\1\336"+
    "\20\333\23\u014a\1\333\1\u014a\2\333\3\u014a\7\333\3\u0146"+
    "\1\u021f\2\u0146\3\u021f\25\u0146\23\u021f\1\u0146\1\u021f\2\u0146"+
    "\3\u021f\7\u0146\3\333\1\u014a\2\333\3\u014a\1\u01bc\3\333"+
    "\1\u01bc\20\333\23\u014a\1\333\1\u014a\2\333\3\u014a\7\333"+
    "\3\331\1\332\2\331\3\332\1\336\2\331\1\333\1\336"+
    "\20\331\23\332\1\331\1\332\2\331\3\332\7\331\60\0"+
    "\1\u0220\21\0\1\u0221\141\0\1\u0222\74\0\1\u0223\104\0"+
    "\1\u0224\27\0\1\u0225\76\0\1\u0226\142\0\1\u0227\66\0"+
    "\1\u0228\42\0\1\u0229\131\0\1\u022a\76\0\1\u022b\76\0"+
    "\1\u022c\76\0\1\u022d\100\0\1\u022e\41\0\1\u022f\143\0"+
    "\1\u0230\77\0\1\u0231\30\0\1\u0232\142\0\1\u0233\73\0"+
    "\1\u0234\111\0\1\u0235\74\0\1\u0236\24\0\1\u0237\102\0"+
    "\1\u0238\146\0\1\u0239\57\0\1\u023a\113\0\1\u023b\73\0"+
    "\1\u023c\67\0\1\u023d\103\0\1\u023e\27\0\1\30\1\0"+
    "\1\30\1\0\4\30\25\0\4\30\1\u023f\16\30\1\0"+
    "\1\30\2\0\3\30\10\0\1\30\1\0\1\30\1\0"+
    "\4\30\25\0\11\30\1\u0240\11\30\1\0\1\30\2\0"+
    "\3\30\10\0\1\30\1\0\1\30\1\0\4\30\25\0"+
    "\1\30\1\u0241\21\30\1\0\1\30\2\0\3\30\10\0"+
    "\1\30\1\0\1\30\1\0\4\30\25\0\5\30\1\u0242"+
    "\15\30\1\0\1\30\2\0\3\30\10\0\1\30\1\0"+
    "\1\30\1\0\4\30\25\0\5\30\1\u0243\15\30\1\0"+
    "\1\30\2\0\3\30\10\0\1\30\1\0\1\30\1\0"+
    "\4\30\25\0\7\30\1\u0244\13\30\1\0\1\30\2\0"+
    "\3\30\20\0\1\u01ea\66\0\1\u01ec\1\0\1\u01ec\1\0"+
    "\4\u01ec\6\0\1\u0245\16\0\23\u01ec\1\0\1\u01ec\2\0"+
    "\3\u01ec\10\0\1\u01ed\1\0\1\u01ed\1\0\4\u01ed\25\0"+
    "\23\u01ed\1\0\1\u01ed\2\0\3\u01ed\3\0\1\u0245\30\0"+
    "\1\u0246\52\0\1\30\1\0\1\30\1\0\4\30\25\0"+
    "\3\30\1\u0247\17\30\1\0\1\30\2\0\3\30\10\0"+
    "\1\30\1\0\1\30\1\0\4\30\25\0\1\30\1\u0248"+
    "\21\30\1\0\1\30\2\0\3\30\10\0\1\30\1\0"+
    "\1\30\1\0\4\30\25\0\2\30\1\u0249\20\30\1\0"+
    "\1\30\2\0\3\30\10\0\1\30\1\0\1\30\1\0"+
    "\4\30\25\0\21\30\1\u024a\1\30\1\0\1\30\2\0"+
    "\3\30\10\0\1\30\1\0\1\30\1\0\4\30\25\0"+
    "\16\30\1\u024b\4\30\1\0\1\30\2\0\3\30\10\0"+
    "\1\30\1\0\1\30\1\0\4\30\25\0\1\30\1\u024c"+
    "\21\30\1\0\1\30\2\0\3\30\10\0\1\30\1\0"+
    "\1\30\1\0\4\30\25\0\7\30\1\u024d\13\30\1\0"+
    "\1\30\2\0\3\30\10\0\1\30\1\0\1\30\1\0"+
    "\4\30\25\0\4\30\1\u024e\16\30\1\0\1\30\2\0"+
    "\3\30\10\0\1\30\1\0\1\30\1\0\4\30\25\0"+
    "\3\30\1\u024f\17\30\1\0\1\30\2\0\3\30\10\0"+
    "\1\30\1\0\1\30\1\0\4\30\25\0\22\30\1\u0250"+
    "\1\0\1\30\2\0\3\30\10\0\1\30\1\0\1\30"+
    "\1\0\4\30\25\0\11\30\1\u0251\11\30\1\0\1\30"+
    "\2\0\3\30\10\0\1\30\1\0\1\30\1\0\4\30"+
    "\25\0\5\30\1\u0252\15\30\1\0\1\30\2\0\3\30"+
    "\10\0\1\30\1\0\1\30\1\0\4\30\25\0\3\30"+
    "\1\u0253\17\30\1\0\1\30\2\0\3\30\10\0\1\30"+
    "\1\0\1\30\1\0\4\30\25\0\11\30\1\u0254\11\30"+
    "\1\0\1\30\2\0\3\30\10\0\1\30\1\0\1\30"+
    "\1\0\4\30\25\0\14\30\1\u0255\6\30\1\0\1\30"+
    "\2\0\3\30\10\0\1\30\1\0\1\30\1\0\4\30"+
    "\25\0\16\30\1\u0256\4\30\1\0\1\30\2\0\3\30"+
    "\10\0\1\30\1\0\1\30\1\0\4\30\25\0\11\30"+
    "\1\u0257\11\30\1\0\1\30\2\0\3\30\10\0\1\30"+
    "\1\0\1\30\1\0\4\30\25\0\6\30\1\u0258\14\30"+
    "\1\0\1\30\2\0\3\30\10\0\1\30\1\0\1\30"+
    "\1\0\4\30\25\0\6\30\1\u0259\14\30\1\0\1\30"+
    "\2\0\3\30\10\0\1\30\1\0\1\30\1\0\4\30"+
    "\25\0\11\30\1\u025a\11\30\1\0\1\30\2\0\3\30"+
    "\12\0\1\u025b\6\0\1\u0210\51\0\1\u0214\51\0\1\u0211"+
    "\106\0\1\u0215\41\0\1\u0210\51\0\1\u0214\63\0\1\u0210"+
    "\101\0\1\u025c\100\0\1\u025d\64\0\1\u0210\73\0\1\u025e"+
    "\36\0\1\30\1\0\1\u025f\1\0\4\30\25\0\23\30"+
    "\1\0\1\30\2\0\3\30\10\0\1\30\1\0\1\30"+
    "\1\0\4\30\25\0\23\30\1\0\1\30\2\0\1\30"+
    "\1\u0260\1\30\10\0\1\30\1\0\1\u0261\1\0\4\30"+
    "\25\0\23\30\1\0\1\30\2\0\3\30\10\0\1\30"+
    "\1\0\1\30\1\0\4\30\25\0\11\30\1\u0262\11\30"+
    "\1\0\1\30\2\0\3\30\10\0\1\30\1\0\1\30"+
    "\1\0\4\30\25\0\12\30\1\u0263\10\30\1\0\1\30"+
    "\2\0\3\30\10\0\1\30\1\0\1\30\1\0\4\30"+
    "\25\0\6\30\1\u0264\14\30\1\0\1\30\2\0\3\30"+
    "\10\0\1\30\1\0\1\u0265\1\0\4\30\25\0\23\30"+
    "\1\0\1\30\2\0\3\30\10\0\1\30\1\0\1\30"+
    "\1\0\4\30\25\0\14\30\1\u0266\6\30\1\0\1\30"+
    "\2\0\3\30\7\0\1\u01bb\1\u0267\1\u01bb\1\u0267\1\u01bb"+
    "\4\u0267\1\336\2\u01bb\1\u0268\1\336\20\u01bb\23\u0267\1\u01bb"+
    "\1\u0267\2\u01bb\3\u0267\7\u01bb\57\0\1\u0269\76\0\1\u026a"+
    "\56\0\1\u026b\76\0\1\u026c\75\0\1\u026d\110\0\1\u026e"+
    "\76\0\1\u026f\31\0\1\u0270\132\0\1\u0271\76\0\1\u0272"+
    "\76\0\1\u0273\112\0\1\u0274\77\0\1\u0275\72\0\1\u0276"+
    "\65\0\1\u0277\115\0\1\u0278\23\0\1\u0279\136\0\1\u027a"+
    "\73\0\1\u027b\77\0\1\u027c\75\0\1\u027d\41\0\1\u027e"+
    "\153\0\1\u027f\56\0\1\u0280\74\0\1\u0281\107\0\1\u0282"+
    "\72\0\1\u0283\34\0\1\30\1\0\1\30\1\0\4\30"+
    "\25\0\12\30\1\u0284\10\30\1\0\1\30\2\0\3\30"+
    "\10\0\1\30\1\0\1\30\1\0\4\30\25\0\16\30"+
    "\1\u0285\4\30\1\0\1\30\2\0\3\30\10\0\1\30"+
    "\1\0\1\u0286\1\0\4\30\25\0\23\30\1\0\1\30"+
    "\2\0\3\30\10\0\1\30\1\0\1\30\1\0\4\30"+
    "\25\0\6\30\1\u0287\14\30\1\0\1\30\2\0\3\30"+
    "\10\0\1\30\1\0\1\30\1\0\4\30\25\0\16\30"+
    "\1\u0288\4\30\1\0\1\30\2\0\3\30\20\0\1\u01ea"+
    "\3\0\1\u01eb\62\0\1\30\1\0\1\u0289\1\0\4\30"+
    "\25\0\23\30\1\0\1\30\2\0\3\30\10\0\1\30"+
    "\1\0\1\30\1\0\4\30\25\0\11\30\1\u028a\11\30"+
    "\1\0\1\30\2\0\3\30\10\0\1\30\1\0\1\30"+
    "\1\0\4\30\25\0\2\30\1\u028b\20\30\1\0\1\30"+
    "\2\0\3\30\10\0\1\30\1\0\1\30\1\0\4\30"+
    "\25\0\6\30\1\u028c\14\30\1\0\1\30\2\0\3\30"+
    "\10\0\1\30\1\0\1\u028d\1\0\4\30\25\0\23\30"+
    "\1\0\1\30\2\0\3\30\10\0\1\30\1\0\1\30"+
    "\1\0\4\30\25\0\2\30\1\u028e\20\30\1\0\1\30"+
    "\2\0\3\30\10\0\1\30\1\0\1\u028f\1\0\4\30"+
    "\25\0\23\30\1\0\1\30\2\0\3\30\10\0\1\30"+
    "\1\0\1\30\1\0\4\30\25\0\11\30\1\u0290\11\30"+
    "\1\0\1\30\2\0\3\30\10\0\1\30\1\0\1\u0291"+
    "\1\0\4\30\25\0\23\30\1\0\1\30\2\0\3\30"+
    "\10\0\1\30\1\0\1\30\1\0\4\30\25\0\14\30"+
    "\1\u0292\6\30\1\0\1\30\2\0\3\30\10\0\1\30"+
    "\1\0\1\30\1\0\4\30\25\0\1\u0293\22\30\1\0"+
    "\1\30\2\0\3\30\10\0\1\30\1\0\1\30\1\0"+
    "\4\30\25\0\10\30\1\u0294\12\30\1\0\1\30\2\0"+
    "\3\30\10\0\1\30\1\0\1\30\1\0\4\30\25\0"+
    "\6\30\1\u0295\14\30\1\0\1\30\2\0\3\30\10\0"+
    "\1\30\1\0\1\u0296\1\0\4\30\25\0\23\30\1\0"+
    "\1\30\2\0\3\30\47\0\1\u0297\41\0\1\u0210\76\0"+
    "\1\u0298\151\0\1\u0210\21\0\1\30\1\0\1\30\1\0"+
    "\4\30\25\0\12\30\1\u0299\10\30\1\0\1\30\2\0"+
    "\3\30\10\0\1\30\1\0\1\30\1\0\4\30\25\0"+
    "\23\30\1\0\1\30\2\0\1\30\1\u029a\1\30\10\0"+
    "\1\30\1\0\1\30\1\0\4\30\25\0\23\30\1\0"+
    "\1\30\2\0\1\30\1\u029b\1\30\10\0\1\30\1\0"+
    "\1\30\1\0\4\30\25\0\6\30\1\u029c\14\30\1\0"+
    "\1\30\2\0\3\30\10\0\1\30\1\0\1\30\1\0"+
    "\4\30\25\0\12\30\1\u029d\10\30\1\0\1\30\2\0"+
    "\3\30\10\0\1\30\1\0\1\30\1\0\4\30\25\0"+
    "\23\30\1\0\1\30\2\0\1\30\1\u029e\1\30\10\0"+
    "\1\30\1\0\1\30\1\0\4\30\25\0\23\30\1\0"+
    "\1\30\2\0\1\30\1\u029f\1\30\10\0\1\30\1\0"+
    "\1\30\1\0\4\30\25\0\1\u02a0\22\30\1\0\1\30"+
    "\2\0\3\30\7\0\1\u0146\1\u021f\1\u0146\1\u021f\1\u0146"+
    "\4\u021f\1\u014d\2\u0146\1\u02a1\1\u014d\20\u0146\23\u021f\1\u0146"+
    "\1\u021f\2\u0146\3\u021f\7\u0146\11\0\1\336\3\0\1\336"+
    "\135\0\1\u02a2\66\0\1\u02a3\73\0\1\u02a4\75\0\1\u02a5"+
    "\75\0\1\u02a6\107\0\1\u02a7\105\0\1\u02a8\66\0\1\u02a9"+
    "\70\0\1\u02aa\40\0\1\u02ab\136\0\1\u02ac\103\0\1\u02ad"+
    "\64\0\1\u02ae\103\0\1\u02af\71\0\1\u02b0\107\0\1\u02b1"+
    "\76\0\1\u02b2\77\0\1\u02b3\102\0\1\u02b4\61\0\1\u02b5"+
    "\115\0\1\u02b6\62\0\1\u02b7\72\0\1\u02b8\41\0\1\30"+
    "\1\0\1\30\1\0\4\30\25\0\2\30\1\u02b9\20\30"+
    "\1\0\1\30\2\0\3\30\10\0\1\30\1\0\1\30"+
    "\1\0\4\30\25\0\2\30\1\u02ba\20\30\1\0\1\30"+
    "\2\0\3\30\10\0\1\30\1\0\1\30\1\0\4\30"+
    "\25\0\11\30\1\u02bb\11\30\1\0\1\30\2\0\3\30"+
    "\10\0\1\30\1\0\1\u02bc\1\0\4\30\25\0\23\30"+
    "\1\0\1\30\2\0\3\30\10\0\1\30\1\0\1\30"+
    "\1\0\4\30\25\0\6\30\1\u02bd\14\30\1\0\1\30"+
    "\2\0\3\30\10\0\1\30\1\0\1\30\1\0\4\30"+
    "\25\0\11\30\1\u02be\11\30\1\0\1\30\2\0\3\30"+
    "\10\0\1\30\1\0\1\30\1\0\4\30\25\0\11\30"+
    "\1\u02bf\11\30\1\0\1\30\2\0\3\30\10\0\1\30"+
    "\1\0\1\30\1\0\4\30\25\0\23\30\1\0\1\30"+
    "\2\0\1\30\1\u02c0\1\30\10\0\1\30\1\0\1\u02c1"+
    "\1\0\4\30\25\0\23\30\1\0\1\30\2\0\3\30"+
    "\10\0\1\30\1\0\1\30\1\0\4\30\25\0\3\30"+
    "\1\u02c2\17\30\1\0\1\30\2\0\3\30\10\0\1\30"+
    "\1\0\1\30\1\0\4\30\25\0\3\30\1\u02c3\17\30"+
    "\1\0\1\30\2\0\3\30\10\0\1\30\1\0\1\u02c4"+
    "\1\0\4\30\25\0\23\30\1\0\1\30\2\0\3\30"+
    "\10\0\1\30\1\0\1\u02c5\1\0\4\30\25\0\23\30"+
    "\1\0\1\30\2\0\3\30\50\0\1\u0210\74\0\1\u0210"+
    "\40\0\1\30\1\0\1\30\1\0\4\30\25\0\21\30"+
    "\1\u02c6\1\30\1\0\1\30\2\0\3\30\10\0\1\30"+
    "\1\0\1\30\1\0\4\30\25\0\23\30\1\0\1\30"+
    "\2\0\1\30\1\u02c7\1\30\10\0\1\30\1\0\1\30"+
    "\1\0\4\30\25\0\5\30\1\u02c8\15\30\1\0\1\30"+
    "\2\0\3\30\10\0\1\30\1\0\1\30\1\0\4\30"+
    "\25\0\23\30\1\0\1\30\2\0\1\30\1\u02c9\1\30"+
    "\10\0\1\30\1\0\1\30\1\0\4\30\25\0\11\30"+
    "\1\u02ca\11\30\1\0\1\30\2\0\3\30\10\0\1\30"+
    "\1\0\1\30\1\0\4\30\25\0\23\30\1\0\1\30"+
    "\2\0\1\30\1\u02cb\1\30\10\0\1\30\1\0\1\30"+
    "\1\0\4\30\25\0\4\30\1\u02cc\16\30\1\0\1\30"+
    "\2\0\3\30\7\0\11\u01bb\1\336\2\u01bb\1\0\1\336"+
    "\61\u01bb\3\0\1\u02cd\136\0\1\u02ce\102\0\1\u02cf\67\0"+
    "\1\u02d0\76\0\1\u02d1\76\0\1\u02d2\76\0\1\u02d3\104\0"+
    "\1\u02d4\106\0\1\u02d5\57\0\1\u02d6\121\0\1\u02d7\71\0"+
    "\1\u02d8\24\0\1\u02d9\137\0\1\u02da\35\0\1\u02db\134\0"+
    "\1\u02dc\36\0\1\30\1\0\1\30\1\0\4\30\25\0"+
    "\1\30\1\u02dd\21\30\1\0\1\30\2\0\3\30\10\0"+
    "\1\30\1\0\1\30\1\0\4\30\25\0\11\30\1\u02de"+
    "\11\30\1\0\1\30\2\0\3\30\10\0\1\30\1\0"+
    "\1\30\1\0\4\30\25\0\14\30\1\u02df\6\30\1\0"+
    "\1\30\2\0\3\30\10\0\1\30\1\0\1\u02e0\1\0"+
    "\4\30\25\0\23\30\1\0\1\30\2\0\3\30\10\0"+
    "\1\30\1\0\1\u02e1\1\0\4\30\25\0\23\30\1\0"+
    "\1\30\2\0\3\30\10\0\1\30\1\0\1\30\1\0"+
    "\4\30\25\0\1\u02e2\22\30\1\0\1\30\2\0\3\30"+
    "\10\0\1\30\1\0\1\30\1\0\4\30\25\0\1\u02e3"+
    "\22\30\1\0\1\30\2\0\3\30\10\0\1\30\1\0"+
    "\1\30\1\0\4\30\25\0\6\30\1\u02e4\14\30\1\0"+
    "\1\30\2\0\3\30\10\0\1\30\1\0\1\30\1\0"+
    "\4\30\25\0\4\30\1\u02e5\16\30\1\0\1\30\2\0"+
    "\3\30\10\0\1\30\1\0\1\30\1\0\4\30\25\0"+
    "\2\30\1\u02e6\20\30\1\0\1\30\2\0\3\30\10\0"+
    "\1\30\1\0\1\30\1\0\4\30\25\0\1\u02e7\22\30"+
    "\1\0\1\30\2\0\3\30\10\0\1\30\1\0\1\30"+
    "\1\0\4\30\25\0\23\30\1\0\1\30\2\0\1\30"+
    "\1\u02e8\1\30\10\0\1\30\1\0\1\30\1\0\4\30"+
    "\25\0\1\u02e9\22\30\1\0\1\30\2\0\3\30\10\0"+
    "\1\30\1\0\1\30\1\0\4\30\25\0\23\30\1\0"+
    "\1\30\2\0\1\30\1\u02ea\1\30\45\0\1\u02eb\104\0"+
    "\1\u02ec\101\0\1\u02ed\73\0\1\u02ee\106\0\1\u02ef\76\0"+
    "\1\u02f0\61\0\1\u02f1\111\0\1\u02f2\75\0\1\u02f3\65\0"+
    "\1\u02f4\76\0\1\u02f5\107\0\1\u02f6\26\0\1\30\1\0"+
    "\1\u02f7\1\0\4\30\25\0\23\30\1\0\1\30\2\0"+
    "\3\30\10\0\1\30\1\0\1\30\1\0\4\30\25\0"+
    "\14\30\1\u02f8\6\30\1\0\1\30\2\0\3\30\10\0"+
    "\1\30\1\0\1\30\1\0\4\30\25\0\3\30\1\u02f9"+
    "\17\30\1\0\1\30\2\0\3\30\10\0\1\30\1\0"+
    "\1\30\1\0\4\30\25\0\7\30\1\u02fa\13\30\1\0"+
    "\1\30\2\0\3\30\10\0\1\30\1\0\1\30\1\0"+
    "\4\30\25\0\12\30\1\u02fb\10\30\1\0\1\30\2\0"+
    "\3\30\10\0\1\30\1\0\1\30\1\0\4\30\25\0"+
    "\11\30\1\u02fc\11\30\1\0\1\30\2\0\3\30\10\0"+
    "\1\30\1\0\1\30\1\0\4\30\25\0\3\30\1\u02fd"+
    "\17\30\1\0\1\30\2\0\3\30\10\0\1\30\1\0"+
    "\1\30\1\0\4\30\25\0\22\30\1\u02fe\1\0\1\30"+
    "\2\0\3\30\10\0\1\30\1\0\1\30\1\0\4\30"+
    "\25\0\23\30\1\0\1\30\2\0\1\30\1\u02ff\1\30"+
    "\50\0\1\u0300\40\0\1\u0301\76\0\1\u0302\142\0\1\u0303"+
    "\73\0\1\u0304\71\0\1\u0305\115\0\1\u0306\21\0\1\30"+
    "\1\0\1\30\1\0\4\30\25\0\11\30\1\u0307\11\30"+
    "\1\0\1\30\2\0\3\30\10\0\1\30\1\0\1\u0308"+
    "\1\0\4\30\25\0\23\30\1\0\1\30\2\0\3\30"+
    "\10\0\1\30\1\0\1\30\1\0\4\30\25\0\23\30"+
    "\1\0\1\30\2\0\1\30\1\u0309\1\30\10\0\1\30"+
    "\1\0\1\30\1\0\4\30\25\0\21\30\1\u030a\1\30"+
    "\1\0\1\30\2\0\3\30\51\0\1\u030b\37\0\1\u030c"+
    "\76\0\1\u030d\74\0\1\30\1\0\1\u030e\1\0\4\30"+
    "\25\0\23\30\1\0\1\30\2\0\3\30\10\0\1\30"+
    "\1\0\1\30\1\0\4\30\25\0\23\30\1\0\1\30"+
    "\2\0\1\30\1\u030f\1\30\10\0\1\30\1\0\1\30"+
    "\1\0\4\30\25\0\23\30\1\0\1\30\2\0\1\30"+
    "\1\u0310\1\30\10\0\1\30\1\0\1\30\1\0\4\30"+
    "\25\0\5\30\1\u0311\15\30\1\0\1\30\2\0\3\30"+
    "\10\0\1\30\1\0\1\30\1\0\4\30\25\0\23\30"+
    "\1\0\1\30\2\0\1\30\1\u0312\1\30\10\0\1\30"+
    "\1\0\1\30\1\0\4\30\25\0\16\30\1\u0313\4\30"+
    "\1\0\1\30\2\0\3\30\10\0\1\30\1\0\1\u0314"+
    "\1\0\4\30\25\0\23\30\1\0\1\30\2\0\3\30"+
    "\10\0\1\30\1\0\1\30\1\0\4\30\25\0\1\30"+
    "\1\u0315\21\30\1\0\1\30\2\0\3\30\7\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[39564];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\10\4\0\2\1\10\0\1\11\11\1\2\11\2\1"+
    "\3\11\35\1\1\11\1\1\1\11\2\1\1\11\6\1"+
    "\1\11\15\1\1\0\1\1\1\11\3\1\1\11\1\1"+
    "\1\11\2\1\1\11\2\1\1\11\3\1\1\11\1\1"+
    "\1\11\1\1\1\11\1\1\1\0\3\1\1\11\6\1"+
    "\1\11\2\0\1\1\1\0\2\1\2\0\1\11\2\0"+
    "\51\1\1\11\1\1\12\0\1\1\4\0\2\1\3\11"+
    "\1\1\3\0\1\1\1\11\1\1\1\11\3\0\10\1"+
    "\5\0\1\11\4\0\1\11\2\1\2\11\20\0\1\11"+
    "\1\0\10\1\1\0\2\1\2\0\50\1\12\0\7\1"+
    "\2\11\1\1\1\11\1\1\3\0\1\1\4\0\1\1"+
    "\40\0\1\11\1\0\15\1\3\0\1\1\1\0\45\1"+
    "\12\0\10\1\3\0\1\11\25\0\1\11\14\0\1\11"+
    "\12\1\1\11\1\1\3\0\36\1\7\0\1\11\2\0"+
    "\10\1\7\0\1\1\1\11\3\0\1\11\4\0\1\11"+
    "\5\0\1\11\10\0\6\1\2\0\24\1\4\0\10\1"+
    "\16\0\1\11\3\0\1\11\5\0\1\11\2\0\1\11"+
    "\1\0\23\1\2\0\10\1\3\0\1\11\1\0\2\11"+
    "\3\0\1\11\1\0\1\11\3\0\1\1\2\0\1\11"+
    "\2\0\1\11\1\0\24\1\1\11\13\0\1\11\1\0"+
    "\2\11\16\1\1\0\1\11\2\0\2\11\2\0\1\11"+
    "\2\0\1\11\11\1\2\11\2\0\2\11\1\0\4\1"+
    "\3\11\10\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[789];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
    public PhpLexer(int state){
        initialize(state);
    }
    public void reset(char array[], int offset, int length) {
        this.zzBuffer = array;
        this.zzCurrentPos = offset;
        this.zzMarkedPos = offset;
        this.zzPushbackPos = offset;
        this.yychar = offset;
        this.zzEndRead = offset + length;
        this.zzStartRead = offset;
        this.zzAtEOF = zzCurrentPos >= zzEndRead;
        this.firstPos = offset;
    }

    public void reset(java.io.Reader  reader, char[] buffer, int[] parameters){
    	this.zzReader = reader;
    	this.zzBuffer = buffer;
    	this.zzMarkedPos = parameters[0];
    	this.zzPushbackPos = parameters[1];
    	this.zzCurrentPos = parameters[2];
    	this.zzStartRead = parameters[3];
    	this.zzEndRead = parameters[4];
    	this.yyline = parameters[5];  
    	initialize(parameters[6]);
    }

    protected boolean isHeredocState(int state){
    	    	return state == ST_PHP_HEREDOC || state == ST_PHP_END_HEREDOC || state == ST_PHP_NOWDOC || state == ST_PHP_END_NOWDOC;
    }
    
    public int[] getParamenters(){
    	return new int[]{zzMarkedPos, zzPushbackPos, zzCurrentPos, zzStartRead, zzEndRead, yyline, zzLexicalState};
    }

    protected int getZZLexicalState() {
        return zzLexicalState;
    }

    protected int getZZMarkedPos() {
        return zzMarkedPos;
    }

    protected int getZZEndRead() {
        return zzEndRead;
    }

    public char[] getZZBuffer() {
        return zzBuffer;
    }
    
    protected int getZZStartRead() {
    	return this.zzStartRead;
    }

    protected int getZZPushBackPosition() {
    	return this.zzPushbackPos;
    }

	protected void pushBack(int i) {
		yypushback(i);
	}

	// A pool of states. To avoid creation of a new state on each createMemento.
	private static final IntHashtable lexerStates = new IntHashtable(100);
	
	protected IntHashtable getLexerStates() {
		return lexerStates;
	}

 // End user code


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public PhpLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public PhpLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 190) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public String yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 113: 
          { return PHP_DECLARE;
          }
        case 162: break;
        case 89: 
          { return PHP_CLONE;
          }
        case 163: break;
        case 150: 
          { return PHP__METHOD__;
          }
        case 164: break;
        case 70: 
          { return PHP_FROM;
          }
        case 165: break;
        case 44: 
          { popState();
    pushState(ST_PHP_LOOKING_FOR_PROPERTY);
    return PHP_OBJECT_OPERATOR;
          }
        case 166: break;
        case 79: 
          { return PHP_BREAK;
          }
        case 167: break;
        case 90: 
          { return PHP_WHILE;
          }
        case 168: break;
        case 151: 
          { return PHPDOC_EXCEPTION;
          }
        case 169: break;
        case 110: 
          { return PHP_EXTENDS;
          }
        case 170: break;
        case 28: 
          { return UNKNOWN_TOKEN;
          }
        case 171: break;
        case 4: 
          { return PHP_NUMBER;
          }
        case 172: break;
        case 77: 
          { return PHP_ENDIF;
          }
        case 173: break;
        case 116: 
          { return PHP_PRIVATE;
          }
        case 174: break;
        case 101: 
          { return PHP_STATIC;
          }
        case 175: break;
        case 6: 
          { return  PHP_STRING;
          }
        case 176: break;
        case 13: 
          { if (!phpStack.isEmpty()) {
        popState();
    }
    return  PHP_CURLY_CLOSE;
          }
        case 177: break;
        case 23: 
          { popState();
	return PHP_TOKEN;
          }
        case 178: break;
        case 112: 
          { return PHP_DEFAULT;
          }
        case 179: break;
        case 111: 
          { return PHP_REQUIRE;
          }
        case 180: break;
        case 21: 
          { //the difference from the original rules comes from the fact that we took ';' out out of tokens 
	return UNKNOWN_TOKEN;
          }
        case 181: break;
        case 97: 
          { return PHPDOC_LINK;
          }
        case 182: break;
        case 147: 
          { return PHP_ENDFOREACH;
          }
        case 183: break;
        case 54: 
          { return PHP_TRY;
          }
        case 184: break;
        case 131: 
          { return PHP__LINE__;
          }
        case 185: break;
        case 63: 
          { return PHP_EXIT;
          }
        case 186: break;
        case 156: 
          { return PHPDOC_FILESOURCE;
          }
        case 187: break;
        case 129: 
          { return PHP_CONTINUE;
          }
        case 188: break;
        case 143: 
          { return PHPDOC_TUTORIAL;
          }
        case 189: break;
        case 159: 
          { return PHP__FUNCTION__;
          }
        case 190: break;
        case 125: 
          { return PHPDOC_METHOD;
          }
        case 191: break;
        case 141: 
          { return PHPDOC_ABSTRACT;
          }
        case 192: break;
        case 155: 
          { return PHPDOC_DEPRECATED;
          }
        case 193: break;
        case 62: 
          { nowdoc = null;
	nowdoc_len = 0;
    yybegin(ST_PHP_IN_SCRIPTING);
    return PHP_HEREDOC_TAG;
          }
        case 194: break;
        case 55: 
          { return PHP_FOR;
          }
        case 195: break;
        case 149: 
          { return PHP_IMPLEMENTS;
          }
        case 196: break;
        case 45: 
          { int label_len = yylength() - 1;

    if (yytext().charAt(label_len-1)==';') {
	    label_len--;
    }

    if (label_len==heredoc_len && yytext().substring(0,label_len).equals(heredoc)) {
        heredoc=null;
        heredoc_len=0;
        yybegin(ST_PHP_IN_SCRIPTING);
        return PHP_HEREDOC_TAG;
    } else {
        return PHP_CONSTANT_ENCAPSED_STRING;
    }
          }
        case 197: break;
        case 91: 
          { return PHP_PRINT;
          }
        case 198: break;
        case 22: 
          { yypushback(1);
	popState();
	return PHP_ENCAPSED_AND_WHITESPACE;
          }
        case 199: break;
        case 87: 
          { return PHP_CONST;
          }
        case 200: break;
        case 51: 
          { popState();
    return PHP_LINE_COMMENT;
          }
        case 201: break;
        case 126: 
          { return PHP_ENDWHILE;
          }
        case 202: break;
        case 15: 
          { return PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 203: break;
        case 27: 
          { return PHP_LINE_COMMENT;
          }
        case 204: break;
        case 148: 
          { return PHP_INSTANCEOF;
          }
        case 205: break;
        case 83: 
          { return PHP_THROW;
          }
        case 206: break;
        case 107: 
          { return PHPDOC_SINCE;
          }
        case 207: break;
        case 102: 
          { return PHP_SWITCH;
          }
        case 208: break;
        case 145: 
          { return PHPDOC_PROPERTY;
          }
        case 209: break;
        case 36: 
          { return PHP_DO;
          }
        case 210: break;
        case 40: 
          { yypushback(1);
    return PHP_ENCAPSED_AND_WHITESPACE;
          }
        case 211: break;
        case 160: 
          { return PHP__NAMESPACE__;
          }
        case 212: break;
        case 158: 
          { return PHP_INCLUDE_ONCE;
          }
        case 213: break;
        case 9: 
          { pushState(ST_PHP_DOUBLE_QUOTES);
    return PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 214: break;
        case 2: 
          { return PHP_ENCAPSED_AND_WHITESPACE;
          }
        case 215: break;
        case 121: 
          { return PHPDOC_IGNORE;
          }
        case 216: break;
        case 48: 
          { return PHP_OBJECT_OPERATOR;
          }
        case 217: break;
        case 104: 
          { return PHP_PARENT;
          }
        case 218: break;
        case 49: 
          { popState();
    return PHP_COMMENT_END;
          }
        case 219: break;
        case 106: 
          { return PHPDOC_FINAL;
          }
        case 220: break;
        case 32: 
          { return PHP_VARIABLE;
          }
        case 221: break;
        case 92: 
          { return PHP_CASTING;
          }
        case 222: break;
        case 86: 
          { return PHP_UNSET;
          }
        case 223: break;
        case 17: 
          { yypushback(1);
        popState();
          }
        case 224: break;
        case 34: 
          { return PHP_CLOSETAG;
          }
        case 225: break;
        case 66: 
          { return PHP_EVAL;
          }
        case 226: break;
        case 74: 
          { return PHP_GOTO;
          }
        case 227: break;
        case 29: 
          { popState();return WHITESPACE;
          }
        case 228: break;
        case 58: 
          { yypushback(1);
	pushState(ST_PHP_VAR_OFFSET);
	return PHP_VARIABLE;
          }
        case 229: break;
        case 56: 
          { return PHP_USE;
          }
        case 230: break;
        case 38: 
          { return PHP_PAAMAYIM_NEKUDOTAYIM;
          }
        case 231: break;
        case 119: 
          { return PHPDOC_AUTHOR;
          }
        case 232: break;
        case 152: 
          { return PHPDOC_NAMESPACE;
          }
        case 233: break;
        case 42: 
          { yypushback(1);
    pushState(ST_PHP_IN_SCRIPTING);
    return PHP_CURLY_OPEN;
          }
        case 234: break;
        case 105: 
          { return PHP_PUBLIC;
          }
        case 235: break;
        case 37: 
          { return PHP_IF;
          }
        case 236: break;
        case 137: 
          { return PHP_NAMESPACE;
          }
        case 237: break;
        case 47: 
          { int label_len = yylength() - 1;
	int startIndex = 0;
	String yytext = yytext();
	if (yytext.charAt(label_len - 1) == ';') {
		label_len--;
	}
	while (yytext.charAt(startIndex) == '\r'
			|| yytext.charAt(startIndex) == '\n') {
		startIndex++;
	}

	if (label_len > heredoc_len
			&& yytext.substring(startIndex, label_len).equals(
					heredoc)) {
		heredoc = null;
		heredoc_len = 0;
		yybegin(ST_PHP_IN_SCRIPTING);
		return PHP_HEREDOC_TAG;
	} else {
		yybegin(ST_PHP_HEREDOC);
		return PHP_CONSTANT_ENCAPSED_STRING;
	}
          }
        case 238: break;
        case 82: 
          { return PHP_ARRAY;
          }
        case 239: break;
        case 61: 
          { yybegin(ST_PHP_HEREDOC);
	return PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 240: break;
        case 35: 
          { return PHP_AS;
          }
        case 241: break;
        case 64: 
          { return PHP_ECHO;
          }
        case 242: break;
        case 85: 
          { return PHP_FINAL;
          }
        case 243: break;
        case 146: 
          { return PHP_ENDDECLARE;
          }
        case 244: break;
        case 80: 
          { return PHP_THIS;
          }
        case 245: break;
        case 19: 
          { popState();
    return PHP_STRING;
          }
        case 246: break;
        case 76: 
          { return PHPDOC_VAR;
          }
        case 247: break;
        case 24: 
          { return PHP_COMMENT;
          }
        case 248: break;
        case 118: 
          { return PHPDOC_RETURN;
          }
        case 249: break;
        case 109: 
          { return PHPDOC_MAGIC;
          }
        case 250: break;
        case 122: 
          { return PHPDOC_THROWS;
          }
        case 251: break;
        case 5: 
          { return PHP_TOKEN;
          }
        case 252: break;
        case 88: 
          { return PHP_CATCH;
          }
        case 253: break;
        case 16: 
          { popState();
    return PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 254: break;
        case 30: 
          { return PHP_OPERATOR;
          }
        case 255: break;
        case 94: 
          { return PHPDOC_DESC;
          }
        case 256: break;
        case 52: 
          { return PHP_NEW;
          }
        case 257: break;
        case 117: 
          { return PHP__DIR__;
          }
        case 258: break;
        case 128: 
          { return PHP_FUNCTION;
          }
        case 259: break;
        case 26: 
          { String yytext = yytext();
	switch (yytext.charAt(yytext.length() - 1)) {
		case '?':
		case '%':
		case '>':
			yypushback(1);
			break;
		default:
			popState();
	}
	 return PHP_LINE_COMMENT;
          }
        case 260: break;
        case 3: 
          { yypushback(1);
    pushState(ST_PHP_HIGHLIGHTING_ERROR);
          }
        case 261: break;
        case 115: 
          { return PHP_FOREACH;
          }
        case 262: break;
        case 132: 
          { return PHPDOC_EXAMPLE;
          }
        case 263: break;
        case 65: 
          { return PHP_ELSE;
          }
        case 264: break;
        case 124: 
          { return PHPDOC_GLOBAL;
          }
        case 265: break;
        case 72: 
          { return PHP_SELF;
          }
        case 266: break;
        case 7: 
          { return WHITESPACE;
          }
        case 267: break;
        case 100: 
          { return PHP_RETURN;
          }
        case 268: break;
        case 96: 
          { return PHPDOC_USES;
          }
        case 269: break;
        case 60: 
          { int label_len = yylength() - 1;

	if (yytext().charAt(label_len-1)==';') {
	   label_len--;
    }
    if (label_len > nowdoc_len && yytext().substring(label_len - nowdoc_len,label_len).equals(nowdoc)) {
    	//nowdoc = null;
    	//nowdoc_len = 0;
		//yypushback(1);
		//yybegin(ST_PHP_END_NOWDOC);
		
    	if ((label_len - nowdoc_len-2) >= 0 && yytext().charAt(label_len - nowdoc_len-2)=='\r') {
        	label_len = label_len-2;
    	} else {
        	label_len--;
    	}
    	yypushback(nowdoc_len + (yylength() - label_len));
    	
        yybegin(ST_PHP_END_NOWDOC);
	}
	return PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 270: break;
        case 31: 
          { pushState(ST_PHP_LOOKING_FOR_PROPERTY);
    return PHP_OBJECT_OPERATOR;
          }
        case 271: break;
        case 18: 
          { yypushback(1);
    popState();
          }
        case 272: break;
        case 33: 
          { pushState(ST_PHP_COMMENT);
    return PHP_COMMENT_START;
          }
        case 273: break;
        case 69: 
          { return PHP_TRUE;
          }
        case 274: break;
        case 136: 
          { return PHP_ENDSWITCH;
          }
        case 275: break;
        case 25: 
          { return PHPDOC_COMMENT;
          }
        case 276: break;
        case 153: 
          { return PHPDOC_COPYRIGHT;
          }
        case 277: break;
        case 144: 
          { return PHPDOC_CATEGORY;
          }
        case 278: break;
        case 98: 
          { return PHP_ENDFOR;
          }
        case 279: break;
        case 84: 
          { return PHP_FALSE;
          }
        case 280: break;
        case 139: 
          { return PHP_PROTECTED;
          }
        case 281: break;
        case 81: 
          { int bprefix = (yytext().charAt(0) != '<') ? 1 : 0;
    int startString=3+bprefix;
    
    int hereOrNowDoc_len = yylength()-bprefix-3-1-(yytext().charAt(yylength()-2)=='\r'?1:0);
    while ((yytext().charAt(startString) == ' ') || (yytext().charAt(startString) == '\t')) {
        startString++;
        hereOrNowDoc_len--;
    }
    String hereOrNowDoc = yytext().substring(startString,hereOrNowDoc_len+startString);
    if (hereOrNowDoc.charAt(0) == '\'') {
    	nowdoc = hereOrNowDoc.substring(1, hereOrNowDoc_len-1);
    	nowdoc_len = hereOrNowDoc_len - 2;
    	yybegin(ST_PHP_NOWDOC);
    }
    else if (hereOrNowDoc.charAt(0) == '"') {
    	heredoc = hereOrNowDoc.substring(1, hereOrNowDoc_len-1);
    	heredoc_len = hereOrNowDoc_len - 2;
    	yybegin(ST_PHP_HEREDOC);
    } else {
    	heredoc = hereOrNowDoc;
    	heredoc_len = hereOrNowDoc_len;
    	yybegin(ST_PHP_HEREDOC);
    }
    return PHP_HEREDOC_TAG;
          }
        case 282: break;
        case 11: 
          { pushState(ST_PHP_BACKQUOTE);
    return PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 283: break;
        case 157: 
          { return PHPDOC_SUBPACKAGE;
          }
        case 284: break;
        case 57: 
          { return PHP_VAR;
          }
        case 285: break;
        case 99: 
          { return PHP_ELSEIF;
          }
        case 286: break;
        case 114: 
          { return PHP_INCLUDE;
          }
        case 287: break;
        case 134: 
          { return PHPDOC_PACKAGE;
          }
        case 288: break;
        case 93: 
          { return PHPDOC_NAME;
          }
        case 289: break;
        case 73: 
          { return PHP_LIST;
          }
        case 290: break;
        case 161: 
          { return PHP_HALT_COMPILER;
          }
        case 291: break;
        case 120: 
          { return PHPDOC_ACCESS;
          }
        case 292: break;
        case 78: 
          { return PHP_EMPTY;
          }
        case 293: break;
        case 133: 
          { return PHPDOC_LICENSE;
          }
        case 294: break;
        case 71: 
          { return PHP_CASE;
          }
        case 295: break;
        case 140: 
          { return PHP__CLASS__;
          }
        case 296: break;
        case 53: 
          { return PHP_DIE;
          }
        case 297: break;
        case 130: 
          { return PHP__FILE__;
          }
        case 298: break;
        case 68: 
          { return  PHP_KEYWORD;
          }
        case 299: break;
        case 154: 
          { return PHPDOC_STATICVAR;
          }
        case 300: break;
        case 103: 
          { return PHP_GLOBAL;
          }
        case 301: break;
        case 46: 
          { int label_len = yylength() - 1;

    if (yytext().charAt(label_len-1)==';') {
	    label_len--;
    }

    if (label_len==nowdoc_len && yytext().substring(0,label_len).equals(nowdoc)) {
        nowdoc=null;
        nowdoc_len=0;
        yybegin(ST_PHP_IN_SCRIPTING);
        return PHP_HEREDOC_TAG;
    } else {
        return PHP_CONSTANT_ENCAPSED_STRING;
    }
          }
        case 302: break;
        case 138: 
          { return PHP_INTERFACE;
          }
        case 303: break;
        case 10: 
          { return PHP_NS_SEPARATOR;
          }
        case 304: break;
        case 75: 
          { return PHPDOC_SEE;
          }
        case 305: break;
        case 59: 
          { int label_len = yylength() - 1;

    if (yytext().charAt(label_len-1)==';') {
	   label_len--;
    }
    if (label_len > heredoc_len && yytext().substring(label_len - heredoc_len,label_len).equals(heredoc)) {
    	
    	if ((label_len - heredoc_len-2) >= 0 && yytext().charAt(label_len - heredoc_len-2)=='\r') {
        	label_len = label_len-2;
    	} else {
        	label_len--;
    	}
    	yypushback(heredoc_len + (yylength() - label_len));
    	
        yybegin(ST_PHP_END_HEREDOC);
    }
    return PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 306: break;
        case 41: 
          { pushState(ST_PHP_IN_SCRIPTING);
    return PHP_TOKEN;
          }
        case 307: break;
        case 95: 
          { return PHPDOC_TODO;
          }
        case 308: break;
        case 50: 
          { popState();
    return PHPDOC_COMMENT_END;
          }
        case 309: break;
        case 8: 
          { return PHP_SEMICOLON;
          }
        case 310: break;
        case 39: 
          { pushState(ST_PHP_QUOTES_AFTER_VARIABLE);
    return PHP_VARIABLE;
          }
        case 311: break;
        case 20: 
          { /* Offset could be treated as a long */
	return PHP_NUMBER;
          }
        case 312: break;
        case 123: 
          { return PHPDOC_STATIC;
          }
        case 313: break;
        case 43: 
          { yypushback(1);
	return PHP_ENCAPSED_AND_WHITESPACE;
          }
        case 314: break;
        case 67: 
          { pushState(ST_PHP_DOC_COMMENT);
    return PHPDOC_COMMENT_START;
          }
        case 315: break;
        case 108: 
          { return PHPDOC_PARAM;
          }
        case 316: break;
        case 14: 
          { pushState(ST_PHP_LINE_COMMENT);
    return PHP_LINE_COMMENT;
          }
        case 317: break;
        case 127: 
          { return PHP_ABSTRACT;
          }
        case 318: break;
        case 142: 
          { return PHPDOC_INTERNAL;
          }
        case 319: break;
        case 12: 
          { return PHP_CURLY_OPEN;
          }
        case 320: break;
        case 1: 
          { if(heredoc!=null&&yytext().startsWith(heredoc)){
		String text = yytext();
		if(heredoc_len < text.length() && (text.charAt(heredoc_len) == '\r'
			|| text.charAt(heredoc_len) == '\n'|| text.charAt(heredoc_len) == ';')){
			yypushback(yylength()-heredoc_len-1);
	        heredoc=null;
	        heredoc_len=0;
	        yybegin(ST_PHP_IN_SCRIPTING);
	        return PHP_HEREDOC_TAG;
		}
	}
	return PHP_ENCAPSED_AND_WHITESPACE;
          }
        case 321: break;
        case 135: 
          { return PHPDOC_VERSION;
          }
        case 322: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
