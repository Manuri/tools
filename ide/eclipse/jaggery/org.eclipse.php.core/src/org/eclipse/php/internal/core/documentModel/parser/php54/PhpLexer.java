/* The following code was generated by JFlex 1.4.1 on 10/28/13 11:31 AM */

/*******************************************************************************
 * Copyright (c) 2006 Zend Corporation and IBM Corporation.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Zend and IBM - Initial implementation
 *******************************************************************************/

package org.eclipse.php.internal.core.documentModel.parser.php54;

import org.eclipse.php.internal.core.util.collections.IntHashtable;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 10/28/13 11:31 AM from the specification file
 * <tt>highlighting_scanner.jflex</tt>
 */
public class PhpLexer extends org.eclipse.php.internal.core.documentModel.parser.AbstractPhpLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int ST_PHP_LINE_COMMENT = 12;
  public static final int ST_PHP_NOWDOC = 6;
  public static final int ST_PHP_DOUBLE_QUOTES = 2;
  public static final int ST_PHP_COMMENT = 10;
  public static final int ST_PHP_BACKQUOTE = 3;
  public static final int ST_PHP_END_NOWDOC = 14;
  public static final int ST_PHP_DOC_COMMENT = 11;
  public static final int ST_PHP_END_HEREDOC = 7;
  public static final int ST_PHP_VAR_OFFSET = 9;
  public static final int YYINITIAL = 0;
  public static final int ST_PHP_IN_SCRIPTING = 1;
  public static final int ST_PHP_LOOKING_FOR_PROPERTY = 8;
  public static final int ST_PHP_HEREDOC = 5;
  public static final int ST_PHP_HIGHLIGHTING_ERROR = 13;
  public static final int ST_PHP_QUOTES_AFTER_VARIABLE = 4;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\14\1\13\2\0\1\17\22\0\1\14\1\30\1\21\1\120"+
    "\1\20\1\34\1\35\1\117\1\106\1\107\1\32\1\27\1\15\1\4"+
    "\1\2\1\33\1\5\1\11\10\1\1\105\1\16\1\31\1\25\1\26"+
    "\1\121\1\122\1\42\1\7\1\113\1\44\1\3\1\102\1\12\1\77"+
    "\1\101\2\12\1\66\1\76\1\43\1\40\1\103\1\12\1\41\1\74"+
    "\1\114\1\100\1\12\1\73\1\45\2\12\1\115\1\22\1\116\1\37"+
    "\1\111\1\23\1\62\1\10\1\55\1\51\1\46\1\52\1\67\1\63"+
    "\1\47\1\110\1\70\1\65\1\72\1\54\1\56\1\71\1\75\1\60"+
    "\1\57\1\50\1\53\1\104\1\64\1\6\1\61\1\12\1\24\1\36"+
    "\1\112\1\15\201\12\uff00\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\1\2\10\0\1\3\1\4\1\5\1\6"+
    "\1\5\1\4\2\6\1\7\1\5\1\10\1\5\1\11"+
    "\1\12\1\13\1\14\12\5\32\6\2\5\1\6\1\15"+
    "\1\3\1\16\1\2\1\17\1\20\2\17\1\2\3\17"+
    "\3\21\3\1\3\3\3\2\2\3\1\0\1\3\1\22"+
    "\1\23\1\22\1\24\1\25\1\24\1\26\1\25\1\6"+
    "\1\27\2\30\3\31\3\32\2\33\1\34\1\35\1\0"+
    "\1\3\2\4\1\36\1\6\1\37\3\0\1\6\1\0"+
    "\2\40\2\0\1\17\2\0\2\36\1\41\1\42\1\36"+
    "\13\6\1\43\6\6\1\44\21\6\1\45\21\6\1\46"+
    "\12\0\1\6\4\0\1\47\2\50\1\51\1\52\1\50"+
    "\3\0\3\53\1\54\3\0\1\55\2\1\2\50\1\56"+
    "\2\2\5\0\1\57\4\0\1\60\1\4\1\47\1\61"+
    "\1\62\20\0\1\63\1\0\1\6\2\4\1\0\1\6"+
    "\1\40\2\0\3\6\1\64\13\6\1\65\4\6\1\66"+
    "\1\67\2\6\1\70\3\6\1\71\20\6\1\72\1\73"+
    "\3\6\1\74\12\6\1\75\12\0\7\6\1\76\1\77"+
    "\1\1\1\100\1\2\3\0\1\101\4\0\1\57\40\0"+
    "\1\102\1\0\2\6\1\40\3\0\1\103\1\0\4\6"+
    "\1\104\6\6\1\105\1\106\1\107\4\6\1\110\7\6"+
    "\1\111\2\6\1\112\4\6\1\113\2\6\1\114\7\6"+
    "\1\115\1\116\14\6\1\117\1\120\12\0\10\6\3\0"+
    "\1\101\21\0\1\121\20\0\1\122\1\123\1\124\1\125"+
    "\2\126\3\0\1\6\1\127\3\6\1\130\12\6\1\131"+
    "\1\132\2\6\1\133\2\6\1\134\1\135\2\6\1\136"+
    "\1\137\1\6\1\140\6\6\1\141\2\6\1\142\3\6"+
    "\1\143\5\6\5\0\1\144\4\0\10\6\6\0\1\145"+
    "\1\0\1\146\3\0\1\147\1\150\11\0\1\151\12\0"+
    "\5\6\1\152\2\6\1\153\15\6\1\154\1\155\1\156"+
    "\2\6\1\157\1\160\2\6\1\161\1\6\1\162\1\163"+
    "\2\6\4\0\10\6\11\0\1\164\4\0\1\165\12\0"+
    "\1\166\1\0\1\167\1\0\3\6\1\170\5\6\1\171"+
    "\3\6\1\172\1\173\1\6\1\174\4\6\1\175\1\6"+
    "\1\176\4\6\2\0\1\6\1\177\6\6\4\0\1\200"+
    "\1\0\1\201\5\0\1\202\1\0\1\203\1\0\1\204"+
    "\1\205\1\0\1\206\2\0\1\207\1\0\1\6\1\210"+
    "\4\6\1\211\5\6\1\212\1\6\1\213\1\214\1\6"+
    "\1\215\6\6\1\216\2\6\1\217\1\6\1\0\1\220"+
    "\12\0\1\221\1\0\1\222\1\223\4\6\1\224\1\225"+
    "\1\6\1\226\2\6\1\227\1\230\1\231\1\232\6\6"+
    "\1\233\1\0\1\234\1\235\4\0\1\236\2\0\1\237"+
    "\1\240\2\6\1\241\1\242\1\6\1\243\1\244\1\6"+
    "\1\245\2\6\1\246\1\6\1\247\2\0\1\250\1\251"+
    "\1\252\1\0\7\6\1\253\1\254\1\255\2\6\1\256"+
    "\3\6\1\257\1\260\1\6\1\261\1\262\1\6\1\263"+
    "\1\6\1\264";

  private static int [] zzUnpackAction() {
    int [] result = new int[905];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\123\0\246\0\371\0\u014c\0\u019f\0\u01f2\0\u0245"+
    "\0\u0298\0\u02eb\0\u033e\0\u0391\0\u03e4\0\u0437\0\u048a\0\0"+
    "\0\u04dd\0\u0530\0\u0583\0\u05d6\0\u0629\0\u067c\0\u06cf\0\u0722"+
    "\0\0\0\0\0\u0775\0\u07c8\0\0\0\0\0\0\0\u081b"+
    "\0\u086e\0\u08c1\0\u0914\0\u0967\0\u09ba\0\u0a0d\0\u0a60\0\u0ab3"+
    "\0\u0b06\0\u0b59\0\u0bac\0\u0bff\0\u0c52\0\u0ca5\0\u0cf8\0\u0d4b"+
    "\0\u0d9e\0\u0df1\0\u0e44\0\u0e97\0\u0eea\0\u0f3d\0\u0f90\0\u0fe3"+
    "\0\u1036\0\u1089\0\u10dc\0\u112f\0\u1182\0\u11d5\0\u1228\0\u127b"+
    "\0\u12ce\0\u1321\0\u1374\0\u13c7\0\u141a\0\u146d\0\0\0\u14c0"+
    "\0\0\0\u1513\0\u1566\0\0\0\u15b9\0\u160c\0\u165f\0\u16b2"+
    "\0\u1705\0\u1758\0\0\0\u17ab\0\u17fe\0\u1851\0\u18a4\0\u18f7"+
    "\0\u194a\0\u199d\0\u19f0\0\u1a43\0\u1a96\0\u1ae9\0\u1b3c\0\u1b8f"+
    "\0\u1be2\0\u1be2\0\0\0\u1c35\0\u1c88\0\u1cdb\0\0\0\u1d2e"+
    "\0\0\0\u1d81\0\u1dd4\0\0\0\u1e27\0\u1e7a\0\0\0\u1ecd"+
    "\0\u1f20\0\u1f73\0\0\0\u1fc6\0\0\0\u2019\0\0\0\u206c"+
    "\0\u20bf\0\u2112\0\u2165\0\u21b8\0\0\0\u220b\0\0\0\u225e"+
    "\0\u22b1\0\u2304\0\u2357\0\u14c0\0\u23aa\0\u23fd\0\u07c8\0\u2450"+
    "\0\0\0\u24a3\0\u24f6\0\u09ba\0\u2549\0\u259c\0\u25ef\0\u067c"+
    "\0\u2642\0\u2695\0\u26e8\0\u273b\0\u278e\0\u27e1\0\u2834\0\u2887"+
    "\0\u28da\0\u292d\0\u2980\0\u067c\0\u29d3\0\u2a26\0\u2a79\0\u2acc"+
    "\0\u2b1f\0\u2b72\0\u067c\0\u2bc5\0\u2c18\0\u2c6b\0\u2cbe\0\u2d11"+
    "\0\u2d64\0\u2db7\0\u2e0a\0\u2e5d\0\u2eb0\0\u2f03\0\u2f56\0\u2fa9"+
    "\0\u2ffc\0\u304f\0\u30a2\0\u30f5\0\u067c\0\u3148\0\u319b\0\u31ee"+
    "\0\u3241\0\u3294\0\u32e7\0\u333a\0\u338d\0\u33e0\0\u3433\0\u3486"+
    "\0\u34d9\0\u352c\0\u357f\0\u35d2\0\u3625\0\u3678\0\0\0\u36cb"+
    "\0\u141a\0\u371e\0\u3771\0\u37c4\0\u3817\0\u386a\0\u38bd\0\u3910"+
    "\0\u3963\0\u39b6\0\u3a09\0\u3a5c\0\u15b9\0\u3aaf\0\u3b02\0\u3a5c"+
    "\0\0\0\0\0\0\0\u3aaf\0\u3b55\0\u1705\0\u3ba8\0\u3b55"+
    "\0\0\0\u3ba8\0\0\0\u3bfb\0\u199d\0\u3c4e\0\u18f7\0\u3ca1"+
    "\0\u3cf4\0\u3bfb\0\u3c4e\0\u1ae9\0\u3d47\0\u3d9a\0\u3ded\0\u3e40"+
    "\0\u3e93\0\u3ee6\0\u3f39\0\0\0\u3f8c\0\u3fdf\0\u4032\0\u1b3c"+
    "\0\0\0\u4085\0\u40d8\0\0\0\0\0\u412b\0\u417e\0\u41d1"+
    "\0\u4224\0\u4277\0\u42ca\0\u431d\0\u4370\0\u43c3\0\u4416\0\u4469"+
    "\0\u44bc\0\u450f\0\u4562\0\u45b5\0\u4608\0\0\0\u465b\0\u46ae"+
    "\0\u225e\0\u22b1\0\u4701\0\u4754\0\u47a7\0\u47fa\0\u484d\0\u48a0"+
    "\0\u48f3\0\u4946\0\u4999\0\u49ec\0\u4a3f\0\u4a92\0\u4ae5\0\u4b38"+
    "\0\u4b8b\0\u4bde\0\u4c31\0\u4c84\0\u4cd7\0\u4d2a\0\u067c\0\u4d7d"+
    "\0\u4dd0\0\u4e23\0\u4e76\0\u067c\0\u067c\0\u4ec9\0\u4f1c\0\u4f6f"+
    "\0\u4fc2\0\u5015\0\u5068\0\u067c\0\u50bb\0\u510e\0\u5161\0\u51b4"+
    "\0\u5207\0\u525a\0\u52ad\0\u5300\0\u5353\0\u53a6\0\u53f9\0\u544c"+
    "\0\u549f\0\u54f2\0\u5545\0\u5598\0\u067c\0\u067c\0\u55eb\0\u563e"+
    "\0\u5691\0\u067c\0\u56e4\0\u5737\0\u578a\0\u57dd\0\u5830\0\u5883"+
    "\0\u58d6\0\u5929\0\u597c\0\u59cf\0\u067c\0\u5a22\0\u5a75\0\u5ac8"+
    "\0\u5b1b\0\u5b6e\0\u5bc1\0\u5c14\0\u5c67\0\u5cba\0\u5d0d\0\u5d60"+
    "\0\u5db3\0\u5e06\0\u5e59\0\u5eac\0\u5eff\0\u5f52\0\0\0\0"+
    "\0\u5fa5\0\0\0\u5ff8\0\u604b\0\u609e\0\u60f1\0\u609e\0\u6144"+
    "\0\u6197\0\u61ea\0\u1b8f\0\u609e\0\u623d\0\u6290\0\u62e3\0\u6336"+
    "\0\u6389\0\u63dc\0\u642f\0\u6482\0\u64d5\0\u6528\0\u657b\0\u65ce"+
    "\0\u6621\0\u6674\0\u66c7\0\u671a\0\u676d\0\u67c0\0\u6813\0\u6866"+
    "\0\u68b9\0\u690c\0\u695f\0\u69b2\0\u6a05\0\u6a58\0\u6aab\0\u6afe"+
    "\0\u6b51\0\u6ba4\0\u6bf7\0\u6c4a\0\0\0\u6c9d\0\u6cf0\0\u6d43"+
    "\0\u6d96\0\u6de9\0\u6e3c\0\u6e8f\0\u6ee2\0\u6f35\0\u6f88\0\u6fdb"+
    "\0\u702e\0\u7081\0\u067c\0\u70d4\0\u7127\0\u717a\0\u71cd\0\u7220"+
    "\0\u7273\0\u067c\0\u72c6\0\u067c\0\u7319\0\u736c\0\u73bf\0\u7412"+
    "\0\u067c\0\u7465\0\u74b8\0\u750b\0\u755e\0\u75b1\0\u7604\0\u7657"+
    "\0\u067c\0\u76aa\0\u76fd\0\u067c\0\u7750\0\u77a3\0\u77f6\0\u7849"+
    "\0\u067c\0\u789c\0\u78ef\0\u067c\0\u7942\0\u7995\0\u79e8\0\u7a3b"+
    "\0\u7a8e\0\u7ae1\0\u7b34\0\u067c\0\u067c\0\u7b87\0\u7bda\0\u7c2d"+
    "\0\u7c80\0\u7cd3\0\u7d26\0\u7d79\0\u7dcc\0\u7e1f\0\u7e72\0\u7ec5"+
    "\0\u7f18\0\u067c\0\u067c\0\u7f6b\0\u7fbe\0\u8011\0\u8064\0\u80b7"+
    "\0\u810a\0\u815d\0\u81b0\0\u8203\0\u8256\0\u82a9\0\u82fc\0\u834f"+
    "\0\u83a2\0\u83f5\0\u8448\0\u849b\0\u84ee\0\u8541\0\u8594\0\u85e7"+
    "\0\0\0\u863a\0\u868d\0\u86e0\0\u8733\0\u8786\0\u87d9\0\u882c"+
    "\0\u887f\0\u88d2\0\u8925\0\u8978\0\u89cb\0\u8a1e\0\u8a71\0\u8ac4"+
    "\0\u8b17\0\u8b6a\0\0\0\u8bbd\0\u8c10\0\u8c63\0\u8cb6\0\u8d09"+
    "\0\u8d5c\0\u8daf\0\u8e02\0\u8e55\0\u8ea8\0\u8efb\0\u8f4e\0\u8fa1"+
    "\0\u8ff4\0\u9047\0\u909a\0\0\0\u067c\0\u067c\0\u23aa\0\0"+
    "\0\u90ed\0\u9140\0\u9193\0\u91e6\0\u9239\0\u067c\0\u928c\0\u92df"+
    "\0\u9332\0\u067c\0\u9385\0\u93d8\0\u942b\0\u947e\0\u94d1\0\u9524"+
    "\0\u9577\0\u95ca\0\u961d\0\u9670\0\u067c\0\u067c\0\u96c3\0\u9716"+
    "\0\u067c\0\u9769\0\u97bc\0\u067c\0\u067c\0\u980f\0\u9862\0\u067c"+
    "\0\u067c\0\u98b5\0\u067c\0\u9908\0\u995b\0\u99ae\0\u9a01\0\u9a54"+
    "\0\u9aa7\0\u067c\0\u9afa\0\u9b4d\0\u067c\0\u9ba0\0\u9bf3\0\u9c46"+
    "\0\u067c\0\u9c99\0\u9cec\0\u9d3f\0\u9d92\0\u9de5\0\u9e38\0\u9e8b"+
    "\0\u9ede\0\u9f31\0\u9f84\0\0\0\u9fd7\0\ua02a\0\ua07d\0\ua0d0"+
    "\0\ua123\0\ua176\0\ua1c9\0\ua21c\0\ua26f\0\ua2c2\0\ua315\0\ua368"+
    "\0\ua3bb\0\ua40e\0\ua461\0\ua4b4\0\ua507\0\ua55a\0\0\0\ua5ad"+
    "\0\0\0\ua600\0\ua653\0\ua6a6\0\0\0\ua6f9\0\ua74c\0\ua79f"+
    "\0\ua7f2\0\ua845\0\ua898\0\ua8eb\0\ua93e\0\ua991\0\ua9e4\0\0"+
    "\0\uaa37\0\uaa8a\0\uaadd\0\uab30\0\uab83\0\uabd6\0\uac29\0\uac7c"+
    "\0\uaccf\0\u6ee2\0\uad22\0\uad75\0\uadc8\0\uae1b\0\uae6e\0\uaec1"+
    "\0\uaf14\0\uaf67\0\u067c\0\uafba\0\ub00d\0\ub060\0\ub0b3\0\ub106"+
    "\0\ub159\0\ub1ac\0\ub1ff\0\ub252\0\ub2a5\0\ub2f8\0\ub34b\0\ub39e"+
    "\0\u067c\0\u067c\0\u067c\0\ub3f1\0\ub444\0\u067c\0\u067c\0\ub497"+
    "\0\ub4ea\0\u067c\0\ub53d\0\u067c\0\u067c\0\ub590\0\ub5e3\0\ub636"+
    "\0\ub689\0\ub6dc\0\ub72f\0\ub782\0\ub7d5\0\ub828\0\ub87b\0\ub8ce"+
    "\0\ub921\0\ub974\0\ub9c7\0\uba1a\0\uba6d\0\ubac0\0\ubb13\0\ubb66"+
    "\0\ubbb9\0\ubc0c\0\ubc5f\0\ubcb2\0\0\0\ubd05\0\ubd58\0\ubdab"+
    "\0\ubdfe\0\0\0\ube51\0\ubea4\0\ubef7\0\ubf4a\0\ubf9d\0\ubff0"+
    "\0\uc043\0\uc096\0\uc0e9\0\uc13c\0\0\0\uc18f\0\0\0\uc1e2"+
    "\0\uc235\0\uc288\0\uc2db\0\u067c\0\uc32e\0\uc381\0\uc3d4\0\uc427"+
    "\0\uc47a\0\uc4cd\0\uc520\0\uc573\0\uc5c6\0\u067c\0\u067c\0\uc619"+
    "\0\u067c\0\uc66c\0\uc6bf\0\uc712\0\uc765\0\u067c\0\uc7b8\0\u067c"+
    "\0\uc80b\0\uc85e\0\uc8b1\0\uc904\0\uc957\0\uc9aa\0\uc9fd\0\u067c"+
    "\0\uca50\0\ucaa3\0\ucaf6\0\ucb49\0\ucb9c\0\ucbef\0\ucc42\0\ucc95"+
    "\0\ucce8\0\ucd3b\0\0\0\ucd8e\0\0\0\ucde1\0\uce34\0\uce87"+
    "\0\uceda\0\ucf2d\0\ucf80\0\ucfd3\0\0\0\ud026\0\0\0\0"+
    "\0\ud079\0\0\0\ud0cc\0\ud11f\0\0\0\ud172\0\ud1c5\0\u067c"+
    "\0\ud218\0\ud26b\0\ud2be\0\ud311\0\u067c\0\ud364\0\ud3b7\0\ud40a"+
    "\0\ud45d\0\ud4b0\0\u067c\0\ud503\0\u067c\0\u067c\0\ud556\0\u067c"+
    "\0\ud5a9\0\ud5fc\0\ud64f\0\ud6a2\0\ud6f5\0\ud748\0\u067c\0\ud79b"+
    "\0\ud7ee\0\u067c\0\ud841\0\ud894\0\0\0\ud8e7\0\ud93a\0\ud98d"+
    "\0\ud9e0\0\uda33\0\uda86\0\udad9\0\udb2c\0\udb7f\0\udbd2\0\0"+
    "\0\udc25\0\0\0\0\0\udc78\0\udccb\0\udd1e\0\udd71\0\u067c"+
    "\0\u067c\0\uddc4\0\u067c\0\ude17\0\ude6a\0\u067c\0\u067c\0\u067c"+
    "\0\u067c\0\udebd\0\udf10\0\udf63\0\udfb6\0\ue009\0\ue05c\0\u067c"+
    "\0\ue0af\0\0\0\0\0\ue102\0\ue155\0\ue1a8\0\ue1fb\0\0"+
    "\0\ue24e\0\ue2a1\0\0\0\0\0\ue2f4\0\ue347\0\u067c\0\u067c"+
    "\0\ue39a\0\u067c\0\u067c\0\ue3ed\0\u067c\0\ue440\0\ue493\0\u067c"+
    "\0\ue4e6\0\0\0\ue539\0\ue58c\0\0\0\0\0\0\0\ue5df"+
    "\0\ue632\0\ue685\0\ue6d8\0\ue72b\0\ue77e\0\ue7d1\0\ue824\0\0"+
    "\0\0\0\0\0\ue877\0\ue8ca\0\u067c\0\ue91d\0\ue970\0\ue9c3"+
    "\0\u067c\0\u067c\0\uea16\0\u067c\0\u067c\0\uea69\0\u067c\0\ueabc"+
    "\0\u067c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[905];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\123\0\1\20\1\21\1\22\1\23\1\24\1\25\2\26"+
    "\1\27\1\21\1\26\2\30\1\31\1\32\1\30\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\45\1\52"+
    "\1\26\1\53\1\26\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\1\64\1\65\1\26\1\66\1\67"+
    "\1\26\1\70\1\26\1\71\1\72\1\73\1\74\1\26"+
    "\1\75\1\26\1\76\1\77\1\26\1\100\1\26\1\101"+
    "\1\26\1\102\1\26\1\103\1\104\1\105\1\31\1\26"+
    "\1\106\1\107\2\26\2\31\1\110\1\111\2\31\20\112"+
    "\1\113\1\114\1\115\1\112\1\116\76\112\20\117\1\120"+
    "\1\117\1\121\1\114\1\122\76\117\4\123\1\124\17\123"+
    "\1\125\76\123\3\126\1\127\2\126\3\127\1\126\1\127"+
    "\1\130\3\126\1\130\1\131\1\126\1\132\1\126\1\133"+
    "\13\126\45\127\3\126\2\127\1\126\2\127\6\126\3\134"+
    "\1\135\2\134\3\135\1\134\1\135\1\136\3\134\1\136"+
    "\20\134\45\135\3\134\2\135\1\134\2\135\6\134\3\137"+
    "\1\140\2\137\3\140\1\137\1\140\1\141\3\137\1\142"+
    "\20\137\45\140\3\137\2\140\1\137\2\140\6\137\3\143"+
    "\1\144\1\145\1\143\3\144\1\143\1\144\2\30\2\143"+
    "\1\30\20\143\45\144\3\143\2\144\1\143\2\144\6\143"+
    "\1\20\1\146\1\147\1\26\1\147\1\150\3\26\1\146"+
    "\1\26\2\151\2\147\1\151\1\152\1\147\1\151\15\147"+
    "\14\26\1\153\30\26\3\147\2\26\1\147\2\26\1\31"+
    "\1\154\2\151\2\147\32\155\1\156\70\155\32\157\1\160"+
    "\67\157\1\161\13\162\1\163\3\162\1\164\6\162\1\165"+
    "\5\162\1\166\64\162\1\165\1\162\13\167\2\170\2\167"+
    "\1\170\103\167\13\20\1\171\3\20\1\172\103\20\1\0"+
    "\1\21\1\173\1\174\1\0\1\21\3\0\1\21\34\0"+
    "\1\174\55\0\1\173\3\0\1\173\3\0\1\173\13\0"+
    "\1\175\76\0\1\26\1\0\1\26\1\0\6\26\25\0"+
    "\14\26\1\176\30\26\3\0\2\26\1\0\2\26\12\0"+
    "\1\175\20\0\1\175\1\177\75\0\1\21\1\173\1\174"+
    "\1\0\1\21\1\200\1\0\1\201\1\21\34\0\1\174"+
    "\55\0\1\26\1\0\1\26\1\0\6\26\25\0\45\26"+
    "\3\0\2\26\1\0\2\26\7\0\1\26\1\0\1\26"+
    "\1\0\6\26\6\0\1\34\7\0\1\202\6\0\20\26"+
    "\1\203\24\26\3\0\2\26\1\0\2\26\2\0\1\204"+
    "\16\0\2\30\2\0\1\30\106\0\1\205\2\0\3\205"+
    "\1\0\1\205\25\0\10\205\1\206\34\205\3\0\2\205"+
    "\1\0\2\205\6\0\20\207\1\210\1\211\1\212\1\207"+
    "\1\213\76\207\25\0\1\214\1\175\121\0\1\175\1\214"+
    "\121\0\1\175\1\0\1\175\120\0\1\214\122\0\2\175"+
    "\2\0\1\215\116\0\1\175\122\0\1\175\4\0\1\216"+
    "\1\111\114\0\1\175\1\217\121\0\1\175\7\0\1\175"+
    "\112\0\1\175\10\0\1\175\65\0\1\26\1\0\1\26"+
    "\1\0\6\26\25\0\1\26\1\220\1\221\42\26\3\0"+
    "\2\26\1\0\2\26\7\0\1\26\1\0\1\26\1\0"+
    "\6\26\25\0\3\26\1\222\14\26\1\223\24\26\3\0"+
    "\2\26\1\0\2\26\7\0\1\26\1\0\1\26\1\0"+
    "\6\26\25\0\22\26\1\224\22\26\3\0\2\26\1\0"+
    "\2\26\7\0\1\26\1\0\1\26\1\0\6\26\25\0"+
    "\1\225\35\26\1\226\6\26\3\0\2\26\1\0\2\26"+
    "\7\0\1\26\1\0\1\26\1\0\1\26\1\227\4\26"+
    "\25\0\14\26\1\230\1\231\7\26\1\232\16\26\1\233"+
    "\3\0\2\26\1\0\2\26\7\0\1\26\1\0\1\26"+
    "\1\0\6\26\25\0\12\26\1\234\1\26\1\235\15\26"+
    "\1\236\12\26\3\0\2\26\1\0\2\26\7\0\1\26"+
    "\1\0\1\26\1\0\6\26\25\0\20\26\1\237\2\26"+
    "\1\240\21\26\3\0\2\26\1\0\2\26\7\0\1\26"+
    "\1\0\1\26\1\0\6\26\25\0\6\26\1\241\1\242"+
    "\6\26\1\243\26\26\3\0\2\26\1\0\2\26\7\0"+
    "\1\26\1\0\1\26\1\0\6\26\25\0\7\26\1\244"+
    "\3\26\1\245\2\26\1\246\1\26\1\247\1\26\1\250"+
    "\22\26\3\0\2\26\1\0\2\26\7\0\1\26\1\0"+
    "\1\26\1\0\6\26\25\0\14\26\1\251\30\26\3\0"+
    "\2\26\1\0\2\26\7\0\1\26\1\0\1\26\1\0"+
    "\6\26\25\0\6\26\1\252\4\26\1\253\6\26\1\254"+
    "\22\26\3\0\2\26\1\0\2\26\7\0\1\26\1\0"+
    "\1\26\1\0\6\26\25\0\16\26\1\255\3\26\1\256"+
    "\2\26\1\257\17\26\3\0\2\26\1\0\2\26\7\0"+
    "\1\26\1\0\1\26\1\0\6\26\25\0\6\26\1\260"+
    "\1\26\1\261\13\26\1\262\20\26\3\0\2\26\1\0"+
    "\2\26\7\0\1\26\1\0\1\26\1\0\6\26\25\0"+
    "\6\26\1\263\36\26\3\0\2\26\1\0\2\26\7\0"+
    "\1\26\1\0\1\26\1\0\3\26\1\264\2\26\25\0"+
    "\17\26\1\265\25\26\3\0\2\26\1\0\2\26\7\0"+
    "\1\26\1\0\1\26\1\0\6\26\25\0\23\26\1\266"+
    "\21\26\3\0\2\26\1\0\2\26\7\0\1\26\1\0"+
    "\1\26\1\0\6\26\25\0\7\26\1\267\35\26\3\0"+
    "\2\26\1\0\2\26\7\0\1\26\1\0\1\26\1\0"+
    "\6\26\25\0\16\26\1\270\26\26\3\0\2\26\1\0"+
    "\2\26\7\0\1\26\1\0\1\26\1\0\6\26\25\0"+
    "\6\26\1\271\7\26\1\272\6\26\1\273\17\26\3\0"+
    "\2\26\1\0\2\26\7\0\1\26\1\0\1\26\1\0"+
    "\6\26\25\0\13\26\1\274\2\26\1\275\1\26\1\276"+
    "\1\26\1\277\22\26\3\0\2\26\1\0\2\26\7\0"+
    "\1\26\1\0\1\26\1\0\6\26\25\0\34\26\1\300"+
    "\10\26\3\0\2\26\1\0\2\26\7\0\1\26\1\0"+
    "\1\26\1\0\6\26\25\0\6\26\1\301\36\26\3\0"+
    "\2\26\1\0\2\26\7\0\1\26\1\0\1\26\1\0"+
    "\6\26\25\0\6\26\1\302\36\26\3\0\2\26\1\0"+
    "\2\26\7\0\1\26\1\0\1\26\1\0\6\26\25\0"+
    "\1\26\1\303\43\26\3\0\2\26\1\0\2\26\7\0"+
    "\1\26\1\0\1\26\1\0\6\26\25\0\6\26\1\304"+
    "\1\305\35\26\3\0\2\26\1\0\2\26\7\0\1\26"+
    "\1\0\1\26\1\0\6\26\25\0\22\26\1\306\22\26"+
    "\3\0\2\26\1\0\2\26\113\0\1\307\25\0\1\310"+
    "\3\0\1\311\25\0\1\312\4\0\1\313\1\0\1\314"+
    "\1\315\1\316\2\0\1\317\1\320\1\321\43\0\1\26"+
    "\1\0\1\26\1\0\6\26\25\0\45\26\3\0\1\26"+
    "\1\322\1\0\2\26\6\0\22\204\1\323\74\204\1\211"+
    "\3\204\20\112\1\324\1\0\1\325\1\112\1\326\101\112"+
    "\1\327\2\112\3\327\1\112\1\327\5\112\1\330\1\331"+
    "\1\325\1\112\1\332\13\112\45\327\3\112\2\327\1\112"+
    "\2\327\151\112\1\333\1\331\1\325\1\112\1\334\76\112"+
    "\20\117\1\335\1\117\1\336\1\0\1\337\101\117\1\327"+
    "\2\117\3\327\1\117\1\327\5\117\1\340\1\117\1\336"+
    "\1\341\1\332\13\117\45\327\3\117\2\327\1\117\2\327"+
    "\151\117\1\333\1\117\1\336\1\341\1\342\76\117\26\0"+
    "\1\343\114\0\1\333\102\0\13\126\1\130\3\126\1\130"+
    "\1\344\1\126\1\345\1\126\1\346\77\126\1\127\1\126"+
    "\1\127\1\126\6\127\1\347\2\126\1\350\1\347\1\344"+
    "\1\126\1\345\1\126\1\346\13\126\45\127\3\126\2\127"+
    "\1\126\2\127\11\126\1\351\2\126\3\351\1\126\1\351"+
    "\1\130\3\126\1\130\1\344\1\126\1\345\1\126\1\346"+
    "\13\126\45\351\3\126\2\351\1\126\2\351\11\126\1\327"+
    "\2\126\3\327\1\126\1\327\1\130\3\126\1\130\1\352"+
    "\1\126\1\345\1\126\1\332\13\126\45\327\3\126\2\327"+
    "\1\126\2\327\21\126\1\130\3\126\1\130\116\126\1\130"+
    "\3\126\1\130\1\333\1\126\1\345\1\126\1\353\76\126"+
    "\13\134\1\136\3\134\1\136\104\134\1\135\1\134\1\135"+
    "\1\134\6\135\1\354\2\134\1\355\1\354\20\134\45\135"+
    "\3\134\2\135\1\134\2\135\11\134\1\356\2\134\3\356"+
    "\1\134\1\356\1\136\3\134\1\136\20\134\45\356\3\134"+
    "\2\356\1\134\2\356\6\134\3\357\1\360\2\357\3\360"+
    "\1\357\1\360\1\0\2\357\1\361\1\0\20\357\45\360"+
    "\3\357\2\360\1\357\2\360\6\357\1\362\1\363\1\362"+
    "\1\363\1\362\6\363\1\364\2\362\1\365\1\364\20\362"+
    "\45\363\3\362\2\363\1\362\2\363\6\362\3\366\1\367"+
    "\2\366\3\367\1\366\1\367\1\141\2\366\1\370\1\141"+
    "\20\366\45\367\3\366\2\367\1\366\2\367\6\366\1\0"+
    "\1\144\1\0\1\144\1\0\6\144\25\0\45\144\3\0"+
    "\2\144\1\0\2\144\34\0\1\371\75\0\1\146\3\0"+
    "\1\146\3\0\1\146\112\0\1\372\3\0\1\372\1\200"+
    "\1\0\1\201\1\372\114\0\1\373\2\0\3\373\1\0"+
    "\1\373\25\0\45\373\3\0\2\373\1\0\2\373\7\0"+
    "\1\26\1\0\1\26\1\0\6\26\25\0\13\26\1\253"+
    "\31\26\3\0\2\26\1\0\2\26\6\0\32\155\1\0"+
    "\70\155\33\0\1\374\122\0\1\375\135\0\1\376\1\377"+
    "\1\u0100\1\u0101\1\u0102\1\u0103\1\u0104\1\u0105\1\0\1\u0106"+
    "\1\u0107\1\0\1\u0108\2\0\1\u0109\1\0\1\u010a\1\0"+
    "\1\u010b\1\u010c\11\0\1\u010d\16\0\13\162\1\163\3\162"+
    "\1\163\6\162\1\163\5\162\1\163\64\162\1\163\1\162"+
    "\13\0\1\u010e\135\0\1\217\107\0\2\170\2\0\1\170"+
    "\106\0\1\u010f\2\0\3\u010f\1\0\1\u010f\25\0\45\u010f"+
    "\3\0\2\u010f\1\0\2\u010f\11\0\1\u010f\2\0\3\u010f"+
    "\1\0\1\u010f\1\171\24\0\45\u010f\3\0\2\u010f\1\0"+
    "\2\u010f\7\0\1\173\1\0\1\174\1\0\1\173\3\0"+
    "\1\173\34\0\1\174\55\0\1\372\2\0\2\372\3\0"+
    "\1\372\15\0\1\372\74\0\1\26\1\0\1\26\1\0"+
    "\6\26\25\0\10\26\1\u0110\34\26\3\0\2\26\1\0"+
    "\2\26\7\0\1\u0111\1\0\1\u0111\1\0\1\u0111\1\0"+
    "\3\u0111\30\0\1\u0111\1\0\1\u0111\1\0\1\u0111\2\0"+
    "\2\u0111\2\0\1\u0111\4\0\1\u0111\17\0\1\u0111\10\0"+
    "\1\u0111\14\0\1\u0112\3\0\1\u0112\142\0\1\u0113\72\0"+
    "\1\26\1\0\1\26\1\0\6\26\25\0\6\26\1\u0114"+
    "\36\26\3\0\2\26\1\0\2\26\7\0\1\205\1\0"+
    "\1\205\1\0\6\205\25\0\45\205\3\0\2\205\1\0"+
    "\2\205\7\0\1\205\1\0\1\205\1\0\6\205\25\0"+
    "\23\205\1\u0115\21\205\3\0\2\205\1\0\2\205\6\0"+
    "\3\207\1\0\2\207\3\0\1\207\1\0\5\207\1\210"+
    "\1\211\1\212\1\207\1\0\13\207\45\0\3\207\2\0"+
    "\1\207\2\0\151\207\1\0\1\211\1\212\1\207\1\213"+
    "\76\207\25\0\1\175\3\0\1\u0116\123\0\1\u0117\103\0"+
    "\2\217\2\0\1\217\104\0\1\26\1\0\1\26\1\0"+
    "\6\26\25\0\13\26\1\u0118\31\26\3\0\2\26\1\0"+
    "\2\26\7\0\1\26\1\0\1\26\1\0\6\26\25\0"+
    "\4\26\1\220\40\26\3\0\2\26\1\0\2\26\7\0"+
    "\1\26\1\0\1\26\1\0\6\26\25\0\20\26\1\u0119"+
    "\24\26\3\0\2\26\1\0\2\26\7\0\1\26\1\0"+
    "\1\26\1\0\6\26\25\0\10\26\1\u011a\34\26\3\0"+
    "\2\26\1\0\2\26\7\0\1\26\1\0\1\26\1\0"+
    "\6\26\25\0\1\26\1\220\43\26\3\0\2\26\1\0"+
    "\2\26\7\0\1\26\1\0\1\26\1\0\6\26\25\0"+
    "\26\26\1\u011b\16\26\3\0\2\26\1\0\2\26\7\0"+
    "\1\26\1\0\1\26\1\0\6\26\25\0\7\26\1\u011c"+
    "\1\u011d\34\26\3\0\2\26\1\0\2\26\7\0\1\26"+
    "\1\0\1\26\1\0\6\26\25\0\11\26\1\u011e\33\26"+
    "\3\0\2\26\1\0\2\26\7\0\1\26\1\0\1\26"+
    "\1\0\6\26\25\0\23\26\1\u011f\21\26\3\0\2\26"+
    "\1\0\2\26\7\0\1\26\1\0\1\26\1\0\6\26"+
    "\25\0\17\26\1\u0120\25\26\3\0\2\26\1\0\2\26"+
    "\7\0\1\26\1\0\1\26\1\0\6\26\25\0\22\26"+
    "\1\u0121\22\26\3\0\2\26\1\0\2\26\7\0\1\26"+
    "\1\0\1\26\1\0\6\26\25\0\10\26\1\u0122\4\26"+
    "\1\u0123\1\26\1\u0124\25\26\3\0\2\26\1\0\2\26"+
    "\7\0\1\26\1\0\1\26\1\0\6\26\25\0\31\26"+
    "\1\u0125\13\26\3\0\2\26\1\0\2\26\7\0\1\26"+
    "\1\0\1\26\1\0\6\26\25\0\13\26\1\u0126\5\26"+
    "\1\u0127\1\u0128\22\26\3\0\2\26\1\0\2\26\7\0"+
    "\1\26\1\0\1\26\1\0\6\26\25\0\20\26\1\u0129"+
    "\24\26\3\0\2\26\1\0\2\26\7\0\1\26\1\0"+
    "\1\26\1\0\6\26\25\0\12\26\1\u012a\2\26\1\u012b"+
    "\7\26\1\u012c\17\26\3\0\2\26\1\0\2\26\7\0"+
    "\1\26\1\0\1\26\1\0\6\26\25\0\6\26\1\u012d"+
    "\36\26\3\0\2\26\1\0\2\26\7\0\1\26\1\0"+
    "\1\26\1\0\6\26\25\0\14\26\1\u012e\30\26\3\0"+
    "\2\26\1\0\2\26\7\0\1\26\1\0\1\26\1\0"+
    "\6\26\25\0\14\26\1\u012f\30\26\3\0\2\26\1\0"+
    "\2\26\7\0\1\26\1\0\1\26\1\0\6\26\25\0"+
    "\20\26\1\u0130\24\26\3\0\2\26\1\0\2\26\7\0"+
    "\1\26\1\0\1\26\1\0\6\26\25\0\16\26\1\u0131"+
    "\26\26\3\0\2\26\1\0\2\26\7\0\1\26\1\0"+
    "\1\26\1\0\6\26\25\0\25\26\1\u0132\17\26\3\0"+
    "\2\26\1\0\2\26\7\0\1\26\1\0\1\26\1\0"+
    "\6\26\25\0\17\26\1\u0133\25\26\3\0\2\26\1\0"+
    "\2\26\7\0\1\26\1\0\1\26\1\0\6\26\25\0"+
    "\24\26\1\u0134\20\26\3\0\2\26\1\0\2\26\7\0"+
    "\1\26\1\0\1\26\1\0\6\26\25\0\25\26\1\u0135"+
    "\17\26\3\0\2\26\1\0\2\26\7\0\1\26\1\0"+
    "\1\26\1\0\6\26\25\0\32\26\1\u0136\12\26\3\0"+
    "\2\26\1\0\2\26\7\0\1\26\1\0\1\26\1\0"+
    "\6\26\25\0\14\26\1\u0137\30\26\3\0\2\26\1\0"+
    "\2\26\7\0\1\26\1\0\1\26\1\0\6\26\25\0"+
    "\10\26\1\u0138\6\26\1\u0139\5\26\1\u013a\17\26\3\0"+
    "\2\26\1\0\2\26\7\0\1\26\1\0\1\26\1\0"+
    "\6\26\25\0\16\26\1\u013b\26\26\3\0\2\26\1\0"+
    "\2\26\7\0\1\26\1\0\1\26\1\0\6\26\25\0"+
    "\25\26\1\u013c\17\26\3\0\2\26\1\0\2\26\7\0"+
    "\1\26\1\0\1\26\1\0\6\26\25\0\20\26\1\u013d"+
    "\1\26\1\u013e\22\26\3\0\2\26\1\0\2\26\7\0"+
    "\1\26\1\0\1\26\1\0\6\26\25\0\7\26\1\u013f"+
    "\35\26\3\0\2\26\1\0\2\26\7\0\1\26\1\0"+
    "\1\26\1\0\6\26\25\0\10\26\1\u0140\24\26\1\u0141"+
    "\7\26\3\0\2\26\1\0\2\26\7\0\1\26\1\0"+
    "\1\26\1\0\6\26\25\0\17\26\1\u0142\25\26\3\0"+
    "\2\26\1\0\2\26\7\0\1\26\1\0\1\26\1\0"+
    "\6\26\25\0\7\26\1\u0143\35\26\3\0\2\26\1\0"+
    "\2\26\7\0\1\26\1\0\1\26\1\0\6\26\25\0"+
    "\17\26\1\u0144\25\26\3\0\2\26\1\0\2\26\7\0"+
    "\1\26\1\0\1\26\1\0\6\26\25\0\27\26\1\u0145"+
    "\15\26\3\0\2\26\1\0\2\26\7\0\1\26\1\0"+
    "\1\26\1\0\6\26\25\0\10\26\1\u0146\34\26\3\0"+
    "\2\26\1\0\2\26\7\0\1\26\1\0\1\26\1\0"+
    "\6\26\25\0\10\26\1\u0147\34\26\3\0\2\26\1\0"+
    "\2\26\7\0\1\26\1\0\1\26\1\0\6\26\25\0"+
    "\16\26\1\u0148\26\26\3\0\2\26\1\0\2\26\7\0"+
    "\1\26\1\0\1\26\1\0\3\26\1\u0149\2\26\25\0"+
    "\10\26\1\u014a\34\26\3\0\2\26\1\0\2\26\7\0"+
    "\1\26\1\0\1\26\1\0\6\26\25\0\17\26\1\271"+
    "\25\26\3\0\2\26\1\0\2\26\7\0\1\26\1\0"+
    "\1\26\1\0\6\26\25\0\7\26\1\u014b\6\26\1\u014c"+
    "\26\26\3\0\2\26\1\0\2\26\7\0\1\26\1\0"+
    "\1\26\1\0\6\26\25\0\20\26\1\u014d\24\26\3\0"+
    "\2\26\1\0\2\26\7\0\1\26\1\0\1\26\1\0"+
    "\6\26\25\0\1\26\1\u014e\32\26\1\u014f\10\26\3\0"+
    "\2\26\1\0\2\26\7\0\1\26\1\0\1\26\1\0"+
    "\6\26\25\0\14\26\1\u0150\30\26\3\0\2\26\1\0"+
    "\2\26\7\0\1\26\1\0\1\26\1\0\6\26\25\0"+
    "\10\26\1\u0151\34\26\3\0\2\26\1\0\2\26\7\0"+
    "\1\26\1\0\1\26\1\0\6\26\25\0\41\26\1\u0152"+
    "\3\26\3\0\2\26\1\0\2\26\7\0\1\26\1\0"+
    "\1\26\1\0\6\26\25\0\6\26\1\u0153\36\26\3\0"+
    "\2\26\1\0\2\26\7\0\1\26\1\0\1\26\1\0"+
    "\6\26\25\0\25\26\1\u0154\17\26\3\0\2\26\1\0"+
    "\2\26\7\0\1\26\1\0\1\26\1\0\6\26\25\0"+
    "\20\26\1\u0155\24\26\3\0\2\26\1\0\2\26\55\0"+
    "\1\u0156\6\0\1\u0157\124\0\1\u0158\116\0\1\u0159\124\0"+
    "\1\u015a\131\0\1\u015b\111\0\1\u015c\56\0\1\u015d\162\0"+
    "\1\u015e\120\0\1\u015f\55\0\1\26\1\0\1\26\1\0"+
    "\6\26\25\0\3\26\1\u0160\1\u0161\16\26\1\u0162\2\26"+
    "\1\u0163\7\26\1\u0164\3\26\1\u0165\2\26\3\0\2\26"+
    "\1\0\1\u0166\1\26\6\0\123\204\3\112\1\0\2\112"+
    "\3\0\1\112\1\0\5\112\1\330\1\331\1\325\1\112"+
    "\1\0\13\112\45\0\3\112\2\0\1\112\2\0\26\112"+
    "\1\0\1\331\1\325\1\112\1\334\76\112\1\0\1\327"+
    "\1\0\1\327\1\0\6\327\25\0\45\327\3\0\2\327"+
    "\1\0\2\327\1\u0167\5\0\3\117\1\0\2\117\3\0"+
    "\1\117\1\0\5\117\1\340\1\117\1\336\1\341\1\0"+
    "\13\117\45\0\3\117\2\0\1\117\2\0\26\117\1\0"+
    "\1\117\1\336\1\341\1\342\76\117\3\126\1\0\2\126"+
    "\3\0\1\126\1\0\1\130\3\126\1\130\1\352\1\126"+
    "\1\345\1\126\1\0\13\126\45\0\3\126\2\0\1\126"+
    "\2\0\21\126\1\130\3\126\1\130\1\0\1\126\1\345"+
    "\1\126\1\353\111\126\1\347\3\126\1\347\1\344\1\126"+
    "\1\345\1\126\1\346\77\126\1\351\1\126\1\351\1\126"+
    "\6\351\1\u0168\2\126\1\u0169\1\u0168\1\344\1\126\1\345"+
    "\1\126\1\346\13\126\45\351\3\126\2\351\1\126\2\351"+
    "\6\126\13\134\1\354\3\134\1\354\104\134\1\356\1\134"+
    "\1\356\1\134\6\356\1\u016a\2\134\1\u016b\1\u016a\20\134"+
    "\45\356\3\134\2\356\1\134\2\356\6\134\3\370\1\u016c"+
    "\2\370\3\u016c\1\370\1\u016c\1\u016d\3\370\1\u016d\20\370"+
    "\45\u016c\3\370\2\u016c\1\370\2\u016c\7\370\1\u016e\1\370"+
    "\1\u016c\1\370\1\u016e\3\u016c\1\u016e\1\u016c\1\u016f\2\370"+
    "\1\u0170\1\u016f\20\370\45\u016c\3\370\2\u016c\1\370\2\u016c"+
    "\6\370\3\361\1\u0171\2\361\3\u0171\1\361\1\u0171\1\0"+
    "\3\361\1\0\20\361\45\u0171\3\361\2\u0171\1\361\2\u0171"+
    "\6\361\3\u0172\1\u0173\2\u0172\3\u0173\1\u0172\1\u0173\1\u016f"+
    "\3\u0172\1\u016f\20\u0172\45\u0173\3\u0172\2\u0173\1\u0172\2\u0173"+
    "\7\u0172\1\u0173\1\u0172\1\u0173\1\u0172\6\u0173\1\u0174\2\u0172"+
    "\1\u0175\1\u0174\20\u0172\45\u0173\3\u0172\2\u0173\1\u0172\2\u0173"+
    "\6\u0172\13\u0176\1\364\3\u0176\1\364\103\u0176\3\366\1\u0177"+
    "\2\366\3\u0177\1\366\1\u0177\1\u016d\2\366\1\370\1\u016d"+
    "\20\366\45\u0177\3\366\2\u0177\1\366\2\u0177\6\366\1\u0178"+
    "\1\367\1\u0178\1\367\1\u0178\6\367\1\u0174\2\u0178\1\u0175"+
    "\1\u0174\20\u0178\45\367\3\u0178\2\367\1\u0178\2\367\6\u0178"+
    "\1\0\1\372\3\0\1\372\3\0\1\372\112\0\1\373"+
    "\1\0\1\373\1\0\6\373\25\0\45\373\3\0\2\373"+
    "\1\0\2\373\14\0\1\u0179\170\0\1\u017a\12\0\1\u017b"+
    "\106\0\1\u017c\2\0\1\u017d\4\0\1\u017e\105\0\1\u017f"+
    "\123\0\1\u0180\132\0\1\u0181\125\0\1\u0182\116\0\1\u0183"+
    "\3\0\1\u0184\106\0\1\u0185\1\u0186\1\u0187\2\0\1\u0188"+
    "\115\0\1\u0189\64\0\1\u018a\42\0\1\u018b\1\0\1\u018c"+
    "\114\0\1\u018d\140\0\1\u018e\115\0\1\u018f\1\0\1\u0190"+
    "\106\0\1\u0191\13\0\1\u0192\106\0\1\u0193\13\0\1\u0194"+
    "\41\0\1\u010f\1\0\1\u010f\1\0\6\u010f\1\u0195\2\0"+
    "\1\u0196\1\u0195\20\0\45\u010f\3\0\2\u010f\1\0\2\u010f"+
    "\7\0\1\26\1\0\1\26\1\0\6\26\25\0\20\26"+
    "\1\u0197\24\26\3\0\2\26\1\0\2\26\37\0\1\u0116"+
    "\72\0\1\26\1\0\1\26\1\0\6\26\25\0\22\26"+
    "\1\u0198\22\26\3\0\2\26\1\0\2\26\7\0\1\205"+
    "\1\0\1\205\1\0\6\205\25\0\7\205\1\u0199\35\205"+
    "\3\0\2\205\1\0\2\205\11\0\1\u019a\2\0\3\u019a"+
    "\1\0\1\u019a\1\0\1\u0116\4\0\1\u019b\16\0\45\u019a"+
    "\3\0\2\u019a\1\0\2\u019a\2\0\1\u019c\16\0\2\u019d"+
    "\2\0\1\u019d\100\0\1\u019e\3\0\1\26\1\0\1\26"+
    "\1\0\6\26\25\0\10\26\1\u019f\34\26\3\0\2\26"+
    "\1\0\2\26\7\0\1\26\1\0\1\26\1\0\6\26"+
    "\25\0\22\26\1\u01a0\22\26\3\0\2\26\1\0\2\26"+
    "\7\0\1\26\1\0\1\26\1\0\6\26\25\0\22\26"+
    "\1\u01a1\22\26\3\0\2\26\1\0\2\26\7\0\1\26"+
    "\1\0\1\26\1\0\6\26\25\0\37\26\1\u01a2\5\26"+
    "\3\0\2\26\1\0\2\26\7\0\1\26\1\0\1\26"+
    "\1\0\6\26\25\0\10\26\1\u01a3\34\26\3\0\2\26"+
    "\1\0\2\26\7\0\1\26\1\0\1\26\1\0\6\26"+
    "\25\0\6\26\1\u01a4\36\26\3\0\2\26\1\0\2\26"+
    "\7\0\1\26\1\0\1\26\1\0\6\26\25\0\7\26"+
    "\1\u01a5\1\26\1\u01a6\1\u01a7\4\26\1\u01a8\4\26\1\u01a9"+
    "\20\26\3\0\2\26\1\0\2\26\7\0\1\26\1\0"+
    "\1\26\1\0\6\26\25\0\16\26\1\u01aa\26\26\3\0"+
    "\2\26\1\0\2\26\7\0\1\26\1\0\1\26\1\0"+
    "\6\26\25\0\6\26\1\u01ab\36\26\3\0\2\26\1\0"+
    "\2\26\7\0\1\26\1\0\1\26\1\0\6\26\25\0"+
    "\25\26\1\u01ac\17\26\3\0\2\26\1\0\2\26\7\0"+
    "\1\26\1\0\1\26\1\0\6\26\25\0\6\26\1\u01ad"+
    "\36\26\3\0\2\26\1\0\2\26\7\0\1\26\1\0"+
    "\1\26\1\0\6\26\25\0\25\26\1\u01ae\17\26\3\0"+
    "\2\26\1\0\2\26\7\0\1\26\1\0\1\26\1\0"+
    "\6\26\25\0\10\26\1\u01af\34\26\3\0\2\26\1\0"+
    "\2\26\7\0\1\26\1\0\1\26\1\0\6\26\25\0"+
    "\25\26\1\u01b0\17\26\3\0\2\26\1\0\2\26\7\0"+
    "\1\26\1\0\1\26\1\0\6\26\25\0\6\26\1\u01b1"+
    "\36\26\3\0\2\26\1\0\2\26\7\0\1\26\1\0"+
    "\1\26\1\0\6\26\25\0\7\26\1\u01b2\35\26\3\0"+
    "\2\26\1\0\2\26\7\0\1\26\1\0\1\26\1\0"+
    "\6\26\25\0\16\26\1\u01b3\26\26\3\0\2\26\1\0"+
    "\2\26\7\0\1\26\1\0\1\26\1\0\6\26\25\0"+
    "\22\26\1\u01b4\22\26\3\0\2\26\1\0\2\26\7\0"+
    "\1\26\1\0\1\26\1\0\6\26\25\0\25\26\1\u01b5"+
    "\17\26\3\0\2\26\1\0\2\26\7\0\1\26\1\0"+
    "\1\26\1\0\6\26\25\0\22\26\1\u01b6\22\26\3\0"+
    "\2\26\1\0\2\26\7\0\1\26\1\0\1\26\1\0"+
    "\6\26\25\0\15\26\1\u01b7\27\26\3\0\2\26\1\0"+
    "\2\26\7\0\1\26\1\0\1\26\1\0\6\26\25\0"+
    "\6\26\1\u01b8\36\26\3\0\2\26\1\0\2\26\7\0"+
    "\1\26\1\0\1\26\1\0\6\26\25\0\32\26\1\u01b9"+
    "\12\26\3\0\2\26\1\0\2\26\7\0\1\26\1\0"+
    "\1\26\1\0\6\26\25\0\17\26\1\u01ba\25\26\3\0"+
    "\2\26\1\0\2\26\7\0\1\26\1\0\1\26\1\0"+
    "\6\26\25\0\6\26\1\u01bb\36\26\3\0\2\26\1\0"+
    "\2\26\7\0\1\26\1\0\1\26\1\0\6\26\25\0"+
    "\25\26\1\u01bc\17\26\3\0\2\26\1\0\2\26\7\0"+
    "\1\26\1\0\1\26\1\0\6\26\25\0\6\26\1\u01bd"+
    "\36\26\3\0\2\26\1\0\2\26\7\0\1\26\1\0"+
    "\1\26\1\0\6\26\25\0\10\26\1\u01be\6\26\1\u01bf"+
    "\25\26\3\0\2\26\1\0\2\26\7\0\1\26\1\0"+
    "\1\26\1\0\6\26\25\0\15\26\1\u01c0\27\26\3\0"+
    "\2\26\1\0\2\26\7\0\1\26\1\0\1\26\1\0"+
    "\6\26\25\0\6\26\1\u01c1\36\26\3\0\2\26\1\0"+
    "\2\26\7\0\1\26\1\0\1\26\1\0\6\26\25\0"+
    "\25\26\1\u01c2\17\26\3\0\2\26\1\0\2\26\7\0"+
    "\1\26\1\0\1\26\1\0\6\26\25\0\14\26\1\u01c3"+
    "\30\26\3\0\2\26\1\0\2\26\7\0\1\26\1\0"+
    "\1\26\1\0\6\26\25\0\12\26\1\u01c4\32\26\3\0"+
    "\2\26\1\0\2\26\7\0\1\26\1\0\1\26\1\0"+
    "\6\26\25\0\7\26\1\u01c5\35\26\3\0\2\26\1\0"+
    "\2\26\7\0\1\26\1\0\1\26\1\0\6\26\25\0"+
    "\10\26\1\u01c6\34\26\3\0\2\26\1\0\2\26\7\0"+
    "\1\26\1\0\1\26\1\0\6\26\25\0\10\26\1\u01c7"+
    "\34\26\3\0\2\26\1\0\2\26\7\0\1\26\1\0"+
    "\1\26\1\0\6\26\25\0\13\26\1\u01c8\31\26\3\0"+
    "\2\26\1\0\2\26\7\0\1\26\1\0\1\26\1\0"+
    "\6\26\25\0\13\26\1\u01c9\31\26\3\0\2\26\1\0"+
    "\2\26\7\0\1\26\1\0\1\26\1\0\6\26\25\0"+
    "\10\26\1\u01ca\34\26\3\0\2\26\1\0\2\26\7\0"+
    "\1\26\1\0\1\26\1\0\6\26\25\0\25\26\1\u01cb"+
    "\17\26\3\0\2\26\1\0\2\26\7\0\1\26\1\0"+
    "\1\26\1\0\6\26\25\0\10\26\1\u01cc\34\26\3\0"+
    "\2\26\1\0\2\26\7\0\1\26\1\0\1\26\1\0"+
    "\6\26\25\0\16\26\1\u01cd\26\26\3\0\2\26\1\0"+
    "\2\26\7\0\1\26\1\0\1\26\1\0\3\26\1\u01ce"+
    "\2\26\25\0\45\26\3\0\2\26\1\0\2\26\7\0"+
    "\1\26\1\0\1\26\1\0\6\26\25\0\25\26\1\u01cf"+
    "\17\26\3\0\2\26\1\0\2\26\7\0\1\26\1\0"+
    "\1\26\1\0\6\26\25\0\14\26\1\u01d0\27\26\1\u01d1"+
    "\3\0\2\26\1\0\2\26\7\0\1\26\1\0\1\26"+
    "\1\0\6\26\25\0\10\26\1\u01d2\34\26\3\0\2\26"+
    "\1\0\2\26\7\0\1\26\1\0\1\26\1\0\6\26"+
    "\25\0\6\26\1\u01d3\10\26\1\u01d4\25\26\3\0\2\26"+
    "\1\0\2\26\7\0\1\26\1\0\1\26\1\0\6\26"+
    "\25\0\6\26\1\u01d5\36\26\3\0\2\26\1\0\2\26"+
    "\7\0\1\26\1\0\1\26\1\0\6\26\25\0\10\26"+
    "\1\u01d6\34\26\3\0\2\26\1\0\2\26\7\0\1\26"+
    "\1\0\1\26\1\0\6\26\25\0\11\26\1\u01d7\33\26"+
    "\3\0\2\26\1\0\2\26\7\0\1\26\1\0\1\26"+
    "\1\0\6\26\25\0\22\26\1\u01d8\22\26\3\0\2\26"+
    "\1\0\2\26\7\0\1\26\1\0\1\26\1\0\6\26"+
    "\25\0\36\26\1\u01d9\6\26\3\0\2\26\1\0\2\26"+
    "\7\0\1\26\1\0\1\26\1\0\6\26\25\0\11\26"+
    "\1\u01da\33\26\3\0\2\26\1\0\2\26\7\0\1\26"+
    "\1\0\1\26\1\0\6\26\25\0\6\26\1\u01db\36\26"+
    "\3\0\2\26\1\0\2\26\62\0\1\u01dc\124\0\1\u01dd"+
    "\124\0\1\u01de\112\0\1\u01df\125\0\1\u01e0\125\0\1\u01e1"+
    "\123\0\1\u01e2\153\0\1\u01e3\72\0\1\u01e4\124\0\1\u01e5"+
    "\41\0\1\26\1\0\1\26\1\0\6\26\25\0\2\26"+
    "\1\u01e6\42\26\3\0\2\26\1\0\2\26\7\0\1\26"+
    "\1\0\1\26\1\0\6\26\25\0\41\26\1\u01e7\3\26"+
    "\3\0\2\26\1\0\2\26\7\0\1\26\1\0\1\26"+
    "\1\0\6\26\25\0\22\26\1\u01e8\22\26\3\0\2\26"+
    "\1\0\2\26\7\0\1\26\1\0\1\26\1\0\6\26"+
    "\25\0\41\26\1\u01e9\3\26\3\0\2\26\1\0\2\26"+
    "\7\0\1\26\1\0\1\u01ea\1\0\6\26\25\0\45\26"+
    "\3\0\2\26\1\0\2\26\7\0\1\26\1\0\1\26"+
    "\1\0\6\26\25\0\40\26\1\u01eb\1\u01ec\3\26\3\0"+
    "\2\26\1\0\2\26\7\0\1\26\1\0\1\26\1\0"+
    "\6\26\25\0\26\26\1\u01ed\16\26\3\0\2\26\1\0"+
    "\2\26\6\0\13\126\1\u0168\3\126\1\u0168\1\344\1\126"+
    "\1\345\1\126\1\346\76\126\13\134\1\u016a\3\134\1\u016a"+
    "\103\134\1\357\1\u01ee\1\357\1\u01ee\1\357\6\u01ee\1\364"+
    "\2\357\1\u01ef\1\364\20\357\45\u01ee\3\357\2\u01ee\1\357"+
    "\2\u01ee\6\357\13\u01f0\1\0\2\u01f0\2\0\103\u01f0\1\357"+
    "\1\360\1\357\1\360\1\357\6\360\1\u01f1\2\357\1\u01f2"+
    "\1\u01f1\20\357\45\360\3\357\2\360\1\357\2\360\11\357"+
    "\1\360\2\357\3\360\1\357\1\360\1\u01f1\2\357\1\361"+
    "\1\u01f1\20\357\45\360\3\357\2\360\1\357\2\360\6\357"+
    "\1\361\1\u0171\1\361\1\u0171\1\361\6\u0171\1\u01f1\2\361"+
    "\1\u01f2\1\u01f1\20\361\45\u0171\3\361\2\u0171\1\361\2\u0171"+
    "\6\361\13\362\1\u01f1\2\362\1\u0176\1\u01f1\116\362\1\364"+
    "\2\362\1\u0176\1\364\103\362\13\u0176\1\u01f1\3\u0176\1\u01f1"+
    "\103\u0176\1\366\1\u0177\1\366\1\u0177\1\366\6\u0177\1\u0174"+
    "\2\366\1\u01f3\1\u0174\20\366\45\u0177\3\366\2\u0177\1\366"+
    "\2\u0177\6\366\3\u0178\1\367\2\u0178\3\367\1\u0178\1\367"+
    "\1\u016f\2\u0178\1\u0172\1\u016f\20\u0178\45\367\3\u0178\2\367"+
    "\1\u0178\2\367\6\u0178\55\0\1\u01f4\4\0\1\u01f5\110\0"+
    "\1\u01f6\126\0\1\u01f7\116\0\1\u01f8\123\0\1\u01f9\131\0"+
    "\1\u01fa\121\0\1\u01fb\11\0\1\u01fc\105\0\1\u01fd\10\0"+
    "\1\u01fe\103\0\1\u01ff\146\0\1\u0200\121\0\1\u0201\101\0"+
    "\1\u0202\120\0\1\u0203\130\0\1\u0204\130\0\1\u0205\50\0"+
    "\1\u0206\162\0\1\u0207\131\0\1\u0208\113\0\1\u0209\127\0"+
    "\1\u020a\121\0\1\u020b\1\u020c\123\0\1\u020d\122\0\1\u020e"+
    "\121\0\1\u020f\2\0\1\u0210\112\0\1\u0211\141\0\1\u0212"+
    "\113\0\1\u0213\122\0\1\u0214\55\0\1\u0195\3\0\1\u0195"+
    "\104\0\1\26\1\0\1\26\1\0\6\26\25\0\21\26"+
    "\1\u0215\23\26\3\0\2\26\1\0\2\26\7\0\1\26"+
    "\1\0\1\26\1\0\6\26\25\0\30\26\1\u0216\14\26"+
    "\3\0\2\26\1\0\2\26\7\0\1\205\1\0\1\205"+
    "\1\0\6\205\25\0\17\205\1\u0217\25\205\3\0\2\205"+
    "\1\0\2\205\7\0\1\u019a\1\0\1\u019a\1\0\6\u019a"+
    "\1\u0218\3\0\1\u0219\20\0\45\u019a\3\0\2\u019a\1\0"+
    "\2\u019a\11\0\1\u021a\2\0\3\u021a\1\0\1\u021a\25\0"+
    "\45\u021a\3\0\2\u021a\1\0\2\u021a\11\0\1\u021b\2\0"+
    "\3\u021b\1\0\1\u021b\25\0\45\u021b\3\0\2\u021b\1\0"+
    "\2\u021b\21\0\2\u019d\2\0\1\u019d\225\0\1\u021c\1\0"+
    "\1\26\1\0\1\26\1\0\6\26\25\0\23\26\1\u021d"+
    "\21\26\3\0\2\26\1\0\2\26\7\0\1\26\1\0"+
    "\1\26\1\0\6\26\25\0\21\26\1\u021e\23\26\3\0"+
    "\2\26\1\0\2\26\7\0\1\26\1\0\1\26\1\0"+
    "\3\26\1\u021f\2\26\25\0\45\26\3\0\2\26\1\0"+
    "\2\26\7\0\1\26\1\0\1\26\1\0\6\26\25\0"+
    "\10\26\1\u0220\34\26\3\0\2\26\1\0\2\26\7\0"+
    "\1\26\1\0\1\26\1\0\6\26\25\0\14\26\1\u0221"+
    "\30\26\3\0\2\26\1\0\2\26\7\0\1\26\1\0"+
    "\1\26\1\0\6\26\25\0\12\26\1\u0222\32\26\3\0"+
    "\2\26\1\0\2\26\7\0\1\26\1\0\1\26\1\0"+
    "\6\26\25\0\6\26\1\u0223\36\26\3\0\2\26\1\0"+
    "\2\26\7\0\1\26\1\0\1\26\1\0\6\26\25\0"+
    "\16\26\1\u0224\26\26\3\0\2\26\1\0\2\26\7\0"+
    "\1\26\1\0\1\26\1\0\6\26\25\0\24\26\1\u0225"+
    "\20\26\3\0\2\26\1\0\2\26\7\0\1\26\1\0"+
    "\1\26\1\0\6\26\25\0\23\26\1\u0226\21\26\3\0"+
    "\2\26\1\0\2\26\7\0\1\26\1\0\1\26\1\0"+
    "\6\26\25\0\7\26\1\u0227\35\26\3\0\2\26\1\0"+
    "\2\26\7\0\1\26\1\0\1\26\1\0\6\26\25\0"+
    "\20\26\1\u0228\24\26\3\0\2\26\1\0\2\26\7\0"+
    "\1\26\1\0\1\26\1\0\6\26\25\0\13\26\1\u0229"+
    "\31\26\3\0\2\26\1\0\2\26\7\0\1\26\1\0"+
    "\1\26\1\0\6\26\25\0\6\26\1\u022a\13\26\1\u022b"+
    "\22\26\3\0\2\26\1\0\2\26\7\0\1\26\1\0"+
    "\1\26\1\0\6\26\25\0\6\26\1\u022c\36\26\3\0"+
    "\2\26\1\0\2\26\7\0\1\26\1\0\1\26\1\0"+
    "\6\26\25\0\10\26\1\u022d\34\26\3\0\2\26\1\0"+
    "\2\26\7\0\1\26\1\0\1\26\1\0\6\26\25\0"+
    "\24\26\1\u022e\20\26\3\0\2\26\1\0\2\26\7\0"+
    "\1\26\1\0\1\26\1\0\6\26\25\0\13\26\1\u022f"+
    "\31\26\3\0\2\26\1\0\2\26\7\0\1\26\1\0"+
    "\1\26\1\0\6\26\25\0\22\26\1\u0230\22\26\3\0"+
    "\2\26\1\0\2\26\7\0\1\26\1\0\1\26\1\0"+
    "\6\26\25\0\25\26\1\u0231\17\26\3\0\2\26\1\0"+
    "\2\26\7\0\1\26\1\0\1\26\1\0\6\26\25\0"+
    "\10\26\1\u0232\34\26\3\0\2\26\1\0\2\26\7\0"+
    "\1\26\1\0\1\26\1\0\6\26\25\0\22\26\1\u0233"+
    "\22\26\3\0\2\26\1\0\2\26\7\0\1\26\1\0"+
    "\1\26\1\0\6\26\25\0\6\26\1\u0234\36\26\3\0"+
    "\2\26\1\0\2\26\7\0\1\26\1\0\1\26\1\0"+
    "\6\26\25\0\10\26\1\u0235\34\26\3\0\2\26\1\0"+
    "\2\26\7\0\1\26\1\0\1\26\1\0\6\26\25\0"+
    "\17\26\1\u0236\25\26\3\0\2\26\1\0\2\26\7\0"+
    "\1\26\1\0\1\26\1\0\6\26\25\0\7\26\1\u0237"+
    "\35\26\3\0\2\26\1\0\2\26\7\0\1\26\1\0"+
    "\1\26\1\0\6\26\25\0\10\26\1\u0238\34\26\3\0"+
    "\2\26\1\0\2\26\7\0\1\26\1\0\1\26\1\0"+
    "\6\26\25\0\23\26\1\u0239\21\26\3\0\2\26\1\0"+
    "\2\26\7\0\1\26\1\0\1\26\1\0\6\26\25\0"+
    "\22\26\1\u023a\22\26\3\0\2\26\1\0\2\26\7\0"+
    "\1\26\1\0\1\26\1\0\6\26\25\0\6\26\1\u023b"+
    "\36\26\3\0\2\26\1\0\2\26\7\0\1\26\1\0"+
    "\1\26\1\0\6\26\25\0\14\26\1\u023c\30\26\3\0"+
    "\2\26\1\0\2\26\7\0\1\26\1\0\1\26\1\0"+
    "\6\26\25\0\7\26\1\u023d\35\26\3\0\2\26\1\0"+
    "\2\26\7\0\1\26\1\0\1\26\1\0\6\26\25\0"+
    "\15\26\1\u023e\27\26\3\0\2\26\1\0\2\26\7\0"+
    "\1\26\1\0\1\26\1\0\6\26\25\0\20\26\1\u023f"+
    "\24\26\3\0\2\26\1\0\2\26\7\0\1\26\1\0"+
    "\1\26\1\0\6\26\25\0\7\26\1\u0240\35\26\3\0"+
    "\2\26\1\0\2\26\7\0\1\26\1\0\1\26\1\0"+
    "\6\26\25\0\20\26\1\u0241\24\26\3\0\2\26\1\0"+
    "\2\26\7\0\1\26\1\0\1\26\1\0\6\26\25\0"+
    "\6\26\1\u0242\36\26\3\0\2\26\1\0\2\26\7\0"+
    "\1\26\1\0\1\26\1\0\6\26\25\0\22\26\1\u0243"+
    "\22\26\3\0\2\26\1\0\2\26\7\0\1\26\1\0"+
    "\1\26\1\0\6\26\25\0\7\26\1\u0244\35\26\3\0"+
    "\2\26\1\0\2\26\7\0\1\26\1\0\1\26\1\0"+
    "\6\26\25\0\10\26\1\u0245\34\26\3\0\2\26\1\0"+
    "\2\26\7\0\1\26\1\0\1\26\1\0\6\26\25\0"+
    "\22\26\1\u0246\22\26\3\0\2\26\1\0\2\26\7\0"+
    "\1\26\1\0\1\26\1\0\6\26\25\0\6\26\1\u0247"+
    "\36\26\3\0\2\26\1\0\2\26\7\0\1\26\1\0"+
    "\1\26\1\0\6\26\25\0\14\26\1\u0248\30\26\3\0"+
    "\2\26\1\0\2\26\7\0\1\26\1\0\1\26\1\0"+
    "\6\26\25\0\6\26\1\u0249\36\26\3\0\2\26\1\0"+
    "\2\26\7\0\1\26\1\0\1\26\1\0\6\26\25\0"+
    "\35\26\1\u024a\7\26\3\0\2\26\1\0\2\26\7\0"+
    "\1\26\1\0\1\26\1\0\6\26\25\0\13\26\1\u024b"+
    "\31\26\3\0\2\26\1\0\2\26\7\0\1\26\1\0"+
    "\1\26\1\0\6\26\25\0\6\26\1\u024c\36\26\3\0"+
    "\2\26\1\0\2\26\7\0\1\26\1\0\1\26\1\0"+
    "\6\26\25\0\11\26\1\u024d\33\26\3\0\2\26\1\0"+
    "\2\26\7\0\1\26\1\0\1\26\1\0\6\26\25\0"+
    "\22\26\1\u024e\22\26\3\0\2\26\1\0\2\26\70\0"+
    "\1\u024f\125\0\1\u0250\117\0\1\u0251\54\0\1\u0252\31\0"+
    "\1\u0253\40\0\1\u0254\23\0\1\u0255\174\0\1\u0256\106\0"+
    "\1\u0256\122\0\1\u0257\123\0\1\u0258\140\0\1\u0252\36\0"+
    "\1\26\1\0\1\26\1\0\6\26\25\0\36\26\1\u0259"+
    "\6\26\3\0\2\26\1\0\2\26\7\0\1\26\1\0"+
    "\1\26\1\0\6\26\25\0\1\26\1\u025a\43\26\3\0"+
    "\2\26\1\0\2\26\7\0\1\26\1\0\1\26\1\0"+
    "\6\26\25\0\25\26\1\u025b\17\26\3\0\2\26\1\0"+
    "\2\26\7\0\1\26\1\0\1\26\1\0\6\26\25\0"+
    "\3\26\1\u025c\41\26\3\0\2\26\1\0\2\26\7\0"+
    "\1\26\1\0\1\26\1\0\6\26\25\0\45\26\3\0"+
    "\2\26\1\0\1\26\1\u025d\7\0\1\26\1\0\1\26"+
    "\1\0\6\26\25\0\3\26\1\u025e\41\26\3\0\2\26"+
    "\1\0\2\26\7\0\1\26\1\0\1\26\1\0\6\26"+
    "\25\0\26\26\1\u025f\16\26\3\0\2\26\1\0\2\26"+
    "\7\0\1\26\1\0\1\26\1\0\6\26\25\0\2\26"+
    "\1\u0260\42\26\3\0\2\26\1\0\2\26\6\0\1\370"+
    "\1\u016c\1\370\1\u016c\1\370\6\u016c\1\u0174\2\370\1\u01f3"+
    "\1\u0174\20\370\45\u016c\3\370\2\u016c\1\370\2\u016c\6\370"+
    "\3\361\1\u0171\2\361\3\u0171\1\361\1\u0171\1\364\3\361"+
    "\1\364\20\361\45\u0171\3\361\2\u0171\1\361\2\u0171\6\361"+
    "\3\u016d\1\u0261\2\u016d\3\u0261\1\u016d\1\u0261\25\u016d\45\u0261"+
    "\3\u016d\2\u0261\1\u016d\2\u0261\6\u016d\3\361\1\u0171\2\361"+
    "\3\u0171\1\361\1\u0171\1\u01f1\3\361\1\u01f1\20\361\45\u0171"+
    "\3\361\2\u0171\1\361\2\u0171\6\361\3\357\1\360\2\357"+
    "\3\360\1\357\1\360\1\364\2\357\1\361\1\364\20\357"+
    "\45\360\3\357\2\360\1\357\2\360\6\357\46\0\1\u0262"+
    "\146\0\1\u0263\76\0\1\u0264\132\0\1\u0265\122\0\1\u0266"+
    "\122\0\1\u0267\122\0\1\u0268\121\0\1\u0269\125\0\1\u026a"+
    "\124\0\1\u026b\106\0\1\u026c\133\0\1\u026d\111\0\1\u026e"+
    "\135\0\1\u026f\107\0\1\u0270\131\0\1\u0271\115\0\1\u0272"+
    "\143\0\1\u0273\104\0\1\u0274\117\0\1\u0275\135\0\1\u0276"+
    "\105\0\1\u0277\144\0\1\u0278\100\0\1\u0279\64\0\1\u027a"+
    "\203\0\1\u027b\121\0\1\u027c\114\0\1\u027d\123\0\1\u027e"+
    "\106\0\1\u027f\132\0\1\u0280\56\0\1\u0218\110\0\1\u021a"+
    "\1\0\1\u021a\1\0\6\u021a\6\0\1\u0281\16\0\45\u021a"+
    "\3\0\2\u021a\1\0\2\u021a\7\0\1\u021b\1\0\1\u021b"+
    "\1\0\6\u021b\25\0\45\u021b\3\0\2\u021b\1\0\2\u021b"+
    "\2\0\1\u0281\32\0\1\u0282\74\0\1\26\1\0\1\26"+
    "\1\0\6\26\25\0\43\26\1\u0283\1\26\3\0\2\26"+
    "\1\0\2\26\7\0\1\26\1\0\1\26\1\0\6\26"+
    "\25\0\22\26\1\u0284\22\26\3\0\2\26\1\0\2\26"+
    "\7\0\1\26\1\0\1\26\1\0\6\26\25\0\10\26"+
    "\1\u0285\34\26\3\0\2\26\1\0\2\26\7\0\1\26"+
    "\1\0\1\26\1\0\6\26\25\0\11\26\1\u0286\33\26"+
    "\3\0\2\26\1\0\2\26\7\0\1\26\1\0\1\26"+
    "\1\0\6\26\25\0\15\26\1\u0287\27\26\3\0\2\26"+
    "\1\0\2\26\7\0\1\26\1\0\1\26\1\0\6\26"+
    "\25\0\20\26\1\u0288\24\26\3\0\2\26\1\0\2\26"+
    "\7\0\1\26\1\0\1\26\1\0\6\26\25\0\7\26"+
    "\1\u0289\35\26\3\0\2\26\1\0\2\26\7\0\1\26"+
    "\1\0\1\26\1\0\6\26\25\0\7\26\1\u028a\35\26"+
    "\3\0\2\26\1\0\2\26\7\0\1\26\1\0\1\26"+
    "\1\0\6\26\25\0\12\26\1\u028b\32\26\3\0\2\26"+
    "\1\0\2\26\7\0\1\26\1\0\1\26\1\0\6\26"+
    "\25\0\12\26\1\u028c\32\26\3\0\2\26\1\0\2\26"+
    "\7\0\1\26\1\0\1\26\1\0\6\26\25\0\11\26"+
    "\1\u028d\33\26\3\0\2\26\1\0\2\26\7\0\1\26"+
    "\1\0\1\26\1\0\6\26\25\0\22\26\1\u028e\22\26"+
    "\3\0\2\26\1\0\2\26\7\0\1\26\1\0\1\26"+
    "\1\0\6\26\25\0\14\26\1\u028f\30\26\3\0\2\26"+
    "\1\0\2\26\7\0\1\26\1\0\1\26\1\0\6\26"+
    "\25\0\32\26\1\u0290\12\26\3\0\2\26\1\0\2\26"+
    "\7\0\1\26\1\0\1\26\1\0\6\26\25\0\25\26"+
    "\1\u0291\17\26\3\0\2\26\1\0\2\26\7\0\1\26"+
    "\1\0\1\26\1\0\6\26\25\0\20\26\1\u0292\24\26"+
    "\3\0\2\26\1\0\2\26\7\0\1\26\1\0\1\26"+
    "\1\0\6\26\25\0\7\26\1\u0293\35\26\3\0\2\26"+
    "\1\0\2\26\7\0\1\26\1\0\1\26\1\0\6\26"+
    "\25\0\15\26\1\u0294\27\26\3\0\2\26\1\0\2\26"+
    "\7\0\1\26\1\0\1\26\1\0\6\26\25\0\31\26"+
    "\1\u0295\13\26\3\0\2\26\1\0\2\26\7\0\1\26"+
    "\1\0\1\26\1\0\6\26\25\0\14\26\1\u0296\30\26"+
    "\3\0\2\26\1\0\2\26\7\0\1\26\1\0\1\26"+
    "\1\0\3\26\1\u0297\2\26\25\0\45\26\3\0\2\26"+
    "\1\0\2\26\7\0\1\26\1\0\1\26\1\0\6\26"+
    "\25\0\27\26\1\u0298\15\26\3\0\2\26\1\0\2\26"+
    "\7\0\1\26\1\0\1\26\1\0\6\26\25\0\15\26"+
    "\1\u0299\27\26\3\0\2\26\1\0\2\26\7\0\1\26"+
    "\1\0\1\26\1\0\6\26\25\0\23\26\1\u029a\21\26"+
    "\3\0\2\26\1\0\2\26\7\0\1\26\1\0\1\26"+
    "\1\0\6\26\25\0\14\26\1\u029b\30\26\3\0\2\26"+
    "\1\0\2\26\7\0\1\26\1\0\1\26\1\0\6\26"+
    "\25\0\20\26\1\u029c\24\26\3\0\2\26\1\0\2\26"+
    "\7\0\1\26\1\0\1\26\1\0\6\26\25\0\22\26"+
    "\1\u029d\22\26\3\0\2\26\1\0\2\26\7\0\1\26"+
    "\1\0\1\26\1\0\6\26\25\0\25\26\1\u029e\17\26"+
    "\3\0\2\26\1\0\2\26\7\0\1\26\1\0\1\26"+
    "\1\0\6\26\25\0\15\26\1\u029f\27\26\3\0\2\26"+
    "\1\0\2\26\7\0\1\26\1\0\1\26\1\0\6\26"+
    "\25\0\10\26\1\u02a0\34\26\3\0\2\26\1\0\2\26"+
    "\7\0\1\26\1\0\1\26\1\0\6\26\25\0\15\26"+
    "\1\u02a1\27\26\3\0\2\26\1\0\2\26\7\0\1\26"+
    "\1\0\1\26\1\0\6\26\25\0\10\26\1\u02a2\34\26"+
    "\3\0\2\26\1\0\2\26\7\0\1\26\1\0\1\26"+
    "\1\0\6\26\25\0\13\26\1\u02a3\31\26\3\0\2\26"+
    "\1\0\2\26\7\0\1\26\1\0\1\26\1\0\3\26"+
    "\1\u02a4\2\26\25\0\45\26\3\0\2\26\1\0\2\26"+
    "\7\0\1\26\1\0\1\26\1\0\6\26\25\0\20\26"+
    "\1\u02a5\24\26\3\0\2\26\1\0\2\26\7\0\1\26"+
    "\1\0\1\26\1\0\6\26\25\0\22\26\1\u02a6\22\26"+
    "\3\0\2\26\1\0\2\26\7\0\1\26\1\0\1\26"+
    "\1\0\6\26\25\0\10\26\1\u02a7\34\26\3\0\2\26"+
    "\1\0\2\26\66\0\1\u0251\56\0\1\u0252\31\0\1\u02a8"+
    "\40\0\1\u0254\74\0\1\u0252\55\0\1\u0252\72\0\1\u0254"+
    "\102\0\1\u02a9\120\0\1\u02aa\105\0\1\u0252\127\0\1\u0256"+
    "\121\0\1\u02ab\47\0\1\26\1\0\1\u02ac\1\0\6\26"+
    "\25\0\45\26\3\0\2\26\1\0\2\26\7\0\1\26"+
    "\1\0\1\26\1\0\6\26\25\0\45\26\3\0\1\26"+
    "\1\u02ad\1\0\2\26\7\0\1\26\1\0\1\26\1\0"+
    "\6\26\25\0\10\26\1\u02ae\34\26\3\0\2\26\1\0"+
    "\2\26\7\0\1\26\1\0\1\u02af\1\0\6\26\25\0"+
    "\45\26\3\0\2\26\1\0\2\26\7\0\1\26\1\0"+
    "\1\26\1\0\6\26\25\0\37\26\1\u02b0\5\26\3\0"+
    "\2\26\1\0\2\26\7\0\1\26\1\0\1\26\1\0"+
    "\6\26\25\0\45\26\3\0\2\26\1\0\1\u02b1\1\26"+
    "\7\0\1\26\1\0\1\u02b2\1\0\6\26\25\0\45\26"+
    "\3\0\2\26\1\0\2\26\7\0\1\26\1\0\1\26"+
    "\1\0\6\26\25\0\34\26\1\u02b3\10\26\3\0\2\26"+
    "\1\0\2\26\6\0\1\u01f0\1\u02b4\1\u01f0\1\u02b4\1\u01f0"+
    "\6\u02b4\1\364\2\u01f0\1\u02b5\1\364\20\u01f0\45\u02b4\3\u01f0"+
    "\2\u02b4\1\u01f0\2\u02b4\6\u01f0\71\0\1\u02b6\122\0\1\u02b7"+
    "\111\0\1\u02b8\122\0\1\u02b9\122\0\1\u02ba\126\0\1\u02bb"+
    "\104\0\1\u02bc\141\0\1\u02bd\114\0\1\u02be\122\0\1\u02bf"+
    "\123\0\1\u02c0\131\0\1\u02c1\101\0\1\u02c2\123\0\1\u02c3"+
    "\135\0\1\u02c4\120\0\1\u02c5\122\0\1\u02c6\120\0\1\u02c7"+
    "\123\0\1\u02c8\117\0\1\u02c9\130\0\1\u02ca\106\0\1\u02cb"+
    "\136\0\1\u02cc\132\0\1\u02cd\106\0\1\u02ce\121\0\1\u02cf"+
    "\114\0\1\u02d0\66\0\1\u0218\3\0\1\u0219\104\0\1\26"+
    "\1\0\1\26\1\0\6\26\25\0\20\26\1\u02d1\24\26"+
    "\3\0\2\26\1\0\2\26\7\0\1\26\1\0\1\26"+
    "\1\0\6\26\25\0\17\26\1\u02d2\25\26\3\0\2\26"+
    "\1\0\2\26\7\0\1\26\1\0\1\26\1\0\6\26"+
    "\25\0\31\26\1\u02d3\13\26\3\0\2\26\1\0\2\26"+
    "\7\0\1\26\1\0\1\26\1\0\6\26\25\0\17\26"+
    "\1\u02d4\25\26\3\0\2\26\1\0\2\26\7\0\1\26"+
    "\1\0\1\26\1\0\6\26\25\0\25\26\1\u02d5\17\26"+
    "\3\0\2\26\1\0\2\26\7\0\1\26\1\0\1\26"+
    "\1\0\6\26\25\0\6\26\1\u02d6\36\26\3\0\2\26"+
    "\1\0\2\26\7\0\1\26\1\0\1\26\1\0\6\26"+
    "\25\0\10\26\1\u02d7\34\26\3\0\2\26\1\0\2\26"+
    "\7\0\1\26\1\0\1\26\1\0\6\26\25\0\25\26"+
    "\1\u02d8\17\26\3\0\2\26\1\0\2\26\7\0\1\26"+
    "\1\0\1\26\1\0\6\26\25\0\22\26\1\u02d9\22\26"+
    "\3\0\2\26\1\0\2\26\7\0\1\26\1\0\1\26"+
    "\1\0\6\26\25\0\6\26\1\u02da\36\26\3\0\2\26"+
    "\1\0\2\26\7\0\1\26\1\0\1\26\1\0\6\26"+
    "\25\0\11\26\1\u02db\33\26\3\0\2\26\1\0\2\26"+
    "\7\0\1\26\1\0\1\26\1\0\6\26\25\0\15\26"+
    "\1\u02dc\27\26\3\0\2\26\1\0\2\26\7\0\1\26"+
    "\1\0\1\26\1\0\6\26\25\0\6\26\1\u02dd\36\26"+
    "\3\0\2\26\1\0\2\26\7\0\1\26\1\0\1\26"+
    "\1\0\6\26\25\0\10\26\1\u02de\34\26\3\0\2\26"+
    "\1\0\2\26\7\0\1\26\1\0\1\26\1\0\6\26"+
    "\25\0\6\26\1\u02df\36\26\3\0\2\26\1\0\2\26"+
    "\7\0\1\26\1\0\1\26\1\0\6\26\25\0\16\26"+
    "\1\u02e0\26\26\3\0\2\26\1\0\2\26\7\0\1\26"+
    "\1\0\1\26\1\0\6\26\25\0\23\26\1\u02e1\21\26"+
    "\3\0\2\26\1\0\2\26\7\0\1\26\1\0\1\26"+
    "\1\0\6\26\25\0\22\26\1\u02e2\22\26\3\0\2\26"+
    "\1\0\2\26\7\0\1\26\1\0\1\26\1\0\6\26"+
    "\25\0\13\26\1\u02e3\31\26\3\0\2\26\1\0\2\26"+
    "\7\0\1\26\1\0\1\26\1\0\6\26\25\0\25\26"+
    "\1\u02e4\17\26\3\0\2\26\1\0\2\26\7\0\1\26"+
    "\1\0\1\26\1\0\6\26\25\0\7\26\1\u02e5\35\26"+
    "\3\0\2\26\1\0\2\26\7\0\1\26\1\0\1\26"+
    "\1\0\6\26\25\0\6\26\1\u02e6\36\26\3\0\2\26"+
    "\1\0\2\26\7\0\1\26\1\0\1\26\1\0\6\26"+
    "\25\0\15\26\1\u02e7\27\26\3\0\2\26\1\0\2\26"+
    "\7\0\1\26\1\0\1\26\1\0\6\26\25\0\6\26"+
    "\1\u02e8\36\26\3\0\2\26\1\0\2\26\7\0\1\26"+
    "\1\0\1\26\1\0\6\26\25\0\10\26\1\u02e9\34\26"+
    "\3\0\2\26\1\0\2\26\7\0\1\26\1\0\1\26"+
    "\1\0\6\26\25\0\6\26\1\u02ea\36\26\3\0\2\26"+
    "\1\0\2\26\7\0\1\26\1\0\1\26\1\0\6\26"+
    "\25\0\10\26\1\u02eb\34\26\3\0\2\26\1\0\2\26"+
    "\7\0\1\26\1\0\1\26\1\0\6\26\25\0\15\26"+
    "\1\u02ec\27\26\3\0\2\26\1\0\2\26\70\0\1\u02ed"+
    "\106\0\1\u02ee\122\0\1\u0252\143\0\1\u0252\34\0\1\26"+
    "\1\0\1\26\1\0\6\26\25\0\34\26\1\u02ef\10\26"+
    "\3\0\2\26\1\0\2\26\7\0\1\26\1\0\1\26"+
    "\1\0\6\26\25\0\45\26\3\0\1\26\1\u02f0\1\0"+
    "\2\26\7\0\1\26\1\0\1\26\1\0\6\26\25\0"+
    "\45\26\3\0\1\26\1\u02f1\1\0\2\26\7\0\1\26"+
    "\1\0\1\26\1\0\6\26\25\0\45\26\3\0\1\26"+
    "\1\u02f2\1\0\2\26\7\0\1\26\1\0\1\26\1\0"+
    "\6\26\25\0\1\u02f3\44\26\3\0\2\26\1\0\2\26"+
    "\7\0\1\26\1\0\1\26\1\0\6\26\25\0\45\26"+
    "\3\0\2\26\1\0\1\26\1\u02f4\7\0\1\26\1\0"+
    "\1\26\1\0\6\26\25\0\45\26\3\0\1\26\1\u02f5"+
    "\1\0\2\26\7\0\1\26\1\0\1\26\1\0\6\26"+
    "\25\0\34\26\1\u02f6\10\26\3\0\2\26\1\0\2\26"+
    "\6\0\1\u016d\1\u0261\1\u016d\1\u0261\1\u016d\6\u0261\1\u0174"+
    "\2\u016d\1\u02f7\1\u0174\20\u016d\45\u0261\3\u016d\2\u0261\1\u016d"+
    "\2\u0261\6\u016d\13\0\1\364\3\0\1\364\153\0\1\u02f8"+
    "\137\0\1\u02f9\111\0\1\u02fa\114\0\1\u02fb\123\0\1\u02fc"+
    "\132\0\1\u02fd\120\0\1\u02fe\123\0\1\u02ff\135\0\1\u0300"+
    "\100\0\1\u0301\131\0\1\u0302\121\0\1\u0303\122\0\1\u0304"+
    "\121\0\1\u0305\130\0\1\u0306\120\0\1\u0307\121\0\1\u0308"+
    "\122\0\1\u0309\130\0\1\u030a\115\0\1\u030b\131\0\1\u030c"+
    "\104\0\1\u030d\127\0\1\u030e\45\0\1\26\1\0\1\26"+
    "\1\0\6\26\25\0\16\26\1\u030f\26\26\3\0\2\26"+
    "\1\0\2\26\7\0\1\26\1\0\1\26\1\0\6\26"+
    "\25\0\6\26\1\u0310\36\26\3\0\2\26\1\0\2\26"+
    "\7\0\1\26\1\0\1\26\1\0\6\26\25\0\1\26"+
    "\1\u0311\43\26\3\0\2\26\1\0\2\26\7\0\1\26"+
    "\1\0\1\26\1\0\6\26\25\0\22\26\1\u0312\22\26"+
    "\3\0\2\26\1\0\2\26\7\0\1\26\1\0\1\26"+
    "\1\0\6\26\25\0\22\26\1\u0313\22\26\3\0\2\26"+
    "\1\0\2\26\7\0\1\26\1\0\1\26\1\0\6\26"+
    "\25\0\15\26\1\u0314\27\26\3\0\2\26\1\0\2\26"+
    "\7\0\1\26\1\0\1\26\1\0\6\26\25\0\6\26"+
    "\1\u0315\36\26\3\0\2\26\1\0\2\26\7\0\1\26"+
    "\1\0\1\26\1\0\6\26\25\0\15\26\1\u0316\27\26"+
    "\3\0\2\26\1\0\2\26\7\0\1\26\1\0\1\26"+
    "\1\0\6\26\25\0\45\26\3\0\1\26\1\u0317\1\0"+
    "\2\26\7\0\1\26\1\0\1\26\1\0\6\26\25\0"+
    "\16\26\1\u0318\26\26\3\0\2\26\1\0\2\26\7\0"+
    "\1\26\1\0\1\26\1\0\6\26\25\0\6\26\1\u0319"+
    "\36\26\3\0\2\26\1\0\2\26\7\0\1\26\1\0"+
    "\1\26\1\0\6\26\25\0\14\26\1\u031a\30\26\3\0"+
    "\2\26\1\0\2\26\7\0\1\26\1\0\1\26\1\0"+
    "\6\26\25\0\14\26\1\u031b\30\26\3\0\2\26\1\0"+
    "\2\26\7\0\1\26\1\0\1\26\1\0\6\26\25\0"+
    "\15\26\1\u031c\27\26\3\0\2\26\1\0\2\26\7\0"+
    "\1\26\1\0\1\26\1\0\6\26\25\0\6\26\1\u031d"+
    "\36\26\3\0\2\26\1\0\2\26\7\0\1\26\1\0"+
    "\1\26\1\0\6\26\25\0\6\26\1\u031e\36\26\3\0"+
    "\2\26\1\0\2\26\7\0\1\26\1\0\1\26\1\0"+
    "\6\26\25\0\12\26\1\u031f\32\26\3\0\2\26\1\0"+
    "\2\26\7\0\1\26\1\0\1\26\1\0\6\26\25\0"+
    "\10\26\1\u0320\34\26\3\0\2\26\1\0\2\26\7\0"+
    "\1\26\1\0\1\26\1\0\6\26\25\0\6\26\1\u0321"+
    "\36\26\3\0\2\26\1\0\2\26\7\0\1\26\1\0"+
    "\1\26\1\0\6\26\25\0\17\26\1\u0322\25\26\3\0"+
    "\2\26\1\0\2\26\7\0\1\26\1\0\1\26\1\0"+
    "\6\26\25\0\22\26\1\u0323\22\26\3\0\2\26\1\0"+
    "\2\26\7\0\1\26\1\0\1\26\1\0\6\26\25\0"+
    "\23\26\1\u0324\21\26\3\0\2\26\1\0\2\26\62\0"+
    "\1\u0252\126\0\1\u0252\43\0\1\26\1\0\1\26\1\0"+
    "\6\26\25\0\43\26\1\u0325\1\26\3\0\2\26\1\0"+
    "\2\26\7\0\1\26\1\0\1\26\1\0\6\26\25\0"+
    "\15\26\1\u0326\27\26\3\0\2\26\1\0\2\26\7\0"+
    "\1\26\1\0\1\26\1\0\6\26\25\0\45\26\3\0"+
    "\1\26\1\u0327\1\0\2\26\7\0\1\26\1\0\1\26"+
    "\1\0\6\26\25\0\4\26\1\u0328\40\26\3\0\2\26"+
    "\1\0\2\26\7\0\1\26\1\0\1\26\1\0\6\26"+
    "\25\0\41\26\1\u0329\3\26\3\0\2\26\1\0\2\26"+
    "\7\0\1\26\1\0\1\26\1\0\6\26\25\0\45\26"+
    "\3\0\1\26\1\u032a\1\0\2\26\7\0\1\26\1\0"+
    "\1\26\1\0\6\26\25\0\45\26\3\0\1\26\1\u032b"+
    "\1\0\2\26\6\0\13\u01f0\1\364\2\u01f0\1\0\1\364"+
    "\103\u01f0\47\0\1\u032c\121\0\1\u032d\136\0\1\u032e\122\0"+
    "\1\u032f\122\0\1\u0330\113\0\1\u0331\131\0\1\u0332\127\0"+
    "\1\u0333\113\0\1\u0334\146\0\1\u0335\106\0\1\u0336\107\0"+
    "\1\u0337\113\0\1\u0338\124\0\1\u0339\120\0\1\u033a\130\0"+
    "\1\u033b\47\0\1\26\1\0\1\26\1\0\6\26\25\0"+
    "\44\26\1\u033c\3\0\2\26\1\0\2\26\7\0\1\26"+
    "\1\0\1\26\1\0\6\26\25\0\6\26\1\u033d\36\26"+
    "\3\0\2\26\1\0\2\26\7\0\1\26\1\0\1\26"+
    "\1\0\6\26\25\0\20\26\1\u033e\24\26\3\0\2\26"+
    "\1\0\2\26\7\0\1\26\1\0\1\26\1\0\6\26"+
    "\25\0\15\26\1\u033f\27\26\3\0\2\26\1\0\2\26"+
    "\7\0\1\26\1\0\1\26\1\0\6\26\25\0\23\26"+
    "\1\u0340\21\26\3\0\2\26\1\0\2\26\7\0\1\26"+
    "\1\0\1\26\1\0\6\26\25\0\6\26\1\u0341\36\26"+
    "\3\0\2\26\1\0\2\26\7\0\1\26\1\0\1\26"+
    "\1\0\6\26\25\0\16\26\1\u0342\26\26\3\0\2\26"+
    "\1\0\2\26\7\0\1\26\1\0\1\26\1\0\6\26"+
    "\25\0\12\26\1\u0343\32\26\3\0\2\26\1\0\2\26"+
    "\7\0\1\26\1\0\1\26\1\0\6\26\25\0\16\26"+
    "\1\u0344\26\26\3\0\2\26\1\0\2\26\7\0\1\26"+
    "\1\0\1\26\1\0\6\26\25\0\10\26\1\u0345\34\26"+
    "\3\0\2\26\1\0\2\26\7\0\1\26\1\0\1\26"+
    "\1\0\6\26\25\0\6\26\1\u0346\36\26\3\0\2\26"+
    "\1\0\2\26\7\0\1\26\1\0\1\26\1\0\6\26"+
    "\25\0\21\26\1\u0347\23\26\3\0\2\26\1\0\2\26"+
    "\7\0\1\26\1\0\1\26\1\0\6\26\25\0\11\26"+
    "\1\u0348\33\26\3\0\2\26\1\0\2\26\7\0\1\26"+
    "\1\0\1\26\1\0\6\26\25\0\10\26\1\u0349\34\26"+
    "\3\0\2\26\1\0\2\26\7\0\1\26\1\0\1\26"+
    "\1\0\6\26\25\0\34\26\1\u034a\10\26\3\0\2\26"+
    "\1\0\2\26\7\0\1\26\1\0\1\26\1\0\6\26"+
    "\25\0\6\26\1\u034b\36\26\3\0\2\26\1\0\2\26"+
    "\7\0\1\26\1\0\1\26\1\0\6\26\25\0\2\26"+
    "\1\u034c\42\26\3\0\2\26\1\0\2\26\7\0\1\26"+
    "\1\0\1\26\1\0\6\26\25\0\16\26\1\u034d\26\26"+
    "\3\0\2\26\1\0\2\26\7\0\1\26\1\0\1\26"+
    "\1\0\6\26\25\0\45\26\3\0\1\26\1\u034e\1\0"+
    "\2\26\7\0\1\26\1\0\1\26\1\0\6\26\25\0"+
    "\1\u034f\44\26\3\0\2\26\1\0\2\26\7\0\1\26"+
    "\1\0\1\26\1\0\6\26\25\0\45\26\3\0\1\26"+
    "\1\u0350\1\0\2\26\64\0\1\u0351\131\0\1\u0352\122\0"+
    "\1\u0353\105\0\1\u0354\132\0\1\u0355\117\0\1\u0356\130\0"+
    "\1\u0357\120\0\1\u0358\123\0\1\u0359\122\0\1\u035a\110\0"+
    "\1\u035b\133\0\1\u035c\42\0\1\26\1\0\1\26\1\0"+
    "\6\26\25\0\7\26\1\u035d\35\26\3\0\2\26\1\0"+
    "\2\26\7\0\1\26\1\0\1\26\1\0\6\26\25\0"+
    "\35\26\1\u035e\7\26\3\0\2\26\1\0\2\26\7\0"+
    "\1\26\1\0\1\26\1\0\6\26\25\0\6\26\1\u035f"+
    "\36\26\3\0\2\26\1\0\2\26\7\0\1\26\1\0"+
    "\1\26\1\0\6\26\25\0\23\26\1\u0360\21\26\3\0"+
    "\2\26\1\0\2\26\7\0\1\26\1\0\1\26\1\0"+
    "\6\26\25\0\14\26\1\u0361\30\26\3\0\2\26\1\0"+
    "\2\26\7\0\1\26\1\0\1\26\1\0\6\26\25\0"+
    "\12\26\1\u0362\32\26\3\0\2\26\1\0\2\26\7\0"+
    "\1\26\1\0\1\26\1\0\6\26\25\0\17\26\1\u0363"+
    "\25\26\3\0\2\26\1\0\2\26\7\0\1\26\1\0"+
    "\1\26\1\0\6\26\25\0\10\26\1\u0364\34\26\3\0"+
    "\2\26\1\0\2\26\7\0\1\26\1\0\1\26\1\0"+
    "\6\26\25\0\20\26\1\u0365\24\26\3\0\2\26\1\0"+
    "\2\26\7\0\1\26\1\0\1\26\1\0\6\26\25\0"+
    "\45\26\3\0\2\26\1\0\1\u0366\1\26\7\0\1\26"+
    "\1\0\1\26\1\0\6\26\25\0\32\26\1\u0367\12\26"+
    "\3\0\2\26\1\0\2\26\7\0\1\26\1\0\1\26"+
    "\1\0\6\26\25\0\45\26\3\0\1\26\1\u0368\1\0"+
    "\2\26\7\0\1\26\1\0\1\26\1\0\6\26\25\0"+
    "\3\26\1\u0369\41\26\3\0\2\26\1\0\2\26\62\0"+
    "\1\u036a\114\0\1\u036b\131\0\1\u036c\113\0\1\u036d\124\0"+
    "\1\u036e\132\0\1\u036f\131\0\1\u0370\34\0\1\26\1\0"+
    "\1\26\1\0\6\26\25\0\11\26\1\u0371\33\26\3\0"+
    "\2\26\1\0\2\26\7\0\1\26\1\0\1\26\1\0"+
    "\6\26\25\0\13\26\1\u0372\31\26\3\0\2\26\1\0"+
    "\2\26\7\0\1\26\1\0\1\26\1\0\6\26\25\0"+
    "\15\26\1\u0373\27\26\3\0\2\26\1\0\2\26\7\0"+
    "\1\26\1\0\1\26\1\0\6\26\25\0\16\26\1\u0374"+
    "\26\26\3\0\2\26\1\0\2\26\7\0\1\26\1\0"+
    "\1\u0375\1\0\6\26\25\0\45\26\3\0\2\26\1\0"+
    "\2\26\7\0\1\26\1\0\1\26\1\0\6\26\25\0"+
    "\31\26\1\u0376\13\26\3\0\2\26\1\0\2\26\7\0"+
    "\1\26\1\0\1\26\1\0\6\26\25\0\45\26\3\0"+
    "\1\26\1\u0377\1\0\2\26\57\0\1\u0378\117\0\1\u0379"+
    "\122\0\1\u037a\55\0\1\26\1\0\1\26\1\0\6\26"+
    "\25\0\6\26\1\u037b\36\26\3\0\2\26\1\0\2\26"+
    "\7\0\1\26\1\0\1\26\1\0\6\26\25\0\6\26"+
    "\1\u037c\36\26\3\0\2\26\1\0\2\26\7\0\1\26"+
    "\1\0\1\26\1\0\6\26\25\0\6\26\1\u037d\36\26"+
    "\3\0\2\26\1\0\2\26\7\0\1\26\1\0\1\26"+
    "\1\0\6\26\25\0\20\26\1\u037e\24\26\3\0\2\26"+
    "\1\0\2\26\7\0\1\26\1\0\1\26\1\0\6\26"+
    "\25\0\45\26\3\0\1\26\1\u037f\1\0\2\26\7\0"+
    "\1\26\1\0\1\26\1\0\6\26\25\0\7\26\1\u0380"+
    "\35\26\3\0\2\26\1\0\2\26\7\0\1\26\1\0"+
    "\1\26\1\0\6\26\25\0\45\26\3\0\1\26\1\u0381"+
    "\1\0\2\26\7\0\1\26\1\0\1\26\1\0\6\26"+
    "\25\0\20\26\1\u0382\24\26\3\0\2\26\1\0\2\26"+
    "\7\0\1\26\1\0\1\26\1\0\6\26\25\0\17\26"+
    "\1\u0383\25\26\3\0\2\26\1\0\2\26\7\0\1\26"+
    "\1\0\1\26\1\0\6\26\25\0\6\26\1\u0384\36\26"+
    "\3\0\2\26\1\0\2\26\7\0\1\26\1\0\1\26"+
    "\1\0\6\26\25\0\45\26\3\0\1\26\1\u0385\1\0"+
    "\2\26\7\0\1\26\1\0\1\26\1\0\6\26\25\0"+
    "\25\26\1\u0386\17\26\3\0\2\26\1\0\2\26\7\0"+
    "\1\26\1\0\1\26\1\0\6\26\25\0\10\26\1\u0387"+
    "\34\26\3\0\2\26\1\0\2\26\7\0\1\26\1\0"+
    "\1\26\1\0\6\26\25\0\6\26\1\u0388\36\26\3\0"+
    "\2\26\1\0\2\26\7\0\1\26\1\0\1\26\1\0"+
    "\6\26\25\0\20\26\1\u0389\24\26\3\0\2\26\1\0"+
    "\2\26\6\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[60175];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\10\4\0\2\1\10\0\1\11\10\1\2\11\2\1"+
    "\3\11\47\1\1\11\1\1\1\11\2\1\1\11\6\1"+
    "\1\11\15\1\1\0\1\1\1\11\3\1\1\11\1\1"+
    "\1\11\2\1\1\11\2\1\1\11\3\1\1\11\1\1"+
    "\1\11\1\1\1\11\1\1\1\0\3\1\1\11\1\1"+
    "\1\11\3\0\1\1\1\0\2\1\2\0\1\11\2\0"+
    "\73\1\1\11\12\0\1\1\4\0\2\1\3\11\1\1"+
    "\3\0\1\1\1\11\1\1\1\11\3\0\10\1\5\0"+
    "\1\11\4\0\1\11\2\1\2\11\20\0\1\11\1\0"+
    "\3\1\1\0\2\1\2\0\76\1\12\0\7\1\2\11"+
    "\1\1\1\11\1\1\3\0\1\1\4\0\1\1\40\0"+
    "\1\11\1\0\3\1\3\0\1\1\1\0\75\1\12\0"+
    "\10\1\3\0\1\11\21\0\1\11\20\0\1\11\3\1"+
    "\1\11\1\1\3\0\62\1\5\0\1\11\4\0\10\1"+
    "\6\0\1\11\1\0\1\11\3\0\1\11\1\1\11\0"+
    "\1\11\12\0\45\1\4\0\10\1\11\0\1\11\4\0"+
    "\1\11\12\0\1\11\1\0\1\11\1\0\34\1\2\0"+
    "\10\1\4\0\1\11\1\0\1\11\5\0\1\1\1\0"+
    "\1\11\1\0\2\11\1\0\1\11\2\0\1\11\1\0"+
    "\35\1\1\0\1\11\12\0\1\11\1\0\2\11\25\1"+
    "\1\0\2\11\4\0\1\11\2\0\2\11\15\1\1\11"+
    "\2\0\3\11\1\0\7\1\3\11\17\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[905];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
    public PhpLexer(int state){
        initialize(state);
    }
    public void reset(char array[], int offset, int length) {
        this.zzBuffer = array;
        this.zzCurrentPos = offset;
        this.zzMarkedPos = offset;
        this.zzPushbackPos = offset;
        this.yychar = offset;
        this.zzEndRead = offset + length;
        this.zzStartRead = offset;
        this.zzAtEOF = zzCurrentPos >= zzEndRead;
        this.firstPos = offset;
    }

    public void reset(java.io.Reader  reader, char[] buffer, int[] parameters){
    	this.zzReader = reader;
    	this.zzBuffer = buffer;
    	this.zzMarkedPos = parameters[0];
    	this.zzPushbackPos = parameters[1];
    	this.zzCurrentPos = parameters[2];
    	this.zzStartRead = parameters[3];
    	this.zzEndRead = parameters[4];
    	this.yyline = parameters[5];  
    	initialize(parameters[6]);
    }

    protected boolean isHeredocState(int state){
    	    	return state == ST_PHP_HEREDOC || state == ST_PHP_END_HEREDOC || state == ST_PHP_NOWDOC || state == ST_PHP_END_NOWDOC;
    }
    
    public int[] getParamenters(){
    	return new int[]{zzMarkedPos, zzPushbackPos, zzCurrentPos, zzStartRead, zzEndRead, yyline, zzLexicalState};
    }

    protected int getZZLexicalState() {
        return zzLexicalState;
    }

    protected int getZZMarkedPos() {
        return zzMarkedPos;
    }

    protected int getZZEndRead() {
        return zzEndRead;
    }

    public char[] getZZBuffer() {
        return zzBuffer;
    }
    
    protected int getZZStartRead() {
    	return this.zzStartRead;
    }

    protected int getZZPushBackPosition() {
    	return this.zzPushbackPos;
    }

	protected void pushBack(int i) {
		yypushback(i);
	}

	// A pool of states. To avoid creation of a new state on each createMemento.
	private static final IntHashtable lexerStates = new IntHashtable(100);
	
	protected IntHashtable getLexerStates() {
		return lexerStates;
	}

 // End user code


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public PhpLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public PhpLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 188) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public String yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 123: 
          { return PHP_DECLARE;
          }
        case 181: break;
        case 96: 
          { return PHP_CLONE;
          }
        case 182: break;
        case 89: 
          { return PHP_TRAIT;
          }
        case 183: break;
        case 166: 
          { return PHP__METHOD__;
          }
        case 184: break;
        case 73: 
          { return PHP_FROM;
          }
        case 185: break;
        case 79: 
          { return PHP_FEED;
          }
        case 186: break;
        case 44: 
          { popState();
    pushState(ST_PHP_LOOKING_FOR_PROPERTY);
    return PHP_OBJECT_OPERATOR;
          }
        case 187: break;
        case 84: 
          { return PHP_BREAK;
          }
        case 188: break;
        case 97: 
          { return PHP_WHILE;
          }
        case 189: break;
        case 167: 
          { return PHPDOC_EXCEPTION;
          }
        case 190: break;
        case 120: 
          { return PHP_EXTENDS;
          }
        case 191: break;
        case 28: 
          { return UNKNOWN_TOKEN;
          }
        case 192: break;
        case 4: 
          { return PHP_NUMBER;
          }
        case 193: break;
        case 88: 
          { return PHP_ENDIF;
          }
        case 194: break;
        case 126: 
          { return PHP_PRIVATE;
          }
        case 195: break;
        case 177: 
          { return PHP_METADATASTORE;
          }
        case 196: break;
        case 108: 
          { return PHP_STATIC;
          }
        case 197: break;
        case 6: 
          { return  PHP_STRING;
          }
        case 198: break;
        case 13: 
          { if (!phpStack.isEmpty()) {
        popState();
    }
    return  PHP_CURLY_CLOSE;
          }
        case 199: break;
        case 23: 
          { popState();
	return PHP_TOKEN;
          }
        case 200: break;
        case 122: 
          { return PHP_DEFAULT;
          }
        case 201: break;
        case 125: 
          { return PHP_REQUIRE;
          }
        case 202: break;
        case 21: 
          { //the difference from the original rules comes from the fact that we took ';' out out of tokens 
	return UNKNOWN_TOKEN;
          }
        case 203: break;
        case 105: 
          { return PHPDOC_LINK;
          }
        case 204: break;
        case 162: 
          { return PHP_ENDFOREACH;
          }
        case 205: break;
        case 53: 
          { return PHP_TRY;
          }
        case 206: break;
        case 142: 
          { return PHP__LINE__;
          }
        case 207: break;
        case 68: 
          { return PHP_EXIT;
          }
        case 208: break;
        case 172: 
          { return PHPDOC_FILESOURCE;
          }
        case 209: break;
        case 60: 
          { return PHP_PUT;
          }
        case 210: break;
        case 140: 
          { return PHP_CALLABLE;
          }
        case 211: break;
        case 139: 
          { return PHP_CONTINUE;
          }
        case 212: break;
        case 157: 
          { return PHPDOC_TUTORIAL;
          }
        case 213: break;
        case 175: 
          { return PHP__FUNCTION__;
          }
        case 214: break;
        case 135: 
          { return PHPDOC_METHOD;
          }
        case 215: break;
        case 159: 
          { return PHPDOC_ABSTRACT;
          }
        case 216: break;
        case 171: 
          { return PHPDOC_DEPRECATED;
          }
        case 217: break;
        case 66: 
          { nowdoc = null;
	nowdoc_len = 0;
    yybegin(ST_PHP_IN_SCRIPTING);
    return PHP_HEREDOC_TAG;
          }
        case 218: break;
        case 56: 
          { return PHP_FOR;
          }
        case 219: break;
        case 164: 
          { return PHP_IMPLEMENTS;
          }
        case 220: break;
        case 45: 
          { int label_len = yylength() - 1;

    if (yytext().charAt(label_len-1)==';') {
	    label_len--;
    }

    if (label_len==heredoc_len && yytext().substring(0,label_len).equals(heredoc)) {
        heredoc=null;
        heredoc_len=0;
        yybegin(ST_PHP_IN_SCRIPTING);
        return PHP_HEREDOC_TAG;
    } else {
        return PHP_CONSTANT_ENCAPSED_STRING;
    }
          }
        case 221: break;
        case 98: 
          { return PHP_PRINT;
          }
        case 222: break;
        case 22: 
          { yypushback(1);
	popState();
	return PHP_ENCAPSED_AND_WHITESPACE;
          }
        case 223: break;
        case 94: 
          { return PHP_CONST;
          }
        case 224: break;
        case 51: 
          { popState();
    return PHP_LINE_COMMENT;
          }
        case 225: break;
        case 137: 
          { return PHP_ENDWHILE;
          }
        case 226: break;
        case 15: 
          { return PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 227: break;
        case 27: 
          { return PHP_LINE_COMMENT;
          }
        case 228: break;
        case 163: 
          { return PHP_INSTANCEOF;
          }
        case 229: break;
        case 90: 
          { return PHP_THROW;
          }
        case 230: break;
        case 117: 
          { return PHPDOC_SINCE;
          }
        case 231: break;
        case 109: 
          { return PHP_SWITCH;
          }
        case 232: break;
        case 80: 
          { return PHP_FILE;
          }
        case 233: break;
        case 160: 
          { return PHPDOC_PROPERTY;
          }
        case 234: break;
        case 36: 
          { return PHP_DO;
          }
        case 235: break;
        case 40: 
          { yypushback(1);
    return PHP_ENCAPSED_AND_WHITESPACE;
          }
        case 236: break;
        case 178: 
          { return PHP__NAMESPACE__;
          }
        case 237: break;
        case 174: 
          { return PHP_INCLUDE_ONCE;
          }
        case 238: break;
        case 9: 
          { pushState(ST_PHP_DOUBLE_QUOTES);
    return PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 239: break;
        case 154: 
          { return PHP_WSREQUEST;
          }
        case 240: break;
        case 2: 
          { return PHP_ENCAPSED_AND_WHITESPACE;
          }
        case 241: break;
        case 54: 
          { return PHP_DEL;
          }
        case 242: break;
        case 128: 
          { return PHPDOC_IGNORE;
          }
        case 243: break;
        case 59: 
          { return PHP_GET;
          }
        case 244: break;
        case 48: 
          { return PHP_OBJECT_OPERATOR;
          }
        case 245: break;
        case 113: 
          { return PHP_PARENT;
          }
        case 246: break;
        case 49: 
          { popState();
    return PHP_COMMENT_END;
          }
        case 247: break;
        case 116: 
          { return PHPDOC_FINAL;
          }
        case 248: break;
        case 32: 
          { return PHP_VARIABLE;
          }
        case 249: break;
        case 100: 
          { return PHP_CASTING;
          }
        case 250: break;
        case 93: 
          { return PHP_UNSET;
          }
        case 251: break;
        case 17: 
          { yypushback(1);
        popState();
          }
        case 252: break;
        case 58: 
          { return PHP_LOG;
          }
        case 253: break;
        case 34: 
          { return PHP_CLOSETAG;
          }
        case 254: break;
        case 136: 
          { return PHP_DATABASE;
          }
        case 255: break;
        case 71: 
          { return PHP_EVAL;
          }
        case 256: break;
        case 78: 
          { return PHP_GOTO;
          }
        case 257: break;
        case 152: 
          { return PHP_STRINGIFY;
          }
        case 258: break;
        case 29: 
          { popState();return WHITESPACE;
          }
        case 259: break;
        case 83: 
          { return PHP_ENTRY;
          }
        case 260: break;
        case 62: 
          { yypushback(1);
	pushState(ST_PHP_VAR_OFFSET);
	return PHP_VARIABLE;
          }
        case 261: break;
        case 38: 
          { return PHP_PAAMAYIM_NEKUDOTAYIM;
          }
        case 262: break;
        case 132: 
          { return PHPDOC_AUTHOR;
          }
        case 263: break;
        case 168: 
          { return PHPDOC_NAMESPACE;
          }
        case 264: break;
        case 42: 
          { yypushback(1);
    pushState(ST_PHP_IN_SCRIPTING);
    return PHP_CURLY_OPEN;
          }
        case 265: break;
        case 112: 
          { return PHP_PUBLIC;
          }
        case 266: break;
        case 35: 
          { return PHP_IF;
          }
        case 267: break;
        case 151: 
          { return PHP_NAMESPACE;
          }
        case 268: break;
        case 47: 
          { int label_len = yylength() - 1;
	int startIndex = 0;
	String yytext = yytext();
	if (yytext.charAt(label_len - 1) == ';') {
		label_len--;
	}
	while (yytext.charAt(startIndex) == '\r'
			|| yytext.charAt(startIndex) == '\n') {
		startIndex++;
	}

	if (label_len > heredoc_len
			&& yytext.substring(startIndex, label_len).equals(
					heredoc)) {
		heredoc = null;
		heredoc_len = 0;
		yybegin(ST_PHP_IN_SCRIPTING);
		return PHP_HEREDOC_TAG;
	} else {
		yybegin(ST_PHP_HEREDOC);
		return PHP_CONSTANT_ENCAPSED_STRING;
	}
          }
        case 269: break;
        case 87: 
          { return PHP_ARRAY;
          }
        case 270: break;
        case 65: 
          { yybegin(ST_PHP_HEREDOC);
	return PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 271: break;
        case 37: 
          { return PHP_AS;
          }
        case 272: break;
        case 69: 
          { return PHP_ECHO;
          }
        case 273: break;
        case 91: 
          { return PHP_FINAL;
          }
        case 274: break;
        case 161: 
          { return PHP_ENDDECLARE;
          }
        case 275: break;
        case 85: 
          { return PHP_THIS;
          }
        case 276: break;
        case 19: 
          { popState();
    return PHP_STRING;
          }
        case 277: break;
        case 82: 
          { return PHPDOC_VAR;
          }
        case 278: break;
        case 24: 
          { return PHP_COMMENT;
          }
        case 279: break;
        case 131: 
          { return PHPDOC_RETURN;
          }
        case 280: break;
        case 119: 
          { return PHPDOC_MAGIC;
          }
        case 281: break;
        case 165: 
          { return PHP_URIMATCHER;
          }
        case 282: break;
        case 129: 
          { return PHPDOC_THROWS;
          }
        case 283: break;
        case 5: 
          { return PHP_TOKEN;
          }
        case 284: break;
        case 52: 
          { return PHP_XML;
          }
        case 285: break;
        case 95: 
          { return PHP_CATCH;
          }
        case 286: break;
        case 16: 
          { popState();
    return PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 287: break;
        case 30: 
          { return PHP_OPERATOR;
          }
        case 288: break;
        case 102: 
          { return PHPDOC_DESC;
          }
        case 289: break;
        case 57: 
          { return PHP_NEW;
          }
        case 290: break;
        case 127: 
          { return PHP__DIR__;
          }
        case 291: break;
        case 99: 
          { return PHP_PARSE;
          }
        case 292: break;
        case 138: 
          { return PHP_FUNCTION;
          }
        case 293: break;
        case 26: 
          { String yytext = yytext();
	switch (yytext.charAt(yytext.length() - 1)) {
		case '?':
		case '%':
		case '>':
			yypushback(1);
			break;
		default:
			popState();
	}
	 return PHP_LINE_COMMENT;
          }
        case 294: break;
        case 3: 
          { yypushback(1);
    pushState(ST_PHP_HIGHLIGHTING_ERROR);
          }
        case 295: break;
        case 124: 
          { return PHP_FOREACH;
          }
        case 296: break;
        case 144: 
          { return PHPDOC_EXAMPLE;
          }
        case 297: break;
        case 70: 
          { return PHP_ELSE;
          }
        case 298: break;
        case 134: 
          { return PHPDOC_GLOBAL;
          }
        case 299: break;
        case 76: 
          { return PHP_SELF;
          }
        case 300: break;
        case 7: 
          { return WHITESPACE;
          }
        case 301: break;
        case 110: 
          { return PHP_RETURN;
          }
        case 302: break;
        case 103: 
          { return PHPDOC_USES;
          }
        case 303: break;
        case 64: 
          { int label_len = yylength() - 1;

	if (yytext().charAt(label_len-1)==';') {
	   label_len--;
    }
    if (label_len > nowdoc_len && yytext().substring(label_len - nowdoc_len,label_len).equals(nowdoc)) {
    	//nowdoc = null;
    	//nowdoc_len = 0;
		//yypushback(1);
		//yybegin(ST_PHP_END_NOWDOC);
		
    	if ((label_len - nowdoc_len-2) >= 0 && yytext().charAt(label_len - nowdoc_len-2)=='\r') {
        	label_len = label_len-2;
    	} else {
        	label_len--;
    	}
    	yypushback(nowdoc_len + (yylength() - label_len));
    	
        yybegin(ST_PHP_END_NOWDOC);
	}
	return PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 304: break;
        case 31: 
          { pushState(ST_PHP_LOOKING_FOR_PROPERTY);
    return PHP_OBJECT_OPERATOR;
          }
        case 305: break;
        case 18: 
          { yypushback(1);
    popState();
          }
        case 306: break;
        case 114: 
          { return PHP_WSSTUB;
          }
        case 307: break;
        case 33: 
          { pushState(ST_PHP_COMMENT);
    return PHP_COMMENT_START;
          }
        case 308: break;
        case 148: 
          { return PHP_ENDSWITCH;
          }
        case 309: break;
        case 72: 
          { return PHP_TRUE;
          }
        case 310: break;
        case 25: 
          { return PHPDOC_COMMENT;
          }
        case 311: break;
        case 169: 
          { return PHPDOC_COPYRIGHT;
          }
        case 312: break;
        case 158: 
          { return PHPDOC_CATEGORY;
          }
        case 313: break;
        case 106: 
          { return PHP_ENDFOR;
          }
        case 314: break;
        case 153: 
          { return PHP_PROTECTED;
          }
        case 315: break;
        case 92: 
          { return PHP_FALSE;
          }
        case 316: break;
        case 86: 
          { int bprefix = (yytext().charAt(0) != '<') ? 1 : 0;
    int startString=3+bprefix;
    
    int hereOrNowDoc_len = yylength()-bprefix-3-1-(yytext().charAt(yylength()-2)=='\r'?1:0);
    while ((yytext().charAt(startString) == ' ') || (yytext().charAt(startString) == '\t')) {
        startString++;
        hereOrNowDoc_len--;
    }
    String hereOrNowDoc = yytext().substring(startString,hereOrNowDoc_len+startString);
    if (hereOrNowDoc.charAt(0) == '\'') {
    	nowdoc = hereOrNowDoc.substring(1, hereOrNowDoc_len-1);
    	nowdoc_len = hereOrNowDoc_len - 2;
    	yybegin(ST_PHP_NOWDOC);
    }
    else if (hereOrNowDoc.charAt(0) == '"') {
    	heredoc = hereOrNowDoc.substring(1, hereOrNowDoc_len-1);
    	heredoc_len = hereOrNowDoc_len - 2;
    	yybegin(ST_PHP_HEREDOC);
    } else {
    	heredoc = hereOrNowDoc;
    	heredoc_len = hereOrNowDoc_len;
    	yybegin(ST_PHP_HEREDOC);
    }
    return PHP_HEREDOC_TAG;
          }
        case 317: break;
        case 11: 
          { pushState(ST_PHP_BACKQUOTE);
    return PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 318: break;
        case 173: 
          { return PHPDOC_SUBPACKAGE;
          }
        case 319: break;
        case 61: 
          { return PHP_VAR;
          }
        case 320: break;
        case 107: 
          { return PHP_ELSEIF;
          }
        case 321: break;
        case 121: 
          { return PHP_INCLUDE;
          }
        case 322: break;
        case 150: 
          { return PHP_INSTEADOF;
          }
        case 323: break;
        case 146: 
          { return PHPDOC_PACKAGE;
          }
        case 324: break;
        case 104: 
          { return PHPDOC_NAME;
          }
        case 325: break;
        case 77: 
          { return PHP_LIST;
          }
        case 326: break;
        case 180: 
          { return PHP_HALT_COMPILER;
          }
        case 327: break;
        case 145: 
          { return PHPDOC_LICENSE;
          }
        case 328: break;
        case 133: 
          { return PHPDOC_ACCESS;
          }
        case 329: break;
        case 75: 
          { return PHP_CASE;
          }
        case 330: break;
        case 155: 
          { return PHP__CLASS__;
          }
        case 331: break;
        case 55: 
          { return PHP_DIE;
          }
        case 332: break;
        case 143: 
          { return PHP__FILE__;
          }
        case 333: break;
        case 74: 
          { return  PHP_KEYWORD;
          }
        case 334: break;
        case 170: 
          { return PHPDOC_STATICVAR;
          }
        case 335: break;
        case 111: 
          { return PHP_GLOBAL;
          }
        case 336: break;
        case 46: 
          { int label_len = yylength() - 1;

    if (yytext().charAt(label_len-1)==';') {
	    label_len--;
    }

    if (label_len==nowdoc_len && yytext().substring(0,label_len).equals(nowdoc)) {
        nowdoc=null;
        nowdoc_len=0;
        yybegin(ST_PHP_IN_SCRIPTING);
        return PHP_HEREDOC_TAG;
    } else {
        return PHP_CONSTANT_ENCAPSED_STRING;
    }
          }
        case 337: break;
        case 149: 
          { return PHP_INTERFACE;
          }
        case 338: break;
        case 10: 
          { return PHP_NS_SEPARATOR;
          }
        case 339: break;
        case 81: 
          { return PHPDOC_SEE;
          }
        case 340: break;
        case 63: 
          { int label_len = yylength() - 1;

    if (yytext().charAt(label_len-1)==';') {
	   label_len--;
    }
    if (label_len > heredoc_len && yytext().substring(label_len - heredoc_len,label_len).equals(heredoc)) {
    	
    	if ((label_len - heredoc_len-2) >= 0 && yytext().charAt(label_len - heredoc_len-2)=='\r') {
        	label_len = label_len-2;
    	} else {
        	label_len--;
    	}
    	yypushback(heredoc_len + (yylength() - label_len));
    	
        yybegin(ST_PHP_END_HEREDOC);
    }
    return PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 341: break;
        case 41: 
          { pushState(ST_PHP_IN_SCRIPTING);
    return PHP_TOKEN;
          }
        case 342: break;
        case 101: 
          { return PHPDOC_TODO;
          }
        case 343: break;
        case 50: 
          { popState();
    return PHPDOC_COMMENT_END;
          }
        case 344: break;
        case 8: 
          { return PHP_SEMICOLON;
          }
        case 345: break;
        case 39: 
          { pushState(ST_PHP_QUOTES_AFTER_VARIABLE);
    return PHP_VARIABLE;
          }
        case 346: break;
        case 20: 
          { /* Offset could be treated as a long */
	return PHP_NUMBER;
          }
        case 347: break;
        case 179: 
          { return PHP_XMLHTTPREQUEST;
          }
        case 348: break;
        case 130: 
          { return PHPDOC_STATIC;
          }
        case 349: break;
        case 43: 
          { yypushback(1);
	return PHP_ENCAPSED_AND_WHITESPACE;
          }
        case 350: break;
        case 176: 
          { return PHP_OAUTHPROVIDER;
          }
        case 351: break;
        case 67: 
          { pushState(ST_PHP_DOC_COMMENT);
    return PHPDOC_COMMENT_START;
          }
        case 352: break;
        case 118: 
          { return PHPDOC_PARAM;
          }
        case 353: break;
        case 115: 
          { return PHP_SENDER;
          }
        case 354: break;
        case 14: 
          { pushState(ST_PHP_LINE_COMMENT);
    return PHP_LINE_COMMENT;
          }
        case 355: break;
        case 141: 
          { return PHP_ABSTRACT;
          }
        case 356: break;
        case 156: 
          { return PHPDOC_INTERNAL;
          }
        case 357: break;
        case 12: 
          { return PHP_CURLY_OPEN;
          }
        case 358: break;
        case 1: 
          { if(heredoc!=null&&yytext().startsWith(heredoc)){
		String text = yytext();
		if(heredoc_len < text.length() && (text.charAt(heredoc_len) == '\r'
			|| text.charAt(heredoc_len) == '\n'|| text.charAt(heredoc_len) == ';')){
			yypushback(yylength()-heredoc_len-1);
	        heredoc=null;
	        heredoc_len=0;
	        yybegin(ST_PHP_IN_SCRIPTING);
	        return PHP_HEREDOC_TAG;
		}
	}
	return PHP_ENCAPSED_AND_WHITESPACE;
          }
        case 359: break;
        case 147: 
          { return PHPDOC_VERSION;
          }
        case 360: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
