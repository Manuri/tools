/* The following code was generated by JFlex 1.4.1 on 6/19/13 11:37 AM */

/*******************************************************************************
 * Copyright (c) 2006 Zend Corporation and IBM Corporation.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Zend and IBM - Initial implementation
 *******************************************************************************/

package org.eclipse.php.internal.core.documentModel.parser.php54;

import org.eclipse.php.internal.core.util.collections.IntHashtable;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 6/19/13 11:37 AM from the specification file
 * <tt>highlighting_scanner.jflex</tt>
 */
public class PhpLexer extends org.eclipse.php.internal.core.documentModel.parser.AbstractPhpLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int ST_PHP_LINE_COMMENT = 12;
  public static final int ST_PHP_NOWDOC = 6;
  public static final int ST_PHP_DOUBLE_QUOTES = 2;
  public static final int ST_PHP_COMMENT = 10;
  public static final int ST_PHP_BACKQUOTE = 3;
  public static final int ST_PHP_END_NOWDOC = 14;
  public static final int ST_PHP_DOC_COMMENT = 11;
  public static final int ST_PHP_END_HEREDOC = 7;
  public static final int ST_PHP_VAR_OFFSET = 9;
  public static final int YYINITIAL = 0;
  public static final int ST_PHP_IN_SCRIPTING = 1;
  public static final int ST_PHP_LOOKING_FOR_PROPERTY = 8;
  public static final int ST_PHP_HEREDOC = 5;
  public static final int ST_PHP_HIGHLIGHTING_ERROR = 13;
  public static final int ST_PHP_QUOTES_AFTER_VARIABLE = 4;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\14\1\13\2\0\1\17\22\0\1\14\1\30\1\21\1\75"+
    "\1\20\1\34\1\35\1\74\1\64\1\65\1\32\1\27\1\15\1\4"+
    "\1\2\1\33\1\5\1\11\10\1\1\62\1\16\1\31\1\25\1\26"+
    "\1\76\1\77\1\42\1\10\1\7\1\44\1\3\1\47\1\57\1\53"+
    "\1\45\1\66\1\56\1\55\1\61\1\43\1\40\1\60\1\70\1\41"+
    "\1\51\1\46\1\50\1\63\1\54\1\6\1\52\1\12\1\72\1\22"+
    "\1\73\1\37\1\67\1\23\1\42\1\10\1\7\1\44\1\3\1\47"+
    "\1\57\1\53\1\45\1\66\1\56\1\55\1\61\1\43\1\40\1\60"+
    "\1\70\1\41\1\51\1\46\1\50\1\63\1\54\1\6\1\52\1\12"+
    "\1\24\1\36\1\71\1\15\201\12\uff00\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\1\2\10\0\1\3\1\4\1\5\1\6"+
    "\1\5\1\4\4\6\1\7\1\5\1\10\1\5\1\11"+
    "\1\12\1\13\1\14\12\5\16\6\1\5\1\6\1\5"+
    "\1\6\1\15\1\3\1\16\1\2\1\17\1\20\2\17"+
    "\1\2\3\17\3\21\3\1\3\3\3\2\2\3\1\0"+
    "\1\3\1\22\1\23\1\22\1\24\1\25\1\24\1\26"+
    "\1\25\1\6\1\27\2\30\3\31\3\32\2\33\1\34"+
    "\1\35\1\0\1\3\2\4\1\36\6\6\1\37\2\0"+
    "\3\6\1\0\1\6\1\0\2\40\2\0\1\17\2\0"+
    "\2\36\1\41\1\42\1\36\4\6\1\43\4\6\1\44"+
    "\2\6\1\45\25\6\1\46\1\6\12\0\1\6\4\0"+
    "\1\47\2\50\1\51\1\52\1\50\3\0\3\53\1\54"+
    "\3\0\1\55\2\1\2\50\1\56\2\2\5\0\1\57"+
    "\4\0\1\60\1\4\1\47\1\61\1\62\20\0\1\63"+
    "\1\0\7\6\2\4\6\6\1\0\1\6\1\40\2\0"+
    "\4\6\1\64\4\6\1\65\7\6\1\66\1\6\1\67"+
    "\5\6\1\70\13\6\1\71\12\0\7\6\1\72\1\73"+
    "\1\1\1\74\1\2\3\0\1\75\4\0\1\57\40\0"+
    "\1\76\1\0\1\77\1\6\1\100\5\6\1\101\1\6"+
    "\1\102\3\6\1\103\4\6\1\40\3\0\1\104\1\0"+
    "\5\6\1\105\10\6\1\106\2\6\1\107\4\6\1\110"+
    "\3\6\1\111\1\112\6\6\12\0\10\6\3\0\1\75"+
    "\25\0\1\113\14\0\1\114\2\6\1\115\4\6\1\116"+
    "\1\6\1\117\1\120\1\6\1\121\1\122\1\123\1\124"+
    "\2\125\3\0\3\6\1\126\7\6\1\127\1\6\1\130"+
    "\1\131\1\6\1\132\1\133\1\6\1\134\2\6\1\135"+
    "\2\6\1\136\3\6\7\0\1\137\2\0\10\6\11\0"+
    "\1\140\1\141\3\0\1\142\4\0\1\143\4\0\1\144"+
    "\7\0\2\6\1\145\2\6\1\146\2\6\2\0\1\147"+
    "\14\6\1\150\1\151\1\152\2\6\1\153\1\154\4\0"+
    "\10\6\20\0\1\155\1\0\1\156\6\0\1\157\1\0"+
    "\1\160\1\0\1\161\6\6\1\162\2\6\1\163\1\164"+
    "\1\165\4\6\1\166\2\6\1\167\2\0\2\6\1\170"+
    "\5\6\5\0\1\171\1\172\1\0\1\173\3\0\1\174"+
    "\1\0\1\175\1\0\1\176\2\0\1\177\2\0\1\200"+
    "\1\0\3\6\1\201\1\202\1\203\1\6\1\204\6\6"+
    "\1\205\3\6\1\206\2\6\1\207\1\6\1\0\1\210"+
    "\12\0\1\211\1\0\1\212\1\213\2\6\1\214\1\6"+
    "\1\215\1\6\1\216\1\217\2\6\1\220\1\221\4\6"+
    "\2\0\1\222\1\223\2\0\1\224\1\225\3\0\1\226"+
    "\1\227\1\230\2\6\1\231\1\232\3\6\1\233\1\234"+
    "\1\235\1\236\2\0\1\237\1\0\5\6\1\240\1\241"+
    "\1\242\1\243\1\244\1\6\1\245\1\6\1\246\2\6"+
    "\1\247";

  private static int [] zzUnpackAction() {
    int [] result = new int[817];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\100\0\200\0\300\0\u0100\0\u0140\0\u0180\0\u01c0"+
    "\0\u0200\0\u0240\0\u0280\0\u02c0\0\u0300\0\u0340\0\u0380\0\0"+
    "\0\u03c0\0\u0400\0\u0440\0\u0480\0\u04c0\0\u0500\0\u0540\0\u0580"+
    "\0\u05c0\0\u0600\0\0\0\0\0\u0640\0\u0680\0\0\0\0"+
    "\0\0\0\u06c0\0\u0700\0\u0740\0\u0780\0\u07c0\0\u0800\0\u0840"+
    "\0\u0880\0\u08c0\0\u0900\0\u0940\0\u0980\0\u09c0\0\u0a00\0\u0a40"+
    "\0\u0a80\0\u0ac0\0\u0b00\0\u0b40\0\u0b80\0\u0bc0\0\u0c00\0\u0c40"+
    "\0\u0c80\0\u0cc0\0\u0d00\0\u0d40\0\u0d80\0\0\0\u0dc0\0\0"+
    "\0\u0e00\0\u0e40\0\0\0\u0e80\0\u0ec0\0\u0f00\0\u0f40\0\u0f80"+
    "\0\u0fc0\0\0\0\u1000\0\u1040\0\u1080\0\u10c0\0\u1100\0\u1140"+
    "\0\u1180\0\u11c0\0\u1200\0\u1240\0\u1280\0\u12c0\0\u1300\0\u1340"+
    "\0\u1340\0\0\0\u1380\0\u13c0\0\u1400\0\0\0\u1440\0\0"+
    "\0\u1480\0\u14c0\0\0\0\u1500\0\u1540\0\0\0\u1580\0\u15c0"+
    "\0\u1600\0\0\0\u1640\0\0\0\u1680\0\0\0\u16c0\0\u1700"+
    "\0\u1740\0\u1780\0\u17c0\0\0\0\u1800\0\u1840\0\u1880\0\u18c0"+
    "\0\u1900\0\u1940\0\0\0\u1980\0\u19c0\0\u1a00\0\u1a40\0\u1a80"+
    "\0\u1ac0\0\u1b00\0\u0dc0\0\u1b40\0\u1b80\0\u0680\0\u1bc0\0\0"+
    "\0\u1c00\0\u1c40\0\u0800\0\u1c80\0\u1cc0\0\u1d00\0\u05c0\0\u1d40"+
    "\0\u1d80\0\u1dc0\0\u1e00\0\u05c0\0\u1e40\0\u1e80\0\u1ec0\0\u1f00"+
    "\0\u05c0\0\u1f40\0\u1f80\0\u05c0\0\u1fc0\0\u2000\0\u2040\0\u2080"+
    "\0\u20c0\0\u2100\0\u2140\0\u2180\0\u21c0\0\u2200\0\u2240\0\u2280"+
    "\0\u22c0\0\u2300\0\u2340\0\u2380\0\u23c0\0\u2400\0\u2440\0\u2480"+
    "\0\u24c0\0\0\0\u2500\0\u2540\0\u0d40\0\u2580\0\u25c0\0\u2600"+
    "\0\u2640\0\u2680\0\u26c0\0\u2700\0\u2740\0\u2780\0\u27c0\0\u2800"+
    "\0\u0e80\0\u2840\0\u2880\0\u2800\0\0\0\0\0\0\0\u2840"+
    "\0\u28c0\0\u0f80\0\u2900\0\u28c0\0\0\0\u2900\0\0\0\u2940"+
    "\0\u1180\0\u2980\0\u1100\0\u29c0\0\u2a00\0\u2940\0\u2980\0\u1280"+
    "\0\u2a40\0\u2a80\0\u2ac0\0\u2b00\0\u2b40\0\u2b80\0\u2bc0\0\0"+
    "\0\u2c00\0\u2c40\0\u2c80\0\u12c0\0\0\0\u2cc0\0\u2d00\0\0"+
    "\0\0\0\u2d40\0\u2d80\0\u2dc0\0\u2e00\0\u2e40\0\u2e80\0\u2ec0"+
    "\0\u2f00\0\u2f40\0\u2f80\0\u2fc0\0\u3000\0\u3040\0\u3080\0\u30c0"+
    "\0\u3100\0\0\0\u3140\0\u3180\0\u31c0\0\u3200\0\u3240\0\u3280"+
    "\0\u32c0\0\u3300\0\u1980\0\u19c0\0\u3340\0\u3380\0\u33c0\0\u3400"+
    "\0\u3440\0\u3480\0\u34c0\0\u3500\0\u3540\0\u3580\0\u35c0\0\u3600"+
    "\0\u3640\0\u3680\0\u36c0\0\u05c0\0\u3700\0\u3740\0\u3780\0\u37c0"+
    "\0\u05c0\0\u3800\0\u3840\0\u3880\0\u38c0\0\u3900\0\u3940\0\u3980"+
    "\0\u05c0\0\u39c0\0\u3a00\0\u3a40\0\u3a80\0\u3ac0\0\u3b00\0\u3b40"+
    "\0\u05c0\0\u3b80\0\u3bc0\0\u3c00\0\u3c40\0\u3c80\0\u3cc0\0\u3d00"+
    "\0\u3d40\0\u3d80\0\u3dc0\0\u3e00\0\u05c0\0\u3e40\0\u3e80\0\u3ec0"+
    "\0\u3f00\0\u3f40\0\u3f80\0\u3fc0\0\u4000\0\u4040\0\u4080\0\u40c0"+
    "\0\u4100\0\u4140\0\u4180\0\u41c0\0\u4200\0\u4240\0\0\0\0"+
    "\0\u4280\0\0\0\u42c0\0\u4300\0\u4340\0\u4380\0\u4340\0\u43c0"+
    "\0\u4400\0\u4440\0\u1300\0\u4340\0\u4480\0\u44c0\0\u4500\0\u4540"+
    "\0\u4580\0\u45c0\0\u4600\0\u4640\0\u4680\0\u46c0\0\u4700\0\u4740"+
    "\0\u4780\0\u47c0\0\u4800\0\u4840\0\u4880\0\u48c0\0\u4900\0\u4940"+
    "\0\u4980\0\u49c0\0\u4a00\0\u4a40\0\u4a80\0\u4ac0\0\u4b00\0\u4b40"+
    "\0\u4b80\0\u4bc0\0\u4c00\0\u4c40\0\0\0\u4c80\0\u05c0\0\u4cc0"+
    "\0\u05c0\0\u4d00\0\u4d40\0\u4d80\0\u4dc0\0\u4e00\0\u4e40\0\u4e80"+
    "\0\u05c0\0\u4ec0\0\u4f00\0\u4f40\0\u05c0\0\u4f80\0\u4fc0\0\u5000"+
    "\0\u5040\0\u5080\0\u50c0\0\u5100\0\u5140\0\u5180\0\u51c0\0\u5200"+
    "\0\u5240\0\u5280\0\u52c0\0\u5300\0\u05c0\0\u5340\0\u5380\0\u53c0"+
    "\0\u5400\0\u5440\0\u5480\0\u54c0\0\u5500\0\u05c0\0\u5540\0\u5580"+
    "\0\u05c0\0\u55c0\0\u5600\0\u5640\0\u5680\0\u05c0\0\u56c0\0\u5700"+
    "\0\u5740\0\u05c0\0\u05c0\0\u5780\0\u57c0\0\u5800\0\u5840\0\u5880"+
    "\0\u58c0\0\u5900\0\u5940\0\u5980\0\u59c0\0\u5a00\0\u5a40\0\u5a80"+
    "\0\u5ac0\0\u5b00\0\u5b40\0\u5b80\0\u5bc0\0\u5c00\0\u5c40\0\u5c80"+
    "\0\u5cc0\0\u5d00\0\u5d40\0\u5d80\0\u5dc0\0\u5e00\0\0\0\u5e40"+
    "\0\u5e80\0\u5ec0\0\u5f00\0\u5f40\0\u5f80\0\u5fc0\0\u6000\0\u6040"+
    "\0\u6080\0\u60c0\0\u6100\0\u6140\0\u6180\0\u61c0\0\u6200\0\u6240"+
    "\0\u6280\0\u62c0\0\u6300\0\u6340\0\0\0\u6380\0\u63c0\0\u6400"+
    "\0\u6440\0\u6480\0\u64c0\0\u6500\0\u6540\0\u6580\0\u65c0\0\u6600"+
    "\0\u6640\0\0\0\u6680\0\u66c0\0\u05c0\0\u6700\0\u6740\0\u6780"+
    "\0\u67c0\0\u05c0\0\u6800\0\u05c0\0\u05c0\0\u6840\0\u05c0\0\u05c0"+
    "\0\u05c0\0\u1b40\0\0\0\u6880\0\u68c0\0\u6900\0\u6940\0\u6980"+
    "\0\u69c0\0\u6a00\0\u05c0\0\u6a40\0\u6a80\0\u6ac0\0\u6b00\0\u6b40"+
    "\0\u6b80\0\u6bc0\0\u05c0\0\u6c00\0\u05c0\0\u05c0\0\u6c40\0\u05c0"+
    "\0\u05c0\0\u6c80\0\u05c0\0\u6cc0\0\u6d00\0\u05c0\0\u6d40\0\u6d80"+
    "\0\u05c0\0\u6dc0\0\u6e00\0\u6e40\0\u6e80\0\u6ec0\0\u6f00\0\u6f40"+
    "\0\u6f80\0\u6fc0\0\u7000\0\0\0\u7040\0\u7080\0\u70c0\0\u7100"+
    "\0\u7140\0\u7180\0\u71c0\0\u7200\0\u7240\0\u7280\0\u72c0\0\u7300"+
    "\0\u7340\0\u7380\0\u73c0\0\u7400\0\u7440\0\u7480\0\u74c0\0\u7500"+
    "\0\0\0\u7540\0\u7580\0\u75c0\0\0\0\u7600\0\u7640\0\u7680"+
    "\0\u76c0\0\0\0\u7700\0\u7740\0\u7780\0\u77c0\0\0\0\u7800"+
    "\0\u7840\0\u7880\0\u78c0\0\u7900\0\u7940\0\u7980\0\u79c0\0\u7a00"+
    "\0\u7a40\0\u7a80\0\u7ac0\0\u05c0\0\u7b00\0\u7b40\0\u7b80\0\u5180"+
    "\0\u05c0\0\u7bc0\0\u7c00\0\u7c40\0\u7c80\0\u7cc0\0\u7d00\0\u7d40"+
    "\0\u7d80\0\u7dc0\0\u7e00\0\u7e40\0\u7e80\0\u05c0\0\u05c0\0\u05c0"+
    "\0\u7ec0\0\u7f00\0\u05c0\0\u05c0\0\u7f40\0\u7f80\0\u7fc0\0\u8000"+
    "\0\u8040\0\u8080\0\u80c0\0\u8100\0\u8140\0\u8180\0\u81c0\0\u8200"+
    "\0\u8240\0\u8280\0\u82c0\0\u8300\0\u8340\0\u8380\0\u83c0\0\u8400"+
    "\0\u8440\0\u8480\0\u84c0\0\u8500\0\u8540\0\u8580\0\u85c0\0\u8600"+
    "\0\0\0\u8640\0\0\0\u8680\0\u86c0\0\u8700\0\u8740\0\u8780"+
    "\0\u87c0\0\0\0\u8800\0\0\0\u8840\0\u05c0\0\u8880\0\u88c0"+
    "\0\u8900\0\u8940\0\u8980\0\u89c0\0\u8a00\0\u8a40\0\u8a80\0\u05c0"+
    "\0\u05c0\0\u8ac0\0\u8b00\0\u8b40\0\u8b80\0\u8bc0\0\u05c0\0\u8c00"+
    "\0\u8c40\0\u05c0\0\u8c80\0\u8cc0\0\u8d00\0\u8d40\0\u05c0\0\u8d80"+
    "\0\u8dc0\0\u8e00\0\u8e40\0\u8e80\0\u8ec0\0\u8f00\0\u8f40\0\u8f80"+
    "\0\u8fc0\0\0\0\0\0\u9000\0\0\0\u9040\0\u9080\0\u90c0"+
    "\0\0\0\u9100\0\0\0\u9140\0\u9180\0\u91c0\0\u9200\0\0"+
    "\0\u9240\0\u9280\0\0\0\u92c0\0\u9300\0\u9340\0\u9380\0\u05c0"+
    "\0\u05c0\0\u05c0\0\u93c0\0\u05c0\0\u9400\0\u9440\0\u9480\0\u94c0"+
    "\0\u9500\0\u9540\0\u05c0\0\u9580\0\u95c0\0\u9600\0\u05c0\0\u9640"+
    "\0\u9680\0\u05c0\0\u96c0\0\u9700\0\0\0\u9740\0\u9780\0\u97c0"+
    "\0\u9800\0\u9840\0\u9880\0\u98c0\0\u9900\0\u9940\0\u9980\0\0"+
    "\0\u99c0\0\0\0\0\0\u9a00\0\u9a40\0\u05c0\0\u9a80\0\u05c0"+
    "\0\u9ac0\0\u05c0\0\u05c0\0\u9b00\0\u9b40\0\u05c0\0\u05c0\0\u9b80"+
    "\0\u9bc0\0\u9c00\0\u9c40\0\u9c80\0\u9cc0\0\0\0\0\0\u9d00"+
    "\0\u9d40\0\0\0\0\0\u9d80\0\u9dc0\0\u9e00\0\0\0\u05c0"+
    "\0\u05c0\0\u9e40\0\u9e80\0\u05c0\0\u05c0\0\u9ec0\0\u9f00\0\u9f40"+
    "\0\u05c0\0\0\0\0\0\0\0\u9f80\0\u9fc0\0\0\0\ua000"+
    "\0\ua040\0\ua080\0\ua0c0\0\ua100\0\ua140\0\0\0\0\0\0"+
    "\0\u05c0\0\u05c0\0\ua180\0\u05c0\0\ua1c0\0\u05c0\0\ua200\0\ua240"+
    "\0\u05c0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[817];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\100\0\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\21\1\31\2\32\1\33\1\34\1\32"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\47"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63"+
    "\1\64\1\65\2\31\1\66\1\67\1\31\1\70\1\71"+
    "\1\31\1\72\1\73\1\74\1\33\1\31\1\75\1\31"+
    "\1\76\2\33\1\77\1\100\2\33\20\101\1\102\1\103"+
    "\1\104\1\101\1\105\53\101\20\106\1\107\1\106\1\110"+
    "\1\103\1\111\53\106\4\112\1\113\17\112\1\114\53\112"+
    "\3\115\1\116\2\115\3\116\1\115\1\116\1\117\3\115"+
    "\1\117\1\120\1\115\1\121\1\115\1\122\13\115\22\116"+
    "\1\115\1\116\2\115\3\116\7\115\3\123\1\124\2\123"+
    "\3\124\1\123\1\124\1\125\3\123\1\125\20\123\22\124"+
    "\1\123\1\124\2\123\3\124\7\123\3\126\1\127\2\126"+
    "\3\127\1\126\1\127\1\130\3\126\1\131\20\126\22\127"+
    "\1\126\1\127\2\126\3\127\7\126\3\132\1\133\1\134"+
    "\1\132\3\133\1\132\1\133\2\32\2\132\1\32\20\132"+
    "\22\133\1\132\1\133\2\132\3\133\7\132\1\20\1\135"+
    "\1\136\1\31\1\136\1\137\3\31\1\135\1\31\2\140"+
    "\2\136\1\140\1\141\1\136\1\140\15\136\3\31\1\142"+
    "\16\31\1\136\1\31\2\136\3\31\1\136\1\33\1\143"+
    "\2\140\2\136\32\144\1\145\45\144\32\146\1\147\44\146"+
    "\1\150\13\151\1\152\3\151\1\153\6\151\1\154\5\151"+
    "\1\155\41\151\1\154\1\151\13\156\2\157\2\156\1\157"+
    "\60\156\13\20\1\160\3\20\1\161\60\20\1\0\1\21"+
    "\1\162\1\163\1\0\1\21\3\0\1\21\67\0\1\162"+
    "\3\0\1\162\3\0\1\162\13\0\1\164\53\0\1\31"+
    "\1\0\1\31\1\0\1\31\1\165\1\166\3\31\25\0"+
    "\3\31\1\167\11\31\1\170\3\31\1\171\1\0\1\172"+
    "\2\0\3\31\13\0\1\164\20\0\1\164\1\173\52\0"+
    "\1\21\1\162\1\163\1\0\1\21\1\174\1\0\1\175"+
    "\1\21\67\0\1\31\1\0\1\31\1\0\6\31\25\0"+
    "\1\54\21\31\1\0\1\31\2\0\3\31\10\0\1\31"+
    "\1\0\1\31\1\0\6\31\25\0\1\176\1\31\1\177"+
    "\12\31\1\200\4\31\1\0\1\31\2\0\3\31\10\0"+
    "\1\31\1\0\1\31\1\0\6\31\6\0\1\36\7\0"+
    "\1\201\6\0\1\31\1\202\20\31\1\0\1\31\2\0"+
    "\3\31\3\0\1\203\4\0\1\31\1\0\1\31\1\0"+
    "\6\31\25\0\22\31\1\0\1\31\2\0\3\31\22\0"+
    "\2\32\2\0\1\32\63\0\1\204\2\0\3\204\1\0"+
    "\1\204\25\0\6\204\1\205\13\204\1\0\1\204\2\0"+
    "\3\204\7\0\20\206\1\207\1\210\1\211\1\206\1\212"+
    "\53\206\25\0\1\213\1\164\76\0\1\164\1\213\76\0"+
    "\1\164\1\0\1\164\75\0\1\213\77\0\2\164\2\0"+
    "\1\214\73\0\1\164\77\0\1\164\4\0\1\215\1\100"+
    "\71\0\1\164\1\216\76\0\1\164\7\0\1\164\67\0"+
    "\1\164\10\0\1\164\42\0\1\31\1\0\1\31\1\0"+
    "\6\31\25\0\1\31\1\217\20\31\1\0\1\31\2\0"+
    "\3\31\10\0\1\31\1\0\1\220\1\0\6\31\25\0"+
    "\22\31\1\0\1\31\2\0\3\31\10\0\1\31\1\0"+
    "\1\31\1\0\3\31\1\221\2\31\25\0\1\31\1\222"+
    "\1\31\1\223\5\31\1\224\10\31\1\0\1\31\2\0"+
    "\3\31\10\0\1\31\1\0\1\225\1\0\6\31\25\0"+
    "\2\31\1\226\5\31\1\227\11\31\1\0\1\31\2\0"+
    "\3\31\10\0\1\31\1\0\1\230\1\0\6\31\25\0"+
    "\1\231\4\31\1\232\14\31\1\0\1\31\2\0\3\31"+
    "\10\0\1\31\1\0\1\31\1\0\6\31\25\0\3\31"+
    "\1\233\3\31\1\234\1\31\1\235\7\31\1\236\1\0"+
    "\1\31\2\0\3\31\10\0\1\31\1\0\1\31\1\0"+
    "\6\31\25\0\1\31\1\237\11\31\1\240\6\31\1\0"+
    "\1\31\2\0\3\31\10\0\1\31\1\0\1\31\1\0"+
    "\6\31\25\0\1\241\1\242\1\243\2\31\1\244\2\31"+
    "\1\245\11\31\1\0\1\31\2\0\3\31\10\0\1\31"+
    "\1\0\1\31\1\0\6\31\25\0\3\31\1\246\5\31"+
    "\1\247\10\31\1\0\1\31\2\0\3\31\10\0\1\31"+
    "\1\0\1\250\1\0\6\31\25\0\6\31\1\251\5\31"+
    "\1\252\5\31\1\0\1\31\2\0\3\31\10\0\1\31"+
    "\1\0\1\31\1\0\6\31\25\0\13\31\1\253\6\31"+
    "\1\0\1\31\2\0\3\31\10\0\1\31\1\0\1\31"+
    "\1\0\6\31\25\0\5\31\1\254\14\31\1\0\1\31"+
    "\2\0\3\31\10\0\1\31\1\0\1\31\1\0\6\31"+
    "\25\0\1\255\14\31\1\256\4\31\1\0\1\31\2\0"+
    "\3\31\10\0\1\31\1\0\1\31\1\0\6\31\25\0"+
    "\1\31\1\257\1\260\5\31\1\261\11\31\1\0\1\31"+
    "\2\0\3\31\71\0\1\262\16\0\1\31\1\0\1\31"+
    "\1\0\6\31\25\0\2\31\1\263\17\31\1\0\1\31"+
    "\2\0\3\31\17\0\1\264\3\0\1\265\23\0\1\266"+
    "\1\267\1\270\1\0\1\271\1\272\1\0\1\273\1\274"+
    "\1\275\27\0\1\31\1\0\1\31\1\0\6\31\25\0"+
    "\22\31\1\0\1\31\2\0\1\31\1\276\1\31\7\0"+
    "\22\203\1\277\51\203\1\210\3\203\20\101\1\300\1\0"+
    "\1\301\1\101\1\302\56\101\1\303\2\101\3\303\1\101"+
    "\1\303\5\101\1\304\1\305\1\301\1\101\1\306\13\101"+
    "\22\303\1\101\1\303\2\101\3\303\127\101\1\307\1\305"+
    "\1\301\1\101\1\310\53\101\20\106\1\311\1\106\1\312"+
    "\1\0\1\313\56\106\1\303\2\106\3\303\1\106\1\303"+
    "\5\106\1\314\1\106\1\312\1\315\1\306\13\106\22\303"+
    "\1\106\1\303\2\106\3\303\127\106\1\307\1\106\1\312"+
    "\1\315\1\316\53\106\26\0\1\317\71\0\1\307\57\0"+
    "\13\115\1\117\3\115\1\117\1\320\1\115\1\321\1\115"+
    "\1\322\54\115\1\116\1\115\1\116\1\115\6\116\1\323"+
    "\2\115\1\324\1\323\1\320\1\115\1\321\1\115\1\322"+
    "\13\115\22\116\1\115\1\116\2\115\3\116\12\115\1\325"+
    "\2\115\3\325\1\115\1\325\1\117\3\115\1\117\1\320"+
    "\1\115\1\321\1\115\1\322\13\115\22\325\1\115\1\325"+
    "\2\115\3\325\12\115\1\303\2\115\3\303\1\115\1\303"+
    "\1\117\3\115\1\117\1\326\1\115\1\321\1\115\1\306"+
    "\13\115\22\303\1\115\1\303\2\115\3\303\22\115\1\117"+
    "\3\115\1\117\73\115\1\117\3\115\1\117\1\307\1\115"+
    "\1\321\1\115\1\327\53\115\13\123\1\125\3\123\1\125"+
    "\61\123\1\124\1\123\1\124\1\123\6\124\1\330\2\123"+
    "\1\331\1\330\20\123\22\124\1\123\1\124\2\123\3\124"+
    "\12\123\1\332\2\123\3\332\1\123\1\332\1\125\3\123"+
    "\1\125\20\123\22\332\1\123\1\332\2\123\3\332\7\123"+
    "\3\333\1\334\2\333\3\334\1\333\1\334\1\0\2\333"+
    "\1\335\1\0\20\333\22\334\1\333\1\334\2\333\3\334"+
    "\7\333\1\336\1\337\1\336\1\337\1\336\6\337\1\340"+
    "\2\336\1\341\1\340\20\336\22\337\1\336\1\337\2\336"+
    "\3\337\7\336\3\342\1\343\2\342\3\343\1\342\1\343"+
    "\1\130\2\342\1\344\1\130\20\342\22\343\1\342\1\343"+
    "\2\342\3\343\7\342\1\0\1\133\1\0\1\133\1\0"+
    "\6\133\25\0\22\133\1\0\1\133\2\0\3\133\35\0"+
    "\1\345\52\0\1\135\3\0\1\135\3\0\1\135\67\0"+
    "\1\346\3\0\1\346\1\174\1\0\1\175\1\346\71\0"+
    "\1\347\2\0\3\347\1\0\1\347\25\0\22\347\1\0"+
    "\1\347\2\0\3\347\10\0\1\31\1\0\1\31\1\0"+
    "\6\31\25\0\10\31\1\227\11\31\1\0\1\31\2\0"+
    "\3\31\7\0\32\144\1\0\45\144\33\0\1\350\77\0"+
    "\1\351\47\0\1\352\3\0\1\353\31\0\1\354\1\355"+
    "\1\356\1\357\1\360\1\361\1\362\1\363\1\364\3\0"+
    "\1\365\1\0\1\366\1\367\1\370\1\0\1\371\14\0"+
    "\13\151\1\152\3\151\1\152\6\151\1\152\5\151\1\152"+
    "\41\151\1\152\1\151\13\0\1\372\112\0\1\216\64\0"+
    "\2\157\2\0\1\157\63\0\1\373\2\0\3\373\1\0"+
    "\1\373\25\0\22\373\1\0\1\373\2\0\3\373\12\0"+
    "\1\373\2\0\3\373\1\0\1\373\1\160\24\0\22\373"+
    "\1\0\1\373\2\0\3\373\10\0\1\162\1\0\1\163"+
    "\1\0\1\162\3\0\1\162\67\0\1\346\2\0\2\346"+
    "\3\0\1\346\15\0\1\346\51\0\1\31\1\0\1\31"+
    "\1\0\6\31\25\0\5\31\1\374\1\375\13\31\1\0"+
    "\1\31\2\0\3\31\10\0\1\31\1\0\1\31\1\0"+
    "\6\31\25\0\13\31\1\376\6\31\1\0\1\31\2\0"+
    "\3\31\10\0\1\31\1\0\1\31\1\0\6\31\25\0"+
    "\4\31\1\377\15\31\1\0\1\31\2\0\3\31\10\0"+
    "\1\31\1\0\1\31\1\0\6\31\25\0\11\31\1\u0100"+
    "\10\31\1\0\1\31\2\0\3\31\10\0\1\31\1\0"+
    "\1\31\1\0\6\31\25\0\20\31\1\u0101\1\31\1\0"+
    "\1\31\2\0\3\31\10\0\1\31\1\0\1\31\1\0"+
    "\6\31\25\0\2\31\1\u0102\17\31\1\0\1\31\2\0"+
    "\3\31\10\0\1\u0103\1\0\1\u0103\1\0\1\u0103\1\0"+
    "\3\u0103\30\0\1\u0103\1\0\1\u0103\2\0\1\u0103\35\0"+
    "\1\u0104\3\0\1\u0104\67\0\1\31\1\0\1\31\1\0"+
    "\6\31\25\0\3\31\1\u0105\16\31\1\0\1\31\2\0"+
    "\3\31\10\0\1\31\1\0\1\31\1\0\6\31\25\0"+
    "\6\31\1\u0106\2\31\1\u0107\3\31\1\u0108\4\31\1\0"+
    "\1\31\2\0\3\31\10\0\1\31\1\0\1\31\1\0"+
    "\6\31\25\0\1\u0109\1\31\1\u010a\17\31\1\0\1\31"+
    "\2\0\3\31\40\0\1\u010b\47\0\1\31\1\0\1\u010c"+
    "\1\0\6\31\25\0\22\31\1\0\1\31\2\0\3\31"+
    "\10\0\1\204\1\0\1\204\1\0\6\204\25\0\22\204"+
    "\1\0\1\204\2\0\3\204\10\0\1\204\1\0\1\204"+
    "\1\0\6\204\25\0\13\204\1\u010d\6\204\1\0\1\204"+
    "\2\0\3\204\7\0\3\206\1\0\2\206\3\0\1\206"+
    "\1\0\5\206\1\207\1\210\1\211\1\206\1\0\13\206"+
    "\22\0\1\206\1\0\2\206\3\0\127\206\1\0\1\210"+
    "\1\211\1\206\1\212\53\206\25\0\1\164\3\0\1\u010e"+
    "\100\0\1\u010f\60\0\2\216\2\0\1\216\61\0\1\31"+
    "\1\0\1\31\1\0\6\31\25\0\6\31\1\u0110\13\31"+
    "\1\0\1\31\2\0\2\31\1\u0111\10\0\1\31\1\0"+
    "\1\31\1\0\6\31\25\0\11\31\1\u0112\10\31\1\0"+
    "\1\31\2\0\3\31\10\0\1\31\1\0\1\31\1\0"+
    "\6\31\25\0\1\31\1\u0113\20\31\1\0\1\31\2\0"+
    "\3\31\10\0\1\31\1\0\1\31\1\0\6\31\25\0"+
    "\4\31\1\217\15\31\1\0\1\31\2\0\3\31\10\0"+
    "\1\31\1\0\1\31\1\0\6\31\25\0\14\31\1\u0114"+
    "\5\31\1\0\1\31\2\0\3\31\10\0\1\31\1\0"+
    "\1\31\1\0\6\31\25\0\21\31\1\u0115\1\0\1\31"+
    "\2\0\3\31\10\0\1\31\1\0\1\31\1\0\6\31"+
    "\25\0\15\31\1\u0116\4\31\1\0\1\31\2\0\3\31"+
    "\10\0\1\31\1\0\1\31\1\0\2\31\1\u0117\3\31"+
    "\25\0\7\31\1\u0118\12\31\1\0\1\31\2\0\3\31"+
    "\10\0\1\31\1\0\1\u0119\1\0\6\31\25\0\22\31"+
    "\1\0\1\31\2\0\3\31\10\0\1\31\1\0\1\31"+
    "\1\0\2\31\1\u011a\3\31\25\0\6\31\1\u011b\2\31"+
    "\1\u011c\10\31\1\0\1\31\2\0\3\31\10\0\1\31"+
    "\1\0\1\31\1\0\6\31\25\0\11\31\1\u011d\10\31"+
    "\1\0\1\31\2\0\3\31\10\0\1\31\1\0\1\31"+
    "\1\0\6\31\25\0\20\31\1\u011e\1\31\1\0\1\31"+
    "\2\0\3\31\10\0\1\31\1\0\1\31\1\0\6\31"+
    "\25\0\2\31\1\u011f\5\31\1\u0120\1\31\1\u0121\7\31"+
    "\1\0\1\31\2\0\3\31\10\0\1\31\1\0\1\31"+
    "\1\0\6\31\25\0\1\31\1\u0122\20\31\1\0\1\31"+
    "\2\0\3\31\10\0\1\31\1\0\1\31\1\0\6\31"+
    "\25\0\1\31\1\u0123\20\31\1\0\1\31\2\0\3\31"+
    "\10\0\1\31\1\0\1\31\1\0\6\31\25\0\1\u0124"+
    "\21\31\1\0\1\31\2\0\3\31\10\0\1\31\1\0"+
    "\1\31\1\0\6\31\25\0\15\31\1\u0125\4\31\1\0"+
    "\1\31\2\0\3\31\10\0\1\31\1\0\1\31\1\0"+
    "\6\31\25\0\3\31\1\u0126\16\31\1\0\1\31\2\0"+
    "\3\31\10\0\1\31\1\0\1\31\1\0\6\31\25\0"+
    "\3\31\1\u0127\16\31\1\0\1\31\2\0\3\31\10\0"+
    "\1\31\1\0\1\31\1\0\6\31\25\0\11\31\1\u0128"+
    "\10\31\1\0\1\31\2\0\3\31\10\0\1\31\1\0"+
    "\1\u0129\1\0\6\31\25\0\22\31\1\0\1\31\2\0"+
    "\3\31\10\0\1\31\1\0\1\31\1\0\6\31\25\0"+
    "\15\31\1\u012a\4\31\1\0\1\31\2\0\3\31\10\0"+
    "\1\31\1\0\1\31\1\0\6\31\25\0\2\31\1\u012b"+
    "\17\31\1\0\1\31\2\0\3\31\10\0\1\31\1\0"+
    "\1\31\1\0\6\31\25\0\5\31\1\u012c\14\31\1\0"+
    "\1\31\2\0\3\31\10\0\1\31\1\0\1\31\1\0"+
    "\6\31\25\0\5\31\1\u012d\14\31\1\0\1\31\2\0"+
    "\3\31\10\0\1\31\1\0\1\31\1\0\6\31\25\0"+
    "\11\31\1\u012e\10\31\1\0\1\31\2\0\3\31\10\0"+
    "\1\31\1\0\1\31\1\0\6\31\25\0\6\31\1\u012f"+
    "\13\31\1\0\1\31\2\0\3\31\10\0\1\31\1\0"+
    "\1\31\1\0\6\31\25\0\1\u0130\21\31\1\0\1\31"+
    "\2\0\3\31\10\0\1\31\1\0\1\31\1\0\6\31"+
    "\25\0\1\u0131\4\31\1\u0132\14\31\1\0\1\31\2\0"+
    "\3\31\10\0\1\31\1\0\1\31\1\0\6\31\25\0"+
    "\1\31\1\u0133\20\31\1\0\1\31\2\0\3\31\10\0"+
    "\1\31\1\0\1\31\1\0\3\31\1\u0134\2\31\25\0"+
    "\22\31\1\0\1\31\2\0\3\31\10\0\1\31\1\0"+
    "\1\31\1\0\6\31\25\0\1\31\1\u0135\20\31\1\0"+
    "\1\31\2\0\3\31\47\0\1\u0136\4\0\1\u0137\42\0"+
    "\1\u0138\72\0\1\u0139\135\0\1\u013a\76\0\1\u013b\102\0"+
    "\1\u013c\111\0\1\u013d\65\0\1\u013e\102\0\1\u013f\32\0"+
    "\1\31\1\0\1\31\1\0\2\31\1\u0140\3\31\25\0"+
    "\3\31\1\u0141\1\u0142\2\31\1\u0143\3\31\1\u0144\1\31"+
    "\1\u0145\3\31\1\u0146\1\0\1\31\2\0\3\31\7\0"+
    "\100\203\3\101\1\0\2\101\3\0\1\101\1\0\5\101"+
    "\1\304\1\305\1\301\1\101\1\0\13\101\22\0\1\101"+
    "\1\0\2\101\3\0\27\101\1\0\1\305\1\301\1\101"+
    "\1\310\53\101\1\0\1\303\1\0\1\303\1\0\6\303"+
    "\25\0\22\303\1\0\1\303\2\0\3\303\1\0\1\u0147"+
    "\5\0\3\106\1\0\2\106\3\0\1\106\1\0\5\106"+
    "\1\314\1\106\1\312\1\315\1\0\13\106\22\0\1\106"+
    "\1\0\2\106\3\0\27\106\1\0\1\106\1\312\1\315"+
    "\1\316\53\106\3\115\1\0\2\115\3\0\1\115\1\0"+
    "\1\117\3\115\1\117\1\326\1\115\1\321\1\115\1\0"+
    "\13\115\22\0\1\115\1\0\2\115\3\0\22\115\1\117"+
    "\3\115\1\117\1\0\1\115\1\321\1\115\1\327\66\115"+
    "\1\323\3\115\1\323\1\320\1\115\1\321\1\115\1\322"+
    "\54\115\1\325\1\115\1\325\1\115\6\325\1\u0148\2\115"+
    "\1\u0149\1\u0148\1\320\1\115\1\321\1\115\1\322\13\115"+
    "\22\325\1\115\1\325\2\115\3\325\7\115\13\123\1\330"+
    "\3\123\1\330\61\123\1\332\1\123\1\332\1\123\6\332"+
    "\1\u014a\2\123\1\u014b\1\u014a\20\123\22\332\1\123\1\332"+
    "\2\123\3\332\7\123\3\344\1\u014c\2\344\3\u014c\1\344"+
    "\1\u014c\1\u014d\3\344\1\u014d\20\344\22\u014c\1\344\1\u014c"+
    "\2\344\3\u014c\10\344\1\u014e\1\344\1\u014c\1\344\1\u014e"+
    "\3\u014c\1\u014e\1\u014c\1\u014f\2\344\1\u0150\1\u014f\20\344"+
    "\22\u014c\1\344\1\u014c\2\344\3\u014c\7\344\3\335\1\u0151"+
    "\2\335\3\u0151\1\335\1\u0151\1\0\3\335\1\0\20\335"+
    "\22\u0151\1\335\1\u0151\2\335\3\u0151\7\335\3\u0152\1\u0153"+
    "\2\u0152\3\u0153\1\u0152\1\u0153\1\u014f\3\u0152\1\u014f\20\u0152"+
    "\22\u0153\1\u0152\1\u0153\2\u0152\3\u0153\10\u0152\1\u0153\1\u0152"+
    "\1\u0153\1\u0152\6\u0153\1\u0154\2\u0152\1\u0155\1\u0154\20\u0152"+
    "\22\u0153\1\u0152\1\u0153\2\u0152\3\u0153\7\u0152\13\u0156\1\340"+
    "\3\u0156\1\340\60\u0156\3\342\1\u0157\2\342\3\u0157\1\342"+
    "\1\u0157\1\u014d\2\342\1\344\1\u014d\20\342\22\u0157\1\342"+
    "\1\u0157\2\342\3\u0157\7\342\1\u0158\1\343\1\u0158\1\343"+
    "\1\u0158\6\343\1\u0154\2\u0158\1\u0155\1\u0154\20\u0158\22\343"+
    "\1\u0158\1\343\2\u0158\3\343\7\u0158\1\0\1\346\3\0"+
    "\1\346\3\0\1\346\67\0\1\347\1\0\1\347\1\0"+
    "\6\347\25\0\22\347\1\0\1\347\2\0\3\347\15\0"+
    "\1\u0159\131\0\1\u015a\1\0\1\u015b\40\0\1\u015c\103\0"+
    "\1\u015d\1\u015e\37\0\1\u015f\71\0\1\u0160\40\0\1\u0161"+
    "\137\0\1\u0162\13\0\1\u0163\60\0\1\u0164\7\0\1\u0165"+
    "\2\0\1\u0166\71\0\1\u0167\103\0\1\u0168\31\0\1\u0169"+
    "\41\0\1\u016a\1\u016b\1\0\1\u016c\74\0\1\u016d\107\0"+
    "\1\u016e\63\0\1\u016f\1\u0170\40\0\1\u0171\36\0\1\u0172"+
    "\40\0\1\u0173\36\0\1\u0174\36\0\1\373\1\0\1\373"+
    "\1\0\6\373\1\u0175\2\0\1\u0176\1\u0175\20\0\22\373"+
    "\1\0\1\373\2\0\3\373\10\0\1\31\1\0\1\31"+
    "\1\0\6\31\25\0\6\31\1\u0177\13\31\1\0\1\31"+
    "\2\0\3\31\10\0\1\31\1\0\1\u0178\1\0\6\31"+
    "\25\0\22\31\1\0\1\31\2\0\3\31\10\0\1\31"+
    "\1\0\1\31\1\0\6\31\25\0\1\u0179\21\31\1\0"+
    "\1\31\2\0\3\31\10\0\1\31\1\0\1\31\1\0"+
    "\6\31\25\0\4\31\1\u017a\1\u017b\1\31\1\u017c\1\31"+
    "\1\u017d\2\31\1\u017e\5\31\1\0\1\31\2\0\3\31"+
    "\10\0\1\31\1\0\1\u017f\1\0\6\31\25\0\22\31"+
    "\1\0\1\31\2\0\3\31\10\0\1\31\1\0\1\31"+
    "\1\0\6\31\25\0\6\31\1\u0180\13\31\1\0\1\31"+
    "\2\0\3\31\10\0\1\31\1\0\1\31\1\0\6\31"+
    "\25\0\15\31\1\u0181\4\31\1\0\1\31\2\0\3\31"+
    "\10\0\1\31\1\0\1\31\1\0\6\31\25\0\6\31"+
    "\1\u0182\2\31\1\u0183\10\31\1\0\1\31\2\0\3\31"+
    "\10\0\1\31\1\0\1\31\1\0\2\31\1\u0184\3\31"+
    "\25\0\22\31\1\0\1\31\2\0\3\31\10\0\1\31"+
    "\1\0\1\u0185\1\0\6\31\25\0\22\31\1\0\1\31"+
    "\2\0\3\31\10\0\1\31\1\0\1\31\1\0\6\31"+
    "\25\0\15\31\1\u0186\4\31\1\0\1\31\2\0\3\31"+
    "\10\0\1\31\1\0\1\31\1\0\6\31\25\0\3\31"+
    "\1\u0187\16\31\1\0\1\31\2\0\3\31\10\0\1\31"+
    "\1\0\1\31\1\0\6\31\25\0\11\31\1\u0188\10\31"+
    "\1\0\1\31\2\0\3\31\40\0\1\u010e\47\0\1\31"+
    "\1\0\1\31\1\0\6\31\25\0\2\31\1\u0189\17\31"+
    "\1\0\1\31\2\0\3\31\10\0\1\204\1\0\1\204"+
    "\1\0\6\204\25\0\5\204\1\u018a\14\204\1\0\1\204"+
    "\2\0\3\204\12\0\1\u018b\2\0\3\u018b\1\0\1\u018b"+
    "\1\0\1\u010e\4\0\1\u018c\16\0\22\u018b\1\0\1\u018b"+
    "\2\0\3\u018b\3\0\1\u018d\16\0\2\u018e\2\0\1\u018e"+
    "\55\0\1\u018f\3\0\1\31\1\0\1\31\1\0\6\31"+
    "\25\0\10\31\1\u0190\11\31\1\0\1\31\2\0\3\31"+
    "\10\0\1\31\1\0\1\31\1\0\6\31\25\0\10\31"+
    "\1\u0191\11\31\1\0\1\31\2\0\3\31\10\0\1\31"+
    "\1\0\1\31\1\0\6\31\25\0\6\31\1\u0192\13\31"+
    "\1\0\1\31\2\0\3\31\10\0\1\31\1\0\1\31"+
    "\1\0\6\31\25\0\2\31\1\u0193\17\31\1\0\1\31"+
    "\2\0\3\31\10\0\1\31\1\0\1\u0194\1\0\6\31"+
    "\25\0\22\31\1\0\1\31\2\0\3\31\10\0\1\31"+
    "\1\0\1\31\1\0\6\31\25\0\15\31\1\u0195\4\31"+
    "\1\0\1\31\2\0\3\31\10\0\1\31\1\0\1\31"+
    "\1\0\6\31\25\0\15\31\1\u0196\4\31\1\0\1\31"+
    "\2\0\3\31\10\0\1\31\1\0\1\31\1\0\6\31"+
    "\25\0\2\31\1\u0197\17\31\1\0\1\31\2\0\3\31"+
    "\10\0\1\31\1\0\1\31\1\0\6\31\25\0\15\31"+
    "\1\u0198\4\31\1\0\1\31\2\0\3\31\10\0\1\31"+
    "\1\0\1\u0199\1\0\6\31\25\0\22\31\1\0\1\31"+
    "\2\0\3\31\10\0\1\31\1\0\1\31\1\0\6\31"+
    "\25\0\6\31\1\u019a\13\31\1\0\1\31\2\0\3\31"+
    "\10\0\1\31\1\0\1\u019b\1\0\6\31\25\0\22\31"+
    "\1\0\1\31\2\0\3\31\10\0\1\31\1\0\1\31"+
    "\1\0\6\31\25\0\15\31\1\u019c\4\31\1\0\1\31"+
    "\2\0\3\31\10\0\1\31\1\0\1\31\1\0\6\31"+
    "\25\0\5\31\1\u019d\14\31\1\0\1\31\2\0\3\31"+
    "\10\0\1\31\1\0\1\u019e\1\0\6\31\25\0\22\31"+
    "\1\0\1\31\2\0\3\31\10\0\1\31\1\0\1\31"+
    "\1\0\6\31\25\0\1\u019f\21\31\1\0\1\31\2\0"+
    "\3\31\10\0\1\31\1\0\1\u01a0\1\0\6\31\25\0"+
    "\22\31\1\0\1\31\2\0\3\31\10\0\1\31\1\0"+
    "\1\31\1\0\6\31\25\0\21\31\1\u01a1\1\0\1\31"+
    "\2\0\3\31\10\0\1\31\1\0\1\31\1\0\6\31"+
    "\25\0\11\31\1\u01a2\10\31\1\0\1\31\2\0\3\31"+
    "\10\0\1\31\1\0\1\31\1\0\6\31\25\0\2\31"+
    "\1\u01a3\17\31\1\0\1\31\2\0\3\31\10\0\1\31"+
    "\1\0\1\31\1\0\2\31\1\u01a4\3\31\25\0\22\31"+
    "\1\0\1\31\2\0\3\31\10\0\1\31\1\0\1\u01a5"+
    "\1\0\6\31\25\0\22\31\1\0\1\31\2\0\3\31"+
    "\10\0\1\31\1\0\1\31\1\0\6\31\25\0\7\31"+
    "\1\u01a6\12\31\1\0\1\31\2\0\3\31\10\0\1\31"+
    "\1\0\1\31\1\0\6\31\25\0\6\31\1\u01a7\13\31"+
    "\1\0\1\31\2\0\3\31\10\0\1\31\1\0\1\31"+
    "\1\0\6\31\25\0\6\31\1\u01a8\13\31\1\0\1\31"+
    "\2\0\3\31\10\0\1\31\1\0\1\31\1\0\6\31"+
    "\25\0\15\31\1\u01a9\4\31\1\0\1\31\2\0\3\31"+
    "\10\0\1\31\1\0\1\31\1\0\6\31\25\0\6\31"+
    "\1\u01aa\13\31\1\0\1\31\2\0\3\31\10\0\1\31"+
    "\1\0\1\31\1\0\6\31\25\0\1\u01ab\21\31\1\0"+
    "\1\31\2\0\3\31\10\0\1\31\1\0\1\31\1\0"+
    "\3\31\1\u01ac\2\31\25\0\22\31\1\0\1\31\2\0"+
    "\3\31\10\0\1\31\1\0\1\31\1\0\6\31\25\0"+
    "\6\31\1\u01ad\13\31\1\0\1\31\2\0\3\31\10\0"+
    "\1\31\1\0\1\31\1\0\6\31\25\0\3\31\1\u01ae"+
    "\16\31\1\0\1\u01af\2\0\3\31\10\0\1\31\1\0"+
    "\1\u01b0\1\0\6\31\25\0\22\31\1\0\1\31\2\0"+
    "\3\31\10\0\1\31\1\0\1\31\1\0\6\31\25\0"+
    "\15\31\1\u01b1\4\31\1\0\1\31\2\0\3\31\47\0"+
    "\1\u01b2\102\0\1\u01b3\122\0\1\u01b4\53\0\1\u01b5\76\0"+
    "\1\u01b6\106\0\1\u01b7\75\0\1\u01b8\71\0\1\u01b9\110\0"+
    "\1\u01ba\67\0\1\u01bb\37\0\1\31\1\0\1\31\1\0"+
    "\6\31\25\0\15\31\1\u01bc\4\31\1\0\1\31\2\0"+
    "\3\31\10\0\1\31\1\0\1\31\1\0\6\31\25\0"+
    "\2\31\1\u01bd\17\31\1\0\1\31\2\0\3\31\10\0"+
    "\1\31\1\0\1\31\1\0\6\31\25\0\5\31\1\u01be"+
    "\14\31\1\0\1\31\2\0\3\31\10\0\1\31\1\0"+
    "\1\31\1\0\6\31\25\0\5\31\1\u01bf\2\31\1\u01c0"+
    "\11\31\1\0\1\31\2\0\3\31\10\0\1\31\1\0"+
    "\1\31\1\0\6\31\25\0\2\31\1\u01c1\17\31\1\0"+
    "\1\31\2\0\3\31\10\0\1\31\1\0\1\31\1\0"+
    "\6\31\25\0\5\31\1\u01c2\14\31\1\0\1\31\2\0"+
    "\3\31\10\0\1\31\1\0\1\u01c3\1\0\6\31\25\0"+
    "\22\31\1\0\1\31\2\0\3\31\7\0\13\115\1\u0148"+
    "\3\115\1\u0148\1\320\1\115\1\321\1\115\1\322\53\115"+
    "\13\123\1\u014a\3\123\1\u014a\60\123\1\333\1\u01c4\1\333"+
    "\1\u01c4\1\333\6\u01c4\1\340\2\333\1\u01c5\1\340\20\333"+
    "\22\u01c4\1\333\1\u01c4\2\333\3\u01c4\7\333\13\u01c6\1\0"+
    "\2\u01c6\2\0\60\u01c6\1\333\1\334\1\333\1\334\1\333"+
    "\6\334\1\u01c7\2\333\1\u01c8\1\u01c7\20\333\22\334\1\333"+
    "\1\334\2\333\3\334\12\333\1\334\2\333\3\334\1\333"+
    "\1\334\1\u01c7\2\333\1\335\1\u01c7\20\333\22\334\1\333"+
    "\1\334\2\333\3\334\7\333\1\335\1\u0151\1\335\1\u0151"+
    "\1\335\6\u0151\1\u01c7\2\335\1\u01c8\1\u01c7\20\335\22\u0151"+
    "\1\335\1\u0151\2\335\3\u0151\7\335\13\336\1\u01c7\2\336"+
    "\1\u0156\1\u01c7\73\336\1\340\2\336\1\u0156\1\340\60\336"+
    "\13\u0156\1\u01c7\3\u0156\1\u01c7\60\u0156\1\342\1\u0157\1\342"+
    "\1\u0157\1\342\6\u0157\1\u0154\2\342\1\u01c9\1\u0154\20\342"+
    "\22\u0157\1\342\1\u0157\2\342\3\u0157\7\342\3\u0158\1\343"+
    "\2\u0158\3\343\1\u0158\1\343\1\u014f\2\u0158\1\u0152\1\u014f"+
    "\20\u0158\22\343\1\u0158\1\343\2\u0158\3\343\7\u0158\7\0"+
    "\1\u01ca\32\0\1\u01cb\115\0\1\u01cc\65\0\1\u01cd\77\0"+
    "\1\u01ce\40\0\1\u01cf\141\0\1\u01d0\74\0\1\u01d1\112\0"+
    "\1\u01d2\67\0\1\u01d3\6\0\1\u01d4\65\0\1\u01d5\74\0"+
    "\1\u01d6\100\0\1\u01d7\101\0\1\u01d8\72\0\1\u01d9\101\0"+
    "\1\u01da\11\0\1\u01db\25\0\1\u01dc\77\0\1\u01dd\137\0"+
    "\1\u01de\76\0\1\u01df\45\0\1\u01e0\76\0\1\u01e1\33\0"+
    "\1\u01e2\74\0\1\u01e3\77\0\1\u01e4\46\0\1\u01e5\31\0"+
    "\1\u01e6\104\0\1\u01e7\110\0\1\u01e8\61\0\1\u01e9\77\0"+
    "\1\u01ea\51\0\1\u0175\3\0\1\u0175\61\0\1\31\1\0"+
    "\1\31\1\0\6\31\25\0\3\31\1\u01eb\16\31\1\0"+
    "\1\31\2\0\3\31\10\0\1\31\1\0\1\u01ec\1\0"+
    "\6\31\25\0\22\31\1\0\1\31\2\0\3\31\10\0"+
    "\1\31\1\0\1\31\1\0\6\31\25\0\7\31\1\u01ed"+
    "\12\31\1\0\1\31\2\0\3\31\10\0\1\31\1\0"+
    "\1\31\1\0\6\31\25\0\1\u01ee\21\31\1\0\1\31"+
    "\2\0\3\31\10\0\1\31\1\0\1\31\1\0\6\31"+
    "\25\0\14\31\1\u01ef\5\31\1\0\1\31\2\0\3\31"+
    "\10\0\1\31\1\0\1\31\1\0\6\31\25\0\13\31"+
    "\1\u01f0\6\31\1\0\1\31\2\0\3\31\10\0\1\31"+
    "\1\0\1\31\1\0\6\31\25\0\5\31\1\u01f1\14\31"+
    "\1\0\1\31\2\0\3\31\10\0\1\31\1\0\1\31"+
    "\1\0\6\31\25\0\12\31\1\u01f2\7\31\1\0\1\31"+
    "\2\0\3\31\10\0\1\31\1\0\1\31\1\0\6\31"+
    "\25\0\5\31\1\u01f3\14\31\1\0\1\31\2\0\3\31"+
    "\10\0\1\31\1\0\1\31\1\0\6\31\25\0\6\31"+
    "\1\u01f4\13\31\1\0\1\31\2\0\3\31\10\0\1\31"+
    "\1\0\1\31\1\0\6\31\25\0\13\31\1\u01f5\6\31"+
    "\1\0\1\31\2\0\3\31\10\0\1\31\1\0\1\31"+
    "\1\0\6\31\25\0\2\31\1\u01f6\17\31\1\0\1\31"+
    "\2\0\3\31\10\0\1\31\1\0\1\u01f7\1\0\6\31"+
    "\25\0\22\31\1\0\1\31\2\0\3\31\10\0\1\31"+
    "\1\0\1\31\1\0\6\31\25\0\11\31\1\u01f8\10\31"+
    "\1\0\1\31\2\0\3\31\10\0\1\31\1\0\1\31"+
    "\1\0\6\31\25\0\16\31\1\u01f9\3\31\1\0\1\31"+
    "\2\0\3\31\10\0\1\204\1\0\1\204\1\0\6\204"+
    "\25\0\11\204\1\u01fa\10\204\1\0\1\204\2\0\3\204"+
    "\10\0\1\u018b\1\0\1\u018b\1\0\6\u018b\1\u01fb\3\0"+
    "\1\u01fc\20\0\22\u018b\1\0\1\u018b\2\0\3\u018b\12\0"+
    "\1\u01fd\2\0\3\u01fd\1\0\1\u01fd\25\0\22\u01fd\1\0"+
    "\1\u01fd\2\0\3\u01fd\12\0\1\u01fe\2\0\3\u01fe\1\0"+
    "\1\u01fe\25\0\22\u01fe\1\0\1\u01fe\2\0\3\u01fe\22\0"+
    "\2\u018e\2\0\1\u018e\157\0\1\u01ff\1\0\1\31\1\0"+
    "\1\31\1\0\6\31\25\0\1\31\1\u0200\20\31\1\0"+
    "\1\31\2\0\3\31\10\0\1\31\1\0\1\31\1\0"+
    "\6\31\25\0\5\31\1\u0201\14\31\1\0\1\31\2\0"+
    "\3\31\10\0\1\31\1\0\1\31\1\0\6\31\25\0"+
    "\1\31\1\u0202\20\31\1\0\1\31\2\0\3\31\10\0"+
    "\1\31\1\0\1\31\1\0\6\31\25\0\12\31\1\u0203"+
    "\7\31\1\0\1\31\2\0\3\31\10\0\1\31\1\0"+
    "\1\31\1\0\6\31\25\0\11\31\1\u0204\10\31\1\0"+
    "\1\31\2\0\3\31\10\0\1\31\1\0\1\31\1\0"+
    "\6\31\25\0\2\31\1\u0205\17\31\1\0\1\31\2\0"+
    "\3\31\10\0\1\31\1\0\1\31\1\0\6\31\25\0"+
    "\10\31\1\u0206\11\31\1\0\1\31\2\0\3\31\10\0"+
    "\1\31\1\0\1\31\1\0\6\31\25\0\10\31\1\u0207"+
    "\11\31\1\0\1\31\2\0\3\31\10\0\1\31\1\0"+
    "\1\31\1\0\6\31\25\0\1\31\1\u0208\20\31\1\0"+
    "\1\31\2\0\3\31\10\0\1\31\1\0\1\u0209\1\0"+
    "\6\31\25\0\2\31\1\u020a\17\31\1\0\1\31\2\0"+
    "\3\31\10\0\1\31\1\0\1\31\1\0\6\31\25\0"+
    "\6\31\1\u020b\13\31\1\0\1\31\2\0\3\31\10\0"+
    "\1\31\1\0\1\u020c\1\0\6\31\25\0\22\31\1\0"+
    "\1\31\2\0\3\31\10\0\1\31\1\0\1\31\1\0"+
    "\6\31\25\0\6\31\1\u020d\13\31\1\0\1\31\2\0"+
    "\3\31\10\0\1\31\1\0\1\31\1\0\6\31\25\0"+
    "\14\31\1\u020e\5\31\1\0\1\31\2\0\3\31\10\0"+
    "\1\31\1\0\1\31\1\0\6\31\25\0\2\31\1\u020f"+
    "\17\31\1\0\1\31\2\0\3\31\10\0\1\31\1\0"+
    "\1\u0210\1\0\6\31\25\0\22\31\1\0\1\31\2\0"+
    "\3\31\10\0\1\31\1\0\1\31\1\0\6\31\25\0"+
    "\15\31\1\u0211\4\31\1\0\1\31\2\0\3\31\10\0"+
    "\1\31\1\0\1\31\1\0\6\31\25\0\6\31\1\u0212"+
    "\13\31\1\0\1\31\2\0\3\31\10\0\1\31\1\0"+
    "\1\31\1\0\6\31\25\0\6\31\1\u0213\13\31\1\0"+
    "\1\31\2\0\3\31\10\0\1\31\1\0\1\31\1\0"+
    "\6\31\25\0\5\31\1\u0214\14\31\1\0\1\31\2\0"+
    "\3\31\10\0\1\31\1\0\1\31\1\0\2\31\1\u0215"+
    "\3\31\25\0\22\31\1\0\1\31\2\0\3\31\10\0"+
    "\1\31\1\0\1\u0216\1\0\6\31\25\0\22\31\1\0"+
    "\1\31\2\0\3\31\10\0\1\31\1\0\1\31\1\0"+
    "\6\31\25\0\2\31\1\u0217\17\31\1\0\1\31\2\0"+
    "\3\31\10\0\1\31\1\0\1\u0218\1\0\6\31\25\0"+
    "\22\31\1\0\1\31\2\0\3\31\10\0\1\31\1\0"+
    "\1\31\1\0\6\31\25\0\6\31\1\u0219\13\31\1\0"+
    "\1\31\2\0\3\31\10\0\1\31\1\0\1\31\1\0"+
    "\6\31\25\0\2\31\1\u021a\17\31\1\0\1\31\2\0"+
    "\3\31\10\0\1\31\1\0\1\31\1\0\6\31\25\0"+
    "\3\31\1\u021b\16\31\1\0\1\31\2\0\3\31\10\0"+
    "\1\31\1\0\1\31\1\0\6\31\25\0\5\31\1\u021c"+
    "\14\31\1\0\1\31\2\0\3\31\64\0\1\u021d\64\0"+
    "\1\u021e\40\0\1\u021f\151\0\1\u0220\64\0\1\u0221\45\0"+
    "\1\u0222\72\0\1\u0223\10\0\1\u0220\50\0\1\u0224\54\0"+
    "\1\u0225\40\0\1\u0225\141\0\1\u0226\33\0\1\31\1\0"+
    "\1\31\1\0\6\31\25\0\2\31\1\u0227\17\31\1\0"+
    "\1\31\2\0\3\31\10\0\1\31\1\0\1\31\1\0"+
    "\6\31\25\0\21\31\1\u0228\1\0\1\31\2\0\3\31"+
    "\10\0\1\31\1\0\1\31\1\0\6\31\25\0\1\31"+
    "\1\u0229\20\31\1\0\1\31\2\0\3\31\10\0\1\31"+
    "\1\0\1\31\1\0\6\31\25\0\15\31\1\u022a\4\31"+
    "\1\0\1\31\2\0\3\31\10\0\1\31\1\0\1\31"+
    "\1\0\6\31\25\0\3\31\1\u022b\16\31\1\0\1\31"+
    "\2\0\3\31\10\0\1\31\1\0\1\31\1\0\6\31"+
    "\25\0\15\31\1\u022c\4\31\1\0\1\31\2\0\3\31"+
    "\10\0\1\31\1\0\1\31\1\0\6\31\25\0\3\31"+
    "\1\u022d\16\31\1\0\1\31\2\0\3\31\10\0\1\31"+
    "\1\0\1\31\1\0\6\31\25\0\6\31\1\u022e\13\31"+
    "\1\0\1\31\2\0\3\31\7\0\1\344\1\u014c\1\344"+
    "\1\u014c\1\344\6\u014c\1\u0154\2\344\1\u01c9\1\u0154\20\344"+
    "\22\u014c\1\344\1\u014c\2\344\3\u014c\7\344\3\335\1\u0151"+
    "\2\335\3\u0151\1\335\1\u0151\1\340\3\335\1\340\20\335"+
    "\22\u0151\1\335\1\u0151\2\335\3\u0151\7\335\3\u014d\1\u022f"+
    "\2\u014d\3\u022f\1\u014d\1\u022f\25\u014d\22\u022f\1\u014d\1\u022f"+
    "\2\u014d\3\u022f\7\u014d\3\335\1\u0151\2\335\3\u0151\1\335"+
    "\1\u0151\1\u01c7\3\335\1\u01c7\20\335\22\u0151\1\335\1\u0151"+
    "\2\335\3\u0151\7\335\3\333\1\334\2\333\3\334\1\333"+
    "\1\334\1\340\2\333\1\335\1\340\20\333\22\334\1\333"+
    "\1\334\2\333\3\334\7\333\3\0\1\u0230\155\0\1\u0231"+
    "\70\0\1\u0232\30\0\1\u0233\144\0\1\u0234\32\0\1\u0235"+
    "\142\0\1\u0236\104\0\1\u0237\27\0\1\u0238\103\0\1\u0239"+
    "\131\0\1\u023a\41\0\1\u023b\134\0\1\u023c\77\0\1\u023d"+
    "\77\0\1\u023e\77\0\1\u023f\101\0\1\u0240\40\0\1\u0241"+
    "\145\0\1\u0242\35\0\1\u0243\136\0\1\u0244\111\0\1\u0245"+
    "\22\0\1\u0246\152\0\1\u0247\31\0\1\u0248\147\0\1\u0249"+
    "\75\0\1\u024a\63\0\1\u024b\110\0\1\u024c\71\0\1\u024d"+
    "\103\0\1\u024e\27\0\1\31\1\0\1\31\1\0\6\31"+
    "\25\0\4\31\1\u024f\15\31\1\0\1\31\2\0\3\31"+
    "\10\0\1\31\1\0\1\31\1\0\2\31\1\u0250\3\31"+
    "\25\0\22\31\1\0\1\31\2\0\3\31\10\0\1\31"+
    "\1\0\1\31\1\0\6\31\25\0\1\31\1\u0251\20\31"+
    "\1\0\1\31\2\0\3\31\10\0\1\31\1\0\1\31"+
    "\1\0\6\31\25\0\5\31\1\u0252\14\31\1\0\1\31"+
    "\2\0\3\31\10\0\1\31\1\0\1\31\1\0\6\31"+
    "\25\0\5\31\1\u0253\14\31\1\0\1\31\2\0\3\31"+
    "\10\0\1\31\1\0\1\31\1\0\6\31\25\0\7\31"+
    "\1\u0254\12\31\1\0\1\31\2\0\3\31\10\0\1\31"+
    "\1\0\1\31\1\0\6\31\25\0\3\31\1\u0255\16\31"+
    "\1\0\1\31\2\0\3\31\10\0\1\31\1\0\1\31"+
    "\1\0\3\31\1\u0256\2\31\25\0\22\31\1\0\1\31"+
    "\2\0\3\31\22\0\1\u01fb\65\0\1\u01fd\1\0\1\u01fd"+
    "\1\0\6\u01fd\6\0\1\u0257\16\0\22\u01fd\1\0\1\u01fd"+
    "\2\0\3\u01fd\10\0\1\u01fe\1\0\1\u01fe\1\0\6\u01fe"+
    "\25\0\22\u01fe\1\0\1\u01fe\2\0\3\u01fe\3\0\1\u0257"+
    "\32\0\1\u0258\51\0\1\31\1\0\1\31\1\0\6\31"+
    "\25\0\3\31\1\u0259\16\31\1\0\1\31\2\0\3\31"+
    "\10\0\1\31\1\0\1\31\1\0\6\31\25\0\1\31"+
    "\1\u025a\20\31\1\0\1\31\2\0\3\31\10\0\1\31"+
    "\1\0\1\31\1\0\6\31\25\0\2\31\1\u025b\17\31"+
    "\1\0\1\31\2\0\3\31\10\0\1\31\1\0\1\31"+
    "\1\0\6\31\25\0\20\31\1\u025c\1\31\1\0\1\31"+
    "\2\0\3\31\10\0\1\31\1\0\1\31\1\0\6\31"+
    "\25\0\1\31\1\u025d\20\31\1\0\1\31\2\0\3\31"+
    "\10\0\1\31\1\0\1\31\1\0\6\31\25\0\15\31"+
    "\1\u025e\4\31\1\0\1\31\2\0\3\31\10\0\1\31"+
    "\1\0\1\31\1\0\6\31\25\0\4\31\1\u025f\15\31"+
    "\1\0\1\31\2\0\3\31\10\0\1\31\1\0\1\31"+
    "\1\0\6\31\25\0\7\31\1\u0260\12\31\1\0\1\31"+
    "\2\0\3\31\10\0\1\31\1\0\1\31\1\0\6\31"+
    "\25\0\2\31\1\u0261\17\31\1\0\1\31\2\0\3\31"+
    "\10\0\1\31\1\0\1\31\1\0\6\31\25\0\3\31"+
    "\1\u0262\16\31\1\0\1\31\2\0\3\31\10\0\1\31"+
    "\1\0\1\31\1\0\6\31\25\0\21\31\1\u0263\1\0"+
    "\1\31\2\0\3\31\10\0\1\31\1\0\1\31\1\0"+
    "\2\31\1\u0264\3\31\25\0\22\31\1\0\1\31\2\0"+
    "\3\31\10\0\1\31\1\0\1\31\1\0\6\31\25\0"+
    "\5\31\1\u0265\14\31\1\0\1\31\2\0\3\31\10\0"+
    "\1\31\1\0\1\31\1\0\2\31\1\u0266\3\31\25\0"+
    "\22\31\1\0\1\31\2\0\3\31\10\0\1\31\1\0"+
    "\1\31\1\0\6\31\25\0\13\31\1\u0267\6\31\1\0"+
    "\1\31\2\0\3\31\10\0\1\31\1\0\1\31\1\0"+
    "\6\31\25\0\15\31\1\u0268\4\31\1\0\1\31\2\0"+
    "\3\31\10\0\1\31\1\0\1\31\1\0\2\31\1\u0269"+
    "\3\31\25\0\22\31\1\0\1\31\2\0\3\31\10\0"+
    "\1\31\1\0\1\31\1\0\6\31\25\0\6\31\1\u026a"+
    "\13\31\1\0\1\31\2\0\3\31\10\0\1\31\1\0"+
    "\1\31\1\0\6\31\25\0\6\31\1\u026b\13\31\1\0"+
    "\1\31\2\0\3\31\10\0\1\31\1\0\1\31\1\0"+
    "\2\31\1\u026c\3\31\25\0\22\31\1\0\1\31\2\0"+
    "\3\31\12\0\1\u026d\10\0\1\u0220\50\0\1\u0224\53\0"+
    "\1\u0221\45\0\1\u0225\104\0\1\u0220\50\0\1\u0224\64\0"+
    "\1\u0220\102\0\1\u026e\101\0\1\u026f\66\0\1\u0220\74\0"+
    "\1\u0270\35\0\1\31\1\0\1\31\1\0\6\31\25\0"+
    "\11\31\1\u0271\10\31\1\0\1\31\2\0\3\31\10\0"+
    "\1\31\1\0\1\u0272\1\0\6\31\25\0\22\31\1\0"+
    "\1\31\2\0\3\31\10\0\1\31\1\0\1\31\1\0"+
    "\6\31\25\0\22\31\1\0\1\31\2\0\1\31\1\u0273"+
    "\1\31\10\0\1\31\1\0\1\u0274\1\0\6\31\25\0"+
    "\22\31\1\0\1\31\2\0\3\31\10\0\1\31\1\0"+
    "\1\31\1\0\2\31\1\u0275\3\31\25\0\22\31\1\0"+
    "\1\31\2\0\3\31\10\0\1\31\1\0\1\31\1\0"+
    "\6\31\25\0\6\31\1\u0276\13\31\1\0\1\31\2\0"+
    "\3\31\10\0\1\31\1\0\1\u0277\1\0\6\31\25\0"+
    "\22\31\1\0\1\31\2\0\3\31\10\0\1\31\1\0"+
    "\1\31\1\0\6\31\25\0\13\31\1\u0278\6\31\1\0"+
    "\1\31\2\0\3\31\7\0\1\u01c6\1\u0279\1\u01c6\1\u0279"+
    "\1\u01c6\6\u0279\1\340\2\u01c6\1\u027a\1\340\20\u01c6\22\u0279"+
    "\1\u01c6\1\u0279\2\u01c6\3\u0279\7\u01c6\60\0\1\u027b\77\0"+
    "\1\u027c\60\0\1\u027d\115\0\1\u027e\61\0\1\u027f\107\0"+
    "\1\u0280\67\0\1\u0281\76\0\1\u0282\110\0\1\u0283\31\0"+
    "\1\u0284\135\0\1\u0285\77\0\1\u0286\77\0\1\u0287\112\0"+
    "\1\u0288\100\0\1\u0289\73\0\1\u028a\31\0\1\u028b\141\0"+
    "\1\u028c\74\0\1\u028d\100\0\1\u028e\76\0\1\u028f\40\0"+
    "\1\u0290\136\0\1\u0291\116\0\1\u0292\56\0\1\u0293\46\0"+
    "\1\u0294\135\0\1\u0295\33\0\1\31\1\0\1\31\1\0"+
    "\6\31\25\0\11\31\1\u0296\10\31\1\0\1\31\2\0"+
    "\3\31\10\0\1\31\1\0\1\31\1\0\6\31\25\0"+
    "\15\31\1\u0297\4\31\1\0\1\31\2\0\3\31\10\0"+
    "\1\31\1\0\1\u0298\1\0\6\31\25\0\22\31\1\0"+
    "\1\31\2\0\3\31\10\0\1\31\1\0\1\31\1\0"+
    "\6\31\25\0\6\31\1\u0299\13\31\1\0\1\31\2\0"+
    "\3\31\10\0\1\31\1\0\1\31\1\0\6\31\25\0"+
    "\15\31\1\u029a\4\31\1\0\1\31\2\0\3\31\10\0"+
    "\1\31\1\0\1\31\1\0\6\31\25\0\10\31\1\u029b"+
    "\11\31\1\0\1\31\2\0\3\31\10\0\1\31\1\0"+
    "\1\31\1\0\6\31\25\0\15\31\1\u029c\4\31\1\0"+
    "\1\31\2\0\3\31\22\0\1\u01fb\3\0\1\u01fc\61\0"+
    "\1\31\1\0\1\u029d\1\0\6\31\25\0\22\31\1\0"+
    "\1\31\2\0\3\31\10\0\1\31\1\0\1\31\1\0"+
    "\2\31\1\u029e\3\31\25\0\22\31\1\0\1\31\2\0"+
    "\3\31\10\0\1\31\1\0\1\31\1\0\6\31\25\0"+
    "\2\31\1\u029f\17\31\1\0\1\31\2\0\3\31\10\0"+
    "\1\31\1\0\1\u02a0\1\0\6\31\25\0\22\31\1\0"+
    "\1\31\2\0\3\31\10\0\1\31\1\0\1\31\1\0"+
    "\6\31\25\0\6\31\1\u02a1\13\31\1\0\1\31\2\0"+
    "\3\31\10\0\1\31\1\0\1\u02a2\1\0\6\31\25\0"+
    "\22\31\1\0\1\31\2\0\3\31\10\0\1\31\1\0"+
    "\1\31\1\0\6\31\25\0\2\31\1\u02a3\17\31\1\0"+
    "\1\31\2\0\3\31\10\0\1\31\1\0\1\31\1\0"+
    "\6\31\25\0\4\31\1\u02a4\15\31\1\0\1\31\2\0"+
    "\3\31\10\0\1\31\1\0\1\31\1\0\2\31\1\u02a5"+
    "\3\31\25\0\22\31\1\0\1\31\2\0\3\31\10\0"+
    "\1\31\1\0\1\u02a6\1\0\6\31\25\0\22\31\1\0"+
    "\1\31\2\0\3\31\10\0\1\31\1\0\1\31\1\0"+
    "\6\31\25\0\13\31\1\u02a7\6\31\1\0\1\31\2\0"+
    "\3\31\10\0\1\31\1\0\1\31\1\0\6\31\25\0"+
    "\1\u02a8\21\31\1\0\1\31\2\0\3\31\10\0\1\31"+
    "\1\0\1\31\1\0\6\31\25\0\6\31\1\u02a9\13\31"+
    "\1\0\1\31\2\0\3\31\10\0\1\31\1\0\1\u02aa"+
    "\1\0\6\31\25\0\22\31\1\0\1\31\2\0\3\31"+
    "\51\0\1\u02ab\40\0\1\u0220\77\0\1\u02ac\153\0\1\u0220"+
    "\21\0\1\31\1\0\1\31\1\0\6\31\25\0\11\31"+
    "\1\u02ad\10\31\1\0\1\31\2\0\3\31\10\0\1\31"+
    "\1\0\1\31\1\0\6\31\25\0\11\31\1\u02ae\10\31"+
    "\1\0\1\31\2\0\3\31\10\0\1\31\1\0\1\31"+
    "\1\0\6\31\25\0\22\31\1\0\1\31\2\0\1\31"+
    "\1\u02af\1\31\10\0\1\31\1\0\1\31\1\0\6\31"+
    "\25\0\22\31\1\0\1\31\2\0\1\31\1\u02b0\1\31"+
    "\10\0\1\31\1\0\1\31\1\0\6\31\25\0\6\31"+
    "\1\u02b1\13\31\1\0\1\31\2\0\3\31\10\0\1\31"+
    "\1\0\1\31\1\0\6\31\25\0\22\31\1\0\1\31"+
    "\2\0\1\31\1\u02b2\1\31\10\0\1\31\1\0\1\31"+
    "\1\0\6\31\25\0\22\31\1\0\1\31\2\0\1\31"+
    "\1\u02b3\1\31\10\0\1\31\1\0\1\31\1\0\6\31"+
    "\25\0\1\u02b4\21\31\1\0\1\31\2\0\3\31\7\0"+
    "\1\u014d\1\u022f\1\u014d\1\u022f\1\u014d\6\u022f\1\u0154\2\u014d"+
    "\1\u02b5\1\u0154\20\u014d\22\u022f\1\u014d\1\u022f\2\u014d\3\u022f"+
    "\7\u014d\13\0\1\340\3\0\1\340\126\0\1\u02b6\106\0"+
    "\1\u02b7\67\0\1\u02b8\72\0\1\u02b9\102\0\1\u02ba\105\0"+
    "\1\u02bb\70\0\1\u02bc\76\0\1\u02bd\116\0\1\u02be\26\0"+
    "\1\u02bf\133\0\1\u02c0\37\0\1\u02c1\141\0\1\u02c2\103\0"+
    "\1\u02c3\66\0\1\u02c4\46\0\1\u02c5\77\0\1\u02c6\141\0"+
    "\1\u02c7\103\0\1\u02c8\63\0\1\u02c9\115\0\1\u02ca\64\0"+
    "\1\u02cb\73\0\1\u02cc\40\0\1\31\1\0\1\31\1\0"+
    "\6\31\25\0\2\31\1\u02cd\17\31\1\0\1\31\2\0"+
    "\3\31\10\0\1\31\1\0\1\31\1\0\6\31\25\0"+
    "\2\31\1\u02ce\17\31\1\0\1\31\2\0\3\31\10\0"+
    "\1\31\1\0\1\31\1\0\2\31\1\u02cf\3\31\25\0"+
    "\22\31\1\0\1\31\2\0\3\31\10\0\1\31\1\0"+
    "\1\u02d0\1\0\6\31\25\0\22\31\1\0\1\31\2\0"+
    "\3\31\10\0\1\31\1\0\1\u02d1\1\0\6\31\25\0"+
    "\22\31\1\0\1\31\2\0\3\31\10\0\1\31\1\0"+
    "\1\u02d2\1\0\6\31\25\0\22\31\1\0\1\31\2\0"+
    "\3\31\10\0\1\31\1\0\1\31\1\0\6\31\25\0"+
    "\22\31\1\0\1\31\2\0\1\31\1\u02d3\1\31\10\0"+
    "\1\31\1\0\1\31\1\0\6\31\25\0\6\31\1\u02d4"+
    "\13\31\1\0\1\31\2\0\3\31\10\0\1\31\1\0"+
    "\1\31\1\0\2\31\1\u02d5\3\31\25\0\22\31\1\0"+
    "\1\31\2\0\3\31\10\0\1\31\1\0\1\31\1\0"+
    "\6\31\25\0\22\31\1\0\1\31\2\0\1\31\1\u02d6"+
    "\1\31\10\0\1\31\1\0\1\31\1\0\2\31\1\u02d7"+
    "\3\31\25\0\22\31\1\0\1\31\2\0\3\31\10\0"+
    "\1\31\1\0\1\31\1\0\6\31\25\0\1\u02d8\21\31"+
    "\1\0\1\31\2\0\3\31\10\0\1\31\1\0\1\u02d9"+
    "\1\0\6\31\25\0\22\31\1\0\1\31\2\0\3\31"+
    "\10\0\1\31\1\0\1\31\1\0\6\31\25\0\3\31"+
    "\1\u02da\16\31\1\0\1\31\2\0\3\31\10\0\1\31"+
    "\1\0\1\31\1\0\6\31\25\0\3\31\1\u02db\16\31"+
    "\1\0\1\31\2\0\3\31\10\0\1\31\1\0\1\u02dc"+
    "\1\0\6\31\25\0\22\31\1\0\1\31\2\0\3\31"+
    "\52\0\1\u0220\75\0\1\u0220\37\0\1\31\1\0\1\31"+
    "\1\0\6\31\25\0\22\31\1\0\1\31\2\0\1\31"+
    "\1\u02dd\1\31\10\0\1\31\1\0\1\31\1\0\6\31"+
    "\25\0\20\31\1\u02de\1\31\1\0\1\31\2\0\3\31"+
    "\10\0\1\31\1\0\1\31\1\0\6\31\25\0\22\31"+
    "\1\0\1\31\2\0\1\31\1\u02df\1\31\10\0\1\31"+
    "\1\0\1\31\1\0\6\31\25\0\5\31\1\u02e0\14\31"+
    "\1\0\1\31\2\0\3\31\10\0\1\31\1\0\1\31"+
    "\1\0\2\31\1\u02e1\3\31\25\0\22\31\1\0\1\31"+
    "\2\0\3\31\10\0\1\31\1\0\1\31\1\0\6\31"+
    "\25\0\22\31\1\0\1\31\2\0\1\31\1\u02e2\1\31"+
    "\10\0\1\31\1\0\1\31\1\0\6\31\25\0\4\31"+
    "\1\u02e3\15\31\1\0\1\31\2\0\3\31\7\0\13\u01c6"+
    "\1\340\2\u01c6\1\0\1\340\60\u01c6\45\0\1\u02e4\35\0"+
    "\1\u02e5\153\0\1\u02e6\61\0\1\u02e7\45\0\1\u02e8\132\0"+
    "\1\u02e9\77\0\1\u02ea\77\0\1\u02eb\77\0\1\u02ec\105\0"+
    "\1\u02ed\112\0\1\u02ee\72\0\1\u02ef\24\0\1\u02f0\142\0"+
    "\1\u02f1\34\0\1\u02f2\137\0\1\u02f3\35\0\1\31\1\0"+
    "\1\31\1\0\6\31\25\0\1\31\1\u02f4\20\31\1\0"+
    "\1\31\2\0\3\31\10\0\1\31\1\0\1\31\1\0"+
    "\2\31\1\u02f5\3\31\25\0\22\31\1\0\1\31\2\0"+
    "\3\31\10\0\1\31\1\0\1\31\1\0\6\31\25\0"+
    "\13\31\1\u02f6\6\31\1\0\1\31\2\0\3\31\10\0"+
    "\1\31\1\0\1\31\1\0\6\31\25\0\1\u02f7\21\31"+
    "\1\0\1\31\2\0\3\31\10\0\1\31\1\0\1\u02f8"+
    "\1\0\6\31\25\0\22\31\1\0\1\31\2\0\3\31"+
    "\10\0\1\31\1\0\1\31\1\0\6\31\25\0\1\u02f9"+
    "\21\31\1\0\1\31\2\0\3\31\10\0\1\31\1\0"+
    "\1\u02fa\1\0\6\31\25\0\22\31\1\0\1\31\2\0"+
    "\3\31\10\0\1\31\1\0\1\31\1\0\6\31\25\0"+
    "\7\31\1\u02fb\12\31\1\0\1\31\2\0\3\31\10\0"+
    "\1\31\1\0\1\31\1\0\6\31\25\0\1\u02fc\21\31"+
    "\1\0\1\31\2\0\3\31\10\0\1\31\1\0\1\31"+
    "\1\0\6\31\25\0\6\31\1\u02fd\13\31\1\0\1\31"+
    "\2\0\3\31\10\0\1\31\1\0\1\31\1\0\6\31"+
    "\25\0\4\31\1\u02fe\15\31\1\0\1\31\2\0\3\31"+
    "\10\0\1\31\1\0\1\31\1\0\6\31\25\0\22\31"+
    "\1\0\1\31\2\0\1\31\1\u02ff\1\31\10\0\1\31"+
    "\1\0\1\31\1\0\6\31\25\0\2\31\1\u0300\17\31"+
    "\1\0\1\31\2\0\3\31\10\0\1\31\1\0\1\31"+
    "\1\0\6\31\25\0\1\u0301\21\31\1\0\1\31\2\0"+
    "\3\31\10\0\1\31\1\0\1\31\1\0\6\31\25\0"+
    "\1\u0302\21\31\1\0\1\31\2\0\3\31\10\0\1\31"+
    "\1\0\1\31\1\0\6\31\25\0\22\31\1\0\1\31"+
    "\2\0\1\31\1\u0303\1\31\47\0\1\u0304\112\0\1\u0305"+
    "\76\0\1\u0306\73\0\1\u0307\40\0\1\u0308\136\0\1\u0309"+
    "\106\0\1\u030a\77\0\1\u030b\63\0\1\u030c\100\0\1\u030d"+
    "\77\0\1\u030e\107\0\1\u030f\26\0\1\31\1\0\1\u0310"+
    "\1\0\6\31\25\0\22\31\1\0\1\31\2\0\3\31"+
    "\10\0\1\31\1\0\1\31\1\0\6\31\25\0\13\31"+
    "\1\u0311\6\31\1\0\1\31\2\0\3\31\10\0\1\31"+
    "\1\0\1\31\1\0\6\31\25\0\3\31\1\u0312\16\31"+
    "\1\0\1\31\2\0\3\31\10\0\1\31\1\0\1\31"+
    "\1\0\6\31\25\0\3\31\1\u0313\16\31\1\0\1\31"+
    "\2\0\3\31\10\0\1\31\1\0\1\31\1\0\6\31"+
    "\25\0\7\31\1\u0314\12\31\1\0\1\31\2\0\3\31"+
    "\10\0\1\31\1\0\1\31\1\0\6\31\25\0\11\31"+
    "\1\u0315\10\31\1\0\1\31\2\0\3\31\10\0\1\31"+
    "\1\0\1\31\1\0\2\31\1\u0316\3\31\25\0\22\31"+
    "\1\0\1\31\2\0\3\31\10\0\1\31\1\0\1\31"+
    "\1\0\6\31\25\0\3\31\1\u0317\16\31\1\0\1\31"+
    "\2\0\3\31\10\0\1\31\1\0\1\31\1\0\6\31"+
    "\25\0\21\31\1\u0318\1\0\1\31\2\0\3\31\10\0"+
    "\1\31\1\0\1\31\1\0\6\31\25\0\22\31\1\0"+
    "\1\31\2\0\1\31\1\u0319\1\31\52\0\1\u031a\102\0"+
    "\1\u031b\34\0\1\u031c\77\0\1\u031d\103\0\1\u031e\131\0"+
    "\1\u031f\115\0\1\u0320\21\0\1\31\1\0\1\31\1\0"+
    "\2\31\1\u0321\3\31\25\0\22\31\1\0\1\31\2\0"+
    "\3\31\10\0\1\31\1\0\1\31\1\0\2\31\1\u0322"+
    "\3\31\25\0\22\31\1\0\1\31\2\0\3\31\10\0"+
    "\1\31\1\0\1\u0323\1\0\6\31\25\0\22\31\1\0"+
    "\1\31\2\0\3\31\10\0\1\31\1\0\1\31\1\0"+
    "\6\31\25\0\22\31\1\0\1\31\2\0\1\31\1\u0324"+
    "\1\31\10\0\1\31\1\0\1\31\1\0\6\31\25\0"+
    "\20\31\1\u0325\1\31\1\0\1\31\2\0\3\31\53\0"+
    "\1\u0326\36\0\1\u0327\77\0\1\u0328\75\0\1\31\1\0"+
    "\1\u0329\1\0\6\31\25\0\22\31\1\0\1\31\2\0"+
    "\3\31\10\0\1\31\1\0\1\u032a\1\0\6\31\25\0"+
    "\22\31\1\0\1\31\2\0\3\31\10\0\1\31\1\0"+
    "\1\31\1\0\6\31\25\0\22\31\1\0\1\31\2\0"+
    "\1\31\1\u032b\1\31\10\0\1\31\1\0\1\31\1\0"+
    "\6\31\25\0\22\31\1\0\1\31\2\0\1\31\1\u032c"+
    "\1\31\10\0\1\31\1\0\1\31\1\0\6\31\25\0"+
    "\5\31\1\u032d\14\31\1\0\1\31\2\0\3\31\10\0"+
    "\1\31\1\0\1\31\1\0\6\31\25\0\22\31\1\0"+
    "\1\31\2\0\1\31\1\u032e\1\31\10\0\1\31\1\0"+
    "\1\31\1\0\6\31\25\0\15\31\1\u032f\4\31\1\0"+
    "\1\31\2\0\3\31\10\0\1\31\1\0\1\u0330\1\0"+
    "\6\31\25\0\22\31\1\0\1\31\2\0\3\31\10\0"+
    "\1\31\1\0\1\31\1\0\6\31\25\0\1\31\1\u0331"+
    "\20\31\1\0\1\31\2\0\3\31\7\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[41600];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\10\4\0\2\1\10\0\1\11\12\1\2\11\2\1"+
    "\3\11\34\1\1\11\1\1\1\11\2\1\1\11\6\1"+
    "\1\11\15\1\1\0\1\1\1\11\3\1\1\11\1\1"+
    "\1\11\2\1\1\11\2\1\1\11\3\1\1\11\1\1"+
    "\1\11\1\1\1\11\1\1\1\0\3\1\1\11\6\1"+
    "\1\11\2\0\3\1\1\0\1\1\1\0\2\1\2\0"+
    "\1\11\2\0\47\1\1\11\1\1\12\0\1\1\4\0"+
    "\2\1\3\11\1\1\3\0\1\1\1\11\1\1\1\11"+
    "\3\0\10\1\5\0\1\11\4\0\1\11\2\1\2\11"+
    "\20\0\1\11\1\0\17\1\1\0\2\1\2\0\46\1"+
    "\12\0\7\1\2\11\1\1\1\11\1\1\3\0\1\1"+
    "\4\0\1\1\40\0\1\11\1\0\24\1\3\0\1\1"+
    "\1\0\42\1\12\0\10\1\3\0\1\11\25\0\1\11"+
    "\14\0\1\11\20\1\1\11\1\1\3\0\35\1\7\0"+
    "\1\11\2\0\10\1\11\0\1\1\1\11\3\0\1\11"+
    "\4\0\1\11\4\0\1\11\7\0\10\1\2\0\24\1"+
    "\4\0\10\1\20\0\1\11\1\0\1\11\6\0\1\11"+
    "\1\0\1\11\1\0\25\1\2\0\10\1\5\0\2\11"+
    "\1\0\1\11\3\0\1\11\1\0\1\11\1\0\1\1"+
    "\2\0\1\11\2\0\1\11\1\0\27\1\1\0\1\11"+
    "\12\0\1\11\1\0\2\11\20\1\2\0\2\11\2\0"+
    "\2\11\3\0\1\11\12\1\3\11\2\0\1\11\1\0"+
    "\5\1\3\11\11\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[817];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
    public PhpLexer(int state){
        initialize(state);
    }
    public void reset(char array[], int offset, int length) {
        this.zzBuffer = array;
        this.zzCurrentPos = offset;
        this.zzMarkedPos = offset;
        this.zzPushbackPos = offset;
        this.yychar = offset;
        this.zzEndRead = offset + length;
        this.zzStartRead = offset;
        this.zzAtEOF = zzCurrentPos >= zzEndRead;
        this.firstPos = offset;
    }

    public void reset(java.io.Reader  reader, char[] buffer, int[] parameters){
    	this.zzReader = reader;
    	this.zzBuffer = buffer;
    	this.zzMarkedPos = parameters[0];
    	this.zzPushbackPos = parameters[1];
    	this.zzCurrentPos = parameters[2];
    	this.zzStartRead = parameters[3];
    	this.zzEndRead = parameters[4];
    	this.yyline = parameters[5];  
    	initialize(parameters[6]);
    }

    protected boolean isHeredocState(int state){
    	    	return state == ST_PHP_HEREDOC || state == ST_PHP_END_HEREDOC || state == ST_PHP_NOWDOC || state == ST_PHP_END_NOWDOC;
    }
    
    public int[] getParamenters(){
    	return new int[]{zzMarkedPos, zzPushbackPos, zzCurrentPos, zzStartRead, zzEndRead, yyline, zzLexicalState};
    }

    protected int getZZLexicalState() {
        return zzLexicalState;
    }

    protected int getZZMarkedPos() {
        return zzMarkedPos;
    }

    protected int getZZEndRead() {
        return zzEndRead;
    }

    public char[] getZZBuffer() {
        return zzBuffer;
    }
    
    protected int getZZStartRead() {
    	return this.zzStartRead;
    }

    protected int getZZPushBackPosition() {
    	return this.zzPushbackPos;
    }

	protected void pushBack(int i) {
		yypushback(i);
	}

	// A pool of states. To avoid creation of a new state on each createMemento.
	private static final IntHashtable lexerStates = new IntHashtable(100);
	
	protected IntHashtable getLexerStates() {
		return lexerStates;
	}

 // End user code


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public PhpLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public PhpLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 192) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public String yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 115: 
          { return PHP_DECLARE;
          }
        case 168: break;
        case 81: 
          { return PHP_CLONE;
          }
        case 169: break;
        case 88: 
          { return PHP_TRAIT;
          }
        case 170: break;
        case 155: 
          { return PHP__METHOD__;
          }
        case 171: break;
        case 71: 
          { return PHP_FROM;
          }
        case 172: break;
        case 44: 
          { popState();
    pushState(ST_PHP_LOOKING_FOR_PROPERTY);
    return PHP_OBJECT_OPERATOR;
          }
        case 173: break;
        case 83: 
          { return PHP_BREAK;
          }
        case 174: break;
        case 93: 
          { return PHP_WHILE;
          }
        case 175: break;
        case 156: 
          { return PHPDOC_EXCEPTION;
          }
        case 176: break;
        case 113: 
          { return PHP_EXTENDS;
          }
        case 177: break;
        case 28: 
          { return UNKNOWN_TOKEN;
          }
        case 178: break;
        case 4: 
          { return PHP_NUMBER;
          }
        case 179: break;
        case 77: 
          { return PHP_ENDIF;
          }
        case 180: break;
        case 119: 
          { return PHP_PRIVATE;
          }
        case 181: break;
        case 104: 
          { return PHP_STATIC;
          }
        case 182: break;
        case 6: 
          { return  PHP_STRING;
          }
        case 183: break;
        case 13: 
          { if (!phpStack.isEmpty()) {
        popState();
    }
    return  PHP_CURLY_CLOSE;
          }
        case 184: break;
        case 23: 
          { popState();
	return PHP_TOKEN;
          }
        case 185: break;
        case 116: 
          { return PHP_DEFAULT;
          }
        case 186: break;
        case 114: 
          { return PHP_REQUIRE;
          }
        case 187: break;
        case 21: 
          { //the difference from the original rules comes from the fact that we took ';' out out of tokens 
	return UNKNOWN_TOKEN;
          }
        case 188: break;
        case 100: 
          { return PHPDOC_LINK;
          }
        case 189: break;
        case 152: 
          { return PHP_ENDFOREACH;
          }
        case 190: break;
        case 54: 
          { return PHP_TRY;
          }
        case 191: break;
        case 135: 
          { return PHP__LINE__;
          }
        case 192: break;
        case 63: 
          { return PHP_EXIT;
          }
        case 193: break;
        case 161: 
          { return PHPDOC_FILESOURCE;
          }
        case 194: break;
        case 131: 
          { return PHP_CALLABLE;
          }
        case 195: break;
        case 130: 
          { return PHP_CONTINUE;
          }
        case 196: break;
        case 149: 
          { return PHPDOC_TUTORIAL;
          }
        case 197: break;
        case 165: 
          { return PHP__FUNCTION__;
          }
        case 198: break;
        case 128: 
          { return PHPDOC_METHOD;
          }
        case 199: break;
        case 147: 
          { return PHPDOC_ABSTRACT;
          }
        case 200: break;
        case 160: 
          { return PHPDOC_DEPRECATED;
          }
        case 201: break;
        case 62: 
          { nowdoc = null;
	nowdoc_len = 0;
    yybegin(ST_PHP_IN_SCRIPTING);
    return PHP_HEREDOC_TAG;
          }
        case 202: break;
        case 55: 
          { return PHP_FOR;
          }
        case 203: break;
        case 154: 
          { return PHP_IMPLEMENTS;
          }
        case 204: break;
        case 45: 
          { int label_len = yylength() - 1;

    if (yytext().charAt(label_len-1)==';') {
	    label_len--;
    }

    if (label_len==heredoc_len && yytext().substring(0,label_len).equals(heredoc)) {
        heredoc=null;
        heredoc_len=0;
        yybegin(ST_PHP_IN_SCRIPTING);
        return PHP_HEREDOC_TAG;
    } else {
        return PHP_CONSTANT_ENCAPSED_STRING;
    }
          }
        case 205: break;
        case 94: 
          { return PHP_PRINT;
          }
        case 206: break;
        case 22: 
          { yypushback(1);
	popState();
	return PHP_ENCAPSED_AND_WHITESPACE;
          }
        case 207: break;
        case 79: 
          { return PHP_CONST;
          }
        case 208: break;
        case 51: 
          { popState();
    return PHP_LINE_COMMENT;
          }
        case 209: break;
        case 129: 
          { return PHP_ENDWHILE;
          }
        case 210: break;
        case 15: 
          { return PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 211: break;
        case 27: 
          { return PHP_LINE_COMMENT;
          }
        case 212: break;
        case 153: 
          { return PHP_INSTANCEOF;
          }
        case 213: break;
        case 89: 
          { return PHP_THROW;
          }
        case 214: break;
        case 110: 
          { return PHPDOC_SINCE;
          }
        case 215: break;
        case 105: 
          { return PHP_SWITCH;
          }
        case 216: break;
        case 150: 
          { return PHPDOC_PROPERTY;
          }
        case 217: break;
        case 36: 
          { return PHP_DO;
          }
        case 218: break;
        case 40: 
          { yypushback(1);
    return PHP_ENCAPSED_AND_WHITESPACE;
          }
        case 219: break;
        case 166: 
          { return PHP__NAMESPACE__;
          }
        case 220: break;
        case 164: 
          { return PHP_INCLUDE_ONCE;
          }
        case 221: break;
        case 9: 
          { pushState(ST_PHP_DOUBLE_QUOTES);
    return PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 222: break;
        case 2: 
          { return PHP_ENCAPSED_AND_WHITESPACE;
          }
        case 223: break;
        case 124: 
          { return PHPDOC_IGNORE;
          }
        case 224: break;
        case 82: 
          { return PHP_CLASS;
          }
        case 225: break;
        case 48: 
          { return PHP_OBJECT_OPERATOR;
          }
        case 226: break;
        case 107: 
          { return PHP_PARENT;
          }
        case 227: break;
        case 49: 
          { popState();
    return PHP_COMMENT_END;
          }
        case 228: break;
        case 109: 
          { return PHPDOC_FINAL;
          }
        case 229: break;
        case 32: 
          { return PHP_VARIABLE;
          }
        case 230: break;
        case 95: 
          { return PHP_CASTING;
          }
        case 231: break;
        case 92: 
          { return PHP_UNSET;
          }
        case 232: break;
        case 17: 
          { yypushback(1);
        popState();
          }
        case 233: break;
        case 34: 
          { return PHP_CLOSETAG;
          }
        case 234: break;
        case 66: 
          { return PHP_EVAL;
          }
        case 235: break;
        case 74: 
          { return PHP_GOTO;
          }
        case 236: break;
        case 29: 
          { popState();return WHITESPACE;
          }
        case 237: break;
        case 58: 
          { yypushback(1);
	pushState(ST_PHP_VAR_OFFSET);
	return PHP_VARIABLE;
          }
        case 238: break;
        case 56: 
          { return PHP_USE;
          }
        case 239: break;
        case 38: 
          { return PHP_PAAMAYIM_NEKUDOTAYIM;
          }
        case 240: break;
        case 123: 
          { return PHPDOC_AUTHOR;
          }
        case 241: break;
        case 158: 
          { return PHPDOC_NAMESPACE;
          }
        case 242: break;
        case 42: 
          { yypushback(1);
    pushState(ST_PHP_IN_SCRIPTING);
    return PHP_CURLY_OPEN;
          }
        case 243: break;
        case 108: 
          { return PHP_PUBLIC;
          }
        case 244: break;
        case 37: 
          { return PHP_IF;
          }
        case 245: break;
        case 141: 
          { return PHP_NAMESPACE;
          }
        case 246: break;
        case 47: 
          { int label_len = yylength() - 1;
	int startIndex = 0;
	String yytext = yytext();
	if (yytext.charAt(label_len - 1) == ';') {
		label_len--;
	}
	while (yytext.charAt(startIndex) == '\r'
			|| yytext.charAt(startIndex) == '\n') {
		startIndex++;
	}

	if (label_len > heredoc_len
			&& yytext.substring(startIndex, label_len).equals(
					heredoc)) {
		heredoc = null;
		heredoc_len = 0;
		yybegin(ST_PHP_IN_SCRIPTING);
		return PHP_HEREDOC_TAG;
	} else {
		yybegin(ST_PHP_HEREDOC);
		return PHP_CONSTANT_ENCAPSED_STRING;
	}
          }
        case 247: break;
        case 86: 
          { return PHP_ARRAY;
          }
        case 248: break;
        case 61: 
          { yybegin(ST_PHP_HEREDOC);
	return PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 249: break;
        case 35: 
          { return PHP_AS;
          }
        case 250: break;
        case 64: 
          { return PHP_ECHO;
          }
        case 251: break;
        case 91: 
          { return PHP_FINAL;
          }
        case 252: break;
        case 151: 
          { return PHP_ENDDECLARE;
          }
        case 253: break;
        case 84: 
          { return PHP_THIS;
          }
        case 254: break;
        case 19: 
          { popState();
    return PHP_STRING;
          }
        case 255: break;
        case 76: 
          { return PHPDOC_VAR;
          }
        case 256: break;
        case 24: 
          { return PHP_COMMENT;
          }
        case 257: break;
        case 121: 
          { return PHPDOC_RETURN;
          }
        case 258: break;
        case 112: 
          { return PHPDOC_MAGIC;
          }
        case 259: break;
        case 125: 
          { return PHPDOC_THROWS;
          }
        case 260: break;
        case 5: 
          { return PHP_TOKEN;
          }
        case 261: break;
        case 80: 
          { return PHP_CATCH;
          }
        case 262: break;
        case 16: 
          { popState();
    return PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 263: break;
        case 30: 
          { return PHP_OPERATOR;
          }
        case 264: break;
        case 97: 
          { return PHPDOC_DESC;
          }
        case 265: break;
        case 52: 
          { return PHP_NEW;
          }
        case 266: break;
        case 120: 
          { return PHP__DIR__;
          }
        case 267: break;
        case 133: 
          { return PHP_FUNCTION;
          }
        case 268: break;
        case 26: 
          { String yytext = yytext();
	switch (yytext.charAt(yytext.length() - 1)) {
		case '?':
		case '%':
		case '>':
			yypushback(1);
			break;
		default:
			popState();
	}
	 return PHP_LINE_COMMENT;
          }
        case 269: break;
        case 3: 
          { yypushback(1);
    pushState(ST_PHP_HIGHLIGHTING_ERROR);
          }
        case 270: break;
        case 118: 
          { return PHP_FOREACH;
          }
        case 271: break;
        case 136: 
          { return PHPDOC_EXAMPLE;
          }
        case 272: break;
        case 65: 
          { return PHP_ELSE;
          }
        case 273: break;
        case 127: 
          { return PHPDOC_GLOBAL;
          }
        case 274: break;
        case 72: 
          { return PHP_SELF;
          }
        case 275: break;
        case 7: 
          { return WHITESPACE;
          }
        case 276: break;
        case 103: 
          { return PHP_RETURN;
          }
        case 277: break;
        case 99: 
          { return PHPDOC_USES;
          }
        case 278: break;
        case 163: 
          { return PHP_REQUIRE_ONCE;
          }
        case 279: break;
        case 60: 
          { int label_len = yylength() - 1;

	if (yytext().charAt(label_len-1)==';') {
	   label_len--;
    }
    if (label_len > nowdoc_len && yytext().substring(label_len - nowdoc_len,label_len).equals(nowdoc)) {
    	//nowdoc = null;
    	//nowdoc_len = 0;
		//yypushback(1);
		//yybegin(ST_PHP_END_NOWDOC);
		
    	if ((label_len - nowdoc_len-2) >= 0 && yytext().charAt(label_len - nowdoc_len-2)=='\r') {
        	label_len = label_len-2;
    	} else {
        	label_len--;
    	}
    	yypushback(nowdoc_len + (yylength() - label_len));
    	
        yybegin(ST_PHP_END_NOWDOC);
	}
	return PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 280: break;
        case 31: 
          { pushState(ST_PHP_LOOKING_FOR_PROPERTY);
    return PHP_OBJECT_OPERATOR;
          }
        case 281: break;
        case 18: 
          { yypushback(1);
    popState();
          }
        case 282: break;
        case 33: 
          { pushState(ST_PHP_COMMENT);
    return PHP_COMMENT_START;
          }
        case 283: break;
        case 70: 
          { return PHP_TRUE;
          }
        case 284: break;
        case 140: 
          { return PHP_ENDSWITCH;
          }
        case 285: break;
        case 25: 
          { return PHPDOC_COMMENT;
          }
        case 286: break;
        case 157: 
          { return PHPDOC_COPYRIGHT;
          }
        case 287: break;
        case 146: 
          { return PHPDOC_CATEGORY;
          }
        case 288: break;
        case 101: 
          { return PHP_ENDFOR;
          }
        case 289: break;
        case 144: 
          { return PHP_PROTECTED;
          }
        case 290: break;
        case 90: 
          { return PHP_FALSE;
          }
        case 291: break;
        case 85: 
          { int bprefix = (yytext().charAt(0) != '<') ? 1 : 0;
    int startString=3+bprefix;
    
    int hereOrNowDoc_len = yylength()-bprefix-3-1-(yytext().charAt(yylength()-2)=='\r'?1:0);
    while ((yytext().charAt(startString) == ' ') || (yytext().charAt(startString) == '\t')) {
        startString++;
        hereOrNowDoc_len--;
    }
    String hereOrNowDoc = yytext().substring(startString,hereOrNowDoc_len+startString);
    if (hereOrNowDoc.charAt(0) == '\'') {
    	nowdoc = hereOrNowDoc.substring(1, hereOrNowDoc_len-1);
    	nowdoc_len = hereOrNowDoc_len - 2;
    	yybegin(ST_PHP_NOWDOC);
    }
    else if (hereOrNowDoc.charAt(0) == '"') {
    	heredoc = hereOrNowDoc.substring(1, hereOrNowDoc_len-1);
    	heredoc_len = hereOrNowDoc_len - 2;
    	yybegin(ST_PHP_HEREDOC);
    } else {
    	heredoc = hereOrNowDoc;
    	heredoc_len = hereOrNowDoc_len;
    	yybegin(ST_PHP_HEREDOC);
    }
    return PHP_HEREDOC_TAG;
          }
        case 292: break;
        case 11: 
          { pushState(ST_PHP_BACKQUOTE);
    return PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 293: break;
        case 162: 
          { return PHPDOC_SUBPACKAGE;
          }
        case 294: break;
        case 57: 
          { return PHP_VAR;
          }
        case 295: break;
        case 102: 
          { return PHP_ELSEIF;
          }
        case 296: break;
        case 117: 
          { return PHP_INCLUDE;
          }
        case 297: break;
        case 143: 
          { return PHP_INSTEADOF;
          }
        case 298: break;
        case 138: 
          { return PHPDOC_PACKAGE;
          }
        case 299: break;
        case 96: 
          { return PHPDOC_NAME;
          }
        case 300: break;
        case 73: 
          { return PHP_LIST;
          }
        case 301: break;
        case 167: 
          { return PHP_HALT_COMPILER;
          }
        case 302: break;
        case 122: 
          { return PHPDOC_ACCESS;
          }
        case 303: break;
        case 78: 
          { return PHP_EMPTY;
          }
        case 304: break;
        case 137: 
          { return PHPDOC_LICENSE;
          }
        case 305: break;
        case 67: 
          { return PHP_CASE;
          }
        case 306: break;
        case 145: 
          { return PHP__CLASS__;
          }
        case 307: break;
        case 53: 
          { return PHP_DIE;
          }
        case 308: break;
        case 87: 
          { return PHP_ISSET;
          }
        case 309: break;
        case 134: 
          { return PHP__FILE__;
          }
        case 310: break;
        case 69: 
          { return  PHP_KEYWORD;
          }
        case 311: break;
        case 159: 
          { return PHPDOC_STATICVAR;
          }
        case 312: break;
        case 106: 
          { return PHP_GLOBAL;
          }
        case 313: break;
        case 46: 
          { int label_len = yylength() - 1;

    if (yytext().charAt(label_len-1)==';') {
	    label_len--;
    }

    if (label_len==nowdoc_len && yytext().substring(0,label_len).equals(nowdoc)) {
        nowdoc=null;
        nowdoc_len=0;
        yybegin(ST_PHP_IN_SCRIPTING);
        return PHP_HEREDOC_TAG;
    } else {
        return PHP_CONSTANT_ENCAPSED_STRING;
    }
          }
        case 314: break;
        case 142: 
          { return PHP_INTERFACE;
          }
        case 315: break;
        case 10: 
          { return PHP_NS_SEPARATOR;
          }
        case 316: break;
        case 75: 
          { return PHPDOC_SEE;
          }
        case 317: break;
        case 59: 
          { int label_len = yylength() - 1;

    if (yytext().charAt(label_len-1)==';') {
	   label_len--;
    }
    if (label_len > heredoc_len && yytext().substring(label_len - heredoc_len,label_len).equals(heredoc)) {
    	
    	if ((label_len - heredoc_len-2) >= 0 && yytext().charAt(label_len - heredoc_len-2)=='\r') {
        	label_len = label_len-2;
    	} else {
        	label_len--;
    	}
    	yypushback(heredoc_len + (yylength() - label_len));
    	
        yybegin(ST_PHP_END_HEREDOC);
    }
    return PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 318: break;
        case 41: 
          { pushState(ST_PHP_IN_SCRIPTING);
    return PHP_TOKEN;
          }
        case 319: break;
        case 98: 
          { return PHPDOC_TODO;
          }
        case 320: break;
        case 50: 
          { popState();
    return PHPDOC_COMMENT_END;
          }
        case 321: break;
        case 8: 
          { return PHP_SEMICOLON;
          }
        case 322: break;
        case 39: 
          { pushState(ST_PHP_QUOTES_AFTER_VARIABLE);
    return PHP_VARIABLE;
          }
        case 323: break;
        case 20: 
          { /* Offset could be treated as a long */
	return PHP_NUMBER;
          }
        case 324: break;
        case 126: 
          { return PHPDOC_STATIC;
          }
        case 325: break;
        case 43: 
          { yypushback(1);
	return PHP_ENCAPSED_AND_WHITESPACE;
          }
        case 326: break;
        case 68: 
          { pushState(ST_PHP_DOC_COMMENT);
    return PHPDOC_COMMENT_START;
          }
        case 327: break;
        case 111: 
          { return PHPDOC_PARAM;
          }
        case 328: break;
        case 14: 
          { pushState(ST_PHP_LINE_COMMENT);
    return PHP_LINE_COMMENT;
          }
        case 329: break;
        case 132: 
          { return PHP_ABSTRACT;
          }
        case 330: break;
        case 148: 
          { return PHPDOC_INTERNAL;
          }
        case 331: break;
        case 12: 
          { return PHP_CURLY_OPEN;
          }
        case 332: break;
        case 1: 
          { if(heredoc!=null&&yytext().startsWith(heredoc)){
		String text = yytext();
		if(heredoc_len < text.length() && (text.charAt(heredoc_len) == '\r'
			|| text.charAt(heredoc_len) == '\n'|| text.charAt(heredoc_len) == ';')){
			yypushback(yylength()-heredoc_len-1);
	        heredoc=null;
	        heredoc_len=0;
	        yybegin(ST_PHP_IN_SCRIPTING);
	        return PHP_HEREDOC_TAG;
		}
	}
	return PHP_ENCAPSED_AND_WHITESPACE;
          }
        case 333: break;
        case 139: 
          { return PHPDOC_VERSION;
          }
        case 334: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
