/* The following code was generated by JFlex 1.4.1 on 9/5/13 3:16 PM */

/*******************************************************************************
 * Copyright (c) 2006 Zend Corporation and IBM Corporation.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Zend and IBM - Initial implementation
 *******************************************************************************/

package org.eclipse.php.internal.core.documentModel.parser.php54;

import org.eclipse.php.internal.core.util.collections.IntHashtable;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 9/5/13 3:16 PM from the specification file
 * <tt>highlighting_scanner.jflex</tt>
 */
public class PhpLexer extends org.eclipse.php.internal.core.documentModel.parser.AbstractPhpLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int ST_PHP_LINE_COMMENT = 12;
  public static final int ST_PHP_NOWDOC = 6;
  public static final int ST_PHP_DOUBLE_QUOTES = 2;
  public static final int ST_PHP_COMMENT = 10;
  public static final int ST_PHP_BACKQUOTE = 3;
  public static final int ST_PHP_END_NOWDOC = 14;
  public static final int ST_PHP_DOC_COMMENT = 11;
  public static final int ST_PHP_END_HEREDOC = 7;
  public static final int ST_PHP_VAR_OFFSET = 9;
  public static final int YYINITIAL = 0;
  public static final int ST_PHP_IN_SCRIPTING = 1;
  public static final int ST_PHP_LOOKING_FOR_PROPERTY = 8;
  public static final int ST_PHP_HEREDOC = 5;
  public static final int ST_PHP_HIGHLIGHTING_ERROR = 13;
  public static final int ST_PHP_QUOTES_AFTER_VARIABLE = 4;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\14\1\13\2\0\1\17\22\0\1\14\1\30\1\21\1\117"+
    "\1\20\1\34\1\35\1\116\1\74\1\75\1\32\1\27\1\15\1\4"+
    "\1\2\1\33\1\5\1\11\10\1\1\72\1\16\1\31\1\25\1\26"+
    "\1\120\1\121\1\42\1\7\1\102\1\44\1\3\1\105\1\12\1\112"+
    "\1\110\2\12\1\103\1\111\1\43\1\40\1\113\1\12\1\41\1\104"+
    "\1\107\1\106\2\12\1\45\2\12\1\114\1\22\1\115\1\37\1\77"+
    "\1\23\1\62\1\10\1\55\1\51\1\46\1\52\1\67\1\63\1\47"+
    "\1\76\1\66\1\65\1\71\1\54\1\56\1\70\1\100\1\60\1\57"+
    "\1\50\1\53\1\73\1\64\1\6\1\61\1\12\1\24\1\36\1\101"+
    "\1\15\201\12\uff00\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\1\2\10\0\1\3\1\4\1\5\1\6"+
    "\1\5\1\4\1\6\1\7\1\5\1\10\1\5\1\11"+
    "\1\12\1\13\1\14\12\5\22\6\1\5\1\6\1\5"+
    "\1\6\1\15\1\3\1\16\1\2\1\17\1\20\2\17"+
    "\1\2\3\17\3\21\3\1\3\3\3\2\2\3\1\0"+
    "\1\3\1\22\1\23\1\22\1\24\1\25\1\24\1\26"+
    "\1\25\1\6\1\27\2\30\3\31\3\32\2\33\1\34"+
    "\1\35\1\0\1\3\2\4\1\36\1\37\3\0\1\6"+
    "\1\0\2\40\2\0\1\17\2\0\2\36\1\41\1\42"+
    "\1\36\7\6\1\43\6\6\1\44\21\6\1\45\7\6"+
    "\1\46\1\6\12\0\1\6\4\0\1\47\2\50\1\51"+
    "\1\52\1\50\3\0\3\53\1\54\3\0\1\55\2\1"+
    "\2\50\1\56\2\2\5\0\1\57\4\0\1\60\1\4"+
    "\1\47\1\61\1\62\20\0\1\63\1\0\2\4\1\0"+
    "\1\6\1\40\2\0\14\6\1\64\4\6\1\65\2\6"+
    "\1\66\3\6\1\67\25\6\1\70\12\0\7\6\1\71"+
    "\1\72\1\1\1\73\1\2\3\0\1\74\4\0\1\57"+
    "\40\0\1\75\1\0\1\6\1\40\3\0\1\76\1\0"+
    "\1\6\1\77\6\6\1\100\1\101\1\102\4\6\1\103"+
    "\7\6\1\104\2\6\1\105\4\6\1\106\2\6\1\107"+
    "\6\6\1\110\1\111\6\6\12\0\10\6\3\0\1\74"+
    "\21\0\1\112\20\0\1\113\1\114\1\115\2\116\3\0"+
    "\1\117\1\6\1\120\12\6\1\121\1\122\2\6\1\123"+
    "\2\6\1\124\1\125\2\6\1\126\1\127\1\6\1\130"+
    "\5\6\1\131\2\6\1\132\3\6\5\0\1\133\4\0"+
    "\10\6\6\0\1\134\1\0\1\135\3\0\1\136\1\137"+
    "\11\0\1\140\12\0\2\6\1\141\2\6\1\142\14\6"+
    "\1\143\1\144\1\145\2\6\1\146\1\147\2\6\1\150"+
    "\4\0\10\6\11\0\1\151\4\0\1\152\12\0\1\153"+
    "\1\0\1\154\1\0\1\155\5\6\1\156\3\6\1\157"+
    "\1\160\1\6\1\161\3\6\1\162\1\6\1\163\1\6"+
    "\2\0\1\6\1\164\6\6\4\0\1\165\1\0\1\166"+
    "\5\0\1\167\1\0\1\170\1\0\1\171\1\172\1\0"+
    "\1\173\2\0\1\174\1\0\3\6\1\175\5\6\1\176"+
    "\1\6\1\177\1\200\1\201\4\6\1\202\1\6\1\203"+
    "\1\6\1\0\1\204\12\0\1\205\1\0\1\206\1\207"+
    "\2\6\1\210\1\211\1\6\1\212\2\6\1\213\1\214"+
    "\2\6\1\215\2\6\1\0\1\216\1\217\4\0\1\220"+
    "\2\0\1\221\1\222\1\223\1\224\1\6\1\225\1\226"+
    "\3\6\1\227\1\230\2\0\1\231\1\232\1\233\1\0"+
    "\4\6\1\234\1\235\1\236\1\237\2\6\1\240\1\241"+
    "\2\6\1\242";

  private static int [] zzUnpackAction() {
    int [] result = new int[800];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\122\0\244\0\366\0\u0148\0\u019a\0\u01ec\0\u023e"+
    "\0\u0290\0\u02e2\0\u0334\0\u0386\0\u03d8\0\u042a\0\u047c\0\0"+
    "\0\u04ce\0\u0520\0\u0572\0\u05c4\0\u0616\0\u0668\0\u06ba\0\0"+
    "\0\0\0\u070c\0\u075e\0\0\0\0\0\0\0\u07b0\0\u0802"+
    "\0\u0854\0\u08a6\0\u08f8\0\u094a\0\u099c\0\u09ee\0\u0a40\0\u0a92"+
    "\0\u0ae4\0\u0b36\0\u0b88\0\u0bda\0\u0c2c\0\u0c7e\0\u0cd0\0\u0d22"+
    "\0\u0d74\0\u0dc6\0\u0e18\0\u0e6a\0\u0ebc\0\u0f0e\0\u0f60\0\u0fb2"+
    "\0\u1004\0\u1056\0\u10a8\0\u10fa\0\u114c\0\u119e\0\0\0\u11f0"+
    "\0\0\0\u1242\0\u1294\0\0\0\u12e6\0\u1338\0\u138a\0\u13dc"+
    "\0\u142e\0\u1480\0\0\0\u14d2\0\u1524\0\u1576\0\u15c8\0\u161a"+
    "\0\u166c\0\u16be\0\u1710\0\u1762\0\u17b4\0\u1806\0\u1858\0\u18aa"+
    "\0\u18fc\0\u18fc\0\0\0\u194e\0\u19a0\0\u19f2\0\0\0\u1a44"+
    "\0\0\0\u1a96\0\u1ae8\0\0\0\u1b3a\0\u1b8c\0\0\0\u1bde"+
    "\0\u1c30\0\u1c82\0\0\0\u1cd4\0\0\0\u1d26\0\0\0\u1d78"+
    "\0\u1dca\0\u1e1c\0\u1e6e\0\u1ec0\0\0\0\0\0\u1f12\0\u1f64"+
    "\0\u1fb6\0\u2008\0\u11f0\0\u205a\0\u20ac\0\u075e\0\u20fe\0\0"+
    "\0\u2150\0\u21a2\0\u094a\0\u21f4\0\u2246\0\u2298\0\u0572\0\u22ea"+
    "\0\u233c\0\u238e\0\u23e0\0\u2432\0\u2484\0\u24d6\0\u0572\0\u2528"+
    "\0\u257a\0\u25cc\0\u261e\0\u2670\0\u26c2\0\u0572\0\u2714\0\u2766"+
    "\0\u27b8\0\u280a\0\u285c\0\u28ae\0\u2900\0\u2952\0\u29a4\0\u29f6"+
    "\0\u2a48\0\u2a9a\0\u2aec\0\u2b3e\0\u2b90\0\u2be2\0\u2c34\0\u0572"+
    "\0\u2c86\0\u2cd8\0\u2d2a\0\u2d7c\0\u2dce\0\u2e20\0\u2e72\0\0"+
    "\0\u2ec4\0\u2f16\0\u114c\0\u2f68\0\u2fba\0\u300c\0\u305e\0\u30b0"+
    "\0\u3102\0\u3154\0\u31a6\0\u31f8\0\u324a\0\u329c\0\u12e6\0\u32ee"+
    "\0\u3340\0\u329c\0\0\0\0\0\0\0\u32ee\0\u3392\0\u142e"+
    "\0\u33e4\0\u3392\0\0\0\u33e4\0\0\0\u3436\0\u16be\0\u3488"+
    "\0\u161a\0\u34da\0\u352c\0\u3436\0\u3488\0\u1806\0\u357e\0\u35d0"+
    "\0\u3622\0\u3674\0\u36c6\0\u3718\0\u376a\0\0\0\u37bc\0\u380e"+
    "\0\u3860\0\u1858\0\0\0\u38b2\0\u3904\0\0\0\0\0\u3956"+
    "\0\u39a8\0\u39fa\0\u3a4c\0\u3a9e\0\u3af0\0\u3b42\0\u3b94\0\u3be6"+
    "\0\u3c38\0\u3c8a\0\u3cdc\0\u3d2e\0\u3d80\0\u3dd2\0\u3e24\0\0"+
    "\0\u3e76\0\u1f12\0\u1f64\0\u3ec8\0\u3f1a\0\u3f6c\0\u3fbe\0\u4010"+
    "\0\u4062\0\u40b4\0\u4106\0\u4158\0\u41aa\0\u41fc\0\u424e\0\u42a0"+
    "\0\u42f2\0\u4344\0\u4396\0\u43e8\0\u0572\0\u443a\0\u448c\0\u44de"+
    "\0\u4530\0\u0572\0\u4582\0\u45d4\0\u4626\0\u4678\0\u46ca\0\u471c"+
    "\0\u0572\0\u476e\0\u47c0\0\u4812\0\u4864\0\u48b6\0\u4908\0\u495a"+
    "\0\u49ac\0\u49fe\0\u4a50\0\u4aa2\0\u4af4\0\u4b46\0\u4b98\0\u4bea"+
    "\0\u4c3c\0\u4c8e\0\u4ce0\0\u4d32\0\u4d84\0\u4dd6\0\u0572\0\u4e28"+
    "\0\u4e7a\0\u4ecc\0\u4f1e\0\u4f70\0\u4fc2\0\u5014\0\u5066\0\u50b8"+
    "\0\u510a\0\u515c\0\u51ae\0\u5200\0\u5252\0\u52a4\0\u52f6\0\u5348"+
    "\0\0\0\0\0\u539a\0\0\0\u53ec\0\u543e\0\u5490\0\u54e2"+
    "\0\u5490\0\u5534\0\u5586\0\u55d8\0\u18aa\0\u5490\0\u562a\0\u567c"+
    "\0\u56ce\0\u5720\0\u5772\0\u57c4\0\u5816\0\u5868\0\u58ba\0\u590c"+
    "\0\u595e\0\u59b0\0\u5a02\0\u5a54\0\u5aa6\0\u5af8\0\u5b4a\0\u5b9c"+
    "\0\u5bee\0\u5c40\0\u5c92\0\u5ce4\0\u5d36\0\u5d88\0\u5dda\0\u5e2c"+
    "\0\u5e7e\0\u5ed0\0\u5f22\0\u5f74\0\u5fc6\0\u6018\0\0\0\u606a"+
    "\0\u60bc\0\u610e\0\u6160\0\u61b2\0\u6204\0\u6256\0\u62a8\0\u62fa"+
    "\0\u0572\0\u634c\0\u639e\0\u63f0\0\u6442\0\u6494\0\u64e6\0\u0572"+
    "\0\u6538\0\u0572\0\u658a\0\u65dc\0\u662e\0\u6680\0\u0572\0\u66d2"+
    "\0\u6724\0\u6776\0\u67c8\0\u681a\0\u686c\0\u68be\0\u0572\0\u6910"+
    "\0\u6962\0\u0572\0\u69b4\0\u6a06\0\u6a58\0\u6aaa\0\u0572\0\u6afc"+
    "\0\u6b4e\0\u0572\0\u6ba0\0\u6bf2\0\u6c44\0\u6c96\0\u6ce8\0\u6d3a"+
    "\0\u0572\0\u0572\0\u6d8c\0\u6dde\0\u6e30\0\u6e82\0\u6ed4\0\u6f26"+
    "\0\u6f78\0\u6fca\0\u701c\0\u706e\0\u70c0\0\u7112\0\u7164\0\u71b6"+
    "\0\u7208\0\u725a\0\u72ac\0\u72fe\0\u7350\0\u73a2\0\u73f4\0\u7446"+
    "\0\u7498\0\u74ea\0\u753c\0\u758e\0\u75e0\0\0\0\u7632\0\u7684"+
    "\0\u76d6\0\u7728\0\u777a\0\u77cc\0\u781e\0\u7870\0\u78c2\0\u7914"+
    "\0\u7966\0\u79b8\0\u7a0a\0\u7a5c\0\u7aae\0\u7b00\0\u7b52\0\0"+
    "\0\u7ba4\0\u7bf6\0\u7c48\0\u7c9a\0\u7cec\0\u7d3e\0\u7d90\0\u7de2"+
    "\0\u7e34\0\u7e86\0\u7ed8\0\u7f2a\0\u7f7c\0\u7fce\0\u8020\0\u8072"+
    "\0\0\0\u0572\0\u205a\0\0\0\u80c4\0\u8116\0\u8168\0\u81ba"+
    "\0\u0572\0\u820c\0\u0572\0\u825e\0\u82b0\0\u8302\0\u8354\0\u83a6"+
    "\0\u83f8\0\u844a\0\u849c\0\u84ee\0\u8540\0\u0572\0\u0572\0\u8592"+
    "\0\u85e4\0\u0572\0\u8636\0\u8688\0\u0572\0\u0572\0\u86da\0\u872c"+
    "\0\u0572\0\u0572\0\u877e\0\u0572\0\u87d0\0\u8822\0\u8874\0\u88c6"+
    "\0\u8918\0\u0572\0\u896a\0\u89bc\0\u0572\0\u8a0e\0\u8a60\0\u8ab2"+
    "\0\u8b04\0\u8b56\0\u8ba8\0\u8bfa\0\u8c4c\0\0\0\u8c9e\0\u8cf0"+
    "\0\u8d42\0\u8d94\0\u8de6\0\u8e38\0\u8e8a\0\u8edc\0\u8f2e\0\u8f80"+
    "\0\u8fd2\0\u9024\0\u9076\0\u90c8\0\u911a\0\u916c\0\u91be\0\u9210"+
    "\0\0\0\u9262\0\0\0\u92b4\0\u9306\0\u9358\0\0\0\u93aa"+
    "\0\u93fc\0\u944e\0\u94a0\0\u94f2\0\u9544\0\u9596\0\u95e8\0\u963a"+
    "\0\u968c\0\0\0\u96de\0\u9730\0\u9782\0\u97d4\0\u9826\0\u9878"+
    "\0\u98ca\0\u991c\0\u996e\0\u6256\0\u99c0\0\u9a12\0\u9a64\0\u9ab6"+
    "\0\u9b08\0\u0572\0\u9b5a\0\u9bac\0\u9bfe\0\u9c50\0\u9ca2\0\u9cf4"+
    "\0\u9d46\0\u9d98\0\u9dea\0\u9e3c\0\u9e8e\0\u9ee0\0\u0572\0\u0572"+
    "\0\u0572\0\u9f32\0\u9f84\0\u0572\0\u0572\0\u9fd6\0\ua028\0\u0572"+
    "\0\ua07a\0\ua0cc\0\ua11e\0\ua170\0\ua1c2\0\ua214\0\ua266\0\ua2b8"+
    "\0\ua30a\0\ua35c\0\ua3ae\0\ua400\0\ua452\0\ua4a4\0\ua4f6\0\ua548"+
    "\0\ua59a\0\ua5ec\0\ua63e\0\ua690\0\ua6e2\0\0\0\ua734\0\ua786"+
    "\0\ua7d8\0\ua82a\0\0\0\ua87c\0\ua8ce\0\ua920\0\ua972\0\ua9c4"+
    "\0\uaa16\0\uaa68\0\uaaba\0\uab0c\0\uab5e\0\0\0\uabb0\0\0"+
    "\0\uac02\0\u0572\0\uac54\0\uaca6\0\uacf8\0\uad4a\0\uad9c\0\uadee"+
    "\0\uae40\0\uae92\0\uaee4\0\u0572\0\u0572\0\uaf36\0\u0572\0\uaf88"+
    "\0\uafda\0\ub02c\0\u0572\0\ub07e\0\u0572\0\ub0d0\0\ub122\0\ub174"+
    "\0\ub1c6\0\u0572\0\ub218\0\ub26a\0\ub2bc\0\ub30e\0\ub360\0\ub3b2"+
    "\0\ub404\0\ub456\0\ub4a8\0\ub4fa\0\0\0\ub54c\0\0\0\ub59e"+
    "\0\ub5f0\0\ub642\0\ub694\0\ub6e6\0\ub738\0\ub78a\0\0\0\ub7dc"+
    "\0\0\0\0\0\ub82e\0\0\0\ub880\0\ub8d2\0\0\0\ub924"+
    "\0\ub976\0\ub9c8\0\uba1a\0\u0572\0\uba6c\0\ubabe\0\ubb10\0\ubb62"+
    "\0\ubbb4\0\u0572\0\ubc06\0\u0572\0\u0572\0\u0572\0\ubc58\0\ubcaa"+
    "\0\ubcfc\0\ubd4e\0\u0572\0\ubda0\0\u0572\0\ubdf2\0\ube44\0\0"+
    "\0\ube96\0\ubee8\0\ubf3a\0\ubf8c\0\ubfde\0\uc030\0\uc082\0\uc0d4"+
    "\0\uc126\0\uc178\0\0\0\uc1ca\0\0\0\0\0\uc21c\0\uc26e"+
    "\0\u0572\0\u0572\0\uc2c0\0\u0572\0\uc312\0\uc364\0\u0572\0\u0572"+
    "\0\uc3b6\0\uc408\0\u0572\0\uc45a\0\uc4ac\0\uc4fe\0\0\0\0"+
    "\0\uc550\0\uc5a2\0\uc5f4\0\uc646\0\0\0\uc698\0\uc6ea\0\0"+
    "\0\0\0\u0572\0\u0572\0\uc73c\0\u0572\0\u0572\0\uc78e\0\uc7e0"+
    "\0\uc832\0\u0572\0\0\0\uc884\0\uc8d6\0\0\0\0\0\0"+
    "\0\uc928\0\uc97a\0\uc9cc\0\uca1e\0\uca70\0\0\0\0\0\0"+
    "\0\u0572\0\ucac2\0\ucb14\0\u0572\0\u0572\0\ucb66\0\ucbb8\0\u0572";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[800];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\122\0\1\20\1\21\1\22\1\23\1\24\1\25\2\23"+
    "\1\26\1\21\1\23\2\27\1\30\1\31\1\27\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\44\1\51"+
    "\1\23\1\52\2\23\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\23\1\64\1\65\1\23"+
    "\1\66\1\23\1\67\1\70\1\23\1\71\1\72\1\23"+
    "\1\73\1\74\1\75\1\30\1\23\1\76\1\23\1\77"+
    "\12\23\2\30\1\100\1\101\2\30\20\102\1\103\1\104"+
    "\1\105\1\102\1\106\75\102\20\107\1\110\1\107\1\111"+
    "\1\104\1\112\75\107\4\113\1\114\17\113\1\115\75\113"+
    "\3\116\1\117\2\116\3\117\1\116\1\117\1\120\3\116"+
    "\1\120\1\121\1\116\1\122\1\116\1\123\13\116\32\117"+
    "\1\116\1\117\2\116\3\117\1\116\12\117\6\116\3\124"+
    "\1\125\2\124\3\125\1\124\1\125\1\126\3\124\1\126"+
    "\20\124\32\125\1\124\1\125\2\124\3\125\1\124\12\125"+
    "\6\124\3\127\1\130\2\127\3\130\1\127\1\130\1\131"+
    "\3\127\1\132\20\127\32\130\1\127\1\130\2\127\3\130"+
    "\1\127\12\130\6\127\3\133\1\134\1\135\1\133\3\134"+
    "\1\133\1\134\2\27\2\133\1\27\20\133\32\134\1\133"+
    "\1\134\2\133\3\134\1\133\12\134\6\133\1\20\1\136"+
    "\1\137\1\23\1\137\1\140\3\23\1\136\1\23\2\141"+
    "\2\137\1\141\1\142\1\137\1\141\15\137\14\23\1\143"+
    "\15\23\1\137\1\23\2\137\3\23\1\137\12\23\1\30"+
    "\1\144\2\141\2\137\32\145\1\146\67\145\32\147\1\150"+
    "\66\147\1\151\13\152\1\153\3\152\1\154\6\152\1\155"+
    "\5\152\1\156\63\152\1\155\1\152\13\157\2\160\2\157"+
    "\1\160\102\157\13\20\1\161\3\20\1\162\102\20\1\0"+
    "\1\21\1\163\1\164\1\0\1\21\3\0\1\21\34\0"+
    "\1\164\54\0\1\163\3\0\1\163\3\0\1\163\13\0"+
    "\1\165\75\0\1\23\1\0\1\23\1\0\6\23\25\0"+
    "\32\23\1\0\1\23\2\0\3\23\1\0\12\23\12\0"+
    "\1\165\20\0\1\165\1\166\74\0\1\21\1\163\1\164"+
    "\1\0\1\21\1\167\1\0\1\170\1\21\34\0\1\164"+
    "\54\0\1\23\1\0\1\23\1\0\6\23\6\0\1\33"+
    "\7\0\1\171\6\0\20\23\1\172\11\23\1\0\1\23"+
    "\2\0\3\23\1\0\12\23\2\0\1\173\16\0\2\27"+
    "\2\0\1\27\105\0\1\174\2\0\3\174\1\0\1\174"+
    "\25\0\10\174\1\175\21\174\1\0\1\174\2\0\3\174"+
    "\1\0\12\174\6\0\20\176\1\177\1\200\1\201\1\176"+
    "\1\202\75\176\25\0\1\203\1\165\120\0\1\165\1\203"+
    "\120\0\1\165\1\0\1\165\117\0\1\203\121\0\2\165"+
    "\2\0\1\204\115\0\1\165\121\0\1\165\4\0\1\205"+
    "\1\101\113\0\1\165\1\206\120\0\1\165\7\0\1\165"+
    "\111\0\1\165\10\0\1\165\64\0\1\23\1\0\1\23"+
    "\1\0\6\23\25\0\1\23\1\207\30\23\1\0\1\23"+
    "\2\0\3\23\1\0\12\23\7\0\1\23\1\0\1\23"+
    "\1\0\6\23\25\0\3\23\1\210\14\23\1\211\11\23"+
    "\1\0\1\23\2\0\3\23\1\0\12\23\7\0\1\23"+
    "\1\0\1\23\1\0\6\23\25\0\1\51\31\23\1\0"+
    "\1\23\2\0\3\23\1\0\12\23\7\0\1\23\1\0"+
    "\1\23\1\0\1\23\1\212\4\23\25\0\14\23\1\213"+
    "\1\214\7\23\1\215\4\23\1\0\1\216\2\0\3\23"+
    "\1\0\12\23\7\0\1\23\1\0\1\23\1\0\6\23"+
    "\25\0\12\23\1\217\1\23\1\220\14\23\1\221\1\0"+
    "\1\23\2\0\3\23\1\0\12\23\7\0\1\23\1\0"+
    "\1\23\1\0\6\23\25\0\20\23\1\222\2\23\1\223"+
    "\6\23\1\0\1\23\2\0\3\23\1\0\12\23\7\0"+
    "\1\23\1\0\1\23\1\0\6\23\25\0\6\23\1\224"+
    "\1\225\6\23\1\226\13\23\1\0\1\23\2\0\3\23"+
    "\1\0\12\23\7\0\1\23\1\0\1\23\1\0\6\23"+
    "\25\0\7\23\1\227\3\23\1\230\2\23\1\231\1\23"+
    "\1\232\1\23\1\233\7\23\1\0\1\23\2\0\3\23"+
    "\1\0\12\23\7\0\1\23\1\0\1\23\1\0\6\23"+
    "\25\0\14\23\1\234\15\23\1\0\1\23\2\0\3\23"+
    "\1\0\12\23\7\0\1\23\1\0\1\23\1\0\6\23"+
    "\25\0\6\23\1\235\4\23\1\236\6\23\1\237\7\23"+
    "\1\0\1\23\2\0\3\23\1\0\12\23\7\0\1\23"+
    "\1\0\1\23\1\0\6\23\25\0\16\23\1\240\3\23"+
    "\1\241\2\23\1\242\4\23\1\0\1\23\2\0\3\23"+
    "\1\0\12\23\7\0\1\23\1\0\1\23\1\0\6\23"+
    "\25\0\6\23\1\243\1\23\1\244\13\23\1\245\5\23"+
    "\1\0\1\23\2\0\3\23\1\0\12\23\7\0\1\23"+
    "\1\0\1\23\1\0\6\23\25\0\6\23\1\246\23\23"+
    "\1\0\1\23\2\0\3\23\1\0\12\23\7\0\1\23"+
    "\1\0\1\23\1\0\3\23\1\247\2\23\25\0\17\23"+
    "\1\250\12\23\1\0\1\23\2\0\3\23\1\0\12\23"+
    "\7\0\1\23\1\0\1\23\1\0\6\23\25\0\23\23"+
    "\1\251\6\23\1\0\1\23\2\0\3\23\1\0\12\23"+
    "\7\0\1\23\1\0\1\23\1\0\6\23\25\0\7\23"+
    "\1\252\22\23\1\0\1\23\2\0\3\23\1\0\12\23"+
    "\7\0\1\23\1\0\1\23\1\0\6\23\25\0\16\23"+
    "\1\253\6\23\1\254\4\23\1\0\1\23\2\0\3\23"+
    "\1\0\12\23\7\0\1\23\1\0\1\23\1\0\6\23"+
    "\25\0\13\23\1\255\4\23\1\256\1\23\1\257\7\23"+
    "\1\0\1\23\2\0\3\23\1\0\12\23\100\0\1\260"+
    "\30\0\1\23\1\0\1\23\1\0\6\23\25\0\22\23"+
    "\1\261\7\23\1\0\1\23\2\0\3\23\1\0\12\23"+
    "\16\0\1\262\3\0\1\263\25\0\1\264\4\0\1\265"+
    "\1\0\1\266\1\267\1\270\2\0\1\271\1\272\1\273"+
    "\42\0\1\23\1\0\1\23\1\0\6\23\25\0\32\23"+
    "\1\0\1\23\2\0\1\23\1\274\1\23\1\0\12\23"+
    "\6\0\22\173\1\275\73\173\1\200\3\173\20\102\1\276"+
    "\1\0\1\277\1\102\1\300\100\102\1\301\2\102\3\301"+
    "\1\102\1\301\5\102\1\302\1\303\1\277\1\102\1\304"+
    "\13\102\32\301\1\102\1\301\2\102\3\301\1\102\12\301"+
    "\150\102\1\305\1\303\1\277\1\102\1\306\75\102\20\107"+
    "\1\307\1\107\1\310\1\0\1\311\100\107\1\301\2\107"+
    "\3\301\1\107\1\301\5\107\1\312\1\107\1\310\1\313"+
    "\1\304\13\107\32\301\1\107\1\301\2\107\3\301\1\107"+
    "\12\301\150\107\1\305\1\107\1\310\1\313\1\314\75\107"+
    "\26\0\1\315\113\0\1\305\101\0\13\116\1\120\3\116"+
    "\1\120\1\316\1\116\1\317\1\116\1\320\76\116\1\117"+
    "\1\116\1\117\1\116\6\117\1\321\2\116\1\322\1\321"+
    "\1\316\1\116\1\317\1\116\1\320\13\116\32\117\1\116"+
    "\1\117\2\116\3\117\1\116\12\117\11\116\1\323\2\116"+
    "\3\323\1\116\1\323\1\120\3\116\1\120\1\316\1\116"+
    "\1\317\1\116\1\320\13\116\32\323\1\116\1\323\2\116"+
    "\3\323\1\116\12\323\11\116\1\301\2\116\3\301\1\116"+
    "\1\301\1\120\3\116\1\120\1\324\1\116\1\317\1\116"+
    "\1\304\13\116\32\301\1\116\1\301\2\116\3\301\1\116"+
    "\12\301\21\116\1\120\3\116\1\120\115\116\1\120\3\116"+
    "\1\120\1\305\1\116\1\317\1\116\1\325\75\116\13\124"+
    "\1\126\3\124\1\126\103\124\1\125\1\124\1\125\1\124"+
    "\6\125\1\326\2\124\1\327\1\326\20\124\32\125\1\124"+
    "\1\125\2\124\3\125\1\124\12\125\11\124\1\330\2\124"+
    "\3\330\1\124\1\330\1\126\3\124\1\126\20\124\32\330"+
    "\1\124\1\330\2\124\3\330\1\124\12\330\6\124\3\331"+
    "\1\332\2\331\3\332\1\331\1\332\1\0\2\331\1\333"+
    "\1\0\20\331\32\332\1\331\1\332\2\331\3\332\1\331"+
    "\12\332\6\331\1\334\1\335\1\334\1\335\1\334\6\335"+
    "\1\336\2\334\1\337\1\336\20\334\32\335\1\334\1\335"+
    "\2\334\3\335\1\334\12\335\6\334\3\340\1\341\2\340"+
    "\3\341\1\340\1\341\1\131\2\340\1\342\1\131\20\340"+
    "\32\341\1\340\1\341\2\340\3\341\1\340\12\341\6\340"+
    "\1\0\1\134\1\0\1\134\1\0\6\134\25\0\32\134"+
    "\1\0\1\134\2\0\3\134\1\0\12\134\34\0\1\343"+
    "\74\0\1\136\3\0\1\136\3\0\1\136\111\0\1\344"+
    "\3\0\1\344\1\167\1\0\1\170\1\344\113\0\1\345"+
    "\2\0\3\345\1\0\1\345\25\0\32\345\1\0\1\345"+
    "\2\0\3\345\1\0\12\345\7\0\1\23\1\0\1\23"+
    "\1\0\6\23\25\0\13\23\1\236\16\23\1\0\1\23"+
    "\2\0\3\23\1\0\12\23\6\0\32\145\1\0\67\145"+
    "\33\0\1\346\121\0\1\347\134\0\1\350\1\351\1\352"+
    "\1\353\1\354\1\355\1\356\1\357\1\0\1\360\1\361"+
    "\1\0\1\362\2\0\1\363\1\0\1\364\1\365\1\366"+
    "\1\0\1\367\26\0\13\152\1\153\3\152\1\153\6\152"+
    "\1\153\5\152\1\153\63\152\1\153\1\152\13\0\1\370"+
    "\134\0\1\206\106\0\2\160\2\0\1\160\105\0\1\371"+
    "\2\0\3\371\1\0\1\371\25\0\32\371\1\0\1\371"+
    "\2\0\3\371\1\0\12\371\11\0\1\371\2\0\3\371"+
    "\1\0\1\371\1\161\24\0\32\371\1\0\1\371\2\0"+
    "\3\371\1\0\12\371\7\0\1\163\1\0\1\164\1\0"+
    "\1\163\3\0\1\163\34\0\1\164\54\0\1\344\2\0"+
    "\2\344\3\0\1\344\15\0\1\344\73\0\1\372\1\0"+
    "\1\372\1\0\1\372\1\0\3\372\30\0\1\372\1\0"+
    "\1\372\1\0\1\372\2\0\2\372\2\0\1\372\4\0"+
    "\1\372\17\0\1\372\2\0\1\372\21\0\1\373\3\0"+
    "\1\373\141\0\1\374\71\0\1\23\1\0\1\23\1\0"+
    "\6\23\25\0\6\23\1\375\23\23\1\0\1\23\2\0"+
    "\3\23\1\0\12\23\7\0\1\174\1\0\1\174\1\0"+
    "\6\174\25\0\32\174\1\0\1\174\2\0\3\174\1\0"+
    "\12\174\7\0\1\174\1\0\1\174\1\0\6\174\25\0"+
    "\23\174\1\376\6\174\1\0\1\174\2\0\3\174\1\0"+
    "\12\174\6\0\3\176\1\0\2\176\3\0\1\176\1\0"+
    "\5\176\1\177\1\200\1\201\1\176\1\0\13\176\32\0"+
    "\1\176\1\0\2\176\3\0\1\176\12\0\150\176\1\0"+
    "\1\200\1\201\1\176\1\202\75\176\25\0\1\165\3\0"+
    "\1\377\122\0\1\u0100\102\0\2\206\2\0\1\206\103\0"+
    "\1\23\1\0\1\23\1\0\6\23\25\0\4\23\1\207"+
    "\25\23\1\0\1\23\2\0\3\23\1\0\12\23\7\0"+
    "\1\23\1\0\1\23\1\0\6\23\25\0\20\23\1\u0101"+
    "\11\23\1\0\1\23\2\0\3\23\1\0\12\23\7\0"+
    "\1\23\1\0\1\23\1\0\6\23\25\0\7\23\1\u0102"+
    "\1\u0103\21\23\1\0\1\23\2\0\3\23\1\0\12\23"+
    "\7\0\1\23\1\0\1\23\1\0\6\23\25\0\11\23"+
    "\1\u0104\20\23\1\0\1\23\2\0\3\23\1\0\12\23"+
    "\7\0\1\23\1\0\1\23\1\0\6\23\25\0\23\23"+
    "\1\u0105\6\23\1\0\1\23\2\0\3\23\1\0\12\23"+
    "\7\0\1\23\1\0\1\23\1\0\6\23\25\0\17\23"+
    "\1\u0106\12\23\1\0\1\23\2\0\3\23\1\0\12\23"+
    "\7\0\1\23\1\0\1\23\1\0\6\23\25\0\22\23"+
    "\1\u0107\7\23\1\0\1\23\2\0\3\23\1\0\12\23"+
    "\7\0\1\23\1\0\1\23\1\0\6\23\25\0\10\23"+
    "\1\u0108\4\23\1\u0109\1\23\1\u010a\12\23\1\0\1\23"+
    "\2\0\3\23\1\0\12\23\7\0\1\23\1\0\1\23"+
    "\1\0\6\23\25\0\30\23\1\u010b\1\23\1\0\1\23"+
    "\2\0\3\23\1\0\12\23\7\0\1\23\1\0\1\23"+
    "\1\0\6\23\25\0\13\23\1\u010c\5\23\1\u010d\1\u010e"+
    "\7\23\1\0\1\23\2\0\3\23\1\0\12\23\7\0"+
    "\1\23\1\0\1\23\1\0\6\23\25\0\20\23\1\u010f"+
    "\11\23\1\0\1\23\2\0\3\23\1\0\12\23\7\0"+
    "\1\23\1\0\1\23\1\0\6\23\25\0\12\23\1\u0110"+
    "\2\23\1\u0111\14\23\1\0\1\23\2\0\3\23\1\0"+
    "\12\23\7\0\1\23\1\0\1\23\1\0\6\23\25\0"+
    "\6\23\1\u0112\23\23\1\0\1\23\2\0\3\23\1\0"+
    "\12\23\7\0\1\23\1\0\1\23\1\0\6\23\25\0"+
    "\14\23\1\u0113\15\23\1\0\1\23\2\0\3\23\1\0"+
    "\12\23\7\0\1\23\1\0\1\23\1\0\6\23\25\0"+
    "\14\23\1\u0114\15\23\1\0\1\23\2\0\3\23\1\0"+
    "\12\23\7\0\1\23\1\0\1\23\1\0\6\23\25\0"+
    "\20\23\1\u0115\11\23\1\0\1\23\2\0\3\23\1\0"+
    "\12\23\7\0\1\23\1\0\1\23\1\0\6\23\25\0"+
    "\16\23\1\u0116\13\23\1\0\1\23\2\0\3\23\1\0"+
    "\12\23\7\0\1\23\1\0\1\23\1\0\6\23\25\0"+
    "\25\23\1\u0117\4\23\1\0\1\23\2\0\3\23\1\0"+
    "\12\23\7\0\1\23\1\0\1\23\1\0\6\23\25\0"+
    "\17\23\1\u0118\12\23\1\0\1\23\2\0\3\23\1\0"+
    "\12\23\7\0\1\23\1\0\1\23\1\0\6\23\25\0"+
    "\24\23\1\u0119\5\23\1\0\1\23\2\0\3\23\1\0"+
    "\12\23\7\0\1\23\1\0\1\23\1\0\6\23\25\0"+
    "\25\23\1\u011a\4\23\1\0\1\23\2\0\3\23\1\0"+
    "\12\23\7\0\1\23\1\0\1\23\1\0\6\23\25\0"+
    "\31\23\1\u011b\1\0\1\23\2\0\3\23\1\0\12\23"+
    "\7\0\1\23\1\0\1\23\1\0\6\23\25\0\14\23"+
    "\1\u011c\15\23\1\0\1\23\2\0\3\23\1\0\12\23"+
    "\7\0\1\23\1\0\1\23\1\0\6\23\25\0\10\23"+
    "\1\u011d\6\23\1\u011e\5\23\1\u011f\4\23\1\0\1\23"+
    "\2\0\3\23\1\0\12\23\7\0\1\23\1\0\1\23"+
    "\1\0\6\23\25\0\16\23\1\u0120\13\23\1\0\1\23"+
    "\2\0\3\23\1\0\12\23\7\0\1\23\1\0\1\23"+
    "\1\0\6\23\25\0\25\23\1\u0121\4\23\1\0\1\23"+
    "\2\0\3\23\1\0\12\23\7\0\1\23\1\0\1\23"+
    "\1\0\6\23\25\0\22\23\1\u0122\7\23\1\0\1\23"+
    "\2\0\3\23\1\0\12\23\7\0\1\23\1\0\1\23"+
    "\1\0\6\23\25\0\7\23\1\u0123\22\23\1\0\1\23"+
    "\2\0\3\23\1\0\12\23\7\0\1\23\1\0\1\23"+
    "\1\0\6\23\25\0\10\23\1\u0124\21\23\1\0\1\23"+
    "\2\0\2\23\1\u0125\1\0\12\23\7\0\1\23\1\0"+
    "\1\23\1\0\6\23\25\0\17\23\1\u0126\12\23\1\0"+
    "\1\23\2\0\3\23\1\0\12\23\7\0\1\23\1\0"+
    "\1\23\1\0\6\23\25\0\7\23\1\u0127\22\23\1\0"+
    "\1\23\2\0\3\23\1\0\12\23\7\0\1\23\1\0"+
    "\1\23\1\0\6\23\25\0\17\23\1\u0128\12\23\1\0"+
    "\1\23\2\0\3\23\1\0\12\23\7\0\1\23\1\0"+
    "\1\23\1\0\6\23\25\0\10\23\1\u0129\21\23\1\0"+
    "\1\23\2\0\3\23\1\0\12\23\7\0\1\23\1\0"+
    "\1\23\1\0\6\23\25\0\16\23\1\u012a\13\23\1\0"+
    "\1\23\2\0\3\23\1\0\12\23\7\0\1\23\1\0"+
    "\1\23\1\0\3\23\1\u012b\2\23\25\0\32\23\1\0"+
    "\1\23\2\0\3\23\1\0\12\23\7\0\1\23\1\0"+
    "\1\23\1\0\6\23\25\0\7\23\1\u012c\6\23\1\u012d"+
    "\13\23\1\0\1\23\2\0\3\23\1\0\12\23\7\0"+
    "\1\23\1\0\1\23\1\0\6\23\25\0\20\23\1\u012e"+
    "\11\23\1\0\1\23\2\0\3\23\1\0\12\23\7\0"+
    "\1\23\1\0\1\23\1\0\6\23\25\0\20\23\1\u012f"+
    "\11\23\1\0\1\23\2\0\3\23\1\0\12\23\55\0"+
    "\1\u0130\6\0\1\u0131\123\0\1\u0132\115\0\1\u0133\123\0"+
    "\1\u0134\130\0\1\u0135\110\0\1\u0136\55\0\1\u0137\161\0"+
    "\1\u0138\117\0\1\u0139\54\0\1\23\1\0\1\23\1\0"+
    "\6\23\25\0\3\23\1\u013a\1\u013b\16\23\1\u013c\6\23"+
    "\1\0\1\23\2\0\3\23\1\0\1\u013d\1\u013e\1\23"+
    "\1\u013f\3\23\1\u0140\2\23\6\0\122\173\3\102\1\0"+
    "\2\102\3\0\1\102\1\0\5\102\1\302\1\303\1\277"+
    "\1\102\1\0\13\102\32\0\1\102\1\0\2\102\3\0"+
    "\1\102\12\0\26\102\1\0\1\303\1\277\1\102\1\306"+
    "\75\102\1\0\1\301\1\0\1\301\1\0\6\301\25\0"+
    "\32\301\1\0\1\301\2\0\3\301\1\0\12\301\1\u0141"+
    "\5\0\3\107\1\0\2\107\3\0\1\107\1\0\5\107"+
    "\1\312\1\107\1\310\1\313\1\0\13\107\32\0\1\107"+
    "\1\0\2\107\3\0\1\107\12\0\26\107\1\0\1\107"+
    "\1\310\1\313\1\314\75\107\3\116\1\0\2\116\3\0"+
    "\1\116\1\0\1\120\3\116\1\120\1\324\1\116\1\317"+
    "\1\116\1\0\13\116\32\0\1\116\1\0\2\116\3\0"+
    "\1\116\12\0\21\116\1\120\3\116\1\120\1\0\1\116"+
    "\1\317\1\116\1\325\110\116\1\321\3\116\1\321\1\316"+
    "\1\116\1\317\1\116\1\320\76\116\1\323\1\116\1\323"+
    "\1\116\6\323\1\u0142\2\116\1\u0143\1\u0142\1\316\1\116"+
    "\1\317\1\116\1\320\13\116\32\323\1\116\1\323\2\116"+
    "\3\323\1\116\12\323\6\116\13\124\1\326\3\124\1\326"+
    "\103\124\1\330\1\124\1\330\1\124\6\330\1\u0144\2\124"+
    "\1\u0145\1\u0144\20\124\32\330\1\124\1\330\2\124\3\330"+
    "\1\124\12\330\6\124\3\342\1\u0146\2\342\3\u0146\1\342"+
    "\1\u0146\1\u0147\3\342\1\u0147\20\342\32\u0146\1\342\1\u0146"+
    "\2\342\3\u0146\1\342\12\u0146\7\342\1\u0148\1\342\1\u0146"+
    "\1\342\1\u0148\3\u0146\1\u0148\1\u0146\1\u0149\2\342\1\u014a"+
    "\1\u0149\20\342\32\u0146\1\342\1\u0146\2\342\3\u0146\1\342"+
    "\12\u0146\6\342\3\333\1\u014b\2\333\3\u014b\1\333\1\u014b"+
    "\1\0\3\333\1\0\20\333\32\u014b\1\333\1\u014b\2\333"+
    "\3\u014b\1\333\12\u014b\6\333\3\u014c\1\u014d\2\u014c\3\u014d"+
    "\1\u014c\1\u014d\1\u0149\3\u014c\1\u0149\20\u014c\32\u014d\1\u014c"+
    "\1\u014d\2\u014c\3\u014d\1\u014c\12\u014d\7\u014c\1\u014d\1\u014c"+
    "\1\u014d\1\u014c\6\u014d\1\u014e\2\u014c\1\u014f\1\u014e\20\u014c"+
    "\32\u014d\1\u014c\1\u014d\2\u014c\3\u014d\1\u014c\12\u014d\6\u014c"+
    "\13\u0150\1\336\3\u0150\1\336\102\u0150\3\340\1\u0151\2\340"+
    "\3\u0151\1\340\1\u0151\1\u0147\2\340\1\342\1\u0147\20\340"+
    "\32\u0151\1\340\1\u0151\2\340\3\u0151\1\340\12\u0151\6\340"+
    "\1\u0152\1\341\1\u0152\1\341\1\u0152\6\341\1\u014e\2\u0152"+
    "\1\u014f\1\u014e\20\u0152\32\341\1\u0152\1\341\2\u0152\3\341"+
    "\1\u0152\12\341\6\u0152\1\0\1\344\3\0\1\344\3\0"+
    "\1\344\111\0\1\345\1\0\1\345\1\0\6\345\25\0"+
    "\32\345\1\0\1\345\2\0\3\345\1\0\12\345\14\0"+
    "\1\u0153\167\0\1\u0154\12\0\1\u0155\105\0\1\u0156\2\0"+
    "\1\u0157\4\0\1\u0158\104\0\1\u0159\122\0\1\u015a\131\0"+
    "\1\u015b\124\0\1\u015c\115\0\1\u015d\3\0\1\u015e\105\0"+
    "\1\u015f\1\u0160\1\u0161\2\0\1\u0162\114\0\1\u0163\63\0"+
    "\1\u0164\42\0\1\u0165\1\0\1\u0166\113\0\1\u0167\137\0"+
    "\1\u0168\114\0\1\u0169\1\0\1\u016a\105\0\1\u016b\13\0"+
    "\1\u016c\105\0\1\u016d\13\0\1\u016e\40\0\1\371\1\0"+
    "\1\371\1\0\6\371\1\u016f\2\0\1\u0170\1\u016f\20\0"+
    "\32\371\1\0\1\371\2\0\3\371\1\0\12\371\37\0"+
    "\1\377\71\0\1\23\1\0\1\23\1\0\6\23\25\0"+
    "\22\23\1\u0171\7\23\1\0\1\23\2\0\3\23\1\0"+
    "\12\23\7\0\1\174\1\0\1\174\1\0\6\174\25\0"+
    "\7\174\1\u0172\22\174\1\0\1\174\2\0\3\174\1\0"+
    "\12\174\11\0\1\u0173\2\0\3\u0173\1\0\1\u0173\1\0"+
    "\1\377\4\0\1\u0174\16\0\32\u0173\1\0\1\u0173\2\0"+
    "\3\u0173\1\0\12\u0173\2\0\1\u0175\16\0\2\u0176\2\0"+
    "\1\u0176\77\0\1\u0177\3\0\1\23\1\0\1\23\1\0"+
    "\6\23\25\0\22\23\1\u0178\7\23\1\0\1\23\2\0"+
    "\3\23\1\0\12\23\7\0\1\23\1\0\1\23\1\0"+
    "\6\23\25\0\10\23\1\u0179\21\23\1\0\1\23\2\0"+
    "\3\23\1\0\12\23\7\0\1\23\1\0\1\23\1\0"+
    "\6\23\25\0\6\23\1\u017a\23\23\1\0\1\23\2\0"+
    "\3\23\1\0\12\23\7\0\1\23\1\0\1\23\1\0"+
    "\6\23\25\0\7\23\1\u017b\1\23\1\u017c\1\u017d\4\23"+
    "\1\u017e\4\23\1\u017f\5\23\1\0\1\23\2\0\3\23"+
    "\1\0\12\23\7\0\1\23\1\0\1\23\1\0\6\23"+
    "\25\0\16\23\1\u0180\13\23\1\0\1\23\2\0\3\23"+
    "\1\0\12\23\7\0\1\23\1\0\1\23\1\0\6\23"+
    "\25\0\6\23\1\u0181\23\23\1\0\1\23\2\0\3\23"+
    "\1\0\12\23\7\0\1\23\1\0\1\23\1\0\6\23"+
    "\25\0\25\23\1\u0182\4\23\1\0\1\23\2\0\3\23"+
    "\1\0\12\23\7\0\1\23\1\0\1\23\1\0\6\23"+
    "\25\0\6\23\1\u0183\23\23\1\0\1\23\2\0\3\23"+
    "\1\0\12\23\7\0\1\23\1\0\1\23\1\0\6\23"+
    "\25\0\25\23\1\u0184\4\23\1\0\1\23\2\0\3\23"+
    "\1\0\12\23\7\0\1\23\1\0\1\23\1\0\6\23"+
    "\25\0\10\23\1\u0185\21\23\1\0\1\23\2\0\3\23"+
    "\1\0\12\23\7\0\1\23\1\0\1\23\1\0\6\23"+
    "\25\0\25\23\1\u0186\4\23\1\0\1\23\2\0\3\23"+
    "\1\0\12\23\7\0\1\23\1\0\1\23\1\0\6\23"+
    "\25\0\6\23\1\u0187\23\23\1\0\1\23\2\0\3\23"+
    "\1\0\12\23\7\0\1\23\1\0\1\23\1\0\6\23"+
    "\25\0\7\23\1\u0188\22\23\1\0\1\23\2\0\3\23"+
    "\1\0\12\23\7\0\1\23\1\0\1\23\1\0\6\23"+
    "\25\0\16\23\1\u0189\13\23\1\0\1\23\2\0\3\23"+
    "\1\0\12\23\7\0\1\23\1\0\1\23\1\0\6\23"+
    "\25\0\22\23\1\u018a\7\23\1\0\1\23\2\0\3\23"+
    "\1\0\12\23\7\0\1\23\1\0\1\23\1\0\6\23"+
    "\25\0\25\23\1\u018b\4\23\1\0\1\23\2\0\3\23"+
    "\1\0\12\23\7\0\1\23\1\0\1\23\1\0\6\23"+
    "\25\0\22\23\1\u018c\7\23\1\0\1\23\2\0\3\23"+
    "\1\0\12\23\7\0\1\23\1\0\1\23\1\0\6\23"+
    "\25\0\15\23\1\u018d\14\23\1\0\1\23\2\0\3\23"+
    "\1\0\12\23\7\0\1\23\1\0\1\23\1\0\6\23"+
    "\25\0\6\23\1\u018e\23\23\1\0\1\23\2\0\3\23"+
    "\1\0\12\23\7\0\1\23\1\0\1\23\1\0\6\23"+
    "\25\0\31\23\1\u018f\1\0\1\23\2\0\3\23\1\0"+
    "\12\23\7\0\1\23\1\0\1\23\1\0\6\23\25\0"+
    "\17\23\1\u0190\12\23\1\0\1\23\2\0\3\23\1\0"+
    "\12\23\7\0\1\23\1\0\1\23\1\0\6\23\25\0"+
    "\6\23\1\u0191\23\23\1\0\1\23\2\0\3\23\1\0"+
    "\12\23\7\0\1\23\1\0\1\23\1\0\6\23\25\0"+
    "\25\23\1\u0192\4\23\1\0\1\23\2\0\3\23\1\0"+
    "\12\23\7\0\1\23\1\0\1\23\1\0\6\23\25\0"+
    "\6\23\1\u0193\23\23\1\0\1\23\2\0\3\23\1\0"+
    "\12\23\7\0\1\23\1\0\1\23\1\0\6\23\25\0"+
    "\10\23\1\u0194\6\23\1\u0195\12\23\1\0\1\23\2\0"+
    "\3\23\1\0\12\23\7\0\1\23\1\0\1\23\1\0"+
    "\6\23\25\0\15\23\1\u0196\14\23\1\0\1\23\2\0"+
    "\3\23\1\0\12\23\7\0\1\23\1\0\1\23\1\0"+
    "\6\23\25\0\6\23\1\u0197\23\23\1\0\1\23\2\0"+
    "\3\23\1\0\12\23\7\0\1\23\1\0\1\23\1\0"+
    "\6\23\25\0\25\23\1\u0198\4\23\1\0\1\23\2\0"+
    "\3\23\1\0\12\23\7\0\1\23\1\0\1\23\1\0"+
    "\6\23\25\0\14\23\1\u0199\15\23\1\0\1\23\2\0"+
    "\3\23\1\0\12\23\7\0\1\23\1\0\1\23\1\0"+
    "\6\23\25\0\12\23\1\u019a\17\23\1\0\1\23\2\0"+
    "\3\23\1\0\12\23\7\0\1\23\1\0\1\23\1\0"+
    "\6\23\25\0\10\23\1\u019b\21\23\1\0\1\23\2\0"+
    "\3\23\1\0\12\23\7\0\1\23\1\0\1\23\1\0"+
    "\6\23\25\0\10\23\1\u019c\21\23\1\0\1\23\2\0"+
    "\3\23\1\0\12\23\7\0\1\23\1\0\1\23\1\0"+
    "\6\23\25\0\13\23\1\u019d\16\23\1\0\1\23\2\0"+
    "\3\23\1\0\12\23\7\0\1\23\1\0\1\23\1\0"+
    "\6\23\25\0\13\23\1\u019e\16\23\1\0\1\23\2\0"+
    "\3\23\1\0\12\23\7\0\1\23\1\0\1\23\1\0"+
    "\6\23\25\0\10\23\1\u019f\21\23\1\0\1\23\2\0"+
    "\3\23\1\0\12\23\7\0\1\23\1\0\1\23\1\0"+
    "\6\23\25\0\25\23\1\u01a0\4\23\1\0\1\23\2\0"+
    "\3\23\1\0\12\23\7\0\1\23\1\0\1\23\1\0"+
    "\6\23\25\0\10\23\1\u01a1\21\23\1\0\1\23\2\0"+
    "\3\23\1\0\12\23\7\0\1\23\1\0\1\23\1\0"+
    "\6\23\25\0\16\23\1\u01a2\13\23\1\0\1\23\2\0"+
    "\3\23\1\0\12\23\7\0\1\23\1\0\1\23\1\0"+
    "\3\23\1\u01a3\2\23\25\0\32\23\1\0\1\23\2\0"+
    "\3\23\1\0\12\23\7\0\1\23\1\0\1\23\1\0"+
    "\6\23\25\0\25\23\1\u01a4\4\23\1\0\1\23\2\0"+
    "\3\23\1\0\12\23\7\0\1\23\1\0\1\23\1\0"+
    "\6\23\25\0\14\23\1\u01a5\15\23\1\0\1\u01a6\2\0"+
    "\3\23\1\0\12\23\7\0\1\23\1\0\1\23\1\0"+
    "\6\23\25\0\10\23\1\u01a7\21\23\1\0\1\23\2\0"+
    "\3\23\1\0\12\23\7\0\1\23\1\0\1\23\1\0"+
    "\6\23\25\0\6\23\1\u01a8\23\23\1\0\1\23\2\0"+
    "\3\23\1\0\12\23\62\0\1\u01a9\123\0\1\u01aa\123\0"+
    "\1\u01ab\111\0\1\u01ac\124\0\1\u01ad\124\0\1\u01ae\122\0"+
    "\1\u01af\140\0\1\u01b0\103\0\1\u01b1\123\0\1\u01b2\40\0"+
    "\1\23\1\0\1\23\1\0\6\23\25\0\2\23\1\u01b3"+
    "\27\23\1\0\1\23\2\0\3\23\1\0\12\23\7\0"+
    "\1\23\1\0\1\23\1\0\6\23\25\0\32\23\1\0"+
    "\1\23\2\0\3\23\1\0\6\23\1\u01b4\3\23\7\0"+
    "\1\23\1\0\1\23\1\0\6\23\25\0\22\23\1\u01b5"+
    "\7\23\1\0\1\23\2\0\3\23\1\0\12\23\7\0"+
    "\1\23\1\0\1\23\1\0\6\23\25\0\32\23\1\0"+
    "\1\23\2\0\3\23\1\0\1\23\1\u01b6\10\23\7\0"+
    "\1\23\1\0\1\23\1\0\6\23\25\0\32\23\1\0"+
    "\1\23\2\0\3\23\1\0\6\23\1\u01b7\3\23\7\0"+
    "\1\23\1\0\1\23\1\0\6\23\25\0\32\23\1\0"+
    "\1\23\2\0\3\23\1\0\4\23\1\u01b8\1\23\1\u01b9"+
    "\3\23\7\0\1\23\1\0\1\u01ba\1\0\6\23\25\0"+
    "\32\23\1\0\1\23\2\0\3\23\1\0\12\23\6\0"+
    "\13\116\1\u0142\3\116\1\u0142\1\316\1\116\1\317\1\116"+
    "\1\320\75\116\13\124\1\u0144\3\124\1\u0144\102\124\1\331"+
    "\1\u01bb\1\331\1\u01bb\1\331\6\u01bb\1\336\2\331\1\u01bc"+
    "\1\336\20\331\32\u01bb\1\331\1\u01bb\2\331\3\u01bb\1\331"+
    "\12\u01bb\6\331\13\u01bd\1\0\2\u01bd\2\0\102\u01bd\1\331"+
    "\1\332\1\331\1\332\1\331\6\332\1\u01be\2\331\1\u01bf"+
    "\1\u01be\20\331\32\332\1\331\1\332\2\331\3\332\1\331"+
    "\12\332\11\331\1\332\2\331\3\332\1\331\1\332\1\u01be"+
    "\2\331\1\333\1\u01be\20\331\32\332\1\331\1\332\2\331"+
    "\3\332\1\331\12\332\6\331\1\333\1\u014b\1\333\1\u014b"+
    "\1\333\6\u014b\1\u01be\2\333\1\u01bf\1\u01be\20\333\32\u014b"+
    "\1\333\1\u014b\2\333\3\u014b\1\333\12\u014b\6\333\13\334"+
    "\1\u01be\2\334\1\u0150\1\u01be\115\334\1\336\2\334\1\u0150"+
    "\1\336\102\334\13\u0150\1\u01be\3\u0150\1\u01be\102\u0150\1\340"+
    "\1\u0151\1\340\1\u0151\1\340\6\u0151\1\u014e\2\340\1\u01c0"+
    "\1\u014e\20\340\32\u0151\1\340\1\u0151\2\340\3\u0151\1\340"+
    "\12\u0151\6\340\3\u0152\1\341\2\u0152\3\341\1\u0152\1\341"+
    "\1\u0149\2\u0152\1\u014c\1\u0149\20\u0152\32\341\1\u0152\1\341"+
    "\2\u0152\3\341\1\u0152\12\341\6\u0152\55\0\1\u01c1\4\0"+
    "\1\u01c2\107\0\1\u01c3\125\0\1\u01c4\115\0\1\u01c5\122\0"+
    "\1\u01c6\130\0\1\u01c7\120\0\1\u01c8\10\0\1\u01c9\105\0"+
    "\1\u01ca\10\0\1\u01cb\102\0\1\u01cc\144\0\1\u01cd\120\0"+
    "\1\u01ce\101\0\1\u01cf\117\0\1\u01d0\127\0\1\u01d1\127\0"+
    "\1\u01d2\47\0\1\u01d3\161\0\1\u01d4\130\0\1\u01d5\112\0"+
    "\1\u01d6\126\0\1\u01d7\120\0\1\u01d8\1\u01d9\122\0\1\u01da"+
    "\121\0\1\u01db\120\0\1\u01dc\2\0\1\u01dd\111\0\1\u01de"+
    "\140\0\1\u01df\112\0\1\u01e0\121\0\1\u01e1\54\0\1\u016f"+
    "\3\0\1\u016f\103\0\1\23\1\0\1\23\1\0\6\23"+
    "\25\0\26\23\1\u01e2\3\23\1\0\1\23\2\0\3\23"+
    "\1\0\12\23\7\0\1\174\1\0\1\174\1\0\6\174"+
    "\25\0\17\174\1\u01e3\12\174\1\0\1\174\2\0\3\174"+
    "\1\0\12\174\7\0\1\u0173\1\0\1\u0173\1\0\6\u0173"+
    "\1\u01e4\3\0\1\u01e5\20\0\32\u0173\1\0\1\u0173\2\0"+
    "\3\u0173\1\0\12\u0173\11\0\1\u01e6\2\0\3\u01e6\1\0"+
    "\1\u01e6\25\0\32\u01e6\1\0\1\u01e6\2\0\3\u01e6\1\0"+
    "\12\u01e6\11\0\1\u01e7\2\0\3\u01e7\1\0\1\u01e7\25\0"+
    "\32\u01e7\1\0\1\u01e7\2\0\3\u01e7\1\0\12\u01e7\21\0"+
    "\2\u0176\2\0\1\u0176\223\0\1\u01e8\1\0\1\23\1\0"+
    "\1\23\1\0\6\23\25\0\21\23\1\u01e9\10\23\1\0"+
    "\1\23\2\0\3\23\1\0\12\23\7\0\1\23\1\0"+
    "\1\23\1\0\6\23\25\0\14\23\1\u01ea\15\23\1\0"+
    "\1\23\2\0\3\23\1\0\12\23\7\0\1\23\1\0"+
    "\1\23\1\0\6\23\25\0\12\23\1\u01eb\17\23\1\0"+
    "\1\23\2\0\3\23\1\0\12\23\7\0\1\23\1\0"+
    "\1\23\1\0\6\23\25\0\6\23\1\u01ec\23\23\1\0"+
    "\1\23\2\0\3\23\1\0\12\23\7\0\1\23\1\0"+
    "\1\23\1\0\6\23\25\0\16\23\1\u01ed\13\23\1\0"+
    "\1\23\2\0\3\23\1\0\12\23\7\0\1\23\1\0"+
    "\1\23\1\0\6\23\25\0\24\23\1\u01ee\5\23\1\0"+
    "\1\23\2\0\3\23\1\0\12\23\7\0\1\23\1\0"+
    "\1\23\1\0\6\23\25\0\23\23\1\u01ef\6\23\1\0"+
    "\1\23\2\0\3\23\1\0\12\23\7\0\1\23\1\0"+
    "\1\23\1\0\6\23\25\0\7\23\1\u01f0\22\23\1\0"+
    "\1\23\2\0\3\23\1\0\12\23\7\0\1\23\1\0"+
    "\1\23\1\0\6\23\25\0\20\23\1\u01f1\11\23\1\0"+
    "\1\23\2\0\3\23\1\0\12\23\7\0\1\23\1\0"+
    "\1\23\1\0\6\23\25\0\13\23\1\u01f2\16\23\1\0"+
    "\1\23\2\0\3\23\1\0\12\23\7\0\1\23\1\0"+
    "\1\23\1\0\6\23\25\0\6\23\1\u01f3\13\23\1\u01f4"+
    "\7\23\1\0\1\23\2\0\3\23\1\0\12\23\7\0"+
    "\1\23\1\0\1\23\1\0\6\23\25\0\6\23\1\u01f5"+
    "\23\23\1\0\1\23\2\0\3\23\1\0\12\23\7\0"+
    "\1\23\1\0\1\23\1\0\6\23\25\0\10\23\1\u01f6"+
    "\21\23\1\0\1\23\2\0\3\23\1\0\12\23\7\0"+
    "\1\23\1\0\1\23\1\0\6\23\25\0\24\23\1\u01f7"+
    "\5\23\1\0\1\23\2\0\3\23\1\0\12\23\7\0"+
    "\1\23\1\0\1\23\1\0\6\23\25\0\13\23\1\u01f8"+
    "\16\23\1\0\1\23\2\0\3\23\1\0\12\23\7\0"+
    "\1\23\1\0\1\23\1\0\6\23\25\0\22\23\1\u01f9"+
    "\7\23\1\0\1\23\2\0\3\23\1\0\12\23\7\0"+
    "\1\23\1\0\1\23\1\0\6\23\25\0\25\23\1\u01fa"+
    "\4\23\1\0\1\23\2\0\3\23\1\0\12\23\7\0"+
    "\1\23\1\0\1\23\1\0\6\23\25\0\10\23\1\u01fb"+
    "\21\23\1\0\1\23\2\0\3\23\1\0\12\23\7\0"+
    "\1\23\1\0\1\23\1\0\6\23\25\0\22\23\1\u01fc"+
    "\7\23\1\0\1\23\2\0\3\23\1\0\12\23\7\0"+
    "\1\23\1\0\1\23\1\0\6\23\25\0\6\23\1\u01fd"+
    "\23\23\1\0\1\23\2\0\3\23\1\0\12\23\7\0"+
    "\1\23\1\0\1\23\1\0\6\23\25\0\10\23\1\u01fe"+
    "\21\23\1\0\1\23\2\0\3\23\1\0\12\23\7\0"+
    "\1\23\1\0\1\23\1\0\6\23\25\0\17\23\1\u01ff"+
    "\12\23\1\0\1\23\2\0\3\23\1\0\12\23\7\0"+
    "\1\23\1\0\1\23\1\0\6\23\25\0\7\23\1\u0200"+
    "\22\23\1\0\1\23\2\0\3\23\1\0\12\23\7\0"+
    "\1\23\1\0\1\23\1\0\6\23\25\0\10\23\1\u0201"+
    "\21\23\1\0\1\23\2\0\3\23\1\0\12\23\7\0"+
    "\1\23\1\0\1\23\1\0\6\23\25\0\23\23\1\u0202"+
    "\6\23\1\0\1\23\2\0\3\23\1\0\12\23\7\0"+
    "\1\23\1\0\1\23\1\0\6\23\25\0\22\23\1\u0203"+
    "\7\23\1\0\1\23\2\0\3\23\1\0\12\23\7\0"+
    "\1\23\1\0\1\23\1\0\6\23\25\0\6\23\1\u0204"+
    "\23\23\1\0\1\23\2\0\3\23\1\0\12\23\7\0"+
    "\1\23\1\0\1\23\1\0\6\23\25\0\7\23\1\u0205"+
    "\22\23\1\0\1\23\2\0\3\23\1\0\12\23\7\0"+
    "\1\23\1\0\1\23\1\0\6\23\25\0\15\23\1\u0206"+
    "\14\23\1\0\1\23\2\0\3\23\1\0\12\23\7\0"+
    "\1\23\1\0\1\23\1\0\6\23\25\0\20\23\1\u0207"+
    "\11\23\1\0\1\23\2\0\3\23\1\0\12\23\7\0"+
    "\1\23\1\0\1\23\1\0\6\23\25\0\7\23\1\u0208"+
    "\22\23\1\0\1\23\2\0\3\23\1\0\12\23\7\0"+
    "\1\23\1\0\1\23\1\0\6\23\25\0\20\23\1\u0209"+
    "\11\23\1\0\1\23\2\0\3\23\1\0\12\23\7\0"+
    "\1\23\1\0\1\23\1\0\6\23\25\0\6\23\1\u020a"+
    "\23\23\1\0\1\23\2\0\3\23\1\0\12\23\7\0"+
    "\1\23\1\0\1\23\1\0\6\23\25\0\22\23\1\u020b"+
    "\7\23\1\0\1\23\2\0\3\23\1\0\12\23\7\0"+
    "\1\23\1\0\1\23\1\0\6\23\25\0\7\23\1\u020c"+
    "\22\23\1\0\1\23\2\0\3\23\1\0\12\23\7\0"+
    "\1\23\1\0\1\23\1\0\6\23\25\0\10\23\1\u020d"+
    "\21\23\1\0\1\23\2\0\3\23\1\0\12\23\7\0"+
    "\1\23\1\0\1\23\1\0\6\23\25\0\22\23\1\u020e"+
    "\7\23\1\0\1\23\2\0\3\23\1\0\12\23\7\0"+
    "\1\23\1\0\1\23\1\0\6\23\25\0\6\23\1\u020f"+
    "\23\23\1\0\1\23\2\0\3\23\1\0\12\23\7\0"+
    "\1\23\1\0\1\23\1\0\6\23\25\0\14\23\1\u0210"+
    "\15\23\1\0\1\23\2\0\3\23\1\0\12\23\70\0"+
    "\1\u0211\124\0\1\u0212\116\0\1\u0213\53\0\1\u0214\31\0"+
    "\1\u0215\26\0\1\u0216\34\0\1\u0217\173\0\1\u0218\105\0"+
    "\1\u0218\121\0\1\u0219\122\0\1\u021a\137\0\1\u0214\35\0"+
    "\1\23\1\0\1\23\1\0\6\23\25\0\32\23\1\0"+
    "\1\23\2\0\3\23\1\0\7\23\1\u021b\2\23\7\0"+
    "\1\23\1\0\1\23\1\0\6\23\25\0\1\23\1\u021c"+
    "\30\23\1\0\1\23\2\0\3\23\1\0\12\23\7\0"+
    "\1\23\1\0\1\23\1\0\6\23\25\0\25\23\1\u021d"+
    "\4\23\1\0\1\23\2\0\3\23\1\0\12\23\7\0"+
    "\1\23\1\0\1\23\1\0\6\23\25\0\2\23\1\u021e"+
    "\27\23\1\0\1\23\2\0\3\23\1\0\12\23\7\0"+
    "\1\23\1\0\1\23\1\0\6\23\25\0\3\23\1\u021f"+
    "\26\23\1\0\1\23\2\0\3\23\1\0\12\23\7\0"+
    "\1\23\1\0\1\23\1\0\6\23\25\0\3\23\1\u0220"+
    "\26\23\1\0\1\23\2\0\3\23\1\0\12\23\7\0"+
    "\1\23\1\0\1\23\1\0\6\23\25\0\32\23\1\0"+
    "\1\23\2\0\3\23\1\0\1\23\1\u0221\10\23\7\0"+
    "\1\23\1\0\1\23\1\0\6\23\25\0\32\23\1\0"+
    "\1\23\2\0\3\23\1\0\5\23\1\u0222\4\23\6\0"+
    "\1\342\1\u0146\1\342\1\u0146\1\342\6\u0146\1\u014e\2\342"+
    "\1\u01c0\1\u014e\20\342\32\u0146\1\342\1\u0146\2\342\3\u0146"+
    "\1\342\12\u0146\6\342\3\333\1\u014b\2\333\3\u014b\1\333"+
    "\1\u014b\1\336\3\333\1\336\20\333\32\u014b\1\333\1\u014b"+
    "\2\333\3\u014b\1\333\12\u014b\6\333\3\u0147\1\u0223\2\u0147"+
    "\3\u0223\1\u0147\1\u0223\25\u0147\32\u0223\1\u0147\1\u0223\2\u0147"+
    "\3\u0223\1\u0147\12\u0223\6\u0147\3\333\1\u014b\2\333\3\u014b"+
    "\1\333\1\u014b\1\u01be\3\333\1\u01be\20\333\32\u014b\1\333"+
    "\1\u014b\2\333\3\u014b\1\333\12\u014b\6\333\3\331\1\332"+
    "\2\331\3\332\1\331\1\332\1\336\2\331\1\333\1\336"+
    "\20\331\32\332\1\331\1\332\2\331\3\332\1\331\12\332"+
    "\6\331\46\0\1\u0224\144\0\1\u0225\76\0\1\u0226\131\0"+
    "\1\u0227\121\0\1\u0228\121\0\1\u0229\121\0\1\u022a\120\0"+
    "\1\u022b\124\0\1\u022c\123\0\1\u022d\105\0\1\u022e\132\0"+
    "\1\u022f\110\0\1\u0230\134\0\1\u0231\106\0\1\u0232\130\0"+
    "\1\u0233\114\0\1\u0234\141\0\1\u0235\104\0\1\u0236\116\0"+
    "\1\u0237\134\0\1\u0238\104\0\1\u0239\141\0\1\u023a\101\0"+
    "\1\u023b\63\0\1\u023c\201\0\1\u023d\117\0\1\u023e\115\0"+
    "\1\u023f\122\0\1\u0240\105\0\1\u0241\131\0\1\u0242\55\0"+
    "\1\u01e4\107\0\1\u01e6\1\0\1\u01e6\1\0\6\u01e6\6\0"+
    "\1\u0243\16\0\32\u01e6\1\0\1\u01e6\2\0\3\u01e6\1\0"+
    "\12\u01e6\7\0\1\u01e7\1\0\1\u01e7\1\0\6\u01e7\25\0"+
    "\32\u01e7\1\0\1\u01e7\2\0\3\u01e7\1\0\12\u01e7\2\0"+
    "\1\u0243\32\0\1\u0244\73\0\1\23\1\0\1\23\1\0"+
    "\6\23\25\0\11\23\1\u0245\20\23\1\0\1\23\2\0"+
    "\3\23\1\0\12\23\7\0\1\23\1\0\1\23\1\0"+
    "\6\23\25\0\15\23\1\u0246\14\23\1\0\1\23\2\0"+
    "\3\23\1\0\12\23\7\0\1\23\1\0\1\23\1\0"+
    "\6\23\25\0\20\23\1\u0247\11\23\1\0\1\23\2\0"+
    "\3\23\1\0\12\23\7\0\1\23\1\0\1\23\1\0"+
    "\6\23\25\0\7\23\1\u0248\22\23\1\0\1\23\2\0"+
    "\3\23\1\0\12\23\7\0\1\23\1\0\1\23\1\0"+
    "\6\23\25\0\7\23\1\u0249\22\23\1\0\1\23\2\0"+
    "\3\23\1\0\12\23\7\0\1\23\1\0\1\23\1\0"+
    "\6\23\25\0\12\23\1\u024a\17\23\1\0\1\23\2\0"+
    "\3\23\1\0\12\23\7\0\1\23\1\0\1\23\1\0"+
    "\6\23\25\0\12\23\1\u024b\17\23\1\0\1\23\2\0"+
    "\3\23\1\0\12\23\7\0\1\23\1\0\1\23\1\0"+
    "\6\23\25\0\11\23\1\u024c\20\23\1\0\1\23\2\0"+
    "\3\23\1\0\12\23\7\0\1\23\1\0\1\23\1\0"+
    "\6\23\25\0\22\23\1\u024d\7\23\1\0\1\23\2\0"+
    "\3\23\1\0\12\23\7\0\1\23\1\0\1\23\1\0"+
    "\6\23\25\0\14\23\1\u024e\15\23\1\0\1\23\2\0"+
    "\3\23\1\0\12\23\7\0\1\23\1\0\1\23\1\0"+
    "\6\23\25\0\31\23\1\u024f\1\0\1\23\2\0\3\23"+
    "\1\0\12\23\7\0\1\23\1\0\1\23\1\0\6\23"+
    "\25\0\25\23\1\u0250\4\23\1\0\1\23\2\0\3\23"+
    "\1\0\12\23\7\0\1\23\1\0\1\23\1\0\6\23"+
    "\25\0\20\23\1\u0251\11\23\1\0\1\23\2\0\3\23"+
    "\1\0\12\23\7\0\1\23\1\0\1\23\1\0\6\23"+
    "\25\0\7\23\1\u0252\22\23\1\0\1\23\2\0\3\23"+
    "\1\0\12\23\7\0\1\23\1\0\1\23\1\0\6\23"+
    "\25\0\15\23\1\u0253\14\23\1\0\1\23\2\0\3\23"+
    "\1\0\12\23\7\0\1\23\1\0\1\23\1\0\6\23"+
    "\25\0\30\23\1\u0254\1\23\1\0\1\23\2\0\3\23"+
    "\1\0\12\23\7\0\1\23\1\0\1\23\1\0\6\23"+
    "\25\0\14\23\1\u0255\15\23\1\0\1\23\2\0\3\23"+
    "\1\0\12\23\7\0\1\23\1\0\1\23\1\0\3\23"+
    "\1\u0256\2\23\25\0\32\23\1\0\1\23\2\0\3\23"+
    "\1\0\12\23\7\0\1\23\1\0\1\23\1\0\6\23"+
    "\25\0\15\23\1\u0257\14\23\1\0\1\23\2\0\3\23"+
    "\1\0\12\23\7\0\1\23\1\0\1\23\1\0\6\23"+
    "\25\0\23\23\1\u0258\6\23\1\0\1\23\2\0\3\23"+
    "\1\0\12\23\7\0\1\23\1\0\1\23\1\0\6\23"+
    "\25\0\14\23\1\u0259\15\23\1\0\1\23\2\0\3\23"+
    "\1\0\12\23\7\0\1\23\1\0\1\23\1\0\6\23"+
    "\25\0\20\23\1\u025a\11\23\1\0\1\23\2\0\3\23"+
    "\1\0\12\23\7\0\1\23\1\0\1\23\1\0\6\23"+
    "\25\0\22\23\1\u025b\7\23\1\0\1\23\2\0\3\23"+
    "\1\0\12\23\7\0\1\23\1\0\1\23\1\0\6\23"+
    "\25\0\25\23\1\u025c\4\23\1\0\1\23\2\0\3\23"+
    "\1\0\12\23\7\0\1\23\1\0\1\23\1\0\6\23"+
    "\25\0\15\23\1\u025d\14\23\1\0\1\23\2\0\3\23"+
    "\1\0\12\23\7\0\1\23\1\0\1\23\1\0\6\23"+
    "\25\0\10\23\1\u025e\21\23\1\0\1\23\2\0\3\23"+
    "\1\0\12\23\7\0\1\23\1\0\1\23\1\0\6\23"+
    "\25\0\15\23\1\u025f\14\23\1\0\1\23\2\0\3\23"+
    "\1\0\12\23\7\0\1\23\1\0\1\23\1\0\6\23"+
    "\25\0\10\23\1\u0260\21\23\1\0\1\23\2\0\3\23"+
    "\1\0\12\23\66\0\1\u0213\55\0\1\u0214\31\0\1\u0261"+
    "\26\0\1\u0216\105\0\1\u0214\54\0\1\u0214\60\0\1\u0216"+
    "\113\0\1\u0262\117\0\1\u0263\104\0\1\u0214\126\0\1\u0218"+
    "\120\0\1\u0264\46\0\1\23\1\0\1\u0265\1\0\6\23"+
    "\25\0\32\23\1\0\1\23\2\0\3\23\1\0\12\23"+
    "\7\0\1\23\1\0\1\23\1\0\6\23\25\0\32\23"+
    "\1\0\1\23\2\0\1\23\1\u0266\1\23\1\0\12\23"+
    "\7\0\1\23\1\0\1\23\1\0\6\23\25\0\10\23"+
    "\1\u0267\21\23\1\0\1\23\2\0\3\23\1\0\12\23"+
    "\7\0\1\23\1\0\1\23\1\0\6\23\25\0\32\23"+
    "\1\0\1\23\2\0\3\23\1\0\2\23\1\u0268\7\23"+
    "\7\0\1\23\1\0\1\u0269\1\0\6\23\25\0\32\23"+
    "\1\0\1\23\2\0\3\23\1\0\12\23\7\0\1\23"+
    "\1\0\1\23\1\0\6\23\25\0\32\23\1\0\1\23"+
    "\2\0\3\23\1\0\1\u026a\11\23\7\0\1\23\1\0"+
    "\1\u026b\1\0\6\23\25\0\32\23\1\0\1\23\2\0"+
    "\3\23\1\0\12\23\7\0\1\23\1\0\1\23\1\0"+
    "\6\23\25\0\32\23\1\0\1\23\2\0\3\23\1\0"+
    "\10\23\1\u026c\1\23\6\0\1\u01bd\1\u026d\1\u01bd\1\u026d"+
    "\1\u01bd\6\u026d\1\336\2\u01bd\1\u026e\1\336\20\u01bd\32\u026d"+
    "\1\u01bd\1\u026d\2\u01bd\3\u026d\1\u01bd\12\u026d\6\u01bd\70\0"+
    "\1\u026f\121\0\1\u0270\111\0\1\u0271\121\0\1\u0272\121\0"+
    "\1\u0273\125\0\1\u0274\103\0\1\u0275\140\0\1\u0276\113\0"+
    "\1\u0277\121\0\1\u0278\122\0\1\u0279\130\0\1\u027a\100\0"+
    "\1\u027b\122\0\1\u027c\134\0\1\u027d\117\0\1\u027e\121\0"+
    "\1\u027f\117\0\1\u0280\122\0\1\u0281\116\0\1\u0282\127\0"+
    "\1\u0283\105\0\1\u0284\135\0\1\u0285\130\0\1\u0286\106\0"+
    "\1\u0287\120\0\1\u0288\113\0\1\u0289\65\0\1\u01e4\3\0"+
    "\1\u01e5\103\0\1\23\1\0\1\23\1\0\6\23\25\0"+
    "\17\23\1\u028a\12\23\1\0\1\23\2\0\3\23\1\0"+
    "\12\23\7\0\1\23\1\0\1\23\1\0\6\23\25\0"+
    "\25\23\1\u028b\4\23\1\0\1\23\2\0\3\23\1\0"+
    "\12\23\7\0\1\23\1\0\1\23\1\0\6\23\25\0"+
    "\6\23\1\u028c\23\23\1\0\1\23\2\0\3\23\1\0"+
    "\12\23\7\0\1\23\1\0\1\23\1\0\6\23\25\0"+
    "\10\23\1\u028d\21\23\1\0\1\23\2\0\3\23\1\0"+
    "\12\23\7\0\1\23\1\0\1\23\1\0\6\23\25\0"+
    "\25\23\1\u028e\4\23\1\0\1\23\2\0\3\23\1\0"+
    "\12\23\7\0\1\23\1\0\1\23\1\0\6\23\25\0"+
    "\22\23\1\u028f\7\23\1\0\1\23\2\0\3\23\1\0"+
    "\12\23\7\0\1\23\1\0\1\23\1\0\6\23\25\0"+
    "\6\23\1\u0290\23\23\1\0\1\23\2\0\3\23\1\0"+
    "\12\23\7\0\1\23\1\0\1\23\1\0\6\23\25\0"+
    "\11\23\1\u0291\20\23\1\0\1\23\2\0\3\23\1\0"+
    "\12\23\7\0\1\23\1\0\1\23\1\0\6\23\25\0"+
    "\15\23\1\u0292\14\23\1\0\1\23\2\0\3\23\1\0"+
    "\12\23\7\0\1\23\1\0\1\23\1\0\6\23\25\0"+
    "\6\23\1\u0293\23\23\1\0\1\23\2\0\3\23\1\0"+
    "\12\23\7\0\1\23\1\0\1\23\1\0\6\23\25\0"+
    "\10\23\1\u0294\21\23\1\0\1\23\2\0\3\23\1\0"+
    "\12\23\7\0\1\23\1\0\1\23\1\0\6\23\25\0"+
    "\6\23\1\u0295\23\23\1\0\1\23\2\0\3\23\1\0"+
    "\12\23\7\0\1\23\1\0\1\23\1\0\6\23\25\0"+
    "\16\23\1\u0296\13\23\1\0\1\23\2\0\3\23\1\0"+
    "\12\23\7\0\1\23\1\0\1\23\1\0\6\23\25\0"+
    "\23\23\1\u0297\6\23\1\0\1\23\2\0\3\23\1\0"+
    "\12\23\7\0\1\23\1\0\1\23\1\0\6\23\25\0"+
    "\22\23\1\u0298\7\23\1\0\1\23\2\0\3\23\1\0"+
    "\12\23\7\0\1\23\1\0\1\23\1\0\6\23\25\0"+
    "\13\23\1\u0299\16\23\1\0\1\23\2\0\3\23\1\0"+
    "\12\23\7\0\1\23\1\0\1\23\1\0\6\23\25\0"+
    "\25\23\1\u029a\4\23\1\0\1\23\2\0\3\23\1\0"+
    "\12\23\7\0\1\23\1\0\1\23\1\0\6\23\25\0"+
    "\6\23\1\u029b\23\23\1\0\1\23\2\0\3\23\1\0"+
    "\12\23\7\0\1\23\1\0\1\23\1\0\6\23\25\0"+
    "\15\23\1\u029c\14\23\1\0\1\23\2\0\3\23\1\0"+
    "\12\23\7\0\1\23\1\0\1\23\1\0\6\23\25\0"+
    "\6\23\1\u029d\23\23\1\0\1\23\2\0\3\23\1\0"+
    "\12\23\7\0\1\23\1\0\1\23\1\0\6\23\25\0"+
    "\10\23\1\u029e\21\23\1\0\1\23\2\0\3\23\1\0"+
    "\12\23\70\0\1\u029f\105\0\1\u02a0\121\0\1\u0214\142\0"+
    "\1\u0214\33\0\1\23\1\0\1\23\1\0\6\23\25\0"+
    "\32\23\1\0\1\23\2\0\3\23\1\0\2\23\1\u02a1"+
    "\7\23\7\0\1\23\1\0\1\23\1\0\6\23\25\0"+
    "\32\23\1\0\1\23\2\0\1\23\1\u02a2\1\23\1\0"+
    "\12\23\7\0\1\23\1\0\1\23\1\0\6\23\25\0"+
    "\32\23\1\0\1\23\2\0\1\23\1\u02a3\1\23\1\0"+
    "\12\23\7\0\1\23\1\0\1\23\1\0\6\23\25\0"+
    "\32\23\1\0\1\23\2\0\3\23\1\0\2\23\1\u02a4"+
    "\7\23\7\0\1\23\1\0\1\23\1\0\6\23\25\0"+
    "\32\23\1\0\1\23\2\0\1\23\1\u02a5\1\23\1\0"+
    "\12\23\7\0\1\23\1\0\1\23\1\0\6\23\25\0"+
    "\32\23\1\0\1\23\2\0\3\23\1\0\5\23\1\u02a6"+
    "\4\23\7\0\1\23\1\0\1\23\1\0\6\23\25\0"+
    "\32\23\1\0\1\23\2\0\1\23\1\u02a7\1\23\1\0"+
    "\12\23\7\0\1\23\1\0\1\23\1\0\6\23\25\0"+
    "\1\u02a8\31\23\1\0\1\23\2\0\3\23\1\0\12\23"+
    "\6\0\1\u0147\1\u0223\1\u0147\1\u0223\1\u0147\6\u0223\1\u014e"+
    "\2\u0147\1\u02a9\1\u014e\20\u0147\32\u0223\1\u0147\1\u0223\2\u0147"+
    "\3\u0223\1\u0147\12\u0223\6\u0147\13\0\1\336\3\0\1\336"+
    "\152\0\1\u02aa\136\0\1\u02ab\110\0\1\u02ac\113\0\1\u02ad"+
    "\122\0\1\u02ae\131\0\1\u02af\117\0\1\u02b0\122\0\1\u02b1"+
    "\133\0\1\u02b2\100\0\1\u02b3\130\0\1\u02b4\120\0\1\u02b5"+
    "\121\0\1\u02b6\120\0\1\u02b7\127\0\1\u02b8\117\0\1\u02b9"+
    "\120\0\1\u02ba\121\0\1\u02bb\127\0\1\u02bc\114\0\1\u02bd"+
    "\130\0\1\u02be\103\0\1\u02bf\126\0\1\u02c0\44\0\1\23"+
    "\1\0\1\23\1\0\6\23\25\0\22\23\1\u02c1\7\23"+
    "\1\0\1\23\2\0\3\23\1\0\12\23\7\0\1\23"+
    "\1\0\1\23\1\0\6\23\25\0\22\23\1\u02c2\7\23"+
    "\1\0\1\23\2\0\3\23\1\0\12\23\7\0\1\23"+
    "\1\0\1\23\1\0\6\23\25\0\15\23\1\u02c3\14\23"+
    "\1\0\1\23\2\0\3\23\1\0\12\23\7\0\1\23"+
    "\1\0\1\23\1\0\6\23\25\0\6\23\1\u02c4\23\23"+
    "\1\0\1\23\2\0\3\23\1\0\12\23\7\0\1\23"+
    "\1\0\1\23\1\0\6\23\25\0\15\23\1\u02c5\14\23"+
    "\1\0\1\23\2\0\3\23\1\0\12\23\7\0\1\23"+
    "\1\0\1\23\1\0\6\23\25\0\32\23\1\0\1\23"+
    "\2\0\1\23\1\u02c6\1\23\1\0\12\23\7\0\1\23"+
    "\1\0\1\23\1\0\6\23\25\0\16\23\1\u02c7\13\23"+
    "\1\0\1\23\2\0\3\23\1\0\12\23\7\0\1\23"+
    "\1\0\1\23\1\0\6\23\25\0\6\23\1\u02c8\23\23"+
    "\1\0\1\23\2\0\3\23\1\0\12\23\7\0\1\23"+
    "\1\0\1\23\1\0\6\23\25\0\14\23\1\u02c9\15\23"+
    "\1\0\1\23\2\0\3\23\1\0\12\23\7\0\1\23"+
    "\1\0\1\23\1\0\6\23\25\0\14\23\1\u02ca\15\23"+
    "\1\0\1\23\2\0\3\23\1\0\12\23\7\0\1\23"+
    "\1\0\1\23\1\0\6\23\25\0\15\23\1\u02cb\14\23"+
    "\1\0\1\23\2\0\3\23\1\0\12\23\7\0\1\23"+
    "\1\0\1\23\1\0\6\23\25\0\6\23\1\u02cc\23\23"+
    "\1\0\1\23\2\0\3\23\1\0\12\23\7\0\1\23"+
    "\1\0\1\23\1\0\6\23\25\0\6\23\1\u02cd\23\23"+
    "\1\0\1\23\2\0\3\23\1\0\12\23\7\0\1\23"+
    "\1\0\1\23\1\0\6\23\25\0\10\23\1\u02ce\21\23"+
    "\1\0\1\23\2\0\3\23\1\0\12\23\7\0\1\23"+
    "\1\0\1\23\1\0\6\23\25\0\6\23\1\u02cf\23\23"+
    "\1\0\1\23\2\0\3\23\1\0\12\23\62\0\1\u0214"+
    "\125\0\1\u0214\42\0\1\23\1\0\1\23\1\0\6\23"+
    "\25\0\32\23\1\0\1\23\2\0\3\23\1\0\11\23"+
    "\1\u02d0\7\0\1\23\1\0\1\23\1\0\6\23\25\0"+
    "\15\23\1\u02d1\14\23\1\0\1\23\2\0\3\23\1\0"+
    "\12\23\7\0\1\23\1\0\1\23\1\0\6\23\25\0"+
    "\32\23\1\0\1\23\2\0\1\23\1\u02d2\1\23\1\0"+
    "\12\23\7\0\1\23\1\0\1\23\1\0\6\23\25\0"+
    "\32\23\1\0\1\23\2\0\1\23\1\u02d3\1\23\1\0"+
    "\12\23\7\0\1\23\1\0\1\23\1\0\6\23\25\0"+
    "\32\23\1\0\1\23\2\0\3\23\1\0\6\23\1\u02d4"+
    "\3\23\7\0\1\23\1\0\1\23\1\0\6\23\25\0"+
    "\32\23\1\0\1\23\2\0\1\23\1\u02d5\1\23\1\0"+
    "\12\23\7\0\1\23\1\0\1\23\1\0\6\23\25\0"+
    "\4\23\1\u02d6\25\23\1\0\1\23\2\0\3\23\1\0"+
    "\12\23\6\0\13\u01bd\1\336\2\u01bd\1\0\1\336\102\u01bd"+
    "\47\0\1\u02d7\120\0\1\u02d8\135\0\1\u02d9\121\0\1\u02da"+
    "\121\0\1\u02db\112\0\1\u02dc\130\0\1\u02dd\126\0\1\u02de"+
    "\112\0\1\u02df\134\0\1\u02e0\114\0\1\u02e1\110\0\1\u02e2"+
    "\112\0\1\u02e3\123\0\1\u02e4\117\0\1\u02e5\127\0\1\u02e6"+
    "\46\0\1\23\1\0\1\23\1\0\6\23\25\0\20\23"+
    "\1\u02e7\11\23\1\0\1\23\2\0\3\23\1\0\12\23"+
    "\7\0\1\23\1\0\1\23\1\0\6\23\25\0\15\23"+
    "\1\u02e8\14\23\1\0\1\23\2\0\3\23\1\0\12\23"+
    "\7\0\1\23\1\0\1\23\1\0\6\23\25\0\23\23"+
    "\1\u02e9\6\23\1\0\1\23\2\0\3\23\1\0\12\23"+
    "\7\0\1\23\1\0\1\23\1\0\6\23\25\0\6\23"+
    "\1\u02ea\23\23\1\0\1\23\2\0\3\23\1\0\12\23"+
    "\7\0\1\23\1\0\1\23\1\0\6\23\25\0\16\23"+
    "\1\u02eb\13\23\1\0\1\23\2\0\3\23\1\0\12\23"+
    "\7\0\1\23\1\0\1\23\1\0\6\23\25\0\12\23"+
    "\1\u02ec\17\23\1\0\1\23\2\0\3\23\1\0\12\23"+
    "\7\0\1\23\1\0\1\23\1\0\6\23\25\0\16\23"+
    "\1\u02ed\13\23\1\0\1\23\2\0\3\23\1\0\12\23"+
    "\7\0\1\23\1\0\1\23\1\0\6\23\25\0\10\23"+
    "\1\u02ee\21\23\1\0\1\23\2\0\3\23\1\0\12\23"+
    "\7\0\1\23\1\0\1\23\1\0\6\23\25\0\6\23"+
    "\1\u02ef\23\23\1\0\1\23\2\0\3\23\1\0\12\23"+
    "\7\0\1\23\1\0\1\23\1\0\6\23\25\0\11\23"+
    "\1\u02f0\20\23\1\0\1\23\2\0\3\23\1\0\12\23"+
    "\7\0\1\23\1\0\1\23\1\0\6\23\25\0\2\23"+
    "\1\u02f1\27\23\1\0\1\23\2\0\3\23\1\0\12\23"+
    "\7\0\1\23\1\0\1\23\1\0\6\23\25\0\16\23"+
    "\1\u02f2\13\23\1\0\1\23\2\0\3\23\1\0\12\23"+
    "\7\0\1\23\1\0\1\23\1\0\6\23\25\0\32\23"+
    "\1\0\1\23\2\0\1\23\1\u02f3\1\23\1\0\12\23"+
    "\7\0\1\23\1\0\1\23\1\0\6\23\25\0\1\u02f4"+
    "\31\23\1\0\1\23\2\0\3\23\1\0\12\23\7\0"+
    "\1\23\1\0\1\23\1\0\6\23\25\0\32\23\1\0"+
    "\1\23\2\0\1\23\1\u02f5\1\23\1\0\12\23\64\0"+
    "\1\u02f6\130\0\1\u02f7\121\0\1\u02f8\104\0\1\u02f9\131\0"+
    "\1\u02fa\116\0\1\u02fb\127\0\1\u02fc\117\0\1\u02fd\122\0"+
    "\1\u02fe\121\0\1\u02ff\107\0\1\u0300\132\0\1\u0301\41\0"+
    "\1\23\1\0\1\23\1\0\6\23\25\0\6\23\1\u0302"+
    "\23\23\1\0\1\23\2\0\3\23\1\0\12\23\7\0"+
    "\1\23\1\0\1\23\1\0\6\23\25\0\23\23\1\u0303"+
    "\6\23\1\0\1\23\2\0\3\23\1\0\12\23\7\0"+
    "\1\23\1\0\1\23\1\0\6\23\25\0\14\23\1\u0304"+
    "\15\23\1\0\1\23\2\0\3\23\1\0\12\23\7\0"+
    "\1\23\1\0\1\23\1\0\6\23\25\0\12\23\1\u0305"+
    "\17\23\1\0\1\23\2\0\3\23\1\0\12\23\7\0"+
    "\1\23\1\0\1\23\1\0\6\23\25\0\17\23\1\u0306"+
    "\12\23\1\0\1\23\2\0\3\23\1\0\12\23\7\0"+
    "\1\23\1\0\1\23\1\0\6\23\25\0\32\23\1\0"+
    "\1\23\2\0\3\23\1\0\1\u0307\11\23\7\0\1\23"+
    "\1\0\1\23\1\0\6\23\25\0\31\23\1\u0308\1\0"+
    "\1\23\2\0\3\23\1\0\12\23\7\0\1\23\1\0"+
    "\1\23\1\0\6\23\25\0\3\23\1\u0309\26\23\1\0"+
    "\1\23\2\0\3\23\1\0\12\23\7\0\1\23\1\0"+
    "\1\23\1\0\6\23\25\0\32\23\1\0\1\23\2\0"+
    "\1\23\1\u030a\1\23\1\0\12\23\62\0\1\u030b\113\0"+
    "\1\u030c\130\0\1\u030d\112\0\1\u030e\123\0\1\u030f\131\0"+
    "\1\u0310\130\0\1\u0311\33\0\1\23\1\0\1\23\1\0"+
    "\6\23\25\0\15\23\1\u0312\14\23\1\0\1\23\2\0"+
    "\3\23\1\0\12\23\7\0\1\23\1\0\1\u0313\1\0"+
    "\6\23\25\0\32\23\1\0\1\23\2\0\3\23\1\0"+
    "\12\23\7\0\1\23\1\0\1\23\1\0\6\23\25\0"+
    "\30\23\1\u0314\1\23\1\0\1\23\2\0\3\23\1\0"+
    "\12\23\7\0\1\23\1\0\1\23\1\0\6\23\25\0"+
    "\32\23\1\0\1\23\2\0\1\23\1\u0315\1\23\1\0"+
    "\12\23\57\0\1\u0316\116\0\1\u0317\121\0\1\u0318\54\0"+
    "\1\23\1\0\1\23\1\0\6\23\25\0\6\23\1\u0319"+
    "\23\23\1\0\1\23\2\0\3\23\1\0\12\23\7\0"+
    "\1\23\1\0\1\23\1\0\6\23\25\0\32\23\1\0"+
    "\1\23\2\0\1\23\1\u031a\1\23\1\0\12\23\7\0"+
    "\1\23\1\0\1\23\1\0\6\23\25\0\7\23\1\u031b"+
    "\22\23\1\0\1\23\2\0\3\23\1\0\12\23\7\0"+
    "\1\23\1\0\1\23\1\0\6\23\25\0\32\23\1\0"+
    "\1\23\2\0\1\23\1\u031c\1\23\1\0\12\23\7\0"+
    "\1\23\1\0\1\23\1\0\6\23\25\0\32\23\1\0"+
    "\1\23\2\0\1\23\1\u031d\1\23\1\0\12\23\7\0"+
    "\1\23\1\0\1\23\1\0\6\23\25\0\25\23\1\u031e"+
    "\4\23\1\0\1\23\2\0\3\23\1\0\12\23\7\0"+
    "\1\23\1\0\1\23\1\0\6\23\25\0\6\23\1\u031f"+
    "\23\23\1\0\1\23\2\0\3\23\1\0\12\23\7\0"+
    "\1\23\1\0\1\23\1\0\6\23\25\0\20\23\1\u0320"+
    "\11\23\1\0\1\23\2\0\3\23\1\0\12\23\6\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[52234];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\10\4\0\2\1\10\0\1\11\7\1\2\11\2\1"+
    "\3\11\40\1\1\11\1\1\1\11\2\1\1\11\6\1"+
    "\1\11\15\1\1\0\1\1\1\11\3\1\1\11\1\1"+
    "\1\11\2\1\1\11\2\1\1\11\3\1\1\11\1\1"+
    "\1\11\1\1\1\11\1\1\1\0\3\1\2\11\3\0"+
    "\1\1\1\0\2\1\2\0\1\11\2\0\55\1\1\11"+
    "\1\1\12\0\1\1\4\0\2\1\3\11\1\1\3\0"+
    "\1\1\1\11\1\1\1\11\3\0\10\1\5\0\1\11"+
    "\4\0\1\11\2\1\2\11\20\0\1\11\1\0\2\1"+
    "\1\0\2\1\2\0\57\1\12\0\7\1\2\11\1\1"+
    "\1\11\1\1\3\0\1\1\4\0\1\1\40\0\1\11"+
    "\1\0\2\1\3\0\1\1\1\0\61\1\12\0\10\1"+
    "\3\0\1\11\21\0\1\11\20\0\1\11\2\1\1\11"+
    "\1\1\3\0\50\1\5\0\1\11\4\0\10\1\6\0"+
    "\1\11\1\0\1\11\3\0\1\11\1\1\11\0\1\11"+
    "\12\0\34\1\4\0\10\1\11\0\1\11\4\0\1\11"+
    "\12\0\1\11\1\0\1\11\1\0\25\1\2\0\10\1"+
    "\4\0\1\11\1\0\1\11\5\0\1\1\1\0\1\11"+
    "\1\0\2\11\1\0\1\11\2\0\1\11\1\0\26\1"+
    "\1\0\1\11\12\0\1\11\1\0\2\11\17\1\1\0"+
    "\2\11\4\0\1\11\2\0\2\11\11\1\1\11\2\0"+
    "\3\11\1\0\4\1\3\11\10\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[800];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
    public PhpLexer(int state){
        initialize(state);
    }
    public void reset(char array[], int offset, int length) {
        this.zzBuffer = array;
        this.zzCurrentPos = offset;
        this.zzMarkedPos = offset;
        this.zzPushbackPos = offset;
        this.yychar = offset;
        this.zzEndRead = offset + length;
        this.zzStartRead = offset;
        this.zzAtEOF = zzCurrentPos >= zzEndRead;
        this.firstPos = offset;
    }

    public void reset(java.io.Reader  reader, char[] buffer, int[] parameters){
    	this.zzReader = reader;
    	this.zzBuffer = buffer;
    	this.zzMarkedPos = parameters[0];
    	this.zzPushbackPos = parameters[1];
    	this.zzCurrentPos = parameters[2];
    	this.zzStartRead = parameters[3];
    	this.zzEndRead = parameters[4];
    	this.yyline = parameters[5];  
    	initialize(parameters[6]);
    }

    protected boolean isHeredocState(int state){
    	    	return state == ST_PHP_HEREDOC || state == ST_PHP_END_HEREDOC || state == ST_PHP_NOWDOC || state == ST_PHP_END_NOWDOC;
    }
    
    public int[] getParamenters(){
    	return new int[]{zzMarkedPos, zzPushbackPos, zzCurrentPos, zzStartRead, zzEndRead, yyline, zzLexicalState};
    }

    protected int getZZLexicalState() {
        return zzLexicalState;
    }

    protected int getZZMarkedPos() {
        return zzMarkedPos;
    }

    protected int getZZEndRead() {
        return zzEndRead;
    }

    public char[] getZZBuffer() {
        return zzBuffer;
    }
    
    protected int getZZStartRead() {
    	return this.zzStartRead;
    }

    protected int getZZPushBackPosition() {
    	return this.zzPushbackPos;
    }

	protected void pushBack(int i) {
		yypushback(i);
	}

	// A pool of states. To avoid creation of a new state on each createMemento.
	private static final IntHashtable lexerStates = new IntHashtable(100);
	
	protected IntHashtable getLexerStates() {
		return lexerStates;
	}

 // End user code


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public PhpLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public PhpLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 186) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public String yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 112: 
          { return PHP_DECLARE;
          }
        case 163: break;
        case 88: 
          { return PHP_CLONE;
          }
        case 164: break;
        case 81: 
          { return PHP_TRAIT;
          }
        case 165: break;
        case 151: 
          { return PHP__METHOD__;
          }
        case 166: break;
        case 68: 
          { return PHP_FROM;
          }
        case 167: break;
        case 44: 
          { popState();
    pushState(ST_PHP_LOOKING_FOR_PROPERTY);
    return PHP_OBJECT_OPERATOR;
          }
        case 168: break;
        case 76: 
          { return PHP_BREAK;
          }
        case 169: break;
        case 89: 
          { return PHP_WHILE;
          }
        case 170: break;
        case 152: 
          { return PHPDOC_EXCEPTION;
          }
        case 171: break;
        case 109: 
          { return PHP_EXTENDS;
          }
        case 172: break;
        case 28: 
          { return UNKNOWN_TOKEN;
          }
        case 173: break;
        case 4: 
          { return PHP_NUMBER;
          }
        case 174: break;
        case 80: 
          { return PHP_ENDIF;
          }
        case 175: break;
        case 115: 
          { return PHP_PRIVATE;
          }
        case 176: break;
        case 99: 
          { return PHP_STATIC;
          }
        case 177: break;
        case 6: 
          { return  PHP_STRING;
          }
        case 178: break;
        case 13: 
          { if (!phpStack.isEmpty()) {
        popState();
    }
    return  PHP_CURLY_CLOSE;
          }
        case 179: break;
        case 23: 
          { popState();
	return PHP_TOKEN;
          }
        case 180: break;
        case 111: 
          { return PHP_DEFAULT;
          }
        case 181: break;
        case 114: 
          { return PHP_REQUIRE;
          }
        case 182: break;
        case 21: 
          { //the difference from the original rules comes from the fact that we took ';' out out of tokens 
	return UNKNOWN_TOKEN;
          }
        case 183: break;
        case 96: 
          { return PHPDOC_LINK;
          }
        case 184: break;
        case 148: 
          { return PHP_ENDFOREACH;
          }
        case 185: break;
        case 52: 
          { return PHP_TRY;
          }
        case 186: break;
        case 130: 
          { return PHP__LINE__;
          }
        case 187: break;
        case 63: 
          { return PHP_EXIT;
          }
        case 188: break;
        case 157: 
          { return PHPDOC_FILESOURCE;
          }
        case 189: break;
        case 128: 
          { return PHP_CALLABLE;
          }
        case 190: break;
        case 127: 
          { return PHP_CONTINUE;
          }
        case 191: break;
        case 143: 
          { return PHPDOC_TUTORIAL;
          }
        case 192: break;
        case 160: 
          { return PHP__FUNCTION__;
          }
        case 193: break;
        case 124: 
          { return PHPDOC_METHOD;
          }
        case 194: break;
        case 145: 
          { return PHPDOC_ABSTRACT;
          }
        case 195: break;
        case 156: 
          { return PHPDOC_DEPRECATED;
          }
        case 196: break;
        case 61: 
          { nowdoc = null;
	nowdoc_len = 0;
    yybegin(ST_PHP_IN_SCRIPTING);
    return PHP_HEREDOC_TAG;
          }
        case 197: break;
        case 54: 
          { return PHP_FOR;
          }
        case 198: break;
        case 150: 
          { return PHP_IMPLEMENTS;
          }
        case 199: break;
        case 45: 
          { int label_len = yylength() - 1;

    if (yytext().charAt(label_len-1)==';') {
	    label_len--;
    }

    if (label_len==heredoc_len && yytext().substring(0,label_len).equals(heredoc)) {
        heredoc=null;
        heredoc_len=0;
        yybegin(ST_PHP_IN_SCRIPTING);
        return PHP_HEREDOC_TAG;
    } else {
        return PHP_CONSTANT_ENCAPSED_STRING;
    }
          }
        case 200: break;
        case 90: 
          { return PHP_PRINT;
          }
        case 201: break;
        case 22: 
          { yypushback(1);
	popState();
	return PHP_ENCAPSED_AND_WHITESPACE;
          }
        case 202: break;
        case 86: 
          { return PHP_CONST;
          }
        case 203: break;
        case 51: 
          { popState();
    return PHP_LINE_COMMENT;
          }
        case 204: break;
        case 125: 
          { return PHP_ENDWHILE;
          }
        case 205: break;
        case 15: 
          { return PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 206: break;
        case 27: 
          { return PHP_LINE_COMMENT;
          }
        case 207: break;
        case 149: 
          { return PHP_INSTANCEOF;
          }
        case 208: break;
        case 82: 
          { return PHP_THROW;
          }
        case 209: break;
        case 106: 
          { return PHPDOC_SINCE;
          }
        case 210: break;
        case 100: 
          { return PHP_SWITCH;
          }
        case 211: break;
        case 146: 
          { return PHPDOC_PROPERTY;
          }
        case 212: break;
        case 36: 
          { return PHP_DO;
          }
        case 213: break;
        case 40: 
          { yypushback(1);
    return PHP_ENCAPSED_AND_WHITESPACE;
          }
        case 214: break;
        case 161: 
          { return PHP__NAMESPACE__;
          }
        case 215: break;
        case 159: 
          { return PHP_INCLUDE_ONCE;
          }
        case 216: break;
        case 9: 
          { pushState(ST_PHP_DOUBLE_QUOTES);
    return PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 217: break;
        case 2: 
          { return PHP_ENCAPSED_AND_WHITESPACE;
          }
        case 218: break;
        case 117: 
          { return PHPDOC_IGNORE;
          }
        case 219: break;
        case 48: 
          { return PHP_OBJECT_OPERATOR;
          }
        case 220: break;
        case 104: 
          { return PHP_PARENT;
          }
        case 221: break;
        case 49: 
          { popState();
    return PHP_COMMENT_END;
          }
        case 222: break;
        case 105: 
          { return PHPDOC_FINAL;
          }
        case 223: break;
        case 32: 
          { return PHP_VARIABLE;
          }
        case 224: break;
        case 91: 
          { return PHP_CASTING;
          }
        case 225: break;
        case 85: 
          { return PHP_UNSET;
          }
        case 226: break;
        case 17: 
          { yypushback(1);
        popState();
          }
        case 227: break;
        case 34: 
          { return PHP_CLOSETAG;
          }
        case 228: break;
        case 66: 
          { return PHP_EVAL;
          }
        case 229: break;
        case 73: 
          { return PHP_GOTO;
          }
        case 230: break;
        case 29: 
          { popState();return WHITESPACE;
          }
        case 231: break;
        case 57: 
          { yypushback(1);
	pushState(ST_PHP_VAR_OFFSET);
	return PHP_VARIABLE;
          }
        case 232: break;
        case 38: 
          { return PHP_PAAMAYIM_NEKUDOTAYIM;
          }
        case 233: break;
        case 121: 
          { return PHPDOC_AUTHOR;
          }
        case 234: break;
        case 153: 
          { return PHPDOC_NAMESPACE;
          }
        case 235: break;
        case 42: 
          { yypushback(1);
    pushState(ST_PHP_IN_SCRIPTING);
    return PHP_CURLY_OPEN;
          }
        case 236: break;
        case 103: 
          { return PHP_PUBLIC;
          }
        case 237: break;
        case 35: 
          { return PHP_IF;
          }
        case 238: break;
        case 139: 
          { return PHP_NAMESPACE;
          }
        case 239: break;
        case 47: 
          { int label_len = yylength() - 1;
	int startIndex = 0;
	String yytext = yytext();
	if (yytext.charAt(label_len - 1) == ';') {
		label_len--;
	}
	while (yytext.charAt(startIndex) == '\r'
			|| yytext.charAt(startIndex) == '\n') {
		startIndex++;
	}

	if (label_len > heredoc_len
			&& yytext.substring(startIndex, label_len).equals(
					heredoc)) {
		heredoc = null;
		heredoc_len = 0;
		yybegin(ST_PHP_IN_SCRIPTING);
		return PHP_HEREDOC_TAG;
	} else {
		yybegin(ST_PHP_HEREDOC);
		return PHP_CONSTANT_ENCAPSED_STRING;
	}
          }
        case 240: break;
        case 79: 
          { return PHP_ARRAY;
          }
        case 241: break;
        case 60: 
          { yybegin(ST_PHP_HEREDOC);
	return PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 242: break;
        case 37: 
          { return PHP_AS;
          }
        case 243: break;
        case 64: 
          { return PHP_ECHO;
          }
        case 244: break;
        case 83: 
          { return PHP_FINAL;
          }
        case 245: break;
        case 147: 
          { return PHP_ENDDECLARE;
          }
        case 246: break;
        case 77: 
          { return PHP_THIS;
          }
        case 247: break;
        case 19: 
          { popState();
    return PHP_STRING;
          }
        case 248: break;
        case 75: 
          { return PHPDOC_VAR;
          }
        case 249: break;
        case 24: 
          { return PHP_COMMENT;
          }
        case 250: break;
        case 120: 
          { return PHPDOC_RETURN;
          }
        case 251: break;
        case 108: 
          { return PHPDOC_MAGIC;
          }
        case 252: break;
        case 118: 
          { return PHPDOC_THROWS;
          }
        case 253: break;
        case 5: 
          { return PHP_TOKEN;
          }
        case 254: break;
        case 87: 
          { return PHP_CATCH;
          }
        case 255: break;
        case 16: 
          { popState();
    return PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 256: break;
        case 30: 
          { return PHP_OPERATOR;
          }
        case 257: break;
        case 93: 
          { return PHPDOC_DESC;
          }
        case 258: break;
        case 55: 
          { return PHP_NEW;
          }
        case 259: break;
        case 116: 
          { return PHP__DIR__;
          }
        case 260: break;
        case 126: 
          { return PHP_FUNCTION;
          }
        case 261: break;
        case 26: 
          { String yytext = yytext();
	switch (yytext.charAt(yytext.length() - 1)) {
		case '?':
		case '%':
		case '>':
			yypushback(1);
			break;
		default:
			popState();
	}
	 return PHP_LINE_COMMENT;
          }
        case 262: break;
        case 3: 
          { yypushback(1);
    pushState(ST_PHP_HIGHLIGHTING_ERROR);
          }
        case 263: break;
        case 113: 
          { return PHP_FOREACH;
          }
        case 264: break;
        case 132: 
          { return PHPDOC_EXAMPLE;
          }
        case 265: break;
        case 65: 
          { return PHP_ELSE;
          }
        case 266: break;
        case 123: 
          { return PHPDOC_GLOBAL;
          }
        case 267: break;
        case 71: 
          { return PHP_SELF;
          }
        case 268: break;
        case 7: 
          { return WHITESPACE;
          }
        case 269: break;
        case 101: 
          { return PHP_RETURN;
          }
        case 270: break;
        case 94: 
          { return PHPDOC_USES;
          }
        case 271: break;
        case 59: 
          { int label_len = yylength() - 1;

	if (yytext().charAt(label_len-1)==';') {
	   label_len--;
    }
    if (label_len > nowdoc_len && yytext().substring(label_len - nowdoc_len,label_len).equals(nowdoc)) {
    	//nowdoc = null;
    	//nowdoc_len = 0;
		//yypushback(1);
		//yybegin(ST_PHP_END_NOWDOC);
		
    	if ((label_len - nowdoc_len-2) >= 0 && yytext().charAt(label_len - nowdoc_len-2)=='\r') {
        	label_len = label_len-2;
    	} else {
        	label_len--;
    	}
    	yypushback(nowdoc_len + (yylength() - label_len));
    	
        yybegin(ST_PHP_END_NOWDOC);
	}
	return PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 272: break;
        case 31: 
          { pushState(ST_PHP_LOOKING_FOR_PROPERTY);
    return PHP_OBJECT_OPERATOR;
          }
        case 273: break;
        case 18: 
          { yypushback(1);
    popState();
          }
        case 274: break;
        case 33: 
          { pushState(ST_PHP_COMMENT);
    return PHP_COMMENT_START;
          }
        case 275: break;
        case 67: 
          { return PHP_TRUE;
          }
        case 276: break;
        case 136: 
          { return PHP_ENDSWITCH;
          }
        case 277: break;
        case 25: 
          { return PHPDOC_COMMENT;
          }
        case 278: break;
        case 154: 
          { return PHPDOC_COPYRIGHT;
          }
        case 279: break;
        case 144: 
          { return PHPDOC_CATEGORY;
          }
        case 280: break;
        case 97: 
          { return PHP_ENDFOR;
          }
        case 281: break;
        case 84: 
          { return PHP_FALSE;
          }
        case 282: break;
        case 140: 
          { return PHP_PROTECTED;
          }
        case 283: break;
        case 78: 
          { int bprefix = (yytext().charAt(0) != '<') ? 1 : 0;
    int startString=3+bprefix;
    
    int hereOrNowDoc_len = yylength()-bprefix-3-1-(yytext().charAt(yylength()-2)=='\r'?1:0);
    while ((yytext().charAt(startString) == ' ') || (yytext().charAt(startString) == '\t')) {
        startString++;
        hereOrNowDoc_len--;
    }
    String hereOrNowDoc = yytext().substring(startString,hereOrNowDoc_len+startString);
    if (hereOrNowDoc.charAt(0) == '\'') {
    	nowdoc = hereOrNowDoc.substring(1, hereOrNowDoc_len-1);
    	nowdoc_len = hereOrNowDoc_len - 2;
    	yybegin(ST_PHP_NOWDOC);
    }
    else if (hereOrNowDoc.charAt(0) == '"') {
    	heredoc = hereOrNowDoc.substring(1, hereOrNowDoc_len-1);
    	heredoc_len = hereOrNowDoc_len - 2;
    	yybegin(ST_PHP_HEREDOC);
    } else {
    	heredoc = hereOrNowDoc;
    	heredoc_len = hereOrNowDoc_len;
    	yybegin(ST_PHP_HEREDOC);
    }
    return PHP_HEREDOC_TAG;
          }
        case 284: break;
        case 11: 
          { pushState(ST_PHP_BACKQUOTE);
    return PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 285: break;
        case 158: 
          { return PHPDOC_SUBPACKAGE;
          }
        case 286: break;
        case 56: 
          { return PHP_VAR;
          }
        case 287: break;
        case 98: 
          { return PHP_ELSEIF;
          }
        case 288: break;
        case 110: 
          { return PHP_INCLUDE;
          }
        case 289: break;
        case 138: 
          { return PHP_INSTEADOF;
          }
        case 290: break;
        case 134: 
          { return PHPDOC_PACKAGE;
          }
        case 291: break;
        case 95: 
          { return PHPDOC_NAME;
          }
        case 292: break;
        case 72: 
          { return PHP_LIST;
          }
        case 293: break;
        case 162: 
          { return PHP_HALT_COMPILER;
          }
        case 294: break;
        case 122: 
          { return PHPDOC_ACCESS;
          }
        case 295: break;
        case 133: 
          { return PHPDOC_LICENSE;
          }
        case 296: break;
        case 70: 
          { return PHP_CASE;
          }
        case 297: break;
        case 141: 
          { return PHP__CLASS__;
          }
        case 298: break;
        case 53: 
          { return PHP_DIE;
          }
        case 299: break;
        case 131: 
          { return PHP__FILE__;
          }
        case 300: break;
        case 69: 
          { return  PHP_KEYWORD;
          }
        case 301: break;
        case 155: 
          { return PHPDOC_STATICVAR;
          }
        case 302: break;
        case 102: 
          { return PHP_GLOBAL;
          }
        case 303: break;
        case 46: 
          { int label_len = yylength() - 1;

    if (yytext().charAt(label_len-1)==';') {
	    label_len--;
    }

    if (label_len==nowdoc_len && yytext().substring(0,label_len).equals(nowdoc)) {
        nowdoc=null;
        nowdoc_len=0;
        yybegin(ST_PHP_IN_SCRIPTING);
        return PHP_HEREDOC_TAG;
    } else {
        return PHP_CONSTANT_ENCAPSED_STRING;
    }
          }
        case 304: break;
        case 137: 
          { return PHP_INTERFACE;
          }
        case 305: break;
        case 10: 
          { return PHP_NS_SEPARATOR;
          }
        case 306: break;
        case 74: 
          { return PHPDOC_SEE;
          }
        case 307: break;
        case 58: 
          { int label_len = yylength() - 1;

    if (yytext().charAt(label_len-1)==';') {
	   label_len--;
    }
    if (label_len > heredoc_len && yytext().substring(label_len - heredoc_len,label_len).equals(heredoc)) {
    	
    	if ((label_len - heredoc_len-2) >= 0 && yytext().charAt(label_len - heredoc_len-2)=='\r') {
        	label_len = label_len-2;
    	} else {
        	label_len--;
    	}
    	yypushback(heredoc_len + (yylength() - label_len));
    	
        yybegin(ST_PHP_END_HEREDOC);
    }
    return PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 308: break;
        case 41: 
          { pushState(ST_PHP_IN_SCRIPTING);
    return PHP_TOKEN;
          }
        case 309: break;
        case 92: 
          { return PHPDOC_TODO;
          }
        case 310: break;
        case 50: 
          { popState();
    return PHPDOC_COMMENT_END;
          }
        case 311: break;
        case 8: 
          { return PHP_SEMICOLON;
          }
        case 312: break;
        case 39: 
          { pushState(ST_PHP_QUOTES_AFTER_VARIABLE);
    return PHP_VARIABLE;
          }
        case 313: break;
        case 20: 
          { /* Offset could be treated as a long */
	return PHP_NUMBER;
          }
        case 314: break;
        case 119: 
          { return PHPDOC_STATIC;
          }
        case 315: break;
        case 43: 
          { yypushback(1);
	return PHP_ENCAPSED_AND_WHITESPACE;
          }
        case 316: break;
        case 62: 
          { pushState(ST_PHP_DOC_COMMENT);
    return PHPDOC_COMMENT_START;
          }
        case 317: break;
        case 107: 
          { return PHPDOC_PARAM;
          }
        case 318: break;
        case 14: 
          { pushState(ST_PHP_LINE_COMMENT);
    return PHP_LINE_COMMENT;
          }
        case 319: break;
        case 129: 
          { return PHP_ABSTRACT;
          }
        case 320: break;
        case 142: 
          { return PHPDOC_INTERNAL;
          }
        case 321: break;
        case 12: 
          { return PHP_CURLY_OPEN;
          }
        case 322: break;
        case 1: 
          { if(heredoc!=null&&yytext().startsWith(heredoc)){
		String text = yytext();
		if(heredoc_len < text.length() && (text.charAt(heredoc_len) == '\r'
			|| text.charAt(heredoc_len) == '\n'|| text.charAt(heredoc_len) == ';')){
			yypushback(yylength()-heredoc_len-1);
	        heredoc=null;
	        heredoc_len=0;
	        yybegin(ST_PHP_IN_SCRIPTING);
	        return PHP_HEREDOC_TAG;
		}
	}
	return PHP_ENCAPSED_AND_WHITESPACE;
          }
        case 323: break;
        case 135: 
          { return PHPDOC_VERSION;
          }
        case 324: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
