/* The following code was generated by JFlex 1.4.1 on 9/5/13 3:16 PM */

/*******************************************************************************
 * Copyright (c) 2006 Zend Corporation and IBM Corporation.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Zend and IBM - Initial implementation
 *******************************************************************************/

package org.eclipse.php.internal.core.ast.scanner.php4;

import org.eclipse.php.internal.core.ast.nodes.AST;
import java.util.LinkedList;
import java.util.List;

import org.eclipse.php.internal.core.ast.nodes.Comment;
import java_cup.sym;
import java_cup.runtime.Symbol;
import org.eclipse.php.internal.core.ast.scanner.StateStack;
import org.eclipse.php.internal.core.ast.nodes.IDocumentorLexer;
import org.eclipse.php.internal.core.PHPVersion;



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 9/5/13 3:16 PM from the specification file
 * <tt>ast_scanner.flex</tt>
 */
public class PhpAstLexer implements org.eclipse.php.internal.core.ast.scanner.AstLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int ST_DOCBLOCK = 18;
  public static final int ST_IN_SCRIPTING = 2;
  public static final int ST_LOOKING_FOR_PROPERTY = 12;
  public static final int ST_SINGLE_QUOTE = 6;
  public static final int ST_ONE_LINE_COMMENT = 20;
  public static final int ST_COMMENT = 16;
  public static final int ST_BACKQUOTE = 8;
  public static final int ST_DOUBLE_QUOTES = 4;
  public static final int YYINITIAL = 0;
  public static final int ST_HEREDOC = 10;
  public static final int ST_LOOKING_FOR_VARNAME = 14;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  6,  7,  7,  8,  8, 
     9,  9, 10, 10, 11, 11
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\12\1\14\2\0\1\11\22\0\1\12\1\52\1\76\1\75"+
    "\1\67\1\56\1\57\1\13\1\41\1\43\1\54\1\4\1\63\1\35"+
    "\1\2\1\55\1\5\7\101\2\1\1\37\1\62\1\53\1\51\1\36"+
    "\1\70\1\71\1\32\1\7\1\23\1\17\1\3\1\20\1\42\1\31"+
    "\1\15\1\45\1\33\1\27\1\50\1\22\1\24\1\34\1\47\1\26"+
    "\1\25\1\16\1\21\1\40\1\30\1\6\1\44\1\10\1\64\1\77"+
    "\1\65\1\61\1\46\1\100\1\32\1\7\1\23\1\17\1\3\1\20"+
    "\1\42\1\31\1\15\1\45\1\33\1\27\1\50\1\22\1\24\1\34"+
    "\1\47\1\26\1\74\1\16\1\21\1\40\1\30\1\6\1\44\1\10"+
    "\1\72\1\60\1\73\1\66\201\10\uff00\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\14\0\2\1\1\2\1\3\1\4\1\5\1\6\1\3"+
    "\3\5\1\7\1\10\15\5\1\11\1\12\1\13\1\5"+
    "\1\14\1\15\1\5\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\44\1\45\1\34\1\46\1\47"+
    "\1\50\1\2\2\51\1\52\1\2\1\51\1\2\1\53"+
    "\1\45\1\51\1\2\1\5\1\54\1\55\1\56\1\57"+
    "\1\7\1\60\3\7\3\61\2\60\1\0\1\1\1\62"+
    "\1\0\1\63\5\5\1\64\1\65\1\0\2\5\1\0"+
    "\1\66\1\0\1\67\3\5\1\70\7\5\1\71\6\5"+
    "\1\72\2\5\1\73\1\74\1\75\1\76\1\77\1\100"+
    "\1\5\12\0\1\5\1\101\1\102\2\103\1\104\1\105"+
    "\1\0\1\106\1\107\1\110\1\111\1\112\1\113\1\114"+
    "\1\115\1\116\1\117\1\120\3\0\1\74\1\121\1\122"+
    "\1\123\1\124\1\125\1\124\1\125\1\0\2\126\1\0"+
    "\1\127\1\130\1\131\1\62\1\0\5\5\1\62\1\132"+
    "\4\5\1\133\1\5\1\134\1\5\1\135\10\5\1\136"+
    "\2\5\1\137\1\140\11\0\3\5\1\141\1\142\1\143"+
    "\3\0\1\144\1\0\2\111\1\44\2\125\4\5\1\145"+
    "\1\146\12\5\1\147\4\5\1\150\3\5\11\0\4\5"+
    "\2\0\1\151\1\0\5\5\1\152\1\153\5\5\1\154"+
    "\1\5\1\155\4\5\1\156\1\157\1\160\3\0\1\161"+
    "\7\0\4\5\2\162\2\0\1\5\1\163\2\5\1\164"+
    "\6\5\1\165\1\166\1\167\1\5\2\0\1\170\5\0"+
    "\1\171\1\0\4\5\2\0\4\5\1\172\1\173\1\174"+
    "\1\5\1\175\1\5\1\176\2\0\1\177\2\0\1\200"+
    "\4\5\2\0\3\5\1\201\1\5\1\202\1\203\1\204"+
    "\1\205\1\206\2\5\1\207\3\0\2\5\1\210\2\5"+
    "\1\211\1\0\1\212\1\213\2\5\1\0\2\5\2\0"+
    "\1\214\1\215\1\216";

  private static int [] zzUnpackAction() {
    int [] result = new int[423];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\102\0\204\0\306\0\u0108\0\u014a\0\u018c\0\u01ce"+
    "\0\u0210\0\u0252\0\u0294\0\u02d6\0\u0318\0\u035a\0\u039c\0\u03de"+
    "\0\u0420\0\u0462\0\u04a4\0\u04e6\0\u0528\0\u056a\0\u05ac\0\u05ee"+
    "\0\u0630\0\u0672\0\u06b4\0\u06f6\0\u0738\0\u077a\0\u07bc\0\u07fe"+
    "\0\u0840\0\u0882\0\u08c4\0\u0906\0\u0948\0\u098a\0\u09cc\0\u0a0e"+
    "\0\u0a50\0\u0a92\0\u0ad4\0\u039c\0\u0b16\0\u0b58\0\u0b9a\0\u0bdc"+
    "\0\u0c1e\0\u0c60\0\u0ca2\0\u0ce4\0\u0d26\0\u0d68\0\u039c\0\u039c"+
    "\0\u039c\0\u039c\0\u039c\0\u0daa\0\u039c\0\u039c\0\u039c\0\u039c"+
    "\0\u039c\0\u0dec\0\u039c\0\u0e2e\0\u0e70\0\u0eb2\0\u0ef4\0\u0f36"+
    "\0\u0f78\0\u039c\0\u039c\0\u0fba\0\u0ffc\0\u103e\0\u039c\0\u1080"+
    "\0\u10c2\0\u1104\0\u039c\0\u1146\0\u1188\0\u11ca\0\u120c\0\u039c"+
    "\0\u124e\0\u039c\0\u1290\0\u12d2\0\u1314\0\u039c\0\u1356\0\u1398"+
    "\0\u13da\0\u141c\0\u039c\0\u039c\0\u145e\0\u14a0\0\u039c\0\u14e2"+
    "\0\u1524\0\u039c\0\u1566\0\u15a8\0\u15ea\0\u162c\0\u166e\0\u039c"+
    "\0\u039c\0\u16b0\0\u16f2\0\u1734\0\u0630\0\u039c\0\u1776\0\u05ac"+
    "\0\u17b8\0\u17fa\0\u183c\0\u05ac\0\u187e\0\u18c0\0\u1902\0\u1944"+
    "\0\u1986\0\u19c8\0\u1a0a\0\u05ac\0\u1a4c\0\u1a8e\0\u1ad0\0\u1b12"+
    "\0\u1b54\0\u1b96\0\u05ac\0\u1bd8\0\u1c1a\0\u039c\0\u039c\0\u039c"+
    "\0\u1c5c\0\u039c\0\u039c\0\u1c9e\0\u1ce0\0\u0ad4\0\u1d22\0\u1d64"+
    "\0\u1da6\0\u1de8\0\u1e2a\0\u1e6c\0\u1eae\0\u1ef0\0\u1f32\0\u039c"+
    "\0\u1f74\0\u1fb6\0\u039c\0\u039c\0\u1ff8\0\u203a\0\u039c\0\u039c"+
    "\0\u207c\0\u20be\0\u039c\0\u039c\0\u039c\0\u039c\0\u039c\0\u039c"+
    "\0\u2100\0\u0dec\0\u2142\0\u2184\0\u0e70\0\u039c\0\u039c\0\u039c"+
    "\0\u039c\0\u21c6\0\u2208\0\u039c\0\u224a\0\u228c\0\u039c\0\u22ce"+
    "\0\u039c\0\u039c\0\u039c\0\u2310\0\u2310\0\u2352\0\u2394\0\u23d6"+
    "\0\u2418\0\u245a\0\u16b0\0\u05ac\0\u249c\0\u24de\0\u2520\0\u2562"+
    "\0\u05ac\0\u25a4\0\u25e6\0\u2628\0\u05ac\0\u266a\0\u26ac\0\u26ee"+
    "\0\u2730\0\u2772\0\u27b4\0\u27f6\0\u2838\0\u05ac\0\u287a\0\u28bc"+
    "\0\u039c\0\u05ac\0\u28fe\0\u2940\0\u2982\0\u29c4\0\u2a06\0\u2a48"+
    "\0\u2a8a\0\u2acc\0\u2b0e\0\u2b50\0\u2b92\0\u2bd4\0\u039c\0\u039c"+
    "\0\u039c\0\u2c16\0\u2c58\0\u2c9a\0\u2cdc\0\u2d1e\0\u2d60\0\u039c"+
    "\0\u2184\0\u2da2\0\u2de4\0\u2e26\0\u2e68\0\u2eaa\0\u2eec\0\u2f2e"+
    "\0\u05ac\0\u2f70\0\u2fb2\0\u2ff4\0\u3036\0\u3078\0\u30ba\0\u30fc"+
    "\0\u313e\0\u3180\0\u31c2\0\u05ac\0\u3204\0\u3246\0\u3288\0\u32ca"+
    "\0\u05ac\0\u330c\0\u334e\0\u3390\0\u33d2\0\u3414\0\u3456\0\u3498"+
    "\0\u34da\0\u351c\0\u355e\0\u35a0\0\u35e2\0\u3624\0\u3666\0\u36a8"+
    "\0\u36ea\0\u372c\0\u376e\0\u039c\0\u37b0\0\u37f2\0\u3834\0\u3876"+
    "\0\u38b8\0\u38fa\0\u05ac\0\u05ac\0\u393c\0\u397e\0\u39c0\0\u3a02"+
    "\0\u3a44\0\u05ac\0\u3a86\0\u05ac\0\u3ac8\0\u3b0a\0\u3b4c\0\u3b8e"+
    "\0\u05ac\0\u05ac\0\u05ac\0\u3bd0\0\u3c12\0\u3c54\0\u039c\0\u3c96"+
    "\0\u3cd8\0\u3d1a\0\u3d5c\0\u3d9e\0\u3de0\0\u3e22\0\u3e64\0\u3ea6"+
    "\0\u3ee8\0\u3f2a\0\u3f6c\0\u039c\0\u3fae\0\u3ff0\0\u4032\0\u4074"+
    "\0\u40b6\0\u40f8\0\u05ac\0\u413a\0\u417c\0\u41be\0\u4200\0\u4242"+
    "\0\u4284\0\u05ac\0\u05ac\0\u05ac\0\u42c6\0\u4308\0\u434a\0\u039c"+
    "\0\u438c\0\u43ce\0\u4410\0\u4452\0\u4494\0\u039c\0\u44d6\0\u4518"+
    "\0\u455a\0\u459c\0\u45de\0\u4620\0\u4662\0\u46a4\0\u46e6\0\u4728"+
    "\0\u476a\0\u47ac\0\u05ac\0\u05ac\0\u47ee\0\u05ac\0\u4830\0\u05ac"+
    "\0\u4872\0\u48b4\0\u039c\0\u48f6\0\u4938\0\u039c\0\u497a\0\u49bc"+
    "\0\u49fe\0\u4a40\0\u4a82\0\u4ac4\0\u4b06\0\u4b48\0\u4b8a\0\u05ac"+
    "\0\u4bcc\0\u05ac\0\u05ac\0\u039c\0\u039c\0\u05ac\0\u4c0e\0\u4c50"+
    "\0\u05ac\0\u4c92\0\u4cd4\0\u4d16\0\u4d58\0\u4d9a\0\u05ac\0\u4ddc"+
    "\0\u4e1e\0\u05ac\0\u4e60\0\u05ac\0\u05ac\0\u4ea2\0\u4ee4\0\u4f26"+
    "\0\u4f68\0\u4faa\0\u4fec\0\u502e\0\u05ac\0\u05ac\0\u039c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[423];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\53\15\1\16\26\15\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\2\30\1\31\1\30\1\32"+
    "\1\27\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\27\1\45\1\27\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\27\1\54\2\27\1\55"+
    "\2\27\1\56\1\57\1\60\1\61\1\62\1\63\1\64"+
    "\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74"+
    "\1\75\1\76\1\77\1\100\1\41\1\101\1\102\1\17"+
    "\1\103\1\20\1\17\1\104\1\105\1\27\1\105\1\106"+
    "\3\27\4\105\20\27\1\107\2\105\1\27\1\105\1\27"+
    "\1\105\5\27\13\105\1\71\1\72\1\105\1\110\2\105"+
    "\1\111\1\112\1\27\1\105\1\113\1\114\1\115\1\104"+
    "\13\116\1\117\63\116\1\120\2\116\1\17\1\104\1\105"+
    "\1\27\1\105\1\106\3\27\4\105\20\27\1\107\2\105"+
    "\1\27\1\105\1\27\1\105\5\27\13\105\1\71\1\72"+
    "\1\105\1\110\2\105\1\111\1\112\1\27\1\105\1\121"+
    "\1\122\1\123\1\104\1\17\1\104\1\105\1\27\1\105"+
    "\1\106\3\27\2\105\1\124\1\105\20\27\1\107\2\105"+
    "\1\27\1\105\1\27\1\105\5\27\13\105\1\71\1\72"+
    "\1\105\1\110\2\105\1\111\1\112\1\27\1\105\1\125"+
    "\1\126\1\125\1\104\1\17\1\104\1\105\1\127\1\105"+
    "\1\106\3\127\2\105\1\124\1\105\20\127\1\107\2\105"+
    "\1\127\1\105\1\127\1\105\5\127\13\105\1\71\1\72"+
    "\1\105\1\110\2\105\1\111\1\112\1\127\1\105\1\125"+
    "\1\126\1\125\1\104\3\130\1\131\2\130\3\131\4\130"+
    "\20\131\3\130\1\131\1\130\1\131\1\130\5\131\23\130"+
    "\1\131\5\130\3\132\1\133\2\132\3\133\4\132\20\133"+
    "\3\132\1\133\1\132\1\133\1\132\5\133\23\132\1\133"+
    "\5\132\54\134\1\135\25\134\11\136\1\137\42\136\1\140"+
    "\25\136\11\141\1\142\2\141\1\143\21\141\1\144\17\141"+
    "\1\145\11\141\1\145\11\141\53\15\1\146\101\15\1\0"+
    "\2\15\1\0\11\15\1\0\3\15\1\147\5\15\103\0"+
    "\1\20\1\150\1\151\1\0\1\20\73\0\1\20\1\0"+
    "\1\150\3\0\1\150\43\0\1\152\27\0\1\150\1\0"+
    "\1\27\1\0\1\27\1\0\1\27\1\153\2\27\4\0"+
    "\5\27\1\154\4\27\1\155\5\27\3\0\1\156\1\0"+
    "\1\27\1\0\4\27\1\157\23\0\1\27\4\0\1\27"+
    "\4\0\1\160\44\0\1\161\31\0\1\20\1\150\1\151"+
    "\1\0\1\20\1\162\72\0\1\20\1\0\1\27\1\0"+
    "\1\27\1\0\4\27\4\0\7\27\1\163\10\27\3\0"+
    "\1\27\1\0\1\27\1\0\5\27\23\0\1\27\4\0"+
    "\1\27\1\0\1\27\1\0\1\27\1\0\4\27\4\0"+
    "\11\27\1\164\6\27\3\0\1\27\1\0\1\27\1\0"+
    "\5\27\23\0\1\27\4\0\1\27\1\0\1\27\1\0"+
    "\1\27\1\0\4\27\4\0\20\27\3\0\1\27\1\0"+
    "\1\27\1\0\5\27\23\0\1\27\4\0\1\27\11\0"+
    "\2\30\1\0\1\30\65\0\13\165\1\166\63\165\1\167"+
    "\2\165\1\0\1\27\1\0\1\27\1\0\4\27\4\0"+
    "\3\27\1\170\1\27\1\171\12\27\3\0\1\27\1\0"+
    "\1\27\1\0\5\27\23\0\1\27\4\0\1\27\1\0"+
    "\1\27\1\0\1\172\1\0\4\27\4\0\1\173\6\27"+
    "\1\174\10\27\3\0\1\27\1\0\1\27\1\0\5\27"+
    "\23\0\1\27\4\0\1\27\1\0\1\27\1\0\1\27"+
    "\1\0\4\27\4\0\4\27\1\175\2\27\1\176\10\27"+
    "\3\0\1\27\1\0\1\27\1\0\5\27\23\0\1\27"+
    "\4\0\1\27\1\0\1\27\1\0\1\27\1\0\4\27"+
    "\4\0\5\27\1\177\12\27\3\0\1\27\1\0\1\27"+
    "\1\0\5\27\23\0\1\27\4\0\1\27\1\0\1\27"+
    "\1\0\1\200\1\0\4\27\4\0\20\27\3\0\1\27"+
    "\1\0\1\27\1\0\5\27\23\0\1\27\4\0\1\27"+
    "\1\0\1\27\1\0\1\27\1\0\4\27\4\0\3\27"+
    "\1\201\3\27\1\202\5\27\1\203\2\27\3\0\1\27"+
    "\1\0\1\27\1\0\5\27\23\0\1\27\4\0\1\27"+
    "\1\0\1\27\1\0\1\27\1\0\4\27\4\0\11\27"+
    "\1\204\6\27\3\0\1\27\1\0\1\27\1\0\5\27"+
    "\23\0\1\27\4\0\1\27\1\0\1\27\1\0\1\27"+
    "\1\0\4\27\4\0\1\27\1\205\11\27\1\206\4\27"+
    "\3\0\1\27\1\0\1\27\1\0\5\27\23\0\1\27"+
    "\4\0\1\27\1\0\1\27\1\0\1\207\1\0\4\27"+
    "\4\0\20\27\3\0\1\27\1\0\1\27\1\0\5\27"+
    "\23\0\1\27\4\0\1\27\1\0\1\27\1\0\1\27"+
    "\1\0\4\27\4\0\1\210\17\27\3\0\1\27\1\0"+
    "\1\27\1\0\5\27\23\0\1\27\4\0\1\27\1\0"+
    "\1\27\1\0\1\27\1\0\4\27\4\0\14\27\1\211"+
    "\3\27\3\0\1\27\1\0\1\27\1\0\5\27\23\0"+
    "\1\27\4\0\1\27\1\0\1\27\1\0\1\27\1\0"+
    "\4\27\4\0\5\27\1\212\2\27\1\213\1\214\6\27"+
    "\3\0\1\27\1\0\1\27\1\0\5\27\23\0\1\213"+
    "\4\0\1\27\1\0\1\27\1\0\1\27\1\0\4\27"+
    "\4\0\11\27\1\215\6\27\3\0\1\27\1\0\1\27"+
    "\1\0\5\27\23\0\1\27\4\0\1\27\35\0\1\216"+
    "\1\217\12\0\1\220\66\0\1\221\12\0\1\222\67\0"+
    "\1\223\43\0\1\27\1\0\1\27\1\0\4\27\4\0"+
    "\15\27\1\224\2\27\3\0\1\27\1\0\1\27\1\0"+
    "\5\27\23\0\1\27\4\0\1\27\7\0\1\225\2\0"+
    "\1\226\2\0\1\227\1\0\1\230\1\231\1\232\2\0"+
    "\1\233\1\234\1\235\3\0\1\236\41\0\1\234\6\0"+
    "\1\27\1\0\1\27\1\0\4\27\4\0\20\27\3\0"+
    "\1\27\1\0\1\27\1\0\2\27\1\237\2\27\23\0"+
    "\1\27\4\0\1\27\36\0\1\240\12\0\1\241\101\0"+
    "\1\242\66\0\1\243\12\0\1\244\1\0\1\245\1\0"+
    "\1\246\75\0\1\247\101\0\1\250\2\0\1\251\1\101"+
    "\62\0\1\252\12\0\1\253\101\0\1\254\5\0\1\255"+
    "\73\0\1\256\6\0\1\257\72\0\1\260\33\0\1\261"+
    "\2\0\3\261\4\0\20\261\3\0\1\261\1\0\1\261"+
    "\1\0\5\261\23\0\1\261\5\0\67\262\1\0\6\262"+
    "\1\166\1\263\2\262\1\0\1\104\3\0\1\104\73\0"+
    "\1\104\2\0\1\105\1\0\1\105\4\0\4\105\20\0"+
    "\3\105\1\0\1\105\1\0\1\105\5\0\13\105\2\0"+
    "\1\105\1\0\2\105\3\0\1\105\5\0\1\104\3\0"+
    "\1\104\1\264\72\0\1\104\2\0\1\105\1\0\1\105"+
    "\4\0\4\105\20\0\1\105\1\265\1\105\1\0\1\105"+
    "\1\0\1\105\5\0\13\105\2\0\1\105\1\0\2\105"+
    "\3\0\1\105\4\0\3\266\1\261\2\266\3\261\4\266"+
    "\20\261\3\266\1\261\1\266\1\261\1\266\5\261\21\266"+
    "\1\267\1\266\1\261\5\266\67\0\1\270\12\0\5\271"+
    "\1\272\1\273\67\271\1\274\2\271\1\272\100\0\1\115"+
    "\1\0\13\116\1\0\63\116\1\275\15\116\1\274\63\116"+
    "\1\274\2\116\76\0\1\121\3\0\5\271\1\272\1\273"+
    "\71\271\1\274\1\272\2\0\1\105\1\0\1\105\4\0"+
    "\2\105\1\124\1\105\20\0\3\105\1\0\1\105\1\0"+
    "\1\105\5\0\13\105\2\0\1\105\1\0\2\105\3\0"+
    "\1\105\1\125\1\0\1\125\14\0\1\125\62\0\1\125"+
    "\1\0\1\125\1\0\5\271\1\272\1\273\72\271\1\272"+
    "\1\0\1\127\1\0\1\127\1\0\4\127\1\276\2\0"+
    "\1\277\20\127\3\0\1\127\1\0\1\127\1\0\5\127"+
    "\11\0\1\300\11\0\1\127\4\0\1\127\1\0\1\131"+
    "\1\0\1\131\1\0\4\131\4\0\20\131\3\0\1\131"+
    "\1\0\1\131\1\0\5\131\23\0\1\131\4\0\1\131"+
    "\1\0\1\133\1\0\1\133\1\0\4\133\4\0\20\133"+
    "\3\0\1\133\1\0\1\133\1\0\5\133\23\0\1\133"+
    "\4\0\1\133\54\134\1\0\25\134\55\0\1\301\40\0"+
    "\1\136\142\0\1\302\24\0\11\141\1\142\2\141\1\143"+
    "\21\141\1\143\17\141\1\143\11\141\1\143\11\141\14\0"+
    "\1\143\123\0\1\303\43\0\53\15\1\0\2\15\1\0"+
    "\11\15\1\0\3\15\1\0\5\15\1\0\1\150\1\0"+
    "\1\151\1\0\1\150\73\0\1\150\1\0\1\304\2\0"+
    "\1\305\1\304\27\0\1\305\43\0\1\304\1\0\1\27"+
    "\1\0\1\27\1\0\4\27\4\0\1\306\17\27\3\0"+
    "\1\27\1\0\1\27\1\0\5\27\23\0\1\27\4\0"+
    "\1\27\1\0\1\27\1\0\1\27\1\0\4\27\4\0"+
    "\2\27\1\307\15\27\3\0\1\27\1\0\1\27\1\0"+
    "\5\27\23\0\1\27\4\0\1\27\1\0\1\27\1\0"+
    "\1\27\1\0\4\27\4\0\10\27\1\310\7\27\3\0"+
    "\1\27\1\0\1\27\1\0\5\27\23\0\1\310\4\0"+
    "\1\27\1\0\1\27\1\0\1\27\1\0\4\27\4\0"+
    "\15\27\1\311\2\27\3\0\1\27\1\0\1\27\1\0"+
    "\5\27\23\0\1\27\4\0\1\27\1\0\1\27\1\0"+
    "\1\27\1\0\4\27\4\0\17\27\1\312\3\0\1\27"+
    "\1\0\1\27\1\0\5\27\23\0\1\27\4\0\1\27"+
    "\1\0\1\313\1\0\1\313\1\0\1\313\1\0\1\313"+
    "\7\0\2\313\2\0\1\313\6\0\1\313\46\0\1\313"+
    "\1\0\1\27\1\0\1\27\1\0\4\27\4\0\11\27"+
    "\1\314\6\27\3\0\1\27\1\0\1\27\1\0\5\27"+
    "\23\0\1\27\4\0\1\27\1\0\1\27\1\0\1\315"+
    "\1\0\4\27\4\0\20\27\3\0\1\27\1\0\1\27"+
    "\1\0\5\27\23\0\1\27\4\0\1\27\14\165\1\0"+
    "\65\165\1\0\1\27\1\0\1\27\1\0\4\27\4\0"+
    "\6\27\1\316\11\27\3\0\1\27\1\0\1\27\1\0"+
    "\5\27\23\0\1\27\4\0\1\27\1\0\1\27\1\0"+
    "\1\27\1\0\4\27\4\0\3\27\1\317\2\27\1\320"+
    "\11\27\3\0\1\27\1\0\1\27\1\0\5\27\23\0"+
    "\1\27\4\0\1\27\1\0\1\27\1\0\1\321\1\0"+
    "\4\27\4\0\20\27\3\0\1\27\1\0\1\27\1\0"+
    "\5\27\23\0\1\27\4\0\1\27\1\0\1\27\1\0"+
    "\1\27\1\0\4\27\4\0\5\27\1\322\12\27\3\0"+
    "\1\27\1\0\1\27\1\0\5\27\23\0\1\27\4\0"+
    "\1\27\1\0\1\27\1\0\1\27\1\0\4\27\4\0"+
    "\11\27\1\323\6\27\3\0\1\27\1\0\1\27\1\0"+
    "\5\27\23\0\1\27\4\0\1\27\1\0\1\27\1\0"+
    "\1\27\1\0\4\27\4\0\10\27\1\324\7\27\3\0"+
    "\1\27\1\0\1\27\1\0\5\27\23\0\1\324\4\0"+
    "\1\27\1\0\1\27\1\0\1\27\1\0\4\27\4\0"+
    "\13\27\1\325\4\27\3\0\1\27\1\0\1\27\1\0"+
    "\5\27\23\0\1\27\4\0\1\27\1\0\1\27\1\0"+
    "\1\27\1\0\4\27\4\0\4\27\1\175\13\27\3\0"+
    "\1\27\1\0\1\27\1\0\5\27\23\0\1\27\4\0"+
    "\1\27\1\0\1\27\1\0\1\27\1\0\4\27\4\0"+
    "\5\27\1\326\12\27\3\0\1\27\1\0\1\27\1\0"+
    "\5\27\23\0\1\27\4\0\1\27\1\0\1\27\1\0"+
    "\1\27\1\0\4\27\4\0\10\27\1\327\7\27\3\0"+
    "\1\27\1\0\1\27\1\0\5\27\23\0\1\327\4\0"+
    "\1\27\1\0\1\27\1\0\1\27\1\0\4\27\4\0"+
    "\15\27\1\330\2\27\3\0\1\27\1\0\1\27\1\0"+
    "\5\27\23\0\1\27\4\0\1\27\1\0\1\27\1\0"+
    "\1\27\1\0\4\27\4\0\1\331\17\27\3\0\1\27"+
    "\1\0\1\27\1\0\5\27\23\0\1\27\4\0\1\27"+
    "\1\0\1\27\1\0\1\27\1\0\4\27\4\0\1\27"+
    "\1\332\16\27\3\0\1\27\1\0\1\27\1\0\3\27"+
    "\1\333\1\27\23\0\1\27\4\0\1\27\1\0\1\27"+
    "\1\0\1\27\1\0\4\27\4\0\10\27\1\334\7\27"+
    "\3\0\1\27\1\0\1\27\1\0\5\27\23\0\1\334"+
    "\4\0\1\27\1\0\1\27\1\0\1\27\1\0\4\27"+
    "\4\0\1\335\17\27\3\0\1\27\1\0\1\27\1\0"+
    "\5\27\23\0\1\27\4\0\1\27\1\0\1\27\1\0"+
    "\1\27\1\0\4\27\4\0\2\27\1\336\15\27\3\0"+
    "\1\27\1\0\1\27\1\0\5\27\23\0\1\27\4\0"+
    "\1\27\1\0\1\27\1\0\1\27\1\0\4\27\4\0"+
    "\11\27\1\337\6\27\3\0\1\27\1\0\1\27\1\0"+
    "\5\27\23\0\1\27\4\0\1\27\1\0\1\27\1\0"+
    "\1\27\1\0\4\27\4\0\1\340\17\27\3\0\1\27"+
    "\1\0\1\27\1\0\5\27\23\0\1\27\4\0\1\27"+
    "\51\0\1\341\31\0\1\27\1\0\1\27\1\0\4\27"+
    "\4\0\11\27\1\342\6\27\3\0\1\27\1\0\1\27"+
    "\1\0\5\27\23\0\1\27\4\0\1\27\24\0\1\343"+
    "\77\0\1\344\103\0\1\345\104\0\1\346\74\0\1\347"+
    "\66\0\1\350\110\0\1\351\66\0\1\352\124\0\1\353"+
    "\54\0\1\27\1\0\1\27\1\0\4\27\4\0\3\27"+
    "\1\354\2\27\1\355\3\27\1\356\5\27\3\0\1\27"+
    "\1\0\1\27\1\0\5\27\23\0\1\27\4\0\1\27"+
    "\51\0\1\357\101\0\1\360\101\0\1\361\1\0\1\362"+
    "\53\0\1\363\46\0\1\363\16\0\2\364\1\0\1\364"+
    "\37\0\1\365\14\0\1\366\21\0\1\367\2\0\1\370"+
    "\66\0\1\261\1\0\1\261\1\0\4\261\4\0\20\261"+
    "\3\0\1\261\1\0\1\261\1\0\5\261\23\0\1\261"+
    "\4\0\1\261\14\262\1\0\65\262\1\0\1\371\1\0"+
    "\1\371\1\0\1\371\1\0\1\371\7\0\2\371\2\0"+
    "\1\371\6\0\1\371\46\0\1\371\5\0\1\372\73\0"+
    "\1\372\1\0\1\373\1\0\1\373\1\0\1\373\1\0"+
    "\1\373\7\0\2\373\2\0\1\373\6\0\1\373\46\0"+
    "\1\373\13\116\1\0\63\116\1\0\2\116\14\0\1\277"+
    "\76\0\1\276\2\0\1\277\66\0\1\304\3\0\1\304"+
    "\73\0\1\304\1\0\1\27\1\0\1\27\1\0\4\27"+
    "\4\0\1\27\1\321\16\27\3\0\1\27\1\0\1\27"+
    "\1\0\5\27\23\0\1\27\4\0\1\27\1\0\1\27"+
    "\1\0\1\27\1\0\4\27\4\0\2\27\1\374\1\375"+
    "\4\27\1\376\2\27\1\377\4\27\3\0\1\27\1\0"+
    "\1\27\1\0\5\27\23\0\1\376\4\0\1\27\1\0"+
    "\1\27\1\0\1\u0100\1\0\4\27\4\0\20\27\3\0"+
    "\1\27\1\0\1\27\1\0\5\27\23\0\1\27\4\0"+
    "\1\27\1\0\1\27\1\0\1\27\1\0\4\27\4\0"+
    "\12\27\1\u0101\5\27\3\0\1\27\1\0\1\27\1\0"+
    "\5\27\23\0\1\27\4\0\1\27\1\0\1\27\1\0"+
    "\1\27\1\0\4\27\4\0\1\27\1\u0102\16\27\3\0"+
    "\1\27\1\0\1\27\1\0\5\27\23\0\1\27\4\0"+
    "\1\27\1\0\1\27\1\0\1\27\1\0\4\27\4\0"+
    "\15\27\1\u0103\2\27\3\0\1\27\1\0\1\27\1\0"+
    "\5\27\23\0\1\27\4\0\1\27\1\0\1\27\1\0"+
    "\1\27\1\0\4\27\4\0\12\27\1\u0104\5\27\3\0"+
    "\1\27\1\0\1\27\1\0\5\27\23\0\1\27\4\0"+
    "\1\27\1\0\1\27\1\0\1\27\1\0\4\27\4\0"+
    "\15\27\1\u0105\2\27\3\0\1\27\1\0\1\27\1\0"+
    "\5\27\23\0\1\27\4\0\1\27\1\0\1\27\1\0"+
    "\1\27\1\0\4\27\4\0\12\27\1\u0106\5\27\3\0"+
    "\1\27\1\0\1\27\1\0\5\27\23\0\1\27\4\0"+
    "\1\27\1\0\1\27\1\0\1\27\1\0\4\27\4\0"+
    "\6\27\1\u0107\11\27\3\0\1\27\1\0\1\27\1\0"+
    "\5\27\23\0\1\27\4\0\1\27\1\0\1\27\1\0"+
    "\1\u0108\1\0\4\27\4\0\20\27\3\0\1\27\1\0"+
    "\1\27\1\0\5\27\23\0\1\27\4\0\1\27\1\0"+
    "\1\27\1\0\1\u0109\1\0\4\27\4\0\20\27\3\0"+
    "\1\27\1\0\1\27\1\0\5\27\23\0\1\27\4\0"+
    "\1\27\1\0\1\27\1\0\1\27\1\0\4\27\4\0"+
    "\1\27\1\u010a\6\27\1\u010b\7\27\3\0\1\27\1\0"+
    "\1\27\1\0\5\27\23\0\1\u010b\4\0\1\27\1\0"+
    "\1\27\1\0\1\u010c\1\0\4\27\4\0\20\27\3\0"+
    "\1\27\1\0\1\27\1\0\5\27\23\0\1\27\4\0"+
    "\1\27\1\0\1\27\1\0\1\27\1\0\4\27\4\0"+
    "\1\27\1\u010d\16\27\3\0\1\27\1\0\1\27\1\0"+
    "\5\27\23\0\1\27\4\0\1\27\1\0\1\27\1\0"+
    "\1\27\1\0\4\27\4\0\1\27\1\u010e\16\27\3\0"+
    "\1\27\1\0\1\27\1\0\5\27\23\0\1\27\4\0"+
    "\1\27\1\0\1\27\1\0\1\27\1\0\4\27\4\0"+
    "\4\27\1\u010f\13\27\3\0\1\27\1\0\1\27\1\0"+
    "\5\27\23\0\1\27\4\0\1\27\1\0\1\27\1\0"+
    "\1\27\1\0\4\27\4\0\4\27\1\u0110\13\27\3\0"+
    "\1\27\1\0\1\27\1\0\5\27\23\0\1\27\4\0"+
    "\1\27\1\0\1\27\1\0\1\27\1\0\4\27\4\0"+
    "\1\27\1\u0111\16\27\3\0\1\27\1\0\1\27\1\0"+
    "\5\27\23\0\1\27\4\0\1\27\1\0\1\27\1\0"+
    "\1\27\1\0\4\27\4\0\12\27\1\u0112\5\27\3\0"+
    "\1\27\1\0\1\27\1\0\5\27\23\0\1\27\4\0"+
    "\1\27\1\0\1\27\1\0\1\27\1\0\4\27\4\0"+
    "\15\27\1\u0113\2\27\3\0\1\27\1\0\1\27\1\0"+
    "\5\27\23\0\1\27\4\0\1\27\1\0\1\27\1\0"+
    "\1\27\1\0\4\27\4\0\5\27\1\u0114\12\27\3\0"+
    "\1\27\1\0\1\27\1\0\5\27\23\0\1\27\4\0"+
    "\1\27\24\0\1\u0115\73\0\1\u0116\104\0\1\u0117\104\0"+
    "\1\u0118\102\0\1\u0119\46\0\1\u0119\52\0\1\u011a\62\0"+
    "\1\u011b\105\0\1\u011c\75\0\1\u011d\54\0\1\27\1\0"+
    "\1\27\1\0\4\27\4\0\1\u011e\3\27\1\u011f\13\27"+
    "\3\0\1\27\1\0\1\27\1\0\5\27\23\0\1\27"+
    "\4\0\1\27\1\0\1\27\1\0\1\27\1\0\4\27"+
    "\4\0\12\27\1\u0120\5\27\3\0\1\27\1\0\1\27"+
    "\1\0\5\27\23\0\1\27\4\0\1\27\1\0\1\27"+
    "\1\0\1\27\1\0\4\27\4\0\1\u0121\17\27\3\0"+
    "\1\27\1\0\1\27\1\0\5\27\23\0\1\27\4\0"+
    "\1\27\3\0\1\u0122\2\0\3\u0122\1\0\1\362\2\0"+
    "\20\u0122\3\0\1\u0122\1\0\1\u0122\1\0\5\u0122\23\0"+
    "\1\u0122\30\0\1\u0123\67\0\2\364\1\0\1\364\54\0"+
    "\1\366\65\0\1\u0124\64\0\1\u0125\55\0\1\370\72\0"+
    "\1\274\73\0\1\274\1\0\1\274\1\0\1\274\1\0"+
    "\1\274\1\0\1\274\7\0\2\274\2\0\1\274\6\0"+
    "\1\274\46\0\1\274\1\0\1\27\1\0\1\u0126\1\0"+
    "\4\27\4\0\20\27\3\0\1\27\1\0\1\27\1\0"+
    "\5\27\23\0\1\27\4\0\1\27\1\0\1\27\1\0"+
    "\1\27\1\0\4\27\4\0\7\27\1\u0127\10\27\3\0"+
    "\1\27\1\0\1\27\1\0\5\27\23\0\1\27\4\0"+
    "\1\27\1\0\1\27\1\0\1\27\1\0\4\27\4\0"+
    "\13\27\1\u0128\4\27\3\0\1\27\1\0\1\27\1\0"+
    "\5\27\23\0\1\27\4\0\1\27\1\0\1\27\1\0"+
    "\1\27\1\0\4\27\4\0\14\27\1\u0129\3\27\3\0"+
    "\1\27\1\0\1\27\1\0\5\27\23\0\1\27\4\0"+
    "\1\27\1\0\1\27\1\0\1\27\1\0\4\27\4\0"+
    "\1\u012a\17\27\3\0\1\27\1\0\1\27\1\0\5\27"+
    "\23\0\1\27\4\0\1\27\1\0\1\27\1\0\1\27"+
    "\1\0\4\27\4\0\20\27\3\0\1\27\1\0\1\27"+
    "\1\0\1\u012b\4\27\23\0\1\27\4\0\1\27\1\0"+
    "\1\27\1\0\1\27\1\0\4\27\4\0\16\27\1\u012c"+
    "\1\27\3\0\1\27\1\0\1\27\1\0\5\27\23\0"+
    "\1\27\4\0\1\27\1\0\1\27\1\0\1\27\1\0"+
    "\4\27\4\0\4\27\1\u012d\13\27\3\0\1\27\1\0"+
    "\1\27\1\0\5\27\23\0\1\27\4\0\1\27\1\0"+
    "\1\27\1\0\1\27\1\0\4\27\4\0\4\27\1\u012e"+
    "\13\27\3\0\1\27\1\0\1\27\1\0\5\27\23\0"+
    "\1\27\4\0\1\27\1\0\1\27\1\0\1\27\1\0"+
    "\4\27\4\0\15\27\1\u012f\2\27\3\0\1\27\1\0"+
    "\1\27\1\0\5\27\23\0\1\27\4\0\1\27\1\0"+
    "\1\27\1\0\1\27\1\0\4\27\4\0\1\27\1\u0130"+
    "\16\27\3\0\1\27\1\0\1\27\1\0\5\27\23\0"+
    "\1\27\4\0\1\27\1\0\1\27\1\0\1\27\1\0"+
    "\4\27\4\0\15\27\1\u0131\2\27\3\0\1\27\1\0"+
    "\1\27\1\0\5\27\23\0\1\27\4\0\1\27\1\0"+
    "\1\27\1\0\1\27\1\0\4\27\4\0\1\27\1\u0132"+
    "\16\27\3\0\1\27\1\0\1\27\1\0\5\27\23\0"+
    "\1\27\4\0\1\27\1\0\1\27\1\0\1\27\1\0"+
    "\4\27\4\0\1\u0133\17\27\3\0\1\27\1\0\1\27"+
    "\1\0\5\27\23\0\1\27\4\0\1\27\1\0\1\27"+
    "\1\0\1\27\1\0\4\27\4\0\1\27\1\u0134\16\27"+
    "\3\0\1\27\1\0\1\27\1\0\5\27\23\0\1\27"+
    "\4\0\1\27\1\0\1\27\1\0\1\27\1\0\4\27"+
    "\4\0\1\u0135\17\27\3\0\1\27\1\0\1\27\1\0"+
    "\5\27\23\0\1\27\4\0\1\27\1\0\1\27\1\0"+
    "\1\27\1\0\4\27\4\0\6\27\1\u0136\11\27\3\0"+
    "\1\27\1\0\1\27\1\0\5\27\23\0\1\27\4\0"+
    "\1\27\1\0\1\27\1\0\1\27\1\0\4\27\4\0"+
    "\11\27\1\u0137\6\27\3\0\1\27\1\0\1\27\1\0"+
    "\5\27\23\0\1\27\4\0\1\27\1\0\1\27\1\0"+
    "\1\27\1\0\4\27\4\0\1\u0138\17\27\3\0\1\27"+
    "\1\0\1\27\1\0\5\27\23\0\1\27\4\0\1\27"+
    "\1\0\1\27\1\0\1\u0139\1\0\4\27\4\0\20\27"+
    "\3\0\1\27\1\0\1\27\1\0\5\27\23\0\1\27"+
    "\4\0\1\27\1\0\1\27\1\0\1\27\1\0\4\27"+
    "\4\0\20\27\3\0\1\27\1\0\1\27\1\0\1\u013a"+
    "\4\27\23\0\1\27\4\0\1\27\1\0\1\27\1\0"+
    "\1\27\1\0\4\27\4\0\1\27\1\u013b\16\27\3\0"+
    "\1\27\1\0\1\27\1\0\5\27\23\0\1\27\4\0"+
    "\1\27\27\0\1\u013c\55\0\1\u013d\6\0\1\u013e\30\0"+
    "\1\u013f\45\0\1\u0140\124\0\1\u0141\52\0\1\u0142\101\0"+
    "\1\u0143\113\0\1\u0144\113\0\1\u0145\104\0\1\u0146\50\0"+
    "\1\27\1\0\1\27\1\0\4\27\4\0\12\27\1\u0147"+
    "\5\27\3\0\1\27\1\0\1\27\1\0\5\27\23\0"+
    "\1\27\4\0\1\27\1\0\1\27\1\0\1\27\1\0"+
    "\4\27\4\0\5\27\1\u0148\12\27\3\0\1\27\1\0"+
    "\1\27\1\0\5\27\23\0\1\27\4\0\1\27\1\0"+
    "\1\27\1\0\1\27\1\0\4\27\4\0\15\27\1\u0149"+
    "\2\27\3\0\1\27\1\0\1\27\1\0\5\27\23\0"+
    "\1\27\4\0\1\27\1\0\1\27\1\0\1\27\1\0"+
    "\4\27\4\0\5\27\1\u014a\12\27\3\0\1\27\1\0"+
    "\1\27\1\0\5\27\23\0\1\27\4\0\1\27\1\0"+
    "\1\u0122\1\0\1\u0122\1\0\4\u0122\1\u014b\2\0\1\u014c"+
    "\20\u0122\3\0\1\u0122\1\0\1\u0122\1\0\5\u0122\23\0"+
    "\1\u0122\4\0\1\u0122\26\0\1\u014d\105\0\1\u014e\50\0"+
    "\1\27\1\0\1\27\1\0\4\27\4\0\6\27\1\u014f"+
    "\11\27\3\0\1\27\1\0\1\27\1\0\5\27\23\0"+
    "\1\27\4\0\1\27\1\0\1\27\1\0\1\27\1\0"+
    "\4\27\4\0\11\27\1\u0150\6\27\3\0\1\27\1\0"+
    "\1\27\1\0\5\27\23\0\1\27\4\0\1\27\1\0"+
    "\1\27\1\0\1\27\1\0\4\27\4\0\1\u0151\17\27"+
    "\3\0\1\27\1\0\1\27\1\0\5\27\23\0\1\27"+
    "\4\0\1\27\1\0\1\27\1\0\1\27\1\0\4\27"+
    "\4\0\1\u0152\17\27\3\0\1\27\1\0\1\27\1\0"+
    "\5\27\23\0\1\27\4\0\1\27\1\0\1\27\1\0"+
    "\1\27\1\0\4\27\4\0\3\27\1\u0153\14\27\3\0"+
    "\1\27\1\0\1\27\1\0\5\27\23\0\1\27\4\0"+
    "\1\27\1\0\1\27\1\0\1\27\1\0\4\27\4\0"+
    "\2\27\1\u0154\15\27\3\0\1\27\1\0\1\27\1\0"+
    "\5\27\23\0\1\27\4\0\1\27\1\0\1\27\1\0"+
    "\1\27\1\0\4\27\4\0\12\27\1\u0155\5\27\3\0"+
    "\1\27\1\0\1\27\1\0\5\27\23\0\1\27\4\0"+
    "\1\27\1\0\1\27\1\0\1\27\1\0\4\27\4\0"+
    "\11\27\1\u0156\6\27\3\0\1\27\1\0\1\27\1\0"+
    "\5\27\23\0\1\27\4\0\1\27\1\0\1\27\1\0"+
    "\1\27\1\0\4\27\4\0\1\u0157\17\27\3\0\1\27"+
    "\1\0\1\27\1\0\5\27\23\0\1\27\4\0\1\27"+
    "\1\0\1\27\1\0\1\27\1\0\4\27\4\0\6\27"+
    "\1\u0158\11\27\3\0\1\27\1\0\1\27\1\0\5\27"+
    "\23\0\1\27\4\0\1\27\1\0\1\27\1\0\1\27"+
    "\1\0\4\27\4\0\5\27\1\u0159\12\27\3\0\1\27"+
    "\1\0\1\27\1\0\5\27\23\0\1\27\4\0\1\27"+
    "\1\0\1\27\1\0\1\27\1\0\4\27\4\0\6\27"+
    "\1\u015a\11\27\3\0\1\27\1\0\1\27\1\0\5\27"+
    "\23\0\1\27\4\0\1\27\1\0\1\27\1\0\1\27"+
    "\1\0\4\27\4\0\14\27\1\u015b\3\27\3\0\1\27"+
    "\1\0\1\27\1\0\5\27\23\0\1\27\4\0\1\27"+
    "\1\0\1\27\1\0\1\27\1\0\4\27\4\0\5\27"+
    "\1\u015c\12\27\3\0\1\27\1\0\1\27\1\0\5\27"+
    "\23\0\1\27\4\0\1\27\1\0\1\27\1\0\1\27"+
    "\1\0\4\27\4\0\11\27\1\u015d\6\27\3\0\1\27"+
    "\1\0\1\27\1\0\5\27\23\0\1\27\4\0\1\27"+
    "\3\0\1\u015e\6\0\1\u015f\30\0\1\u0160\100\0\1\u0161"+
    "\51\0\1\u013e\30\0\1\u013f\65\0\1\u0162\70\0\1\u0145"+
    "\101\0\1\u0163\106\0\1\u0164\100\0\1\u0165\71\0\1\u0145"+
    "\30\0\1\u0166\102\0\1\u0167\36\0\1\27\1\0\1\u0168"+
    "\1\0\4\27\4\0\20\27\3\0\1\27\1\0\1\27"+
    "\1\0\5\27\23\0\1\27\4\0\1\27\1\0\1\27"+
    "\1\0\1\27\1\0\4\27\4\0\6\27\1\u0169\11\27"+
    "\3\0\1\27\1\0\1\27\1\0\5\27\23\0\1\27"+
    "\4\0\1\27\1\0\1\27\1\0\1\27\1\0\4\27"+
    "\4\0\10\27\1\u016a\7\27\3\0\1\27\1\0\1\27"+
    "\1\0\5\27\23\0\1\u016a\4\0\1\27\1\0\1\27"+
    "\1\0\1\u016b\1\0\4\27\4\0\20\27\3\0\1\27"+
    "\1\0\1\27\1\0\5\27\23\0\1\27\4\0\1\27"+
    "\14\0\1\u014c\102\0\1\u016c\112\0\1\u016d\54\0\1\27"+
    "\1\0\1\27\1\0\4\27\4\0\12\27\1\u016e\5\27"+
    "\3\0\1\27\1\0\1\27\1\0\5\27\23\0\1\27"+
    "\4\0\1\27\1\0\1\27\1\0\1\u016f\1\0\4\27"+
    "\4\0\20\27\3\0\1\27\1\0\1\27\1\0\5\27"+
    "\23\0\1\27\4\0\1\27\1\0\1\27\1\0\1\27"+
    "\1\0\4\27\4\0\1\27\1\u0170\16\27\3\0\1\27"+
    "\1\0\1\27\1\0\5\27\23\0\1\27\4\0\1\27"+
    "\1\0\1\27\1\0\1\27\1\0\4\27\4\0\12\27"+
    "\1\u0171\5\27\3\0\1\27\1\0\1\27\1\0\5\27"+
    "\23\0\1\27\4\0\1\27\1\0\1\27\1\0\1\u0172"+
    "\1\0\4\27\4\0\20\27\3\0\1\27\1\0\1\27"+
    "\1\0\5\27\23\0\1\27\4\0\1\27\1\0\1\27"+
    "\1\0\1\27\1\0\4\27\4\0\1\27\1\u0173\16\27"+
    "\3\0\1\27\1\0\1\27\1\0\5\27\23\0\1\27"+
    "\4\0\1\27\1\0\1\27\1\0\1\u0174\1\0\4\27"+
    "\4\0\20\27\3\0\1\27\1\0\1\27\1\0\5\27"+
    "\23\0\1\27\4\0\1\27\1\0\1\27\1\0\1\27"+
    "\1\0\4\27\4\0\7\27\1\u0175\10\27\3\0\1\27"+
    "\1\0\1\27\1\0\5\27\23\0\1\27\4\0\1\27"+
    "\1\0\1\27\1\0\1\27\1\0\4\27\4\0\14\27"+
    "\1\u0176\3\27\3\0\1\27\1\0\1\27\1\0\5\27"+
    "\23\0\1\27\4\0\1\27\1\0\1\27\1\0\1\27"+
    "\1\0\4\27\4\0\4\27\1\u0177\13\27\3\0\1\27"+
    "\1\0\1\27\1\0\5\27\23\0\1\27\4\0\1\27"+
    "\1\0\1\27\1\0\1\u0178\1\0\4\27\4\0\20\27"+
    "\3\0\1\27\1\0\1\27\1\0\5\27\23\0\1\27"+
    "\4\0\1\27\32\0\1\u0179\61\0\1\u015f\30\0\1\u0160"+
    "\41\0\1\u017a\101\0\1\u0145\110\0\1\u0163\30\0\1\u017b"+
    "\54\0\1\u017c\125\0\1\u017d\51\0\1\u0167\30\0\1\u017e"+
    "\37\0\1\27\1\0\1\27\1\0\4\27\4\0\20\27"+
    "\3\0\1\27\1\0\1\27\1\0\2\27\1\u017f\2\27"+
    "\23\0\1\27\4\0\1\27\1\0\1\27\1\0\1\27"+
    "\1\0\4\27\4\0\1\27\1\u0180\16\27\3\0\1\27"+
    "\1\0\1\27\1\0\5\27\23\0\1\27\4\0\1\27"+
    "\1\0\1\27\1\0\1\27\1\0\4\27\4\0\10\27"+
    "\1\u0181\7\27\3\0\1\27\1\0\1\27\1\0\5\27"+
    "\23\0\1\u0181\4\0\1\27\1\0\1\27\1\0\1\27"+
    "\1\0\4\27\4\0\20\27\3\0\1\27\1\0\1\27"+
    "\1\0\2\27\1\u0182\2\27\23\0\1\27\4\0\1\27"+
    "\34\0\1\u0183\56\0\2\u0184\1\0\1\u0184\66\0\1\27"+
    "\1\0\1\27\1\0\4\27\4\0\15\27\1\u0185\2\27"+
    "\3\0\1\27\1\0\1\27\1\0\5\27\23\0\1\27"+
    "\4\0\1\27\1\0\1\27\1\0\1\27\1\0\4\27"+
    "\4\0\15\27\1\u0186\2\27\3\0\1\27\1\0\1\27"+
    "\1\0\5\27\23\0\1\27\4\0\1\27\1\0\1\27"+
    "\1\0\1\27\1\0\4\27\4\0\6\27\1\u0187\11\27"+
    "\3\0\1\27\1\0\1\27\1\0\5\27\23\0\1\27"+
    "\4\0\1\27\1\0\1\27\1\0\1\u0188\1\0\4\27"+
    "\4\0\20\27\3\0\1\27\1\0\1\27\1\0\5\27"+
    "\23\0\1\27\4\0\1\27\1\0\1\27\1\0\1\27"+
    "\1\0\4\27\4\0\20\27\3\0\1\27\1\0\1\27"+
    "\1\0\2\27\1\u0189\2\27\23\0\1\27\4\0\1\27"+
    "\1\0\1\27\1\0\1\27\1\0\4\27\4\0\5\27"+
    "\1\u018a\12\27\3\0\1\27\1\0\1\27\1\0\5\27"+
    "\23\0\1\27\4\0\1\27\1\0\1\27\1\0\1\u018b"+
    "\1\0\4\27\4\0\20\27\3\0\1\27\1\0\1\27"+
    "\1\0\5\27\23\0\1\27\4\0\1\27\22\0\1\u015f"+
    "\105\0\1\u013e\65\0\1\u017c\30\0\1\u018c\50\0\1\u017d"+
    "\30\0\1\u018d\37\0\1\27\1\0\1\27\1\0\4\27"+
    "\4\0\20\27\3\0\1\27\1\0\1\27\1\0\2\27"+
    "\1\u018e\2\27\23\0\1\27\4\0\1\27\1\0\1\27"+
    "\1\0\1\27\1\0\4\27\4\0\1\u018f\17\27\3\0"+
    "\1\27\1\0\1\27\1\0\5\27\23\0\1\27\4\0"+
    "\1\27\1\0\1\27\1\0\1\27\1\0\4\27\4\0"+
    "\20\27\3\0\1\27\1\0\1\27\1\0\2\27\1\u0190"+
    "\2\27\23\0\1\27\4\0\1\27\1\0\1\27\1\0"+
    "\1\27\1\0\4\27\4\0\20\27\3\0\1\27\1\0"+
    "\1\27\1\0\2\27\1\u0191\2\27\23\0\1\27\4\0"+
    "\1\27\16\0\1\u0192\66\0\1\u0193\2\0\3\u0193\2\u0184"+
    "\1\0\1\u0184\20\u0193\3\0\1\u0193\1\0\1\u0193\1\0"+
    "\5\u0193\16\0\1\u0194\4\0\1\u0193\6\0\1\27\1\0"+
    "\1\27\1\0\4\27\4\0\11\27\1\u0195\6\27\3\0"+
    "\1\27\1\0\1\27\1\0\5\27\23\0\1\27\4\0"+
    "\1\27\1\0\1\27\1\0\1\27\1\0\4\27\4\0"+
    "\6\27\1\u0196\11\27\3\0\1\27\1\0\1\27\1\0"+
    "\5\27\23\0\1\27\4\0\1\27\1\0\1\27\1\0"+
    "\1\27\1\0\4\27\4\0\14\27\1\u0197\3\27\3\0"+
    "\1\27\1\0\1\27\1\0\5\27\23\0\1\27\4\0"+
    "\1\27\1\0\1\27\1\0\1\27\1\0\4\27\4\0"+
    "\7\27\1\u0198\10\27\3\0\1\27\1\0\1\27\1\0"+
    "\5\27\23\0\1\27\4\0\1\27\1\0\1\27\1\0"+
    "\1\27\1\0\4\27\4\0\7\27\1\u0199\10\27\3\0"+
    "\1\27\1\0\1\27\1\0\5\27\23\0\1\27\4\0"+
    "\1\27\1\0\1\27\1\0\1\27\1\0\4\27\4\0"+
    "\20\27\3\0\1\27\1\0\1\27\1\0\2\27\1\u019a"+
    "\2\27\23\0\1\27\4\0\1\27\11\0\2\u0192\1\0"+
    "\1\u0192\21\0\1\252\44\0\1\u0193\1\0\1\u0193\1\0"+
    "\4\u0193\2\u019b\1\0\1\u019b\20\u0193\3\0\1\u0193\1\0"+
    "\1\u0193\1\0\5\u0193\23\0\1\u0193\4\0\1\u0193\3\0"+
    "\1\u0193\2\0\3\u0193\4\0\20\u0193\3\0\1\u0193\1\0"+
    "\1\u0193\1\0\5\u0193\23\0\1\u0193\6\0\1\27\1\0"+
    "\1\u019c\1\0\4\27\4\0\20\27\3\0\1\27\1\0"+
    "\1\27\1\0\5\27\23\0\1\27\4\0\1\27\1\0"+
    "\1\27\1\0\1\27\1\0\4\27\4\0\14\27\1\u019d"+
    "\3\27\3\0\1\27\1\0\1\27\1\0\5\27\23\0"+
    "\1\27\4\0\1\27\1\0\1\27\1\0\1\27\1\0"+
    "\4\27\4\0\5\27\1\u019e\12\27\3\0\1\27\1\0"+
    "\1\27\1\0\5\27\23\0\1\27\4\0\1\27\1\0"+
    "\1\27\1\0\1\27\1\0\4\27\4\0\5\27\1\u019f"+
    "\12\27\3\0\1\27\1\0\1\27\1\0\5\27\23\0"+
    "\1\27\4\0\1\27\3\0\1\u01a0\2\0\3\u01a0\2\u019b"+
    "\1\0\1\u019b\20\u01a0\3\0\1\u01a0\1\0\1\u01a0\1\0"+
    "\5\u01a0\23\0\1\u01a0\6\0\1\27\1\0\1\27\1\0"+
    "\4\27\4\0\6\27\1\u01a1\11\27\3\0\1\27\1\0"+
    "\1\27\1\0\5\27\23\0\1\27\4\0\1\27\1\0"+
    "\1\27\1\0\1\27\1\0\4\27\4\0\20\27\3\0"+
    "\1\27\1\0\1\27\1\0\2\27\1\u01a2\2\27\23\0"+
    "\1\27\4\0\1\27\1\0\1\u01a0\1\0\1\u01a0\1\0"+
    "\4\u01a0\2\u01a3\1\0\1\u01a3\20\u01a0\3\0\1\u01a0\1\0"+
    "\1\u01a0\1\0\5\u01a0\3\0\1\u01a4\17\0\1\u01a0\4\0"+
    "\1\u01a0\1\0\1\27\1\0\1\u01a5\1\0\4\27\4\0"+
    "\20\27\3\0\1\27\1\0\1\27\1\0\5\27\23\0"+
    "\1\27\4\0\1\27\1\0\1\27\1\0\1\27\1\0"+
    "\4\27\4\0\20\27\3\0\1\27\1\0\1\27\1\0"+
    "\2\27\1\u01a6\2\27\23\0\1\27\4\0\1\27\11\0"+
    "\2\u01a3\1\0\1\u01a3\37\0\1\u01a4\102\0\1\u01a7\24\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[20592];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\14\0\2\1\1\11\34\1\1\11\12\1\5\11\1\1"+
    "\5\11\1\1\1\11\6\1\2\11\3\1\1\11\3\1"+
    "\1\11\4\1\1\11\1\1\1\11\3\1\1\11\4\1"+
    "\2\11\1\1\1\0\1\11\1\1\1\0\1\11\5\1"+
    "\2\11\1\0\2\1\1\0\1\11\1\0\26\1\3\11"+
    "\1\1\2\11\1\1\12\0\1\1\1\11\2\1\2\11"+
    "\1\1\1\0\2\11\2\1\6\11\1\1\3\0\1\1"+
    "\4\11\2\1\1\11\1\0\1\1\1\11\1\0\3\11"+
    "\1\1\1\0\33\1\1\11\1\1\11\0\3\1\3\11"+
    "\3\0\1\1\1\0\1\1\1\11\34\1\11\0\4\1"+
    "\2\0\1\11\1\0\26\1\3\0\1\11\7\0\5\1"+
    "\1\11\2\0\17\1\2\0\1\11\5\0\1\11\1\0"+
    "\4\1\2\0\13\1\2\0\1\11\2\0\1\11\4\1"+
    "\2\0\7\1\2\11\4\1\3\0\6\1\1\0\4\1"+
    "\1\0\2\1\2\0\2\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[423];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	private final LinkedList commentList = new LinkedList();
	private String heredoc = null;
    private boolean asp_tags = false;
    private boolean short_tags_allowed = true;
    private StateStack stack = new StateStack();
    private char zzOld_buffer[] = new char[ZZ_BUFFERSIZE];
    private int zzOld_pushbackPos;
    protected int commentStartPosition;

	private AST ast;

    public void setAST(AST ast) {
    	this.ast = ast;
    }
    
	public PHPVersion getPHPVersion() {
		return PHPVersion.PHP4;
	}
    
	public void setInScriptingState() {
		yybegin(ST_IN_SCRIPTING);
	}

	public void resetCommentList() {
		commentList.clear();
	}
	
	public LinkedList getCommentList() {
		return commentList;
	}
	
	protected void addComment(int type) {
		int leftPosition = getTokenStartPosition();
		Comment comment = new Comment(commentStartPosition, leftPosition + getTokenLength(), this.ast, type);
		commentList.add(comment);
	}	

	public void setUseAspTagsAsPhp(boolean useAspTagsAsPhp) {
		asp_tags = useAspTagsAsPhp;
	}
	
	public void setUseShortTags(boolean useShortTags) {
		short_tags_allowed = useShortTags;
	}
	
    private void pushState(int state) {
        stack.pushStack(zzLexicalState);
        yybegin(state);
    }

    private void popState() {
        yybegin(stack.popStack());
    }

    public int getCurrentLine() {
        return yyline;
    }

    protected int getTokenStartPosition() {
        return zzStartRead - zzPushbackPos;
    }

    protected int getTokenLength() {
        return zzMarkedPos - zzStartRead;
    }

    public int getLength() {
        return zzEndRead - zzPushbackPos;
    }
    
	private void handleCommentStart() {
		commentStartPosition = getTokenStartPosition();
	}
	
	private void handleLineCommentEnd() {
         addComment(Comment.TYPE_SINGLE_LINE);
    }

    private void handleMultilineCommentEnd() {
    	addComment(Comment.TYPE_MULTILINE);
    }

    private void handlePHPDocEnd() {
		addComment(Comment.TYPE_PHPDOC);
    }
    
    protected void handleVarComment() {
    	commentStartPosition = zzStartRead;
    	addComment(Comment.TYPE_MULTILINE);
    }

    private Symbol createFullSymbol(int symbolNumber) {
        Symbol symbol = createSymbol(symbolNumber);
        symbol.value = yytext();
        return symbol;
    }

    protected Symbol createSymbol(int symbolNumber) {
        int leftPosition = getTokenStartPosition();
        return new Symbol(symbolNumber, leftPosition, leftPosition + getTokenLength());
    }
    
    public int[] getParamenters(){
    	return new int[]{zzMarkedPos, zzPushbackPos, zzCurrentPos, zzStartRead, zzEndRead, yyline};
    }
    
	protected boolean parsePHPDoc(){	
		final IDocumentorLexer documentorLexer = getDocumentorLexer(zzReader);
		if(documentorLexer == null){
			return false;
		}
		yypushback(zzMarkedPos - zzStartRead);
		int[] parameters = getParamenters();
		documentorLexer.reset(zzReader, zzBuffer, parameters);
		Object phpDocBlock = documentorLexer.parse();
		commentList.add(phpDocBlock);
		reset(zzReader, documentorLexer.getBuffer(), documentorLexer.getParamenters());
		return true;
	}
	
	
	protected IDocumentorLexer getDocumentorLexer(java.io.Reader  reader) {
		return null;
	}
	
	public void reset(java.io.Reader  reader, char[] buffer, int[] parameters){
		this.zzReader = reader;
		this.zzBuffer = buffer;
		this.zzMarkedPos = parameters[0];
		this.zzPushbackPos = parameters[1];
		this.zzCurrentPos = parameters[2];
		this.zzStartRead = parameters[3];
		this.zzEndRead = parameters[4];
		this.yyline = parameters[5];  
		this.yychar = this.zzStartRead - this.zzPushbackPos;
	}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public PhpAstLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public PhpAstLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 192) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL[zzMarkedPosL-1]) {
        case '\n':
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 84: 
          { switch (yytext().charAt(1)) {
        case 'n':
            break;
        case 't':
            break;
        case 'r':
            break;
        case '\\':
            break;
        case '$':
            break;
        case '{':
            break;
        default:
            return createSymbol(ParserConstants.T_BAD_CHARACTER);
    }
    return createSymbol(ParserConstants.T_CHARACTER);
          }
        case 143: break;
        case 50: 
          { return createFullSymbol(ParserConstants.T_DNUMBER);
          }
        case 144: break;
        case 83: 
          { pushState(ST_IN_SCRIPTING);
    yypushback(yylength()-1);
    return createSymbol(ParserConstants.T_CURLY_OPEN);
          }
        case 145: break;
        case 5: 
          { return createFullSymbol(ParserConstants.T_STRING);
          }
        case 146: break;
        case 110: 
          { return createSymbol(ParserConstants.T_WHILE);
          }
        case 147: break;
        case 129: 
          { return createSymbol(ParserConstants.T_ENDWHILE);
          }
        case 148: break;
        case 114: 
          { heredoc = yytext().substring(3).trim();    // for '<<<'
    yybegin(ST_HEREDOC);
    return createSymbol(ParserConstants.T_START_HEREDOC);
          }
        case 149: break;
        case 27: 
          { return createSymbol(ParserConstants.T_TILDA);
          }
        case 150: break;
        case 21: 
          { return createSymbol(ParserConstants.T_OR);
          }
        case 151: break;
        case 12: 
          { return createSymbol(ParserConstants.T_OPEN_PARENTHESE);
          }
        case 152: break;
        case 85: 
          { return createSymbol(ParserConstants.T_CHARACTER);
          }
        case 153: break;
        case 24: 
          { return createSymbol(ParserConstants.T_COMMA);
          }
        case 154: break;
        case 136: 
          { return createSymbol(ParserConstants.T_ENDSWITCH);
          }
        case 155: break;
        case 45: 
          { popState();
    return createFullSymbol(ParserConstants.T_STRING);
          }
        case 156: break;
        case 121: 
          { return createSymbol(ParserConstants.T_DOUBLE_CAST);
          }
        case 157: break;
        case 128: 
          { return createSymbol(ParserConstants.T_ARRAY_CAST);
          }
        case 158: break;
        case 46: 
          { yypushback(yylength());
    popState();
    pushState(ST_IN_SCRIPTING);
          }
        case 159: break;
        case 65: 
          { return createSymbol(ParserConstants.T_DOUBLE_ARROW);
          }
        case 160: break;
        case 131: 
          { return createSymbol(ParserConstants.T_CONTINUE);
          }
        case 161: break;
        case 67: 
          { return createSymbol(ParserConstants.T_IS_NOT_EQUAL);
          }
        case 162: break;
        case 15: 
          { return createSymbol(ParserConstants.T_NOT);
          }
        case 163: break;
        case 60: 
          { pushState(ST_LOOKING_FOR_PROPERTY);
    return createSymbol(ParserConstants.T_OBJECT_OPERATOR);
          }
        case 164: break;
        case 62: 
          { return createSymbol(ParserConstants.T_SR);
          }
        case 165: break;
        case 41: 
          { return createSymbol(ParserConstants.T_ENCAPSED_AND_WHITESPACE);
          }
        case 166: break;
        case 101: 
          { return createSymbol(ParserConstants.T_ELSE);
          }
        case 167: break;
        case 68: 
          { return createSymbol(ParserConstants.T_IS_SMALLER_OR_EQUAL);
          }
        case 168: break;
        case 32: 
          { /* This is a temporary fix which is dependant on flex and it's implementation */
    if (!stack.isEmpty()) {
        popState();
    }
    return createSymbol(ParserConstants.T_CURLY_CLOSE);
          }
        case 169: break;
        case 40: 
          { yybegin(ST_IN_SCRIPTING);
    return createSymbol(ParserConstants.T_QUATE);
          }
        case 170: break;
        case 118: 
          { return createSymbol(ParserConstants.T_SWITCH);
          }
        case 171: break;
        case 88: 
          { handlePHPDocEnd();
     yybegin(ST_IN_SCRIPTING);
          }
        case 172: break;
        case 71: 
          { return createSymbol(ParserConstants.T_DIV_EQUAL);
          }
        case 173: break;
        case 100: 
          { if (!parsePHPDoc()) {
handleCommentStart();
yybegin(ST_DOCBLOCK);
}
          }
        case 174: break;
        case 106: 
          { return createSymbol(ParserConstants.T_EMPTY);
          }
        case 175: break;
        case 115: 
          { return createSymbol(ParserConstants.T_ENDFOR);
          }
        case 176: break;
        case 105: 
          { handleCommentStart();
          }
        case 177: break;
        case 43: 
          { yybegin(ST_IN_SCRIPTING);
    return createSymbol(ParserConstants.T_BACKQUATE);
          }
        case 178: break;
        case 116: 
          { return createSymbol(ParserConstants.T_ELSEIF);
          }
        case 179: break;
        case 98: 
          { return createSymbol(ParserConstants.T_IS_NOT_IDENTICAL);
          }
        case 180: break;
        case 75: 
          { return createSymbol(ParserConstants.T_AND_EQUAL);
          }
        case 181: break;
        case 55: 
          { return createSymbol(ParserConstants.T_IF);
          }
        case 182: break;
        case 142: 
          { handleVarComment();
    //return createFullSymbol(ParserConstants.T_VAR_COMMENT);
          }
        case 183: break;
        case 59: 
          { return createSymbol(ParserConstants.T_DEC);
          }
        case 184: break;
        case 126: 
          { return createSymbol(ParserConstants.T_REQUIRE);
          }
        case 185: break;
        case 28: 
          { return createSymbol(ParserConstants.T_DOLLAR);
          }
        case 186: break;
        case 57: 
          { return createSymbol(ParserConstants.T_LOGICAL_OR);
          }
        case 187: break;
        case 17: 
          { return createSymbol(ParserConstants.T_TIMES);
          }
        case 188: break;
        case 112: 
          { return createSymbol(ParserConstants.T_PRINT);
          }
        case 189: break;
        case 96: 
          { return createSymbol(ParserConstants.T_VAR);
          }
        case 190: break;
        case 34: 
          { yybegin(ST_DOUBLE_QUOTES);
    return createSymbol(ParserConstants.T_QUATE);
          }
        case 191: break;
        case 69: 
          { return createSymbol(ParserConstants.T_SL);
          }
        case 192: break;
        case 139: 
          { return createSymbol(ParserConstants.T_ENDFOREACH);
          }
        case 193: break;
        case 1: 
          { return createSymbol(ParserConstants.T_INLINE_HTML);
          }
        case 194: break;
        case 104: 
          { return createSymbol(ParserConstants.T_LIST);
          }
        case 195: break;
        case 127: 
          { return createSymbol(ParserConstants.T_UNSET_CAST);
          }
        case 196: break;
        case 81: 
          { if (yylength() == 2) {
        yypushback(1);
    }
    return createSymbol(ParserConstants.T_CHARACTER);
          }
        case 197: break;
        case 70: 
          { return createSymbol(ParserConstants.T_MUL_EQUAL);
          }
        case 198: break;
        case 11: 
          { return createSymbol(ParserConstants.T_NEKUDOTAIM);
          }
        case 199: break;
        case 79: 
          { return createSymbol(ParserConstants.T_XOR_EQUAL);
          }
        case 200: break;
        case 109: 
          { return createSymbol(ParserConstants.T_CONST);
          }
        case 201: break;
        case 20: 
          { return createSymbol(ParserConstants.T_REFERENCE);
          }
        case 202: break;
        case 141: 
          { return createSymbol(ParserConstants.T_FUNC_C);
          }
        case 203: break;
        case 124: 
          { return createSymbol(ParserConstants.T_DECLARE);
          }
        case 204: break;
        case 10: 
          { return createSymbol(ParserConstants.T_LGREATER);
          }
        case 205: break;
        case 73: 
          { yybegin(YYINITIAL);
    return createSymbol(ParserConstants.T_SEMICOLON);  /* implicit ';' at php-end tag */
          }
        case 206: break;
        case 87: 
          { handleMultilineCommentEnd();
    yybegin(ST_IN_SCRIPTING);
          }
        case 207: break;
        case 48: 
          { //	yymore();
          }
        case 208: break;
        case 74: 
          { return createSymbol(ParserConstants.T_MOD_EQUAL);
          }
        case 209: break;
        case 4: 
          { return createSymbol(ParserConstants.T_NEKUDA);
          }
        case 210: break;
        case 6: 
          { return createSymbol(ParserConstants.T_PLUS);
          }
        case 211: break;
        case 107: 
          { return createSymbol(ParserConstants.T_BREAK);
          }
        case 212: break;
        case 23: 
          { return createSymbol(ParserConstants.T_SEMICOLON);
          }
        case 213: break;
        case 44: 
          { yypushback(yylength());
    popState();
          }
        case 214: break;
        case 52: 
          { return createSymbol(ParserConstants.T_INC);
          }
        case 215: break;
        case 64: 
          { return createSymbol(ParserConstants.T_PAAMAYIM_NEKUDOTAYIM);
          }
        case 216: break;
        case 36: 
          { /* treat numbers (almost) as strings inside encapsulated strings */
    return createFullSymbol(ParserConstants.T_NUM_STRING);
          }
        case 217: break;
        case 94: 
          { return createSymbol(ParserConstants.T_LOGICAL_AND);
          }
        case 218: break;
        case 102: 
          { return createSymbol(ParserConstants.T_EVAL);
          }
        case 219: break;
        case 132: 
          { return createSymbol(ParserConstants.T_OBJECT_CAST);
          }
        case 220: break;
        case 113: 
          { return createSymbol(ParserConstants.T_INT_CAST);
          }
        case 221: break;
        case 30: 
          { return createSymbol(ParserConstants.T_AT);
          }
        case 222: break;
        case 25: 
          { return createSymbol(ParserConstants.T_OPEN_RECT);
          }
        case 223: break;
        case 120: 
          { return createSymbol(ParserConstants.T_BOOL_CAST);
          }
        case 224: break;
        case 58: 
          { return createSymbol(ParserConstants.T_AS);
          }
        case 225: break;
        case 89: 
          { if (asp_tags || yytext().charAt(0)!='%') { /* asp comment? */
   		handleLineCommentEnd();
        yypushback(yylength());
		yybegin(ST_IN_SCRIPTING);
		//return T_COMMENT;
	}
          }
        case 226: break;
        case 86: 
          { String text = yytext();
    int length = text.length();
    text = text.trim();
    boolean foundNP = false;
    if (text.endsWith(";")) {
        text = text.substring(0, text.length() - 1);
        foundNP = true;
    }
    if (text.equals(heredoc)) {
        if (foundNP) {
            yypushback(length - text.length());
        }
        heredoc = null;
        yybegin(ST_IN_SCRIPTING);
        return createSymbol(ParserConstants.T_END_HEREDOC);
    } else {
        return createFullSymbol(ParserConstants.T_STRING);
    }
          }
        case 227: break;
        case 39: 
          { return createSymbol(ParserConstants.T_CURLY_CLOSE);
          }
        case 228: break;
        case 3: 
          { return createFullSymbol(ParserConstants.T_LNUMBER);
          }
        case 229: break;
        case 77: 
          { return createSymbol(ParserConstants.T_OR_EQUAL);
          }
        case 230: break;
        case 137: 
          { return createSymbol(ParserConstants.T_CLASS_C);
          }
        case 231: break;
        case 16: 
          { return createSymbol(ParserConstants.T_RGREATER);
          }
        case 232: break;
        case 108: 
          { return createSymbol(ParserConstants.T_UNSET);
          }
        case 233: break;
        case 92: 
          { return createSymbol(ParserConstants.T_FOR);
          }
        case 234: break;
        case 47: 
          { popState();
    pushState(ST_IN_SCRIPTING);
    return createFullSymbol(ParserConstants.T_STRING_VARNAME);
          }
        case 235: break;
        case 8: 
          { yybegin(ST_SINGLE_QUOTE);
    return createSymbol(ParserConstants.T_SINGLE_QUATE);
          }
        case 236: break;
        case 135: 
          { return createSymbol(ParserConstants.T_LINE);
          }
        case 237: break;
        case 134: 
          { return createSymbol(ParserConstants.T_FILE);
          }
        case 238: break;
        case 54: 
          { return createFullSymbol(ParserConstants.T_CONSTANT_ENCAPSED_STRING);
          }
        case 239: break;
        case 130: 
          { return createSymbol(ParserConstants.T_FUNCTION);
          }
        case 240: break;
        case 125: 
          { return createSymbol(ParserConstants.T_FOREACH);
          }
        case 241: break;
        case 95: 
          { return createSymbol(ParserConstants.T_SR_EQUAL);
          }
        case 242: break;
        case 91: 
          { return createFullSymbol(ParserConstants.T_EXIT);
          }
        case 243: break;
        case 22: 
          { return createSymbol(ParserConstants.T_KOVA);
          }
        case 244: break;
        case 51: 
          { return createSymbol(ParserConstants.T_CONCAT_EQUAL);
          }
        case 245: break;
        case 140: 
          { return createSymbol(ParserConstants.T_INCLUDE_ONCE);
          }
        case 246: break;
        case 93: 
          { return createSymbol(ParserConstants.T_NEW);
          }
        case 247: break;
        case 78: 
          { return createSymbol(ParserConstants.T_BOOLEAN_OR);
          }
        case 248: break;
        case 119: 
          { return createSymbol(ParserConstants.T_RETURN);
          }
        case 249: break;
        case 49: 
          { String yytext = yytext();
	switch (yytext.charAt(yytext.length() - 1)) {
		case '?':
		case '%':
		case '>':
			yypushback(1);
			break;
		default:
			handleLineCommentEnd();
			yybegin(ST_IN_SCRIPTING);
	}
//	yymore();
          }
        case 250: break;
        case 18: 
          { return createSymbol(ParserConstants.T_DIV);
          }
        case 251: break;
        case 13: 
          { return createSymbol(ParserConstants.T_CLOSE_PARENTHESE);
          }
        case 252: break;
        case 37: 
          { return createFullSymbol(ParserConstants.T_ENCAPSED_AND_WHITESPACE);
          }
        case 253: break;
        case 9: 
          { return createSymbol(ParserConstants.T_MINUS);
          }
        case 254: break;
        case 123: 
          { return createSymbol(ParserConstants.T_DEFAULT);
          }
        case 255: break;
        case 80: 
          { return createFullSymbol(ParserConstants.T_VARIABLE);
          }
        case 256: break;
        case 14: 
          { return createSymbol(ParserConstants.T_EQUAL);
          }
        case 257: break;
        case 33: 
          { handleCommentStart();
	yybegin(ST_ONE_LINE_COMMENT);
//	yymore();
          }
        case 258: break;
        case 42: 
          { yybegin(ST_IN_SCRIPTING);
    return createSymbol(ParserConstants.T_SINGLE_QUATE);
          }
        case 259: break;
        case 35: 
          { yybegin(ST_BACKQUOTE);
    return createSymbol(ParserConstants.T_BACKQUATE);
          }
        case 260: break;
        case 38: 
          { return createSymbol(ParserConstants.T_CURLY_OPEN);
          }
        case 261: break;
        case 90: 
          { return createSymbol(ParserConstants.T_LOGICAL_XOR);
          }
        case 262: break;
        case 76: 
          { return createSymbol(ParserConstants.T_BOOLEAN_AND);
          }
        case 263: break;
        case 97: 
          { return createSymbol(ParserConstants.T_IS_IDENTICAL);
          }
        case 264: break;
        case 82: 
          { pushState(ST_LOOKING_FOR_VARNAME);
    return createSymbol(ParserConstants.T_DOLLAR_OPEN_CURLY_BRACES);
          }
        case 265: break;
        case 56: 
          { return createSymbol(ParserConstants.T_DO);
          }
        case 266: break;
        case 122: 
          { return createSymbol(ParserConstants.T_INCLUDE);
          }
        case 267: break;
        case 63: 
          { return createSymbol(ParserConstants.T_IS_GREATER_OR_EQUAL);
          }
        case 268: break;
        case 117: 
          { return createSymbol(ParserConstants.T_STATIC);
          }
        case 269: break;
        case 133: 
          { return createSymbol(ParserConstants.T_STRING_CAST);
          }
        case 270: break;
        case 111: 
          { return createSymbol(ParserConstants.T_ARRAY);
          }
        case 271: break;
        case 2: 
          { // do nothing
          }
        case 272: break;
        case 31: 
          { pushState(ST_IN_SCRIPTING);
    return createSymbol(ParserConstants.T_CURLY_OPEN);
          }
        case 273: break;
        case 26: 
          { return createSymbol(ParserConstants.T_CLOSE_RECT);
          }
        case 274: break;
        case 72: 
          { handleCommentStart();
    yybegin(ST_COMMENT);
          }
        case 275: break;
        case 103: 
          { return createSymbol(ParserConstants.T_CASE);
          }
        case 276: break;
        case 61: 
          { return createSymbol(ParserConstants.T_MINUS_EQUAL);
          }
        case 277: break;
        case 66: 
          { return createSymbol(ParserConstants.T_IS_EQUAL);
          }
        case 278: break;
        case 99: 
          { return createSymbol(ParserConstants.T_SL_EQUAL);
          }
        case 279: break;
        case 29: 
          { return createSymbol(ParserConstants.T_QUESTION_MARK);
          }
        case 280: break;
        case 138: 
          { return createSymbol(ParserConstants.T_ENDDECLARE);
          }
        case 281: break;
        case 53: 
          { return createSymbol(ParserConstants.T_PLUS_EQUAL);
          }
        case 282: break;
        case 7: 
          { 
          }
        case 283: break;
        case 19: 
          { return createSymbol(ParserConstants.T_PRECENT);
          }
        case 284: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {     return createSymbol(sym.EOF);
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java PhpAstLexer <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        PhpAstLexer scanner = null;
        try {
          scanner = new PhpAstLexer( new java.io.FileReader(argv[i]) );
          while ( !scanner.zzAtEOF ) scanner.next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
