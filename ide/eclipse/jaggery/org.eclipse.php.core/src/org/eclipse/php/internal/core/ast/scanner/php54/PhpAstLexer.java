/* The following code was generated by JFlex 1.4.1 on 9/6/13 2:13 PM */

/*******************************************************************************
 * Copyright (c) 2006 Zend Corporation and IBM Corporation.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Zend and IBM - Initial implementation
 *******************************************************************************/

package org.eclipse.php.internal.core.ast.scanner.php54;

import java.io.IOException;
import java.util.LinkedList;
import java.util.List;

import org.eclipse.php.internal.core.ast.nodes.IDocumentorLexer;
import org.eclipse.php.internal.core.ast.nodes.Comment;
import java_cup.sym;
import org.eclipse.php.internal.core.ast.nodes.AST;
import java_cup.runtime.Symbol;
import org.eclipse.php.internal.core.ast.scanner.StateStack;
import org.eclipse.php.internal.core.PHPVersion;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 9/6/13 2:13 PM from the specification file
 * <tt>ast_scanner.flex</tt>
 */
public class PhpAstLexer implements org.eclipse.php.internal.core.ast.scanner.AstLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int ST_DOCBLOCK = 11;
  public static final int ST_IN_SCRIPTING = 1;
  public static final int ST_NOWDOC = 6;
  public static final int ST_LOOKING_FOR_PROPERTY = 7;
  public static final int ST_ONE_LINE_COMMENT = 12;
  public static final int ST_COMMENT = 10;
  public static final int ST_BACKQUOTE = 3;
  public static final int ST_DOUBLE_QUOTES = 2;
  public static final int YYINITIAL = 0;
  public static final int ST_VAR_OFFSET = 9;
  public static final int ST_LOOKING_FOR_VARNAME = 8;
  public static final int ST_HEREDOC = 4;
  public static final int ST_END_HEREDOC = 5;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\14\1\13\2\0\1\15\22\0\1\14\1\62\1\17\1\107"+
    "\1\16\1\66\1\67\1\106\1\53\1\54\1\64\1\4\1\77\1\47"+
    "\1\2\1\65\1\5\1\11\10\1\1\51\1\23\1\63\1\61\1\50"+
    "\1\103\1\104\1\55\2\7\1\75\1\3\1\7\7\12\1\74\1\72"+
    "\2\12\1\73\5\12\1\76\2\12\1\100\1\20\1\101\1\71\1\57"+
    "\1\21\1\37\1\10\1\27\1\43\1\35\1\24\1\45\1\40\1\31"+
    "\1\56\1\44\1\42\1\12\1\26\1\32\1\46\1\60\1\34\1\33"+
    "\1\30\1\25\1\52\1\41\1\6\1\36\1\12\1\22\1\70\1\105"+
    "\1\102\201\12\uff00\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\10\0\2\2\1\3\1\4\1\5\1\6"+
    "\1\7\1\4\1\6\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\14\6\1\16\1\17\1\20\1\6\1\21\1\22"+
    "\1\6\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\2\6\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\3\1\43\1\1\1\3\1\44\2\3"+
    "\1\1\2\3\1\45\1\3\3\1\3\3\1\46\3\3"+
    "\1\47\1\50\1\47\1\51\1\52\1\53\1\5\1\7"+
    "\1\53\1\54\1\55\1\56\1\57\1\16\1\17\1\20"+
    "\1\21\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\60\1\61\1\10\1\62\3\10\3\63"+
    "\2\62\1\0\1\2\1\0\1\64\1\0\1\65\1\66"+
    "\1\67\2\0\1\6\4\0\1\70\2\0\7\6\1\71"+
    "\7\6\1\72\3\6\1\73\1\74\1\75\1\76\1\77"+
    "\1\100\1\6\11\0\2\6\1\101\1\102\2\103\1\104"+
    "\1\105\1\0\1\106\1\107\1\110\1\111\1\112\1\113"+
    "\1\114\1\115\1\116\1\117\1\120\1\6\5\0\2\121"+
    "\1\122\1\123\1\121\3\0\3\124\3\0\1\125\2\1"+
    "\2\121\3\0\1\126\2\0\1\127\1\130\2\0\1\131"+
    "\1\132\1\133\2\134\1\64\1\0\1\64\1\135\1\6"+
    "\1\0\1\6\1\136\1\137\3\6\1\140\15\6\1\141"+
    "\1\142\11\0\1\6\1\143\1\144\1\145\1\146\3\0"+
    "\1\147\1\0\2\111\1\150\1\0\1\151\1\152\1\1"+
    "\1\153\1\0\2\130\5\6\1\154\12\6\1\155\1\156"+
    "\2\6\1\157\1\6\11\0\1\6\4\0\1\160\2\0"+
    "\1\161\2\6\1\162\1\163\1\164\6\6\1\165\3\6"+
    "\1\166\1\6\1\167\5\0\1\170\5\0\1\171\2\172"+
    "\4\0\1\173\4\6\1\174\1\175\1\6\1\176\2\6"+
    "\1\177\1\6\3\0\1\200\3\0\1\201\5\0\2\6"+
    "\1\202\1\6\1\203\2\6\1\204\4\0\1\205\2\0"+
    "\1\206\1\207\4\6\1\210\1\211\1\212\3\0\3\6"+
    "\1\213\1\0\1\6\1\214\1\6\3\0\2\6\1\0"+
    "\1\215\1\216\1\217";

  private static int [] zzUnpackAction() {
    int [] result = new int[442];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\110\0\220\0\330\0\u0120\0\u0168\0\u01b0\0\u01f8"+
    "\0\u0240\0\u0288\0\u02d0\0\u0318\0\u0360\0\u03a8\0\u03f0\0\u0438"+
    "\0\u0480\0\u04c8\0\u0510\0\u0558\0\u05a0\0\u05e8\0\u0630\0\u0438"+
    "\0\u0678\0\u0438\0\u0438\0\u0438\0\u06c0\0\u0708\0\u0750\0\u0798"+
    "\0\u07e0\0\u0828\0\u0870\0\u08b8\0\u0900\0\u0948\0\u0990\0\u09d8"+
    "\0\u0a20\0\u0a68\0\u0ab0\0\u0af8\0\u0b40\0\u0438\0\u0b88\0\u0bd0"+
    "\0\u0c18\0\u0c60\0\u0ca8\0\u0cf0\0\u0d38\0\u0d80\0\u0dc8\0\u0e10"+
    "\0\u0e58\0\u0ea0\0\u0438\0\u0438\0\u0438\0\u0438\0\u0438\0\u0438"+
    "\0\u0438\0\u0ee8\0\u0438\0\u0f30\0\u0f78\0\u0438\0\u0fc0\0\u1008"+
    "\0\u1050\0\u1098\0\u10e0\0\u0438\0\u1128\0\u1170\0\u11b8\0\u1200"+
    "\0\u1248\0\u1290\0\u12d8\0\u0438\0\u1320\0\u1368\0\u13b0\0\u0438"+
    "\0\u13f8\0\u1440\0\u0438\0\u1488\0\u14d0\0\u0438\0\u0438\0\u1518"+
    "\0\u0438\0\u0438\0\u0438\0\u0438\0\u0438\0\u0438\0\u0438\0\u0438"+
    "\0\u0438\0\u0438\0\u0438\0\u0438\0\u0438\0\u0438\0\u0438\0\u0438"+
    "\0\u0438\0\u0438\0\u0438\0\u1560\0\u15a8\0\u0438\0\u15f0\0\u1638"+
    "\0\u1680\0\u0438\0\u16c8\0\u0438\0\u1710\0\u1758\0\u0438\0\u17a0"+
    "\0\u17e8\0\u1830\0\u0438\0\u0438\0\u0438\0\u1878\0\u18c0\0\u1908"+
    "\0\u1950\0\u0ee8\0\u0678\0\u1998\0\u0438\0\u19e0\0\u1a28\0\u1a70"+
    "\0\u1ab8\0\u1b00\0\u1b48\0\u1b90\0\u1bd8\0\u1c20\0\u0510\0\u1c68"+
    "\0\u1cb0\0\u1cf8\0\u1d40\0\u1d88\0\u1dd0\0\u1e18\0\u0510\0\u1e60"+
    "\0\u1ea8\0\u1ef0\0\u0438\0\u0438\0\u0438\0\u1f38\0\u0438\0\u0438"+
    "\0\u1f80\0\u1fc8\0\u0b40\0\u2010\0\u2058\0\u20a0\0\u20e8\0\u2130"+
    "\0\u2178\0\u21c0\0\u2208\0\u2250\0\u0438\0\u2298\0\u22e0\0\u0438"+
    "\0\u0438\0\u2328\0\u2370\0\u0438\0\u0438\0\u23b8\0\u2400\0\u0438"+
    "\0\u0438\0\u0438\0\u0438\0\u0438\0\u0438\0\u0510\0\u2448\0\u2490"+
    "\0\u24d8\0\u0fc0\0\u2520\0\u2568\0\u24d8\0\u0438\0\u0438\0\u0438"+
    "\0\u2520\0\u25b0\0\u10e0\0\u25f8\0\u25b0\0\u0438\0\u25f8\0\u2640"+
    "\0\u1290\0\u2688\0\u1200\0\u26d0\0\u2718\0\u2640\0\u2688\0\u1320"+
    "\0\u13b0\0\u1368\0\u13b0\0\u2760\0\u27a8\0\u0438\0\u27f0\0\u2838"+
    "\0\u2880\0\u0438\0\u0438\0\u0438\0\u0438\0\u28c8\0\u2910\0\u2910"+
    "\0\u1878\0\u18c0\0\u2958\0\u29a0\0\u29e8\0\u0510\0\u0510\0\u2a30"+
    "\0\u2a78\0\u2ac0\0\u0510\0\u2b08\0\u2b50\0\u2b98\0\u2be0\0\u2c28"+
    "\0\u2c70\0\u2cb8\0\u2d00\0\u2d48\0\u2d90\0\u2dd8\0\u2e20\0\u2e68"+
    "\0\u0438\0\u0510\0\u2eb0\0\u2ef8\0\u2f40\0\u2f88\0\u2fd0\0\u3018"+
    "\0\u3060\0\u30a8\0\u30f0\0\u3138\0\u0510\0\u0438\0\u0438\0\u0438"+
    "\0\u3180\0\u31c8\0\u3210\0\u3258\0\u32a0\0\u0438\0\u32e8\0\u0510"+
    "\0\u3330\0\u0438\0\u0438\0\u3378\0\u0438\0\u33c0\0\u2838\0\u2880"+
    "\0\u3408\0\u3450\0\u3498\0\u34e0\0\u3528\0\u0510\0\u3570\0\u35b8"+
    "\0\u3600\0\u3648\0\u3690\0\u36d8\0\u3720\0\u3768\0\u37b0\0\u37f8"+
    "\0\u3840\0\u0510\0\u3888\0\u38d0\0\u0510\0\u3918\0\u3960\0\u39a8"+
    "\0\u39f0\0\u3a38\0\u3a80\0\u3ac8\0\u3b10\0\u3b58\0\u3ba0\0\u3be8"+
    "\0\u3c30\0\u3c78\0\u3cc0\0\u3d08\0\u0438\0\u3d50\0\u3d98\0\u0510"+
    "\0\u3de0\0\u3e28\0\u0510\0\u0510\0\u0510\0\u3e70\0\u3eb8\0\u3f00"+
    "\0\u3f48\0\u3f90\0\u3fd8\0\u0510\0\u4020\0\u4068\0\u40b0\0\u0510"+
    "\0\u40f8\0\u0510\0\u4140\0\u4188\0\u41d0\0\u4218\0\u4260\0\u0438"+
    "\0\u42a8\0\u42f0\0\u4338\0\u4380\0\u43c8\0\u0510\0\u0438\0\u4410"+
    "\0\u4458\0\u44a0\0\u44e8\0\u4530\0\u0438\0\u4578\0\u45c0\0\u4608"+
    "\0\u4650\0\u0510\0\u0510\0\u4698\0\u0510\0\u46e0\0\u4728\0\u0510"+
    "\0\u4770\0\u47b8\0\u4800\0\u4848\0\u0438\0\u4890\0\u48d8\0\u4920"+
    "\0\u0438\0\u4968\0\u49b0\0\u49f8\0\u4a40\0\u4a88\0\u4ad0\0\u4b18"+
    "\0\u4b60\0\u4ba8\0\u4bf0\0\u4c38\0\u4c80\0\u0510\0\u4cc8\0\u4d10"+
    "\0\u4d58\0\u4da0\0\u0438\0\u4de8\0\u4e30\0\u0510\0\u0510\0\u4e78"+
    "\0\u4ec0\0\u4f08\0\u4f50\0\u0510\0\u0438\0\u0438\0\u4f98\0\u4fe0"+
    "\0\u5028\0\u5070\0\u50b8\0\u5100\0\u0510\0\u5148\0\u5190\0\u0510"+
    "\0\u51d8\0\u5220\0\u5268\0\u52b0\0\u52f8\0\u5340\0\u5388\0\u0438"+
    "\0\u0510\0\u0510";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[442];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\63\16\1\17\24\16\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\2\23\1\26\1\21\1\23\3\27\1\30\1\31"+
    "\1\20\1\32\1\33\1\34\1\35\1\23\1\36\1\37"+
    "\1\40\1\41\1\23\1\42\1\43\1\44\3\23\1\45"+
    "\1\23\1\46\1\23\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\3\23\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\66\1\67\1\70\1\71\3\23"+
    "\1\72\1\73\1\74\1\75\1\76\1\77\1\100\1\101"+
    "\1\102\1\103\16\104\1\105\1\106\1\107\1\104\1\110"+
    "\65\104\16\111\1\112\1\111\1\113\1\114\1\115\65\111"+
    "\3\116\1\117\2\116\3\117\1\116\1\117\1\120\1\116"+
    "\1\120\1\121\1\116\1\122\1\116\1\123\1\116\23\117"+
    "\3\116\1\117\2\116\4\117\11\116\5\117\11\116\110\124"+
    "\3\125\1\126\2\125\3\126\1\125\1\126\1\127\1\125"+
    "\1\127\6\125\23\126\3\125\1\126\2\125\4\126\11\125"+
    "\5\126\11\125\3\130\1\131\2\130\3\131\1\130\1\131"+
    "\3\27\6\130\23\131\1\132\2\130\1\131\2\130\4\131"+
    "\11\130\5\131\11\130\3\133\1\134\2\133\3\134\1\133"+
    "\1\134\11\133\23\134\3\133\1\134\2\133\4\134\11\133"+
    "\5\134\11\133\1\20\1\135\1\136\1\23\1\137\1\140"+
    "\3\23\1\135\1\23\3\141\1\30\1\142\1\141\1\143"+
    "\1\144\1\34\23\23\1\145\1\146\1\147\1\23\1\150"+
    "\1\56\4\23\1\151\1\152\1\153\1\154\1\155\1\156"+
    "\1\157\1\160\1\161\5\23\1\73\1\74\1\162\1\76"+
    "\1\77\1\100\1\163\2\141\64\164\1\165\23\164\15\166"+
    "\1\167\46\166\1\170\23\166\13\171\1\172\1\171\1\173"+
    "\32\171\1\174\15\171\1\175\14\171\1\175\4\171\63\16"+
    "\1\176\57\16\1\177\27\16\1\0\2\16\1\200\14\16"+
    "\1\0\4\16\111\0\1\21\1\201\1\202\1\0\1\21"+
    "\3\0\1\21\23\0\1\202\53\0\1\201\3\0\1\201"+
    "\3\0\1\201\47\0\1\203\27\0\1\23\1\0\1\23"+
    "\1\0\6\23\11\0\23\23\3\0\1\23\2\0\4\23"+
    "\11\0\5\23\15\0\1\204\54\0\1\205\27\0\1\21"+
    "\1\201\1\202\1\0\1\21\1\206\1\0\1\207\1\21"+
    "\23\0\1\202\53\0\1\23\1\0\1\23\1\0\6\23"+
    "\4\0\1\31\4\0\10\23\1\210\12\23\3\0\1\23"+
    "\2\0\4\23\2\0\1\211\6\0\5\23\7\0\1\212"+
    "\14\0\3\27\72\0\16\213\1\214\1\215\1\216\1\213"+
    "\1\217\65\213\1\0\1\23\1\0\1\23\1\0\6\23"+
    "\11\0\1\23\1\220\4\23\1\221\14\23\3\0\1\23"+
    "\2\0\4\23\11\0\5\23\12\0\1\23\1\0\1\23"+
    "\1\0\6\23\11\0\11\23\1\222\11\23\3\0\1\23"+
    "\2\0\4\23\11\0\5\23\12\0\1\23\1\0\1\23"+
    "\1\0\6\23\11\0\6\23\1\223\4\23\1\224\7\23"+
    "\3\0\1\23\2\0\4\23\11\0\5\23\12\0\1\23"+
    "\1\0\1\23\1\0\6\23\11\0\10\23\1\225\3\23"+
    "\1\226\6\23\3\0\1\23\2\0\4\23\11\0\5\23"+
    "\12\0\1\23\1\0\1\23\1\0\6\23\11\0\1\227"+
    "\1\23\1\230\20\23\3\0\1\23\2\0\4\23\11\0"+
    "\5\23\12\0\1\23\1\0\1\23\1\0\6\23\11\0"+
    "\15\23\1\231\5\23\3\0\1\23\2\0\4\23\11\0"+
    "\5\23\12\0\1\23\1\0\1\23\1\0\6\23\11\0"+
    "\11\23\1\232\11\23\3\0\1\23\2\0\4\23\11\0"+
    "\5\23\12\0\1\23\1\0\1\23\1\0\6\23\11\0"+
    "\2\23\1\233\13\23\1\234\4\23\3\0\1\235\2\0"+
    "\4\23\11\0\5\23\12\0\1\23\1\0\1\23\1\0"+
    "\6\23\11\0\14\23\1\236\6\23\3\0\1\23\2\0"+
    "\4\23\11\0\5\23\12\0\1\23\1\0\1\23\1\0"+
    "\6\23\11\0\6\23\1\237\2\23\1\240\11\23\3\0"+
    "\1\23\2\0\4\23\11\0\5\23\12\0\1\23\1\0"+
    "\1\23\1\0\6\23\11\0\6\23\1\241\14\23\3\0"+
    "\1\23\2\0\4\23\11\0\5\23\12\0\1\23\1\0"+
    "\1\23\1\0\6\23\11\0\10\23\1\242\12\23\3\0"+
    "\1\23\2\0\4\23\11\0\5\23\60\0\1\243\1\244"+
    "\10\0\1\245\76\0\1\246\10\0\1\247\77\0\1\250"+
    "\37\0\1\23\1\0\1\23\1\0\6\23\11\0\13\23"+
    "\1\251\7\23\3\0\1\23\2\0\4\23\11\0\5\23"+
    "\21\0\1\252\3\0\1\253\7\0\1\254\4\0\1\255"+
    "\1\256\1\257\1\260\6\0\1\261\11\0\1\262\33\0"+
    "\1\23\1\0\1\23\1\0\6\23\11\0\10\23\1\263"+
    "\12\23\3\0\1\23\2\0\4\23\11\0\2\23\1\264"+
    "\2\23\61\0\1\265\10\0\1\266\107\0\1\267\76\0"+
    "\1\270\10\0\1\271\1\0\1\272\1\0\1\273\103\0"+
    "\1\274\107\0\1\275\2\0\1\276\1\103\72\0\1\277"+
    "\10\0\1\300\107\0\1\301\5\0\1\302\101\0\1\303"+
    "\6\0\1\304\100\0\1\305\27\0\1\23\1\0\1\23"+
    "\1\0\6\23\11\0\23\23\3\0\1\23\2\0\4\23"+
    "\11\0\1\23\1\306\3\23\12\0\1\23\1\0\1\23"+
    "\1\0\6\23\11\0\23\23\3\0\1\23\2\0\4\23"+
    "\11\0\1\307\4\23\11\0\20\212\1\310\65\212\1\215"+
    "\1\212\16\104\1\311\1\0\1\312\1\104\1\313\70\104"+
    "\1\314\2\104\3\314\1\104\1\314\3\104\1\315\1\316"+
    "\1\312\1\104\1\317\1\104\23\314\3\104\1\314\2\104"+
    "\4\314\11\104\5\314\137\104\1\320\1\316\1\312\1\104"+
    "\1\321\65\104\16\111\1\322\1\111\1\323\1\0\1\324"+
    "\70\111\1\314\2\111\3\314\1\111\1\314\3\111\1\325"+
    "\1\111\1\323\1\326\1\317\1\111\23\314\3\111\1\314"+
    "\2\111\4\314\11\111\5\314\137\111\1\320\1\111\1\323"+
    "\1\326\1\327\65\111\13\116\1\120\1\116\1\120\1\330"+
    "\1\116\1\331\1\116\1\332\66\116\1\117\1\116\1\117"+
    "\1\116\6\117\1\333\1\116\1\333\1\330\1\116\1\331"+
    "\1\116\1\332\1\334\23\117\3\116\1\117\2\116\4\117"+
    "\11\116\5\117\14\116\1\335\2\116\3\335\1\116\1\335"+
    "\1\120\1\116\1\120\1\330\1\116\1\331\1\116\1\332"+
    "\1\116\23\335\3\116\1\335\2\116\4\335\11\116\5\335"+
    "\14\116\1\314\2\116\3\314\1\116\1\314\1\120\1\116"+
    "\1\120\1\336\1\116\1\331\1\116\1\317\1\116\23\314"+
    "\3\116\1\314\2\116\4\314\11\116\5\314\24\116\1\120"+
    "\1\116\1\120\105\116\1\120\1\116\1\120\1\320\1\116"+
    "\1\331\1\116\1\337\65\116\13\340\1\341\1\340\1\341"+
    "\73\340\1\342\1\340\1\342\1\340\6\342\1\343\1\340"+
    "\1\343\5\340\1\344\23\342\3\340\1\342\2\340\4\342"+
    "\11\340\5\342\14\340\1\345\2\340\3\345\1\340\1\345"+
    "\1\341\1\340\1\341\6\340\23\345\3\340\1\345\2\340"+
    "\4\345\11\340\5\345\11\340\1\0\1\131\1\0\1\131"+
    "\1\0\6\131\11\0\23\131\3\0\1\131\2\0\4\131"+
    "\11\0\5\131\61\0\1\346\40\0\1\134\1\0\1\134"+
    "\1\0\6\134\11\0\23\134\3\0\1\134\2\0\4\134"+
    "\11\0\5\134\12\0\1\135\3\0\1\135\3\0\1\135"+
    "\77\0\1\347\3\0\1\347\1\350\1\0\1\351\1\347"+
    "\76\0\64\164\1\0\23\164\65\0\1\352\35\0\1\166"+
    "\161\0\1\353\22\0\13\171\1\172\1\171\1\173\32\171"+
    "\1\172\15\171\1\172\14\171\1\172\4\171\13\0\1\172"+
    "\144\0\1\354\37\0\33\16\1\0\27\16\1\0\2\16"+
    "\1\0\14\16\1\0\4\16\13\0\2\355\1\356\73\0"+
    "\1\201\1\0\1\202\1\0\1\201\3\0\1\201\23\0"+
    "\1\202\53\0\1\357\2\0\1\360\1\357\3\0\1\357"+
    "\35\0\1\360\41\0\1\361\1\0\1\361\1\0\1\361"+
    "\1\0\3\361\12\0\1\361\2\0\1\361\5\0\1\361"+
    "\1\0\1\361\3\0\1\361\11\0\1\361\17\0\1\361"+
    "\17\0\1\362\3\0\1\362\77\0\1\23\1\0\1\23"+
    "\1\0\6\23\11\0\11\23\1\363\11\23\3\0\1\23"+
    "\2\0\4\23\11\0\5\23\74\0\1\364\24\0\3\213"+
    "\1\0\2\213\3\0\1\213\1\0\3\213\1\214\1\215"+
    "\1\216\1\213\1\0\1\213\23\0\3\213\1\0\2\213"+
    "\4\0\11\213\5\0\137\213\1\0\1\215\1\216\1\213"+
    "\1\217\65\213\1\0\1\23\1\0\1\23\1\0\6\23"+
    "\11\0\2\23\1\365\20\23\3\0\1\23\2\0\4\23"+
    "\11\0\5\23\12\0\1\23\1\0\1\23\1\0\6\23"+
    "\11\0\10\23\1\366\12\23\3\0\1\23\2\0\4\23"+
    "\11\0\5\23\12\0\1\23\1\0\1\23\1\0\6\23"+
    "\11\0\15\23\1\367\5\23\3\0\1\23\2\0\4\23"+
    "\11\0\5\23\12\0\1\23\1\0\1\23\1\0\6\23"+
    "\11\0\2\23\1\370\20\23\3\0\1\23\2\0\4\23"+
    "\11\0\5\23\12\0\1\23\1\0\1\23\1\0\6\23"+
    "\11\0\4\23\1\371\2\23\1\372\13\23\3\0\1\23"+
    "\2\0\4\23\11\0\5\23\12\0\1\23\1\0\1\23"+
    "\1\0\6\23\11\0\12\23\1\373\10\23\3\0\1\23"+
    "\2\0\4\23\11\0\5\23\12\0\1\23\1\0\1\23"+
    "\1\0\6\23\11\0\10\23\1\374\12\23\3\0\1\23"+
    "\2\0\4\23\11\0\5\23\12\0\1\23\1\0\1\23"+
    "\1\0\6\23\11\0\3\23\1\375\3\23\1\376\13\23"+
    "\3\0\1\23\2\0\4\23\11\0\5\23\12\0\1\23"+
    "\1\0\1\23\1\0\6\23\11\0\5\23\1\377\15\23"+
    "\3\0\1\23\2\0\4\23\11\0\5\23\12\0\1\23"+
    "\1\0\1\23\1\0\6\23\11\0\4\23\1\u0100\16\23"+
    "\3\0\1\23\2\0\3\23\1\u0101\11\0\5\23\12\0"+
    "\1\23\1\0\1\23\1\0\6\23\11\0\17\23\1\u0102"+
    "\3\23\3\0\1\23\2\0\4\23\11\0\5\23\12\0"+
    "\1\23\1\0\1\23\1\0\6\23\11\0\7\23\1\u0103"+
    "\13\23\3\0\1\23\2\0\4\23\11\0\5\23\12\0"+
    "\1\23\1\0\1\23\1\0\6\23\11\0\13\23\1\u0104"+
    "\7\23\3\0\1\23\2\0\4\23\11\0\5\23\12\0"+
    "\1\23\1\0\1\23\1\0\6\23\11\0\5\23\1\u0105"+
    "\15\23\3\0\1\23\2\0\4\23\11\0\5\23\12\0"+
    "\1\23\1\0\1\23\1\0\6\23\11\0\1\u0106\22\23"+
    "\3\0\1\23\2\0\4\23\11\0\5\23\12\0\1\23"+
    "\1\0\1\23\1\0\6\23\11\0\4\23\1\u0107\16\23"+
    "\3\0\1\23\2\0\4\23\11\0\5\23\12\0\1\23"+
    "\1\0\1\23\1\0\6\23\11\0\5\23\1\u0108\15\23"+
    "\3\0\1\23\2\0\4\23\11\0\5\23\72\0\1\u0109"+
    "\27\0\1\23\1\0\1\23\1\0\6\23\11\0\10\23"+
    "\1\u010a\12\23\3\0\1\23\2\0\4\23\11\0\5\23"+
    "\42\0\1\u010b\1\u010c\117\0\1\u010d\73\0\1\u010e\71\0"+
    "\1\u010f\127\0\1\u0110\114\0\1\u0111\104\0\1\u0112\111\0"+
    "\1\u0113\54\0\1\23\1\0\1\23\1\0\6\23\11\0"+
    "\10\23\1\u0114\12\23\3\0\1\23\2\0\4\23\11\0"+
    "\5\23\12\0\1\23\1\0\1\23\1\0\6\23\11\0"+
    "\23\23\3\0\1\23\2\0\4\23\11\0\3\23\1\u0115"+
    "\1\23\72\0\1\u0116\107\0\1\u0117\107\0\1\u0118\1\0"+
    "\1\u0119\57\0\1\u011a\67\0\3\u011b\46\0\1\u011c\17\0"+
    "\1\u011d\16\0\1\u011e\1\0\1\u011f\73\0\1\23\1\0"+
    "\1\23\1\0\6\23\11\0\23\23\3\0\1\23\2\0"+
    "\4\23\11\0\1\23\1\u0120\3\23\11\0\110\212\3\104"+
    "\1\0\2\104\3\0\1\104\1\0\3\104\1\315\1\316"+
    "\1\312\1\104\1\0\1\104\23\0\3\104\1\0\2\104"+
    "\4\0\11\104\5\0\27\104\1\0\1\316\1\312\1\104"+
    "\1\321\65\104\1\0\1\314\1\0\1\314\1\0\6\314"+
    "\11\0\23\314\1\u0121\2\0\1\314\2\0\4\314\11\0"+
    "\5\314\1\0\1\u0122\7\0\3\111\1\0\2\111\3\0"+
    "\1\111\1\0\3\111\1\325\1\111\1\323\1\326\1\0"+
    "\1\111\23\0\3\111\1\0\2\111\4\0\11\111\5\0"+
    "\27\111\1\0\1\111\1\323\1\326\1\327\65\111\3\116"+
    "\1\0\2\116\3\0\1\116\1\0\1\120\1\116\1\120"+
    "\1\336\1\116\1\331\1\116\1\0\1\116\23\0\3\116"+
    "\1\0\2\116\4\0\11\116\5\0\24\116\1\120\1\116"+
    "\1\120\1\0\1\116\1\331\1\116\1\337\100\116\1\333"+
    "\1\116\1\333\1\330\1\116\1\331\1\116\1\332\66\116"+
    "\1\335\1\116\1\335\1\116\6\335\1\u0123\1\116\1\u0123"+
    "\1\330\1\116\1\331\1\116\1\332\1\u0124\23\335\3\116"+
    "\1\335\2\116\4\335\11\116\5\335\11\116\13\340\1\343"+
    "\1\340\1\343\73\340\1\345\1\340\1\345\1\340\6\345"+
    "\1\u0125\1\340\1\u0125\5\340\1\u0126\23\345\3\340\1\345"+
    "\2\340\4\345\11\340\5\345\11\340\1\0\1\347\3\0"+
    "\1\347\3\0\1\347\77\0\1\u0127\1\0\1\u0127\1\0"+
    "\1\u0127\1\0\3\u0127\12\0\1\u0127\2\0\1\u0127\5\0"+
    "\1\u0127\1\0\1\u0127\3\0\1\u0127\11\0\1\u0127\17\0"+
    "\1\u0127\17\0\1\u0128\3\0\1\u0128\111\0\1\355\75\0"+
    "\1\357\3\0\1\357\3\0\1\357\77\0\1\23\1\0"+
    "\1\23\1\0\6\23\11\0\13\23\1\u0129\7\23\3\0"+
    "\1\23\2\0\4\23\11\0\5\23\74\0\1\u0119\25\0"+
    "\1\23\1\0\1\23\1\0\6\23\11\0\3\23\1\u012a"+
    "\17\23\3\0\1\23\2\0\4\23\11\0\5\23\12\0"+
    "\1\23\1\0\1\23\1\0\6\23\11\0\4\23\1\u012b"+
    "\2\23\1\u012c\13\23\3\0\1\23\2\0\4\23\11\0"+
    "\5\23\12\0\1\23\1\0\1\23\1\0\6\23\11\0"+
    "\3\23\1\u012d\17\23\3\0\1\23\2\0\4\23\11\0"+
    "\5\23\12\0\1\23\1\0\1\23\1\0\6\23\11\0"+
    "\11\23\1\u012e\11\23\3\0\1\23\2\0\4\23\11\0"+
    "\5\23\12\0\1\23\1\0\1\23\1\0\6\23\11\0"+
    "\6\23\1\u012f\14\23\3\0\1\23\2\0\4\23\11\0"+
    "\5\23\12\0\1\23\1\0\1\23\1\0\6\23\11\0"+
    "\16\23\1\u0130\4\23\3\0\1\23\2\0\4\23\11\0"+
    "\5\23\12\0\1\23\1\0\1\23\1\0\6\23\11\0"+
    "\4\23\1\u0131\16\23\3\0\1\23\2\0\4\23\11\0"+
    "\5\23\12\0\1\23\1\0\1\23\1\0\6\23\11\0"+
    "\4\23\1\u0132\16\23\3\0\1\23\2\0\4\23\11\0"+
    "\5\23\12\0\1\23\1\0\1\23\1\0\6\23\11\0"+
    "\1\23\1\u0133\21\23\3\0\1\23\2\0\4\23\11\0"+
    "\5\23\12\0\1\23\1\0\1\23\1\0\6\23\11\0"+
    "\1\23\1\u0134\21\23\3\0\1\23\2\0\4\23\11\0"+
    "\5\23\12\0\1\23\1\0\1\23\1\0\6\23\11\0"+
    "\1\u0135\4\23\1\u0136\1\23\1\u0137\5\23\1\u0138\5\23"+
    "\3\0\1\23\2\0\4\23\11\0\5\23\12\0\1\23"+
    "\1\0\1\23\1\0\6\23\11\0\11\23\1\u0139\11\23"+
    "\3\0\1\23\2\0\4\23\11\0\5\23\12\0\1\23"+
    "\1\0\1\23\1\0\6\23\11\0\16\23\1\u013a\4\23"+
    "\3\0\1\23\2\0\4\23\11\0\5\23\12\0\1\23"+
    "\1\0\1\23\1\0\6\23\11\0\16\23\1\u013b\4\23"+
    "\3\0\1\23\2\0\4\23\11\0\5\23\12\0\1\23"+
    "\1\0\1\23\1\0\6\23\11\0\13\23\1\u013c\7\23"+
    "\3\0\1\23\2\0\4\23\11\0\5\23\12\0\1\23"+
    "\1\0\1\23\1\0\6\23\11\0\6\23\1\u013d\14\23"+
    "\3\0\1\23\2\0\4\23\11\0\5\23\12\0\1\23"+
    "\1\0\1\23\1\0\6\23\11\0\2\23\1\u013e\20\23"+
    "\3\0\1\23\2\0\4\23\11\0\5\23\37\0\1\u013f"+
    "\113\0\1\u0140\107\0\1\u0141\105\0\1\u0142\135\0\1\u0143"+
    "\65\0\1\u0144\112\0\1\u0145\75\0\1\u0146\116\0\1\u0147"+
    "\54\0\1\23\1\0\1\23\1\0\6\23\11\0\13\23"+
    "\1\u0148\7\23\3\0\1\23\2\0\4\23\11\0\5\23"+
    "\14\0\1\u0149\2\0\3\u0149\1\0\1\u0149\1\0\1\u0119"+
    "\2\0\1\u014a\4\0\23\u0149\3\0\1\u0149\2\0\4\u0149"+
    "\11\0\5\u0149\7\0\1\u014b\30\0\1\u014c\73\0\3\u011b"+
    "\66\0\1\u011d\70\0\1\u014d\74\0\1\u014e\50\0\1\u011e"+
    "\144\0\1\u014f\37\0\13\116\1\u0123\1\116\1\u0123\1\330"+
    "\1\116\1\331\1\116\1\332\65\116\13\340\1\u0125\1\340"+
    "\1\u0125\72\340\1\0\1\23\1\0\1\23\1\0\6\23"+
    "\11\0\20\23\1\u0150\2\23\3\0\1\23\2\0\4\23"+
    "\11\0\5\23\12\0\1\23\1\0\1\23\1\0\6\23"+
    "\11\0\4\23\1\u0151\16\23\3\0\1\23\2\0\4\23"+
    "\11\0\5\23\12\0\1\23\1\0\1\23\1\0\6\23"+
    "\11\0\5\23\1\u0152\15\23\3\0\1\23\2\0\4\23"+
    "\11\0\5\23\12\0\1\23\1\0\1\23\1\0\6\23"+
    "\11\0\4\23\1\u0153\16\23\3\0\1\23\2\0\4\23"+
    "\11\0\5\23\12\0\1\23\1\0\1\23\1\0\6\23"+
    "\11\0\14\23\1\u0154\6\23\3\0\1\23\2\0\4\23"+
    "\11\0\5\23\12\0\1\23\1\0\1\23\1\0\6\23"+
    "\11\0\15\23\1\u0155\5\23\3\0\1\23\2\0\4\23"+
    "\11\0\5\23\12\0\1\23\1\0\1\23\1\0\6\23"+
    "\11\0\1\23\1\u0156\21\23\3\0\1\23\2\0\4\23"+
    "\11\0\5\23\12\0\1\23\1\0\1\23\1\0\6\23"+
    "\11\0\13\23\1\u0157\7\23\3\0\1\23\2\0\4\23"+
    "\11\0\5\23\12\0\1\23\1\0\1\23\1\0\6\23"+
    "\11\0\3\23\1\u0158\17\23\3\0\1\23\2\0\4\23"+
    "\11\0\5\23\12\0\1\23\1\0\1\23\1\0\6\23"+
    "\11\0\10\23\1\u0159\12\23\3\0\1\23\2\0\4\23"+
    "\11\0\5\23\12\0\1\23\1\0\1\23\1\0\6\23"+
    "\11\0\5\23\1\u015a\15\23\3\0\1\23\2\0\4\23"+
    "\11\0\5\23\12\0\1\23\1\0\1\23\1\0\6\23"+
    "\11\0\6\23\1\u015b\14\23\3\0\1\23\2\0\4\23"+
    "\11\0\5\23\12\0\1\23\1\0\1\23\1\0\6\23"+
    "\11\0\1\u015c\22\23\3\0\1\23\2\0\4\23\11\0"+
    "\5\23\12\0\1\23\1\0\1\23\1\0\6\23\11\0"+
    "\15\23\1\u015d\5\23\3\0\1\23\2\0\4\23\11\0"+
    "\5\23\12\0\1\23\1\0\1\23\1\0\6\23\11\0"+
    "\14\23\1\u015e\6\23\3\0\1\23\2\0\4\23\11\0"+
    "\5\23\12\0\1\23\1\0\1\23\1\0\6\23\11\0"+
    "\5\23\1\u015f\15\23\3\0\1\23\2\0\4\23\11\0"+
    "\5\23\12\0\1\23\1\0\1\23\1\0\6\23\11\0"+
    "\11\23\1\u0160\11\23\3\0\1\23\2\0\4\23\11\0"+
    "\5\23\12\0\1\23\1\0\1\23\1\0\6\23\11\0"+
    "\1\23\1\u0161\21\23\3\0\1\23\2\0\4\23\11\0"+
    "\5\23\12\0\1\23\1\0\1\23\1\0\6\23\11\0"+
    "\4\23\1\u0162\16\23\3\0\1\23\2\0\4\23\11\0"+
    "\5\23\50\0\1\u0163\112\0\1\u0164\104\0\1\u0165\64\0"+
    "\1\u0166\20\0\1\u0167\16\0\1\u0168\70\0\1\u0169\103\0"+
    "\1\u016a\120\0\1\u016b\55\0\1\u016c\136\0\1\u016d\51\0"+
    "\1\23\1\0\1\23\1\0\6\23\11\0\12\23\1\u016e"+
    "\10\23\3\0\1\23\2\0\4\23\11\0\5\23\12\0"+
    "\1\u0149\1\0\1\u0149\1\0\6\u0149\1\u016f\1\0\1\u0170"+
    "\6\0\23\u0149\3\0\1\u0149\2\0\4\u0149\11\0\5\u0149"+
    "\14\0\1\u0171\2\0\3\u0171\1\0\1\u0171\11\0\23\u0171"+
    "\3\0\1\u0171\2\0\4\u0171\11\0\5\u0171\14\0\1\u0172"+
    "\2\0\3\u0172\1\0\1\u0172\11\0\23\u0172\3\0\1\u0172"+
    "\2\0\4\u0172\11\0\5\u0172\45\0\1\u0173\112\0\1\u0174"+
    "\53\0\1\u0175\2\0\3\u0175\1\0\1\u0175\11\0\23\u0175"+
    "\3\0\1\u0175\2\0\4\u0175\11\0\5\u0175\12\0\1\23"+
    "\1\0\1\23\1\0\6\23\11\0\5\23\1\u0176\15\23"+
    "\3\0\1\23\2\0\4\23\11\0\5\23\12\0\1\23"+
    "\1\0\1\23\1\0\6\23\11\0\2\23\1\u0177\20\23"+
    "\3\0\1\23\2\0\4\23\11\0\5\23\12\0\1\23"+
    "\1\0\1\23\1\0\6\23\11\0\17\23\1\u0178\3\23"+
    "\3\0\1\23\2\0\4\23\11\0\5\23\12\0\1\23"+
    "\1\0\1\23\1\0\6\23\11\0\2\23\1\u0179\20\23"+
    "\3\0\1\23\2\0\4\23\11\0\5\23\12\0\1\23"+
    "\1\0\1\23\1\0\6\23\11\0\14\23\1\u017a\6\23"+
    "\3\0\1\23\2\0\4\23\11\0\5\23\12\0\1\23"+
    "\1\0\1\23\1\0\6\23\11\0\2\23\1\u017b\20\23"+
    "\3\0\1\23\2\0\4\23\11\0\5\23\12\0\1\23"+
    "\1\0\1\23\1\0\6\23\11\0\10\23\1\u017c\12\23"+
    "\3\0\1\23\2\0\4\23\11\0\5\23\12\0\1\23"+
    "\1\0\1\23\1\0\6\23\11\0\10\23\1\u017d\12\23"+
    "\3\0\1\23\2\0\4\23\11\0\5\23\12\0\1\23"+
    "\1\0\1\23\1\0\6\23\11\0\5\23\1\u017e\15\23"+
    "\3\0\1\23\2\0\4\23\11\0\5\23\12\0\1\23"+
    "\1\0\1\23\1\0\6\23\11\0\5\23\1\u017f\15\23"+
    "\3\0\1\23\2\0\4\23\11\0\5\23\12\0\1\23"+
    "\1\0\1\23\1\0\6\23\11\0\1\u0180\22\23\3\0"+
    "\1\23\2\0\4\23\11\0\5\23\12\0\1\23\1\0"+
    "\1\23\1\0\6\23\11\0\16\23\1\u0181\4\23\3\0"+
    "\1\23\2\0\4\23\11\0\5\23\45\0\1\u0182\67\0"+
    "\1\u0183\20\0\1\u0184\16\0\1\u0185\63\0\1\u016b\73\0"+
    "\1\u0166\37\0\1\u0168\100\0\1\u0186\71\0\1\u0187\106\0"+
    "\1\u0188\75\0\1\u016b\37\0\1\u0189\75\0\1\u018a\103\0"+
    "\1\u018b\64\0\1\u016f\75\0\1\u0171\1\0\1\u0171\1\0"+
    "\6\u0171\4\0\1\u018c\4\0\23\u0171\3\0\1\u0171\2\0"+
    "\4\u0171\11\0\5\u0171\12\0\1\u0172\1\0\1\u0172\1\0"+
    "\6\u0172\11\0\23\u0172\3\0\1\u0172\2\0\4\u0172\11\0"+
    "\5\u0172\7\0\1\u018c\32\0\1\u018d\112\0\1\u018e\54\0"+
    "\1\23\1\0\1\23\1\0\6\23\11\0\6\23\1\u018f"+
    "\14\23\3\0\1\23\2\0\4\23\11\0\5\23\12\0"+
    "\1\23\1\0\1\23\1\0\6\23\11\0\1\23\1\u0190"+
    "\21\23\3\0\1\23\2\0\4\23\11\0\5\23\12\0"+
    "\1\23\1\0\1\23\1\0\6\23\11\0\11\23\1\u0191"+
    "\11\23\3\0\1\23\2\0\4\23\11\0\5\23\12\0"+
    "\1\23\1\0\1\23\1\0\6\23\11\0\3\23\1\u0192"+
    "\17\23\3\0\1\23\2\0\4\23\11\0\5\23\12\0"+
    "\1\23\1\0\1\23\1\0\6\23\11\0\11\23\1\u0193"+
    "\11\23\3\0\1\23\2\0\4\23\11\0\5\23\12\0"+
    "\1\23\1\0\1\23\1\0\6\23\11\0\4\23\1\u0194"+
    "\16\23\3\0\1\23\2\0\4\23\11\0\5\23\12\0"+
    "\1\23\1\0\1\23\1\0\6\23\11\0\16\23\1\u0195"+
    "\4\23\3\0\1\23\2\0\4\23\11\0\5\23\12\0"+
    "\1\23\1\0\1\23\1\0\6\23\11\0\4\23\1\u0196"+
    "\16\23\3\0\1\23\2\0\4\23\11\0\5\23\47\0"+
    "\1\u0197\65\0\1\u0183\37\0\1\u0185\72\0\1\u0198\105\0"+
    "\1\u0199\102\0\1\u019a\124\0\1\u0197\77\0\1\u016b\66\0"+
    "\1\u018b\37\0\1\u019b\46\0\1\u016f\1\0\1\u0170\140\0"+
    "\1\u019c\54\0\3\u019d\73\0\1\23\1\0\1\23\1\0"+
    "\6\23\11\0\2\23\1\u019e\20\23\3\0\1\23\2\0"+
    "\4\23\11\0\5\23\12\0\1\23\1\0\1\23\1\0"+
    "\6\23\11\0\11\23\1\u019f\11\23\3\0\1\23\2\0"+
    "\4\23\11\0\5\23\12\0\1\23\1\0\1\23\1\0"+
    "\6\23\11\0\23\23\3\0\1\23\2\0\2\23\1\u01a0"+
    "\1\23\11\0\5\23\12\0\1\23\1\0\1\23\1\0"+
    "\6\23\11\0\11\23\1\u01a1\11\23\3\0\1\23\2\0"+
    "\4\23\11\0\5\23\12\0\1\23\1\0\1\23\1\0"+
    "\6\23\11\0\23\23\3\0\1\23\2\0\2\23\1\u01a2"+
    "\1\23\11\0\5\23\12\0\1\23\1\0\1\23\1\0"+
    "\6\23\11\0\3\23\1\u01a3\17\23\3\0\1\23\2\0"+
    "\4\23\11\0\5\23\12\0\1\23\1\0\1\23\1\0"+
    "\6\23\11\0\11\23\1\u01a4\11\23\3\0\1\23\2\0"+
    "\4\23\11\0\5\23\25\0\1\u0197\37\0\1\u01a5\61\0"+
    "\1\u0183\115\0\1\u0166\67\0\1\u019a\37\0\1\u01a6\63\0"+
    "\1\u01a7\62\0\1\u01a8\2\0\3\u01a8\1\0\1\u01a8\3\u019d"+
    "\1\u01a9\5\0\23\u01a8\3\0\1\u01a8\2\0\4\u01a8\11\0"+
    "\5\u01a8\12\0\1\23\1\0\1\23\1\0\6\23\11\0"+
    "\6\23\1\u01aa\14\23\3\0\1\23\2\0\4\23\11\0"+
    "\5\23\12\0\1\23\1\0\1\23\1\0\6\23\11\0"+
    "\6\23\1\u01ab\14\23\3\0\1\23\2\0\4\23\11\0"+
    "\5\23\12\0\1\23\1\0\1\23\1\0\6\23\11\0"+
    "\6\23\1\u01ac\14\23\3\0\1\23\2\0\4\23\11\0"+
    "\5\23\12\0\1\23\1\0\1\23\1\0\6\23\11\0"+
    "\14\23\1\u01ad\6\23\3\0\1\23\2\0\4\23\11\0"+
    "\5\23\24\0\3\u01a7\32\0\1\277\40\0\1\u01a8\1\0"+
    "\1\u01a8\1\0\6\u01a8\3\u01ae\6\0\23\u01a8\3\0\1\u01a8"+
    "\2\0\4\u01a8\11\0\5\u01a8\14\0\1\u01a8\2\0\3\u01a8"+
    "\1\0\1\u01a8\11\0\23\u01a8\3\0\1\u01a8\2\0\4\u01a8"+
    "\11\0\5\u01a8\12\0\1\23\1\0\1\23\1\0\6\23"+
    "\11\0\2\23\1\u01af\20\23\3\0\1\23\2\0\4\23"+
    "\11\0\5\23\12\0\1\23\1\0\1\23\1\0\6\23"+
    "\11\0\1\u01b0\22\23\3\0\1\23\2\0\4\23\11\0"+
    "\5\23\12\0\1\23\1\0\1\23\1\0\6\23\11\0"+
    "\2\23\1\u01b1\20\23\3\0\1\23\2\0\4\23\11\0"+
    "\5\23\14\0\1\u01b2\2\0\3\u01b2\1\0\1\u01b2\3\u01ae"+
    "\2\0\1\u01b3\3\0\23\u01b2\3\0\1\u01b2\2\0\4\u01b2"+
    "\3\0\1\u01b4\3\0\1\u01b3\1\0\5\u01b2\12\0\1\23"+
    "\1\0\1\23\1\0\6\23\11\0\3\23\1\u01b5\17\23"+
    "\3\0\1\23\2\0\4\23\11\0\5\23\12\0\1\23"+
    "\1\0\1\23\1\0\6\23\11\0\3\23\1\u01b6\17\23"+
    "\3\0\1\23\2\0\4\23\11\0\5\23\12\0\1\u01b2"+
    "\1\0\1\u01b2\1\0\6\u01b2\3\u01b7\2\0\1\u01b3\3\0"+
    "\23\u01b2\3\0\1\u01b2\2\0\4\u01b2\3\0\1\u01b4\3\0"+
    "\1\u01b3\1\0\5\u01b2\14\0\1\u01b2\2\0\3\u01b2\1\0"+
    "\1\u01b2\3\u01b7\2\0\1\u01b3\3\0\23\u01b2\3\0\1\u01b2"+
    "\2\0\4\u01b2\3\0\1\u01b4\3\0\1\u01b3\1\0\5\u01b2"+
    "\76\0\1\u01b8\23\0\1\23\1\0\1\23\1\0\6\23"+
    "\11\0\11\23\1\u01b9\11\23\3\0\1\23\2\0\4\23"+
    "\11\0\5\23\12\0\1\23\1\0\1\23\1\0\6\23"+
    "\11\0\11\23\1\u01ba\11\23\3\0\1\23\2\0\4\23"+
    "\11\0\5\23\24\0\3\u01b7\46\0\1\u01b4\23\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[21456];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\1\10\0\2\1\1\11\7\1\1\11\1\1"+
    "\3\11\21\1\1\11\14\1\7\11\1\1\1\11\2\1"+
    "\1\11\5\1\1\11\7\1\1\11\3\1\1\11\2\1"+
    "\1\11\2\1\2\11\1\1\23\11\2\1\1\11\3\1"+
    "\1\11\1\1\1\11\1\1\1\0\1\11\1\0\1\1"+
    "\1\0\3\11\2\0\1\1\4\0\1\11\2\0\23\1"+
    "\3\11\1\1\2\11\1\1\11\0\2\1\1\11\2\1"+
    "\2\11\1\1\1\0\2\11\2\1\6\11\2\1\5\0"+
    "\1\1\3\11\1\1\3\0\1\1\1\11\1\1\3\0"+
    "\5\1\3\0\1\1\2\0\1\11\1\1\2\0\4\11"+
    "\2\1\1\0\3\1\1\0\24\1\1\11\1\1\11\0"+
    "\2\1\3\11\3\0\1\1\1\0\1\11\2\1\1\0"+
    "\2\11\1\1\1\11\1\0\30\1\11\0\1\1\4\0"+
    "\1\11\2\0\23\1\5\0\1\11\5\0\1\1\1\11"+
    "\1\1\4\0\1\11\14\1\3\0\1\11\3\0\1\11"+
    "\5\0\10\1\4\0\1\11\2\0\7\1\2\11\3\0"+
    "\4\1\1\0\3\1\3\0\2\1\1\0\1\11\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[442];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	private final LinkedList commentList = new LinkedList();
	private String heredoc = null;
	private String nowdoc = null;
    private boolean asp_tags = false;
    private boolean short_tags_allowed = true;
    private StateStack stack = new StateStack();
    private char yy_old_buffer[] = new char[ZZ_BUFFERSIZE];
    private int yy_old_pushbackPos;
    protected int commentStartPosition;

	private AST ast;

    public void setAST(AST ast) {
    	this.ast = ast;
    }
    
	public PHPVersion getPHPVersion() {
		return PHPVersion.PHP5_4;
	}
    
	public void setInScriptingState() {
		yybegin(ST_IN_SCRIPTING);
	}

	public void resetCommentList() {
		commentList.clear();
	}
	
	public LinkedList getCommentList() {
		return commentList;
	}	
	
	protected void addComment(int type) {
		int leftPosition = getTokenStartPosition();
		Comment comment = new Comment(commentStartPosition, leftPosition + getTokenLength(), ast, type);
		commentList.add(comment);
	}	
	
	public void setUseAspTagsAsPhp(boolean useAspTagsAsPhp) {
		asp_tags = useAspTagsAsPhp;
	}
	
	public void setUseShortTags(boolean useShortTags) {
		short_tags_allowed = useShortTags;
	}
	
    private void pushState(int state) {
        stack.pushStack(zzLexicalState);
        yybegin(state);
    }

    private void popState() {
        yybegin(stack.popStack());
    }

    public int getCurrentLine() {
        return yyline;
    }

    protected int getTokenStartPosition() {
        return zzStartRead - zzPushbackPos;
    }

    protected int getTokenLength() {
        return zzMarkedPos - zzStartRead;
    }

    public int getLength() {
        return zzEndRead - zzPushbackPos;
    }
    
    private void handleCommentStart() {
		commentStartPosition = getTokenStartPosition();
	}
	
	private void handleLineCommentEnd() {
         addComment(Comment.TYPE_SINGLE_LINE);
    }
    
    private void handleMultilineCommentEnd() {
    	addComment(Comment.TYPE_MULTILINE);
    }

    private void handlePHPDocEnd() {
		addComment(Comment.TYPE_PHPDOC);
    }
    
    protected void handleVarComment() {
    	commentStartPosition = zzStartRead;
    	addComment(Comment.TYPE_MULTILINE);
    }
        
    private Symbol createFullSymbol(int symbolNumber) {
        Symbol symbol = createSymbol(symbolNumber);
        symbol.value = yytext();
        return symbol;
    }

    protected Symbol createSymbol(int symbolNumber) {
        int leftPosition = getTokenStartPosition();
        return new Symbol(symbolNumber, leftPosition, leftPosition + getTokenLength());
    }

    public int[] getParamenters(){
    	return new int[]{zzMarkedPos, zzPushbackPos, zzCurrentPos, zzStartRead, zzEndRead, yyline};
    }
    
	protected boolean parsePHPDoc(){	
		final IDocumentorLexer documentorLexer = getDocumentorLexer(zzReader);
		if(documentorLexer == null){
			return false;
		}
		yypushback(zzMarkedPos - zzStartRead);
		int[] parameters = getParamenters();
		documentorLexer.reset(zzReader, zzBuffer, parameters);
		Object phpDocBlock = documentorLexer.parse();
		commentList.add(phpDocBlock);
		reset(zzReader, documentorLexer.getBuffer(), documentorLexer.getParamenters());
		return true;
	}
	
	
	protected IDocumentorLexer getDocumentorLexer(java.io.Reader  reader) {
		return null;
	}
	
	public void reset(java.io.Reader  reader, char[] buffer, int[] parameters){
		this.zzReader = reader;
		this.zzBuffer = buffer;
		this.zzMarkedPos = parameters[0];
		this.zzPushbackPos = parameters[1];
		this.zzCurrentPos = parameters[2];
		this.zzStartRead = parameters[3];
		this.zzEndRead = parameters[4];
		this.yyline = parameters[5];  
		this.yychar = this.zzStartRead - this.zzPushbackPos;
	}



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public PhpAstLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public PhpAstLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 166) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 87: 
          { return createSymbol(ParserConstants.T_OBJECT_OPERATOR);
          }
        case 144: break;
        case 52: 
          { return createFullSymbol(ParserConstants.T_DNUMBER);
          }
        case 145: break;
        case 6: 
          { return createFullSymbol(ParserConstants.T_STRING);
          }
        case 146: break;
        case 118: 
          { return createSymbol(ParserConstants.T_WHILE);
          }
        case 147: break;
        case 136: 
          { return createSymbol(ParserConstants.T_ENDWHILE);
          }
        case 148: break;
        case 93: 
          { return createFullSymbol(ParserConstants.T_BNUMBER);
          }
        case 149: break;
        case 31: 
          { return createSymbol(ParserConstants.T_TILDA);
          }
        case 150: break;
        case 26: 
          { return createSymbol(ParserConstants.T_OR);
          }
        case 151: break;
        case 17: 
          { return createSymbol(ParserConstants.T_OPEN_PARENTHESE);
          }
        case 152: break;
        case 115: 
          { return createSymbol(ParserConstants.T_CATCH);
          }
        case 153: break;
        case 92: 
          { //return createSymbol(ParserConstants.T_INLINE_HTML);
    yybegin(ST_IN_SCRIPTING);
	//return T_OPEN_TAG;
          }
        case 154: break;
        case 28: 
          { return createSymbol(ParserConstants.T_COMMA);
          }
        case 155: break;
        case 139: 
          { return createSymbol(ParserConstants.T_ENDSWITCH);
          }
        case 156: break;
        case 40: 
          { popState();
    return createFullSymbol(ParserConstants.T_STRING);
          }
        case 157: break;
        case 129: 
          { return createSymbol(ParserConstants.T_DOUBLE_CAST);
          }
        case 158: break;
        case 133: 
          { return createSymbol(ParserConstants.T_ARRAY_CAST);
          }
        case 159: break;
        case 83: 
          { pushState(ST_IN_SCRIPTING);
    yypushback(yylength()-1);
    return createSymbol(ParserConstants.T_CURLY_OPEN_WITH_DOLAR);
          }
        case 160: break;
        case 41: 
          { yypushback(yylength());
    popState();
    pushState(ST_IN_SCRIPTING);
          }
        case 161: break;
        case 65: 
          { return createSymbol(ParserConstants.T_DOUBLE_ARROW);
          }
        case 162: break;
        case 135: 
          { return createSymbol(ParserConstants.T_CONTINUE);
          }
        case 163: break;
        case 67: 
          { return createSymbol(ParserConstants.T_IS_NOT_EQUAL);
          }
        case 164: break;
        case 20: 
          { return createSymbol(ParserConstants.T_NOT);
          }
        case 165: break;
        case 60: 
          { pushState(ST_LOOKING_FOR_PROPERTY);
    return createSymbol(ParserConstants.T_OBJECT_OPERATOR);
          }
        case 166: break;
        case 62: 
          { return createSymbol(ParserConstants.T_SR);
          }
        case 167: break;
        case 109: 
          { return createSymbol(ParserConstants.T_ELSE);
          }
        case 168: break;
        case 68: 
          { return createSymbol(ParserConstants.T_IS_SMALLER_OR_EQUAL);
          }
        case 169: break;
        case 34: 
          { /* This is a temporary fix which is dependant on flex and it's implementation */
    if (!stack.isEmpty()) {
        popState();
    }
    return createSymbol(ParserConstants.T_CURLY_CLOSE);
          }
        case 170: break;
        case 84: 
          { yypushback(1);
	return createFullSymbol(ParserConstants.T_ENCAPSED_AND_WHITESPACE);
          }
        case 171: break;
        case 36: 
          { yybegin(ST_IN_SCRIPTING);
    return createSymbol(ParserConstants.T_QUATE);
          }
        case 172: break;
        case 124: 
          { return createSymbol(ParserConstants.T_SWITCH);
          }
        case 173: break;
        case 90: 
          { handlePHPDocEnd();
     yybegin(ST_IN_SCRIPTING);
          }
        case 174: break;
        case 71: 
          { return createSymbol(ParserConstants.T_DIV_EQUAL);
          }
        case 175: break;
        case 103: 
          { if (!parsePHPDoc()) {
handleCommentStart();
yybegin(ST_DOCBLOCK);
}
          }
        case 176: break;
        case 126: 
          { return createSymbol(ParserConstants.T_ENDFOR);
          }
        case 177: break;
        case 112: 
          { handleCommentStart();
          }
        case 178: break;
        case 37: 
          { yybegin(ST_IN_SCRIPTING);
    return createSymbol(ParserConstants.T_BACKQUATE);
          }
        case 179: break;
        case 127: 
          { return createSymbol(ParserConstants.T_ELSEIF);
          }
        case 180: break;
        case 101: 
          { return createSymbol(ParserConstants.T_IS_NOT_IDENTICAL);
          }
        case 181: break;
        case 75: 
          { return createSymbol(ParserConstants.T_AND_EQUAL);
          }
        case 182: break;
        case 57: 
          { return createSymbol(ParserConstants.T_IF);
          }
        case 183: break;
        case 141: 
          { handleVarComment();
    //return createFullSymbol(ParserConstants.T_VAR_COMMENT);
          }
        case 184: break;
        case 59: 
          { return createSymbol(ParserConstants.T_DEC);
          }
        case 185: break;
        case 131: 
          { return createSymbol(ParserConstants.T_REQUIRE);
          }
        case 186: break;
        case 80: 
          { return createSymbol(ParserConstants.T_LOGICAL_OR);
          }
        case 187: break;
        case 9: 
          { return createSymbol(ParserConstants.T_DOLLAR);
          }
        case 188: break;
        case 22: 
          { return createSymbol(ParserConstants.T_TIMES);
          }
        case 189: break;
        case 140: 
          { return createSymbol(ParserConstants.T_INSTANCEOF);
          }
        case 190: break;
        case 119: 
          { return createSymbol(ParserConstants.T_PRINT);
          }
        case 191: break;
        case 98: 
          { return createSymbol(ParserConstants.T_VAR);
          }
        case 192: break;
        case 10: 
          { yybegin(ST_DOUBLE_QUOTES);
    return createSymbol(ParserConstants.T_QUATE);
          }
        case 193: break;
        case 69: 
          { return createSymbol(ParserConstants.T_SL);
          }
        case 194: break;
        case 116: 
          { return createSymbol(ParserConstants.T_THROW);
          }
        case 195: break;
        case 2: 
          { return createSymbol(ParserConstants.T_INLINE_HTML);
          }
        case 196: break;
        case 81: 
          { yypushback(1);
    return createFullSymbol(ParserConstants.T_ENCAPSED_AND_WHITESPACE);
          }
        case 197: break;
        case 70: 
          { return createSymbol(ParserConstants.T_MUL_EQUAL);
          }
        case 198: break;
        case 16: 
          { return createSymbol(ParserConstants.T_NEKUDOTAIM);
          }
        case 199: break;
        case 79: 
          { return createSymbol(ParserConstants.T_XOR_EQUAL);
          }
        case 200: break;
        case 114: 
          { return createSymbol(ParserConstants.T_CONST);
          }
        case 201: break;
        case 25: 
          { return createSymbol(ParserConstants.T_REFERENCE);
          }
        case 202: break;
        case 122: 
          { int removeChars = (yytext().charAt(0) == 'b') ? 4 : 3;
    String hereOrNowDoc = yytext().substring(removeChars).trim();    // for 'b<<<' or '<<<'
    int heredoc_len = hereOrNowDoc.length();

	Symbol sym = createFullSymbol(ParserConstants.T_START_HEREDOC);

    if (hereOrNowDoc.charAt(0) == '\'') {
    	nowdoc = hereOrNowDoc.substring(1, heredoc_len-1);
    	sym.value = nowdoc;
    	heredoc_len -= 2;
    	yybegin(ST_NOWDOC);
    }
    else if (hereOrNowDoc.charAt(0) == '"') {
    	heredoc = hereOrNowDoc.substring(1, heredoc_len-1);
    	sym.value = heredoc;
    	heredoc_len -= 2;
    	yybegin(ST_HEREDOC);
    } else {
    	heredoc = hereOrNowDoc;
    	sym.value = heredoc;
    	yybegin(ST_HEREDOC);
    }
    return sym;
          }
        case 203: break;
        case 15: 
          { return createSymbol(ParserConstants.T_LGREATER);
          }
        case 204: break;
        case 73: 
          { yybegin(YYINITIAL);
    return createSymbol(ParserConstants.T_SEMICOLON);  /* implicit ';' at php-end tag */
          }
        case 205: break;
        case 89: 
          { handleMultilineCommentEnd();
    yybegin(ST_IN_SCRIPTING);
          }
        case 206: break;
        case 50: 
          { //	yymore();
          }
        case 207: break;
        case 74: 
          { return createSymbol(ParserConstants.T_MOD_EQUAL);
          }
        case 208: break;
        case 5: 
          { return createSymbol(ParserConstants.T_NEKUDA);
          }
        case 209: break;
        case 7: 
          { return createSymbol(ParserConstants.T_PLUS);
          }
        case 210: break;
        case 113: 
          { return createSymbol(ParserConstants.T_BREAK);
          }
        case 211: break;
        case 143: 
          { return createSymbol(ParserConstants.T_REQUIRE_ONCE);
          }
        case 212: break;
        case 13: 
          { return createSymbol(ParserConstants.T_SEMICOLON);
          }
        case 213: break;
        case 38: 
          { yybegin(ST_IN_SCRIPTING);
	return createSymbol(ParserConstants.T_END_HEREDOC);
          }
        case 214: break;
        case 44: 
          { yypushback(1);
	popState();
	return createSymbol(ParserConstants.T_ENCAPSED_AND_WHITESPACE);
          }
        case 215: break;
        case 39: 
          { yypushback(yylength());
    popState();
          }
        case 216: break;
        case 54: 
          { return createSymbol(ParserConstants.T_INC);
          }
        case 217: break;
        case 64: 
          { return createSymbol(ParserConstants.T_PAAMAYIM_NEKUDOTAYIM);
          }
        case 218: break;
        case 88: 
          { /* treat numbers (almost) as strings inside encapsulated strings */
    return createFullSymbol(ParserConstants.T_NUM_STRING);
          }
        case 219: break;
        case 99: 
          { return createSymbol(ParserConstants.T_LOGICAL_AND);
          }
        case 220: break;
        case 110: 
          { return createSymbol(ParserConstants.T_EVAL);
          }
        case 221: break;
        case 106: 
          { String text = yytext();

    if (text.charAt(text.length() - 2)== ';') {
		text = text.substring(0, text.length() - 2);
        yypushback(1);
    } else {
		text = text.substring(0, text.length() - 1);
    }
	
	int textLength = text.length();
	int heredocLength = heredoc.length();
	if (textLength > heredocLength && text.substring(textLength - heredocLength, textLength).equals(heredoc)) {
		yypushback(2);
        yybegin(ST_END_HEREDOC);
        heredoc = null;
        // we need to remove the closing label from the symbol value.
        Symbol sym = createFullSymbol(ParserConstants.T_ENCAPSED_AND_WHITESPACE);
        String value = (String)sym.value;
        sym.value = value.substring(0, value.length() - heredocLength + 1);
	   	return sym;
	}
	yypushback(1);
          }
        case 222: break;
        case 138: 
          { return createSymbol(ParserConstants.T_OBJECT_CAST);
          }
        case 223: break;
        case 120: 
          { return createSymbol(ParserConstants.T_INT_CAST);
          }
        case 224: break;
        case 33: 
          { return createSymbol(ParserConstants.T_AT);
          }
        case 225: break;
        case 29: 
          { return createSymbol(ParserConstants.T_OPEN_RECT);
          }
        case 226: break;
        case 111: 
          { return createSymbol(ParserConstants.T_GOTO);
          }
        case 227: break;
        case 128: 
          { return createSymbol(ParserConstants.T_BOOL_CAST);
          }
        case 228: break;
        case 49: 
          { return createSymbol(ParserConstants.T_CURLY_CLOSE);
          }
        case 229: break;
        case 4: 
          { return createFullSymbol(ParserConstants.T_LNUMBER);
          }
        case 230: break;
        case 91: 
          { if (asp_tags || yytext().charAt(0)!='%') { /* asp comment? */
	    handleLineCommentEnd();
        yypushback(yylength());
		yybegin(ST_IN_SCRIPTING);
		//return T_COMMENT;
	}
          }
        case 231: break;
        case 77: 
          { return createSymbol(ParserConstants.T_OR_EQUAL);
          }
        case 232: break;
        case 21: 
          { return createSymbol(ParserConstants.T_RGREATER);
          }
        case 233: break;
        case 94: 
          { return createSymbol(ParserConstants.T_FOR);
          }
        case 234: break;
        case 42: 
          { popState();
    pushState(ST_IN_SCRIPTING);
    return createFullSymbol(ParserConstants.T_STRING_VARNAME);
          }
        case 235: break;
        case 43: 
          { /* Offset could be treated as a long */
	return createFullSymbol(ParserConstants.T_NUM_STRING);
          }
        case 236: break;
        case 56: 
          { return createFullSymbol(ParserConstants.T_CONSTANT_ENCAPSED_STRING);
          }
        case 237: break;
        case 134: 
          { return createSymbol(ParserConstants.T_FUNCTION);
          }
        case 238: break;
        case 97: 
          { return createSymbol(ParserConstants.T_SR_EQUAL);
          }
        case 239: break;
        case 48: 
          { popState();
	return createSymbol(ParserConstants.T_CLOSE_RECT);
          }
        case 240: break;
        case 27: 
          { return createSymbol(ParserConstants.T_KOVA);
          }
        case 241: break;
        case 53: 
          { return createSymbol(ParserConstants.T_CONCAT_EQUAL);
          }
        case 242: break;
        case 142: 
          { return createSymbol(ParserConstants.T_INCLUDE_ONCE);
          }
        case 243: break;
        case 95: 
          { return createSymbol(ParserConstants.T_NEW);
          }
        case 244: break;
        case 78: 
          { return createSymbol(ParserConstants.T_BOOLEAN_OR);
          }
        case 245: break;
        case 125: 
          { return createSymbol(ParserConstants.T_RETURN);
          }
        case 246: break;
        case 86: 
          { String text = yytext();
    int length = text.length() - 1;
    text = text.trim();
    
    yypushback(1);
    
    if (text.endsWith(";")) {
        text = text.substring(0, text.length() - 1);
        yypushback(1);
    }
    if (text.equals(nowdoc)) {
    	nowdoc = null;
        yybegin(ST_IN_SCRIPTING);
        return createSymbol(ParserConstants.T_END_HEREDOC);
    }
    else {
    	yybegin(ST_HEREDOC);
    }
          }
        case 247: break;
        case 51: 
          { String yytext = yytext();
	switch (yytext.charAt(yytext.length() - 1)) {
		case '?':
		case '%':
		case '>':
			yypushback(1);
			break;
		default:
			handleLineCommentEnd();
			yybegin(ST_IN_SCRIPTING);
	}
//	yymore();
          }
        case 248: break;
        case 23: 
          { return createSymbol(ParserConstants.T_DIV);
          }
        case 249: break;
        case 45: 
          { return createSymbol(ParserConstants.T_QUATE);
          }
        case 250: break;
        case 18: 
          { return createSymbol(ParserConstants.T_CLOSE_PARENTHESE);
          }
        case 251: break;
        case 1: 
          { return createFullSymbol(ParserConstants.T_ENCAPSED_AND_WHITESPACE);
          }
        case 252: break;
        case 14: 
          { return createSymbol(ParserConstants.T_MINUS);
          }
        case 253: break;
        case 132: 
          { return createSymbol(ParserConstants.T_DEFAULT);
          }
        case 254: break;
        case 85: 
          { String text = yytext();
    int length = text.length() - 1;
    text = text.trim();
    
    yypushback(1);
    
    if (text.endsWith(";")) {
        text = text.substring(0, text.length() - 1);
        yypushback(1);
    }
    if (text.equals(heredoc)) {
        heredoc = null;
        yybegin(ST_IN_SCRIPTING);
        return createSymbol(ParserConstants.T_END_HEREDOC);
    }
    else {
    	yybegin(ST_HEREDOC);
    }
          }
        case 255: break;
        case 19: 
          { return createSymbol(ParserConstants.T_EQUAL);
          }
        case 256: break;
        case 35: 
          { handleCommentStart();
	yybegin(ST_ONE_LINE_COMMENT);
//	yymore();
          }
        case 257: break;
        case 11: 
          { yybegin(ST_BACKQUOTE);
    return createSymbol(ParserConstants.T_BACKQUATE);
          }
        case 258: break;
        case 47: 
          { return createSymbol(ParserConstants.T_CURLY_OPEN);
          }
        case 259: break;
        case 104: 
          { return createSymbol(ParserConstants.T_LOGICAL_XOR);
          }
        case 260: break;
        case 76: 
          { return createSymbol(ParserConstants.T_BOOLEAN_AND);
          }
        case 261: break;
        case 100: 
          { return createSymbol(ParserConstants.T_IS_IDENTICAL);
          }
        case 262: break;
        case 82: 
          { pushState(ST_LOOKING_FOR_VARNAME);
    return createSymbol(ParserConstants.T_DOLLAR_OPEN_CURLY_BRACES);
          }
        case 263: break;
        case 58: 
          { return createSymbol(ParserConstants.T_DO);
          }
        case 264: break;
        case 130: 
          { return createSymbol(ParserConstants.T_INCLUDE);
          }
        case 265: break;
        case 63: 
          { return createSymbol(ParserConstants.T_IS_GREATER_OR_EQUAL);
          }
        case 266: break;
        case 123: 
          { yypushback(3);
	pushState(ST_LOOKING_FOR_PROPERTY);
	return createFullSymbol(ParserConstants.T_VARIABLE);
          }
        case 267: break;
        case 137: 
          { return createSymbol(ParserConstants.T_STRING_CAST);
          }
        case 268: break;
        case 121: 
          { return createSymbol(ParserConstants.T_ARRAY);
          }
        case 269: break;
        case 3: 
          { // do nothing
          }
        case 270: break;
        case 12: 
          { pushState(ST_IN_SCRIPTING);
    return createSymbol(ParserConstants.T_CURLY_OPEN);
          }
        case 271: break;
        case 30: 
          { return createSymbol(ParserConstants.T_CLOSE_RECT);
          }
        case 272: break;
        case 96: 
          { return createSymbol(ParserConstants.T_TRY);
          }
        case 273: break;
        case 72: 
          { handleCommentStart();
    yybegin(ST_COMMENT);
          }
        case 274: break;
        case 108: 
          { return createSymbol(ParserConstants.T_CASE);
          }
        case 275: break;
        case 61: 
          { return createSymbol(ParserConstants.T_MINUS_EQUAL);
          }
        case 276: break;
        case 66: 
          { return createSymbol(ParserConstants.T_IS_EQUAL);
          }
        case 277: break;
        case 102: 
          { return createSymbol(ParserConstants.T_SL_EQUAL);
          }
        case 278: break;
        case 32: 
          { return createSymbol(ParserConstants.T_QUESTION_MARK);
          }
        case 279: break;
        case 107: 
          { String text = yytext();

 	if (text.charAt(text.length() - 2)== ';') {
		text = text.substring(0, text.length() - 2);
        yypushback(1);
    } else {
		text = text.substring(0, text.length() - 1);
    }
 
 	int textLength = text.length();
 	int nowdocLength = nowdoc.length();
	if (textLength > nowdocLength && text.substring(textLength - nowdocLength, textLength).equals(nowdoc)) {
		yypushback(2);
       	yybegin(ST_END_HEREDOC);
       	nowdoc = null;
       	// we need to remove the closing label from the symbol value.
       	Symbol sym = createFullSymbol(ParserConstants.T_ENCAPSED_AND_WHITESPACE);
       	String value = (String)sym.value;
       	sym.value = value.substring(0, value.length() - nowdocLength + 1);
	   	return sym;
	}
	yypushback(1);
          }
        case 280: break;
        case 105: 
          { yypushback(1);
	pushState(ST_VAR_OFFSET);
	return createFullSymbol(ParserConstants.T_VARIABLE);
          }
        case 281: break;
        case 46: 
          { return createSymbol(ParserConstants.T_BACKQUATE);
          }
        case 282: break;
        case 55: 
          { return createSymbol(ParserConstants.T_PLUS_EQUAL);
          }
        case 283: break;
        case 117: 
          { return createSymbol(ParserConstants.T_ENDIF);
          }
        case 284: break;
        case 8: 
          { 
          }
        case 285: break;
        case 24: 
          { return createSymbol(ParserConstants.T_PRECENT);
          }
        case 286: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {     return createSymbol(sym.EOF);
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java PhpAstLexer <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        PhpAstLexer scanner = null;
        try {
          scanner = new PhpAstLexer( new java.io.FileReader(argv[i]) );
          while ( !scanner.zzAtEOF ) scanner.next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
