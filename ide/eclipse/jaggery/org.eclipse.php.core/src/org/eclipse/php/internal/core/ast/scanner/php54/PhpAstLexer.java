/* The following code was generated by JFlex 1.4.1 on 1/13/14 11:25 AM */

/*******************************************************************************
 * Copyright (c) 2006 Zend Corporation and IBM Corporation.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Zend and IBM - Initial implementation
 *******************************************************************************/

package org.eclipse.php.internal.core.ast.scanner.php54;

import java.io.IOException;
import java.util.LinkedList;
import java.util.List;

import org.eclipse.php.internal.core.ast.nodes.IDocumentorLexer;
import org.eclipse.php.internal.core.ast.nodes.Comment;
import java_cup.sym;
import org.eclipse.php.internal.core.ast.nodes.AST;
import java_cup.runtime.Symbol;
import org.eclipse.php.internal.core.ast.scanner.StateStack;
import org.eclipse.php.internal.core.PHPVersion;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 1/13/14 11:25 AM from the specification file
 * <tt>ast_scanner.flex</tt>
 */
public class PhpAstLexer implements org.eclipse.php.internal.core.ast.scanner.AstLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int ST_DOCBLOCK = 11;
  public static final int ST_IN_SCRIPTING = 1;
  public static final int ST_NOWDOC = 6;
  public static final int ST_LOOKING_FOR_PROPERTY = 7;
  public static final int ST_ONE_LINE_COMMENT = 12;
  public static final int ST_COMMENT = 10;
  public static final int ST_BACKQUOTE = 3;
  public static final int ST_DOUBLE_QUOTES = 2;
  public static final int YYINITIAL = 0;
  public static final int ST_VAR_OFFSET = 9;
  public static final int ST_LOOKING_FOR_VARNAME = 8;
  public static final int ST_HEREDOC = 4;
  public static final int ST_END_HEREDOC = 5;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\14\1\13\2\0\1\15\22\0\1\14\1\61\1\17\1\110"+
    "\1\16\1\65\1\66\1\107\1\50\1\52\1\63\1\60\1\76\1\4"+
    "\1\2\1\64\1\5\1\11\10\1\1\46\1\23\1\62\1\56\1\57"+
    "\1\102\1\103\1\53\2\7\1\74\1\3\1\7\7\12\1\73\1\71"+
    "\2\12\1\72\5\12\1\75\2\12\1\77\1\20\1\100\1\70\1\105"+
    "\1\21\1\37\1\10\1\27\1\43\1\35\1\24\1\51\1\40\1\31"+
    "\1\54\1\44\1\42\1\55\1\26\1\32\1\45\1\106\1\34\1\33"+
    "\1\30\1\25\1\47\1\41\1\6\1\36\1\12\1\22\1\67\1\104"+
    "\1\101\201\12\uff00\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\10\0\2\2\1\3\1\4\1\5\1\6"+
    "\1\7\1\4\1\6\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\13\6\1\17\1\6\1\20\1\21\1\6"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\2\6\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\3\1\44\2\1\1\3\1\45"+
    "\2\3\2\1\2\3\1\46\1\3\3\1\3\3\1\47"+
    "\3\3\1\50\1\51\1\52\1\53\1\54\1\55\1\7"+
    "\1\55\1\56\1\57\1\60\1\61\1\17\1\20\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\62\1\63\1\10\1\64\3\10\3\65"+
    "\2\64\1\0\1\2\1\0\1\66\1\0\1\67\1\70"+
    "\1\71\2\0\1\6\4\0\1\72\2\0\11\6\1\73"+
    "\1\74\6\6\1\75\2\6\1\76\1\6\11\0\2\6"+
    "\1\77\1\100\1\101\1\102\1\103\1\104\1\105\1\106"+
    "\1\105\1\107\1\0\1\110\1\111\1\112\1\113\1\114"+
    "\1\115\1\116\1\117\1\120\1\121\1\122\1\6\4\0"+
    "\1\1\1\0\2\123\1\124\1\125\1\123\3\0\1\1"+
    "\3\126\3\0\1\1\1\127\2\1\2\123\3\0\1\130"+
    "\2\0\1\131\2\0\1\132\1\133\1\134\2\135\1\66"+
    "\1\0\1\66\1\136\1\6\1\0\1\6\1\137\1\140"+
    "\5\6\1\141\13\6\1\142\11\0\1\6\1\143\1\144"+
    "\1\145\1\146\1\147\3\0\1\150\1\0\2\114\1\151"+
    "\1\1\1\152\2\1\1\153\1\1\1\154\1\0\2\131"+
    "\6\6\1\155\12\6\1\156\1\157\4\6\11\0\1\6"+
    "\4\0\1\160\1\0\3\161\1\162\3\6\1\163\1\164"+
    "\1\165\1\166\5\6\1\167\3\6\1\170\2\6\1\171"+
    "\5\0\1\172\5\0\1\173\2\174\4\0\4\6\1\175"+
    "\1\176\1\6\1\177\2\6\1\200\1\201\1\6\3\0"+
    "\1\202\3\0\1\203\5\0\3\6\1\204\1\205\2\6"+
    "\1\206\4\0\1\207\2\0\1\210\1\6\1\211\2\6"+
    "\1\212\1\213\1\214\3\0\1\215\1\6\1\216\1\0"+
    "\1\6\3\0\1\6\1\0\1\217\1\220";

  private static int [] zzUnpackAction() {
    int [] result = new int[446];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\111\0\222\0\333\0\u0124\0\u016d\0\u01b6\0\u01ff"+
    "\0\u0248\0\u0291\0\u02da\0\u0323\0\u036c\0\u03b5\0\u03fe\0\u0447"+
    "\0\u0490\0\u04d9\0\u0522\0\u056b\0\u05b4\0\u05fd\0\u0646\0\u0447"+
    "\0\u068f\0\u0447\0\u0447\0\u0447\0\u0447\0\u06d8\0\u0721\0\u076a"+
    "\0\u07b3\0\u07fc\0\u0845\0\u088e\0\u08d7\0\u0920\0\u0969\0\u09b2"+
    "\0\u09fb\0\u0a44\0\u0a8d\0\u0447\0\u0ad6\0\u0b1f\0\u0b68\0\u0bb1"+
    "\0\u0bfa\0\u0c43\0\u0c8c\0\u0cd5\0\u0d1e\0\u0d67\0\u0db0\0\u0df9"+
    "\0\u0e42\0\u0e8b\0\u0447\0\u0447\0\u0447\0\u0447\0\u0447\0\u0447"+
    "\0\u0447\0\u0ed4\0\u0447\0\u0f1d\0\u0f66\0\u0faf\0\u0447\0\u0ff8"+
    "\0\u1041\0\u108a\0\u10d3\0\u111c\0\u1165\0\u0447\0\u11ae\0\u11f7"+
    "\0\u1240\0\u1289\0\u12d2\0\u131b\0\u1364\0\u0447\0\u13ad\0\u13f6"+
    "\0\u143f\0\u0447\0\u0447\0\u1488\0\u0447\0\u14d1\0\u151a\0\u0447"+
    "\0\u1563\0\u0447\0\u0447\0\u0447\0\u0447\0\u0447\0\u0447\0\u0447"+
    "\0\u0447\0\u0447\0\u0447\0\u0447\0\u0447\0\u0447\0\u0447\0\u0447"+
    "\0\u0447\0\u0447\0\u0447\0\u0447\0\u15ac\0\u15f5\0\u0447\0\u163e"+
    "\0\u1687\0\u16d0\0\u0447\0\u1719\0\u0447\0\u1762\0\u17ab\0\u0447"+
    "\0\u17f4\0\u183d\0\u1886\0\u0447\0\u0447\0\u0447\0\u18cf\0\u1918"+
    "\0\u1961\0\u19aa\0\u0ed4\0\u068f\0\u19f3\0\u0447\0\u1a3c\0\u1a85"+
    "\0\u1ace\0\u1b17\0\u1b60\0\u1ba9\0\u1bf2\0\u1c3b\0\u1c84\0\u1ccd"+
    "\0\u1d16\0\u0522\0\u1d5f\0\u1da8\0\u1df1\0\u1e3a\0\u1e83\0\u1ecc"+
    "\0\u1f15\0\u0522\0\u1f5e\0\u1fa7\0\u0447\0\u1ff0\0\u2039\0\u0a8d"+
    "\0\u2082\0\u20cb\0\u2114\0\u215d\0\u21a6\0\u21ef\0\u2238\0\u2281"+
    "\0\u22ca\0\u2313\0\u0447\0\u0447\0\u235c\0\u0447\0\u0447\0\u23a5"+
    "\0\u0447\0\u0447\0\u23ee\0\u2437\0\u0447\0\u0447\0\u2480\0\u0447"+
    "\0\u24c9\0\u0447\0\u0447\0\u0447\0\u0447\0\u0447\0\u0522\0\u2512"+
    "\0\u255b\0\u25a4\0\u0ff8\0\u25ed\0\u2636\0\u267f\0\u25a4\0\u0447"+
    "\0\u0447\0\u0447\0\u25ed\0\u26c8\0\u1165\0\u2711\0\u275a\0\u26c8"+
    "\0\u0447\0\u2711\0\u27a3\0\u131b\0\u27ec\0\u2835\0\u1289\0\u287e"+
    "\0\u28c7\0\u27a3\0\u27ec\0\u13ad\0\u143f\0\u13f6\0\u143f\0\u2910"+
    "\0\u2959\0\u29a2\0\u29eb\0\u2a34\0\u0447\0\u0447\0\u0447\0\u0447"+
    "\0\u2a7d\0\u2ac6\0\u2ac6\0\u18cf\0\u1918\0\u2b0f\0\u2b58\0\u2ba1"+
    "\0\u0522\0\u0522\0\u2bea\0\u2c33\0\u2c7c\0\u2cc5\0\u2d0e\0\u0522"+
    "\0\u2d57\0\u2da0\0\u2de9\0\u2e32\0\u2e7b\0\u2ec4\0\u2f0d\0\u2f56"+
    "\0\u2f9f\0\u2fe8\0\u3031\0\u0522\0\u307a\0\u30c3\0\u310c\0\u3155"+
    "\0\u319e\0\u31e7\0\u3230\0\u3279\0\u32c2\0\u330b\0\u0522\0\u0447"+
    "\0\u0447\0\u0447\0\u0447\0\u3354\0\u339d\0\u33e6\0\u342f\0\u3478"+
    "\0\u0447\0\u34c1\0\u0522\0\u350a\0\u0447\0\u3553\0\u359c\0\u0447"+
    "\0\u35e5\0\u0447\0\u362e\0\u29eb\0\u2a34\0\u3677\0\u36c0\0\u3709"+
    "\0\u3752\0\u379b\0\u37e4\0\u0522\0\u382d\0\u3876\0\u38bf\0\u3908"+
    "\0\u3951\0\u399a\0\u39e3\0\u3a2c\0\u3a75\0\u3abe\0\u3b07\0\u0522"+
    "\0\u3b50\0\u3b99\0\u3be2\0\u3c2b\0\u3c74\0\u3cbd\0\u3d06\0\u3d4f"+
    "\0\u3d98\0\u3de1\0\u3e2a\0\u3e73\0\u3ebc\0\u3f05\0\u3f4e\0\u3f97"+
    "\0\u3fe0\0\u4029\0\u0447\0\u4072\0\u0f1d\0\u108a\0\u11f7\0\u0522"+
    "\0\u40bb\0\u4104\0\u414d\0\u0522\0\u0522\0\u0522\0\u0522\0\u4196"+
    "\0\u41df\0\u4228\0\u4271\0\u42ba\0\u0522\0\u4303\0\u434c\0\u4395"+
    "\0\u0522\0\u43de\0\u4427\0\u0522\0\u4470\0\u44b9\0\u4502\0\u454b"+
    "\0\u4594\0\u0447\0\u45dd\0\u4626\0\u466f\0\u46b8\0\u4701\0\u0522"+
    "\0\u0447\0\u474a\0\u4793\0\u47dc\0\u4825\0\u486e\0\u48b7\0\u4900"+
    "\0\u4949\0\u4992\0\u0522\0\u0522\0\u49db\0\u0522\0\u4a24\0\u4a6d"+
    "\0\u0522\0\u0522\0\u4ab6\0\u4aff\0\u4b48\0\u4b91\0\u0447\0\u4bda"+
    "\0\u4c23\0\u4c6c\0\u0447\0\u4cb5\0\u4cfe\0\u4d47\0\u4d90\0\u4dd9"+
    "\0\u4e22\0\u4e6b\0\u4eb4\0\u4efd\0\u0522\0\u4f46\0\u4f8f\0\u0522"+
    "\0\u4fd8\0\u5021\0\u506a\0\u50b3\0\u0447\0\u50fc\0\u5145\0\u0522"+
    "\0\u518e\0\u0522\0\u51d7\0\u5220\0\u0522\0\u0447\0\u0447\0\u5269"+
    "\0\u52b2\0\u52fb\0\u0522\0\u5344\0\u0522\0\u538d\0\u53d6\0\u541f"+
    "\0\u5468\0\u54b1\0\u54fa\0\u5543\0\u0447\0\u0522";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[446];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\62\16\1\17\26\16\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\2\23\1\26\1\21\1\23\3\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\23\1\37\1\40"+
    "\1\41\1\42\1\23\1\43\1\44\1\45\3\23\1\46"+
    "\1\23\1\47\1\23\1\50\1\51\1\52\1\53\1\23"+
    "\1\54\1\55\2\23\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\66\1\67\1\70\1\71\3\23"+
    "\1\72\1\73\1\74\1\75\1\76\1\77\1\100\1\101"+
    "\2\23\1\102\1\103\3\104\1\105\2\104\3\105\1\104"+
    "\1\105\3\104\1\106\1\107\1\110\1\104\1\111\1\104"+
    "\22\105\1\104\1\105\1\104\1\105\1\104\3\105\13\104"+
    "\5\105\7\104\2\105\2\104\3\112\1\113\2\112\3\113"+
    "\1\112\1\113\3\112\1\114\1\112\1\115\1\116\1\117"+
    "\1\112\22\113\1\112\1\113\1\112\1\113\1\112\3\113"+
    "\13\112\5\113\7\112\2\113\2\112\3\120\1\121\2\120"+
    "\3\121\1\120\1\121\1\122\1\120\1\122\1\123\1\120"+
    "\1\124\1\120\1\125\1\120\22\121\1\120\1\121\1\120"+
    "\1\121\1\120\3\121\13\120\5\121\7\120\2\121\2\120"+
    "\111\126\3\127\1\130\2\127\3\130\1\127\1\130\1\131"+
    "\1\127\1\131\6\127\22\130\1\127\1\130\1\127\1\130"+
    "\1\127\3\130\13\127\5\130\7\127\2\130\2\127\2\132"+
    "\1\133\1\134\2\132\3\134\1\132\1\134\3\27\6\132"+
    "\22\134\1\132\1\134\1\132\1\134\1\132\3\134\13\132"+
    "\5\134\7\132\2\134\2\132\3\135\1\136\2\135\3\136"+
    "\1\135\1\136\11\135\22\136\1\135\1\136\1\135\1\136"+
    "\1\135\3\136\13\135\5\136\7\135\2\136\2\135\1\20"+
    "\1\137\1\20\1\23\1\140\1\141\3\23\1\137\1\23"+
    "\3\142\1\30\1\143\1\142\1\144\1\145\1\35\22\23"+
    "\1\146\1\23\1\147\1\23\1\54\3\23\1\150\1\151"+
    "\1\152\1\153\1\154\1\155\1\156\1\157\1\160\1\161"+
    "\1\162\5\23\1\73\1\74\1\163\1\76\1\77\1\100"+
    "\1\164\2\23\2\142\63\165\1\166\25\165\15\167\1\170"+
    "\45\167\1\171\25\167\13\172\1\173\1\172\1\174\41\172"+
    "\1\175\5\172\1\176\14\172\1\176\6\172\62\16\1\177"+
    "\61\16\1\200\26\16\1\0\2\16\1\201\14\16\1\0"+
    "\6\16\112\0\1\21\1\202\1\203\1\0\1\21\3\0"+
    "\1\21\23\0\1\203\54\0\1\202\3\0\1\202\3\0"+
    "\1\202\44\0\1\204\33\0\1\23\1\0\1\23\1\0"+
    "\6\23\11\0\22\23\1\0\1\23\1\0\1\23\1\0"+
    "\3\23\13\0\5\23\7\0\2\23\6\0\1\205\51\0"+
    "\1\206\33\0\1\21\1\202\1\203\1\0\1\21\1\207"+
    "\1\0\1\210\1\21\23\0\1\203\54\0\1\23\1\0"+
    "\1\23\1\0\6\23\4\0\1\31\4\0\10\23\1\211"+
    "\11\23\1\0\1\23\1\0\1\23\1\0\3\23\4\0"+
    "\1\212\6\0\5\23\7\0\2\23\1\213\14\0\3\27"+
    "\73\0\16\214\1\215\1\216\1\217\1\214\1\220\66\214"+
    "\1\0\1\23\1\0\1\23\1\0\6\23\11\0\1\23"+
    "\1\221\4\23\1\222\13\23\1\0\1\23\1\0\1\23"+
    "\1\0\3\23\13\0\5\23\7\0\2\23\3\0\1\23"+
    "\1\0\1\23\1\0\6\23\11\0\11\23\1\223\1\23"+
    "\1\224\6\23\1\0\1\23\1\0\1\23\1\0\3\23"+
    "\13\0\5\23\7\0\2\23\3\0\1\23\1\0\1\23"+
    "\1\0\6\23\11\0\6\23\1\225\4\23\1\226\2\23"+
    "\1\227\3\23\1\0\1\23\1\0\1\23\1\0\3\23"+
    "\13\0\5\23\7\0\2\23\3\0\1\23\1\0\1\23"+
    "\1\0\6\23\11\0\10\23\1\230\3\23\1\231\5\23"+
    "\1\0\1\23\1\0\1\23\1\0\3\23\13\0\5\23"+
    "\7\0\2\23\3\0\1\23\1\0\1\23\1\0\6\23"+
    "\11\0\1\232\1\23\1\233\17\23\1\0\1\23\1\0"+
    "\1\23\1\0\3\23\13\0\5\23\7\0\2\23\3\0"+
    "\1\23\1\0\1\23\1\0\6\23\11\0\15\23\1\234"+
    "\4\23\1\0\1\23\1\0\1\23\1\0\3\23\13\0"+
    "\5\23\7\0\2\23\3\0\1\23\1\0\1\23\1\0"+
    "\6\23\11\0\11\23\1\235\10\23\1\0\1\23\1\0"+
    "\1\23\1\0\3\23\13\0\5\23\7\0\2\23\3\0"+
    "\1\23\1\0\1\23\1\0\6\23\11\0\2\23\1\236"+
    "\13\23\1\237\3\23\1\0\1\240\1\0\1\23\1\0"+
    "\3\23\13\0\5\23\7\0\2\23\3\0\1\23\1\0"+
    "\1\23\1\0\6\23\11\0\14\23\1\241\5\23\1\0"+
    "\1\23\1\0\1\23\1\0\3\23\13\0\5\23\7\0"+
    "\2\23\3\0\1\23\1\0\1\23\1\0\6\23\11\0"+
    "\6\23\1\242\2\23\1\243\10\23\1\0\1\23\1\0"+
    "\1\23\1\0\3\23\13\0\5\23\7\0\2\23\3\0"+
    "\1\23\1\0\1\23\1\0\6\23\11\0\10\23\1\244"+
    "\11\23\1\0\1\23\1\0\1\23\1\0\3\23\13\0"+
    "\5\23\7\0\2\23\50\0\1\245\43\0\1\23\1\0"+
    "\1\23\1\0\6\23\11\0\13\23\1\246\6\23\1\0"+
    "\1\23\1\0\1\23\1\0\3\23\13\0\5\23\7\0"+
    "\2\23\12\0\1\247\3\0\1\250\7\0\1\251\4\0"+
    "\1\252\1\253\1\254\1\255\6\0\1\256\7\0\1\257"+
    "\36\0\1\23\1\0\1\23\1\0\6\23\11\0\10\23"+
    "\1\260\11\23\1\0\1\23\1\0\1\23\1\0\3\23"+
    "\13\0\2\23\1\261\2\23\7\0\2\23\60\0\1\262"+
    "\1\263\107\0\1\264\1\265\107\0\1\266\1\0\1\267"+
    "\106\0\1\270\110\0\1\271\1\272\2\0\1\273\1\0"+
    "\1\274\102\0\1\275\110\0\1\276\4\0\1\277\1\103"+
    "\102\0\1\300\1\301\107\0\1\302\7\0\1\303\100\0"+
    "\1\304\10\0\1\305\77\0\1\306\33\0\1\23\1\0"+
    "\1\23\1\0\6\23\11\0\22\23\1\0\1\23\1\0"+
    "\1\23\1\0\3\23\13\0\1\23\1\307\3\23\7\0"+
    "\2\23\3\0\1\23\1\0\1\23\1\0\6\23\11\0"+
    "\22\23\1\0\1\23\1\0\1\23\1\0\3\23\13\0"+
    "\1\310\4\23\7\0\2\23\2\0\20\213\1\311\66\213"+
    "\1\216\1\213\16\104\1\312\1\0\1\313\1\104\1\314"+
    "\67\104\1\105\1\104\1\105\1\315\6\105\3\104\1\312"+
    "\1\0\1\313\1\104\1\314\1\104\22\105\1\104\1\105"+
    "\1\104\1\105\1\104\3\105\13\104\5\105\7\104\2\105"+
    "\5\104\1\316\2\104\3\316\1\104\1\316\3\104\1\317"+
    "\1\320\1\313\1\104\1\321\1\104\22\316\1\104\1\316"+
    "\1\104\1\316\1\104\3\316\13\104\5\316\7\104\2\316"+
    "\131\104\1\322\1\320\1\313\1\104\1\323\66\104\16\112"+
    "\1\324\1\112\1\325\1\0\1\326\67\112\1\113\1\112"+
    "\1\113\1\327\6\113\3\112\1\324\1\112\1\325\1\0"+
    "\1\326\1\112\22\113\1\112\1\113\1\112\1\113\1\112"+
    "\3\113\13\112\5\113\7\112\2\113\5\112\1\316\2\112"+
    "\3\316\1\112\1\316\3\112\1\330\1\112\1\325\1\331"+
    "\1\321\1\112\22\316\1\112\1\316\1\112\1\316\1\112"+
    "\3\316\13\112\5\316\7\112\2\316\131\112\1\322\1\112"+
    "\1\325\1\331\1\332\66\112\13\120\1\122\1\120\1\122"+
    "\1\333\1\120\1\334\1\120\1\335\67\120\1\121\1\120"+
    "\1\121\1\336\6\121\1\337\1\120\1\337\1\333\1\120"+
    "\1\334\1\120\1\335\1\340\22\121\1\120\1\121\1\120"+
    "\1\121\1\120\3\121\13\120\5\121\7\120\2\121\5\120"+
    "\1\341\2\120\3\341\1\120\1\341\1\122\1\120\1\122"+
    "\1\333\1\120\1\334\1\120\1\335\1\120\22\341\1\120"+
    "\1\341\1\120\1\341\1\120\3\341\13\120\5\341\7\120"+
    "\2\341\5\120\1\316\2\120\3\316\1\120\1\316\1\122"+
    "\1\120\1\122\1\342\1\120\1\334\1\120\1\321\1\120"+
    "\22\316\1\120\1\316\1\120\1\316\1\120\3\316\13\120"+
    "\5\316\7\120\2\316\15\120\1\122\1\120\1\122\106\120"+
    "\1\122\1\120\1\122\1\322\1\120\1\334\1\120\1\343"+
    "\66\120\13\344\1\345\1\344\1\345\74\344\1\346\1\344"+
    "\1\346\1\344\6\346\1\347\1\344\1\347\5\344\1\350"+
    "\22\346\1\344\1\346\1\344\1\346\1\344\3\346\13\344"+
    "\5\346\7\344\2\346\5\344\1\351\2\344\3\351\1\344"+
    "\1\351\1\345\1\344\1\345\6\344\22\351\1\344\1\351"+
    "\1\344\1\351\1\344\3\351\13\344\5\351\7\344\2\351"+
    "\2\344\1\0\1\134\1\0\1\134\1\0\6\134\11\0"+
    "\22\134\1\0\1\134\1\0\1\134\1\0\3\134\13\0"+
    "\5\134\7\0\2\134\3\0\1\136\1\0\1\136\1\0"+
    "\6\136\11\0\22\136\1\0\1\136\1\0\1\136\1\0"+
    "\3\136\13\0\5\136\7\0\2\136\3\0\1\137\3\0"+
    "\1\137\3\0\1\137\100\0\1\352\3\0\1\352\1\353"+
    "\1\0\1\354\1\352\77\0\63\165\1\0\25\165\64\0"+
    "\1\355\37\0\1\167\161\0\1\356\24\0\13\172\1\173"+
    "\1\172\1\174\41\172\1\173\5\172\1\173\14\172\1\173"+
    "\6\172\13\0\1\173\154\0\1\357\31\0\33\16\1\0"+
    "\26\16\1\0\2\16\1\0\14\16\1\0\6\16\13\0"+
    "\2\360\1\361\74\0\1\202\1\0\1\203\1\0\1\202"+
    "\3\0\1\202\23\0\1\203\54\0\1\362\2\0\1\363"+
    "\1\362\3\0\1\362\46\0\1\363\31\0\1\364\1\0"+
    "\1\364\1\0\1\364\1\0\3\364\12\0\1\364\2\0"+
    "\1\364\5\0\1\364\1\0\1\364\3\0\1\364\7\0"+
    "\1\364\20\0\1\364\21\0\1\365\3\0\1\365\100\0"+
    "\1\23\1\0\1\23\1\0\6\23\11\0\11\23\1\366"+
    "\10\23\1\0\1\23\1\0\1\23\1\0\3\23\13\0"+
    "\5\23\7\0\2\23\64\0\1\367\26\0\3\214\1\0"+
    "\2\214\3\0\1\214\1\0\3\214\1\215\1\216\1\217"+
    "\1\214\1\0\1\214\22\0\1\214\1\0\1\214\1\0"+
    "\1\214\3\0\13\214\5\0\7\214\2\0\131\214\1\0"+
    "\1\216\1\217\1\214\1\220\66\214\1\0\1\23\1\0"+
    "\1\23\1\0\6\23\11\0\2\23\1\370\17\23\1\0"+
    "\1\23\1\0\1\23\1\0\3\23\13\0\5\23\7\0"+
    "\2\23\3\0\1\23\1\0\1\23\1\0\6\23\11\0"+
    "\10\23\1\371\11\23\1\0\1\23\1\0\1\23\1\0"+
    "\3\23\13\0\5\23\7\0\2\23\3\0\1\23\1\0"+
    "\1\23\1\0\6\23\11\0\15\23\1\372\4\23\1\0"+
    "\1\23\1\0\1\23\1\0\3\23\13\0\5\23\7\0"+
    "\2\23\3\0\1\23\1\0\1\23\1\0\6\23\11\0"+
    "\22\23\1\0\1\23\1\0\1\23\1\0\2\23\1\373"+
    "\13\0\5\23\7\0\2\23\3\0\1\23\1\0\1\23"+
    "\1\0\6\23\11\0\2\23\1\374\17\23\1\0\1\23"+
    "\1\0\1\23\1\0\3\23\13\0\5\23\7\0\2\23"+
    "\3\0\1\23\1\0\1\23\1\0\6\23\11\0\4\23"+
    "\1\375\2\23\1\376\12\23\1\0\1\23\1\0\1\23"+
    "\1\0\3\23\13\0\5\23\7\0\2\23\3\0\1\23"+
    "\1\0\1\23\1\0\6\23\11\0\13\23\1\377\6\23"+
    "\1\0\1\23\1\0\1\23\1\0\3\23\13\0\5\23"+
    "\7\0\2\23\3\0\1\23\1\0\1\23\1\0\6\23"+
    "\11\0\12\23\1\u0100\7\23\1\0\1\23\1\0\1\23"+
    "\1\0\3\23\13\0\5\23\7\0\2\23\3\0\1\23"+
    "\1\0\1\23\1\0\6\23\11\0\10\23\1\u0101\11\23"+
    "\1\0\1\23\1\0\1\23\1\0\3\23\13\0\5\23"+
    "\7\0\2\23\3\0\1\23\1\0\1\23\1\0\6\23"+
    "\11\0\3\23\1\u0102\16\23\1\0\1\23\1\0\1\23"+
    "\1\0\3\23\13\0\5\23\7\0\2\23\3\0\1\23"+
    "\1\0\1\23\1\0\6\23\11\0\5\23\1\u0103\14\23"+
    "\1\0\1\23\1\0\1\23\1\0\3\23\13\0\5\23"+
    "\7\0\2\23\3\0\1\23\1\0\1\23\1\0\6\23"+
    "\11\0\4\23\1\u0104\15\23\1\0\1\23\1\0\1\23"+
    "\1\0\3\23\13\0\5\23\7\0\1\23\1\u0105\3\0"+
    "\1\23\1\0\1\23\1\0\6\23\11\0\17\23\1\u0106"+
    "\2\23\1\0\1\23\1\0\1\23\1\0\3\23\13\0"+
    "\5\23\7\0\2\23\3\0\1\23\1\0\1\23\1\0"+
    "\6\23\11\0\7\23\1\u0107\12\23\1\0\1\23\1\0"+
    "\1\23\1\0\3\23\13\0\5\23\7\0\2\23\3\0"+
    "\1\23\1\0\1\23\1\0\6\23\11\0\13\23\1\u0108"+
    "\6\23\1\0\1\23\1\0\1\23\1\0\3\23\13\0"+
    "\5\23\7\0\2\23\3\0\1\23\1\0\1\23\1\0"+
    "\6\23\11\0\5\23\1\u0109\14\23\1\0\1\23\1\0"+
    "\1\23\1\0\3\23\13\0\5\23\7\0\2\23\3\0"+
    "\1\23\1\0\1\23\1\0\6\23\11\0\1\u010a\21\23"+
    "\1\0\1\23\1\0\1\23\1\0\3\23\13\0\5\23"+
    "\7\0\2\23\3\0\1\23\1\0\1\23\1\0\6\23"+
    "\11\0\5\23\1\u010b\14\23\1\0\1\23\1\0\1\23"+
    "\1\0\3\23\13\0\5\23\7\0\2\23\3\0\1\23"+
    "\1\0\1\23\1\0\6\23\11\0\10\23\1\u010c\11\23"+
    "\1\0\1\23\1\0\1\23\1\0\3\23\13\0\5\23"+
    "\7\0\2\23\33\0\1\u010d\1\u010e\120\0\1\u010f\74\0"+
    "\1\u0110\72\0\1\u0111\130\0\1\u0112\115\0\1\u0113\105\0"+
    "\1\u0114\112\0\1\u0115\55\0\1\23\1\0\1\23\1\0"+
    "\6\23\11\0\10\23\1\u0116\11\23\1\0\1\23\1\0"+
    "\1\23\1\0\3\23\13\0\5\23\7\0\2\23\3\0"+
    "\1\23\1\0\1\23\1\0\6\23\11\0\22\23\1\0"+
    "\1\23\1\0\1\23\1\0\3\23\13\0\3\23\1\u0117"+
    "\1\23\7\0\2\23\60\0\1\u0118\110\0\1\u0119\110\0"+
    "\1\u011a\110\0\1\u011b\3\0\1\u011c\61\0\1\u011d\70\0"+
    "\3\u011e\45\0\1\u011f\17\0\1\u0120\20\0\1\u0121\1\0"+
    "\1\u0122\74\0\1\23\1\0\1\23\1\0\6\23\11\0"+
    "\22\23\1\0\1\23\1\0\1\23\1\0\3\23\13\0"+
    "\1\23\1\u0123\3\23\7\0\2\23\2\0\111\213\3\104"+
    "\1\0\2\104\3\0\1\104\1\0\3\104\1\317\1\320"+
    "\1\313\1\104\1\0\1\104\22\0\1\104\1\0\1\104"+
    "\1\0\1\104\3\0\13\104\5\0\7\104\2\0\20\104"+
    "\1\0\1\320\1\313\1\104\1\323\104\104\1\312\1\0"+
    "\1\313\1\104\1\314\34\104\1\u0124\31\104\1\0\1\316"+
    "\1\0\1\316\1\0\6\316\11\0\22\316\1\0\1\316"+
    "\1\0\1\316\1\0\3\316\13\0\5\316\1\0\1\u0125"+
    "\5\0\2\316\2\0\3\112\1\0\2\112\3\0\1\112"+
    "\1\0\3\112\1\330\1\112\1\325\1\331\1\0\1\112"+
    "\22\0\1\112\1\0\1\112\1\0\1\112\3\0\13\112"+
    "\5\0\7\112\2\0\20\112\1\0\1\112\1\325\1\331"+
    "\1\332\104\112\1\324\1\112\1\325\1\0\1\326\34\112"+
    "\1\u0126\31\112\3\120\1\0\2\120\3\0\1\120\1\0"+
    "\1\122\1\120\1\122\1\342\1\120\1\334\1\120\1\0"+
    "\1\120\22\0\1\120\1\0\1\120\1\0\1\120\3\0"+
    "\13\120\5\0\7\120\2\0\15\120\1\122\1\120\1\122"+
    "\1\0\1\120\1\334\1\120\1\343\101\120\1\122\1\120"+
    "\1\122\1\333\1\120\1\334\1\120\1\335\34\120\1\u0127"+
    "\44\120\1\337\1\120\1\337\1\333\1\120\1\334\1\120"+
    "\1\335\67\120\1\341\1\120\1\341\1\120\6\341\1\u0128"+
    "\1\120\1\u0128\1\333\1\120\1\334\1\120\1\335\1\u0129"+
    "\22\341\1\120\1\341\1\120\1\341\1\120\3\341\13\120"+
    "\5\341\7\120\2\341\2\120\13\344\1\347\1\344\1\347"+
    "\74\344\1\351\1\344\1\351\1\344\6\351\1\u012a\1\344"+
    "\1\u012a\5\344\1\u012b\22\351\1\344\1\351\1\344\1\351"+
    "\1\344\3\351\13\344\5\351\7\344\2\351\2\344\1\0"+
    "\1\352\3\0\1\352\3\0\1\352\100\0\1\u012c\1\0"+
    "\1\u012c\1\0\1\u012c\1\0\3\u012c\12\0\1\u012c\2\0"+
    "\1\u012c\5\0\1\u012c\1\0\1\u012c\3\0\1\u012c\7\0"+
    "\1\u012c\20\0\1\u012c\21\0\1\u012d\3\0\1\u012d\112\0"+
    "\1\360\76\0\1\362\3\0\1\362\3\0\1\362\100\0"+
    "\1\23\1\0\1\23\1\0\6\23\11\0\13\23\1\u012e"+
    "\6\23\1\0\1\23\1\0\1\23\1\0\3\23\13\0"+
    "\5\23\7\0\2\23\64\0\1\u011c\27\0\1\23\1\0"+
    "\1\23\1\0\6\23\11\0\3\23\1\u012f\16\23\1\0"+
    "\1\23\1\0\1\23\1\0\3\23\13\0\5\23\7\0"+
    "\2\23\3\0\1\23\1\0\1\23\1\0\6\23\11\0"+
    "\11\23\1\u0130\10\23\1\0\1\23\1\0\1\23\1\0"+
    "\3\23\13\0\5\23\7\0\2\23\3\0\1\23\1\0"+
    "\1\23\1\0\6\23\11\0\4\23\1\u0131\2\23\1\u0132"+
    "\12\23\1\0\1\23\1\0\1\23\1\0\3\23\13\0"+
    "\5\23\7\0\2\23\3\0\1\23\1\0\1\23\1\0"+
    "\6\23\11\0\3\23\1\u0133\16\23\1\0\1\23\1\0"+
    "\1\23\1\0\3\23\13\0\5\23\7\0\2\23\3\0"+
    "\1\23\1\0\1\23\1\0\6\23\11\0\11\23\1\u0134"+
    "\10\23\1\0\1\23\1\0\1\23\1\0\3\23\13\0"+
    "\5\23\7\0\2\23\3\0\1\23\1\0\1\23\1\0"+
    "\6\23\11\0\7\23\1\u0135\12\23\1\0\1\23\1\0"+
    "\1\23\1\0\3\23\13\0\5\23\7\0\2\23\3\0"+
    "\1\23\1\0\1\23\1\0\6\23\11\0\6\23\1\u0136"+
    "\13\23\1\0\1\23\1\0\1\23\1\0\3\23\13\0"+
    "\5\23\7\0\2\23\3\0\1\23\1\0\1\23\1\0"+
    "\6\23\11\0\16\23\1\u0137\3\23\1\0\1\23\1\0"+
    "\1\23\1\0\3\23\13\0\5\23\7\0\2\23\3\0"+
    "\1\23\1\0\1\23\1\0\6\23\11\0\4\23\1\u0138"+
    "\15\23\1\0\1\23\1\0\1\23\1\0\3\23\13\0"+
    "\5\23\7\0\2\23\3\0\1\23\1\0\1\23\1\0"+
    "\6\23\11\0\1\23\1\u0139\20\23\1\0\1\23\1\0"+
    "\1\23\1\0\3\23\13\0\5\23\7\0\2\23\3\0"+
    "\1\23\1\0\1\23\1\0\6\23\11\0\1\23\1\u013a"+
    "\20\23\1\0\1\23\1\0\1\23\1\0\3\23\13\0"+
    "\5\23\7\0\2\23\3\0\1\23\1\0\1\23\1\0"+
    "\6\23\11\0\1\u013b\4\23\1\u013c\1\23\1\u013d\5\23"+
    "\1\u013e\4\23\1\0\1\23\1\0\1\23\1\0\3\23"+
    "\13\0\5\23\7\0\2\23\3\0\1\23\1\0\1\23"+
    "\1\0\6\23\11\0\11\23\1\u013f\10\23\1\0\1\23"+
    "\1\0\1\23\1\0\3\23\13\0\5\23\7\0\2\23"+
    "\3\0\1\23\1\0\1\23\1\0\6\23\11\0\16\23"+
    "\1\u0140\3\23\1\0\1\23\1\0\1\23\1\0\3\23"+
    "\13\0\5\23\7\0\2\23\3\0\1\23\1\0\1\23"+
    "\1\0\6\23\11\0\16\23\1\u0141\3\23\1\0\1\23"+
    "\1\0\1\23\1\0\3\23\13\0\5\23\7\0\2\23"+
    "\3\0\1\23\1\0\1\23\1\0\6\23\11\0\5\23"+
    "\1\u0142\5\23\1\u0143\6\23\1\0\1\23\1\0\1\23"+
    "\1\0\3\23\13\0\5\23\7\0\2\23\3\0\1\23"+
    "\1\0\1\23\1\0\6\23\11\0\2\23\1\u0144\17\23"+
    "\1\0\1\23\1\0\1\23\1\0\3\23\13\0\5\23"+
    "\7\0\2\23\30\0\1\u0145\114\0\1\u0146\110\0\1\u0147"+
    "\106\0\1\u0148\134\0\1\u0149\70\0\1\u014a\113\0\1\u014b"+
    "\76\0\1\u014c\117\0\1\u014d\55\0\1\23\1\0\1\23"+
    "\1\0\6\23\11\0\13\23\1\u014e\6\23\1\0\1\23"+
    "\1\0\1\23\1\0\3\23\13\0\5\23\7\0\2\23"+
    "\5\0\1\u014f\2\0\3\u014f\1\0\1\u014f\1\0\1\u011c"+
    "\2\0\1\u0150\4\0\22\u014f\1\0\1\u014f\1\0\1\u014f"+
    "\1\0\3\u014f\13\0\5\u014f\7\0\2\u014f\1\u0151\30\0"+
    "\1\u0152\74\0\3\u011e\65\0\1\u0120\71\0\1\u0153\73\0"+
    "\1\u0154\54\0\1\u0121\75\0\3\104\1\u0155\2\104\3\u0155"+
    "\1\104\1\u0155\3\104\1\312\1\0\1\313\1\104\1\314"+
    "\1\104\22\u0155\1\104\1\u0155\1\104\1\u0155\1\104\3\u0155"+
    "\13\104\5\u0155\7\104\2\u0155\2\104\3\112\1\u0156\2\112"+
    "\3\u0156\1\112\1\u0156\3\112\1\324\1\112\1\325\1\0"+
    "\1\326\1\112\22\u0156\1\112\1\u0156\1\112\1\u0156\1\112"+
    "\3\u0156\13\112\5\u0156\7\112\2\u0156\2\112\3\120\1\u0157"+
    "\2\120\3\u0157\1\120\1\u0157\1\122\1\120\1\122\1\333"+
    "\1\120\1\334\1\120\1\335\1\120\22\u0157\1\120\1\u0157"+
    "\1\120\1\u0157\1\120\3\u0157\13\120\5\u0157\7\120\2\u0157"+
    "\15\120\1\u0128\1\120\1\u0128\1\333\1\120\1\334\1\120"+
    "\1\335\66\120\13\344\1\u012a\1\344\1\u012a\73\344\1\0"+
    "\1\23\1\0\1\23\1\0\6\23\11\0\20\23\1\u0158"+
    "\1\23\1\0\1\23\1\0\1\23\1\0\3\23\13\0"+
    "\5\23\7\0\2\23\3\0\1\23\1\0\1\23\1\0"+
    "\6\23\11\0\4\23\1\u0159\15\23\1\0\1\23\1\0"+
    "\1\23\1\0\3\23\13\0\5\23\7\0\2\23\3\0"+
    "\1\23\1\0\1\23\1\0\6\23\11\0\7\23\1\u015a"+
    "\12\23\1\0\1\23\1\0\1\23\1\0\3\23\13\0"+
    "\5\23\7\0\2\23\3\0\1\23\1\0\1\23\1\0"+
    "\6\23\11\0\5\23\1\u015b\14\23\1\0\1\23\1\0"+
    "\1\23\1\0\3\23\13\0\5\23\7\0\2\23\3\0"+
    "\1\23\1\0\1\23\1\0\6\23\11\0\4\23\1\u015c"+
    "\15\23\1\0\1\23\1\0\1\23\1\0\3\23\13\0"+
    "\5\23\7\0\2\23\3\0\1\23\1\0\1\23\1\0"+
    "\6\23\11\0\14\23\1\u015d\5\23\1\0\1\23\1\0"+
    "\1\23\1\0\3\23\13\0\5\23\7\0\2\23\3\0"+
    "\1\23\1\0\1\23\1\0\6\23\11\0\7\23\1\u015e"+
    "\12\23\1\0\1\23\1\0\1\23\1\0\3\23\13\0"+
    "\5\23\7\0\2\23\3\0\1\23\1\0\1\23\1\0"+
    "\6\23\11\0\15\23\1\u015f\4\23\1\0\1\23\1\0"+
    "\1\23\1\0\3\23\13\0\5\23\7\0\2\23\3\0"+
    "\1\23\1\0\1\23\1\0\6\23\11\0\1\23\1\u0160"+
    "\20\23\1\0\1\23\1\0\1\23\1\0\3\23\13\0"+
    "\5\23\7\0\2\23\3\0\1\23\1\0\1\23\1\0"+
    "\6\23\11\0\3\23\1\u0161\16\23\1\0\1\23\1\0"+
    "\1\23\1\0\3\23\13\0\5\23\7\0\2\23\3\0"+
    "\1\23\1\0\1\23\1\0\6\23\11\0\10\23\1\u0162"+
    "\11\23\1\0\1\23\1\0\1\23\1\0\3\23\13\0"+
    "\5\23\7\0\2\23\3\0\1\23\1\0\1\23\1\0"+
    "\6\23\11\0\5\23\1\u0163\14\23\1\0\1\23\1\0"+
    "\1\23\1\0\3\23\13\0\5\23\7\0\2\23\3\0"+
    "\1\23\1\0\1\23\1\0\6\23\11\0\6\23\1\u0164"+
    "\13\23\1\0\1\23\1\0\1\23\1\0\3\23\13\0"+
    "\5\23\7\0\2\23\3\0\1\23\1\0\1\23\1\0"+
    "\6\23\11\0\1\u0165\21\23\1\0\1\23\1\0\1\23"+
    "\1\0\3\23\13\0\5\23\7\0\2\23\3\0\1\23"+
    "\1\0\1\23\1\0\6\23\11\0\15\23\1\u0166\4\23"+
    "\1\0\1\23\1\0\1\23\1\0\3\23\13\0\5\23"+
    "\7\0\2\23\3\0\1\23\1\0\1\23\1\0\6\23"+
    "\11\0\14\23\1\u0167\5\23\1\0\1\23\1\0\1\23"+
    "\1\0\3\23\13\0\5\23\7\0\2\23\3\0\1\23"+
    "\1\0\1\23\1\0\6\23\11\0\5\23\1\u0168\14\23"+
    "\1\0\1\23\1\0\1\23\1\0\3\23\13\0\5\23"+
    "\7\0\2\23\3\0\1\23\1\0\1\23\1\0\6\23"+
    "\11\0\11\23\1\u0169\10\23\1\0\1\23\1\0\1\23"+
    "\1\0\3\23\13\0\5\23\7\0\2\23\3\0\1\23"+
    "\1\0\1\23\1\0\6\23\11\0\2\23\1\u016a\17\23"+
    "\1\0\1\23\1\0\1\23\1\0\3\23\13\0\5\23"+
    "\7\0\2\23\3\0\1\23\1\0\1\23\1\0\6\23"+
    "\11\0\1\23\1\u016b\20\23\1\0\1\23\1\0\1\23"+
    "\1\0\3\23\13\0\5\23\7\0\2\23\3\0\1\23"+
    "\1\0\1\23\1\0\6\23\11\0\4\23\1\u016c\15\23"+
    "\1\0\1\23\1\0\1\23\1\0\3\23\13\0\5\23"+
    "\7\0\2\23\41\0\1\u016d\113\0\1\u016e\105\0\1\u016f"+
    "\65\0\1\u0170\20\0\1\u0171\14\0\1\u0172\73\0\1\u0173"+
    "\104\0\1\u0174\121\0\1\u0175\56\0\1\u0176\137\0\1\u0177"+
    "\52\0\1\23\1\0\1\23\1\0\6\23\11\0\12\23"+
    "\1\u0178\7\23\1\0\1\23\1\0\1\23\1\0\3\23"+
    "\13\0\5\23\7\0\2\23\3\0\1\u014f\1\0\1\u014f"+
    "\1\0\6\u014f\1\u0179\1\0\1\u017a\6\0\22\u014f\1\0"+
    "\1\u014f\1\0\1\u014f\1\0\3\u014f\13\0\5\u014f\7\0"+
    "\2\u014f\5\0\1\u017b\2\0\3\u017b\1\0\1\u017b\11\0"+
    "\22\u017b\1\0\1\u017b\1\0\1\u017b\1\0\3\u017b\13\0"+
    "\5\u017b\7\0\2\u017b\5\0\1\u017c\2\0\3\u017c\1\0"+
    "\1\u017c\11\0\22\u017c\1\0\1\u017c\1\0\1\u017c\1\0"+
    "\3\u017c\13\0\5\u017c\7\0\2\u017c\36\0\1\u017d\113\0"+
    "\1\u017e\52\0\1\23\1\0\1\23\1\0\6\23\11\0"+
    "\5\23\1\u017f\14\23\1\0\1\23\1\0\1\23\1\0"+
    "\3\23\13\0\5\23\7\0\2\23\3\0\1\23\1\0"+
    "\1\23\1\0\6\23\11\0\21\23\1\u0180\1\0\1\23"+
    "\1\0\1\23\1\0\3\23\13\0\5\23\7\0\2\23"+
    "\3\0\1\23\1\0\1\23\1\0\6\23\11\0\2\23"+
    "\1\u0181\17\23\1\0\1\23\1\0\1\23\1\0\3\23"+
    "\13\0\5\23\7\0\2\23\3\0\1\23\1\0\1\23"+
    "\1\0\6\23\11\0\17\23\1\u0182\2\23\1\0\1\23"+
    "\1\0\1\23\1\0\3\23\13\0\5\23\7\0\2\23"+
    "\3\0\1\23\1\0\1\23\1\0\6\23\11\0\14\23"+
    "\1\u0183\5\23\1\0\1\23\1\0\1\23\1\0\3\23"+
    "\13\0\5\23\7\0\2\23\3\0\1\23\1\0\1\23"+
    "\1\0\6\23\11\0\2\23\1\u0184\17\23\1\0\1\23"+
    "\1\0\1\23\1\0\3\23\13\0\5\23\7\0\2\23"+
    "\3\0\1\23\1\0\1\23\1\0\6\23\11\0\10\23"+
    "\1\u0185\11\23\1\0\1\23\1\0\1\23\1\0\3\23"+
    "\13\0\5\23\7\0\2\23\3\0\1\23\1\0\1\23"+
    "\1\0\6\23\11\0\10\23\1\u0186\11\23\1\0\1\23"+
    "\1\0\1\23\1\0\3\23\13\0\5\23\7\0\2\23"+
    "\3\0\1\23\1\0\1\23\1\0\6\23\11\0\5\23"+
    "\1\u0187\14\23\1\0\1\23\1\0\1\23\1\0\3\23"+
    "\13\0\5\23\7\0\2\23\3\0\1\23\1\0\1\23"+
    "\1\0\6\23\11\0\5\23\1\u0188\14\23\1\0\1\23"+
    "\1\0\1\23\1\0\3\23\13\0\5\23\7\0\2\23"+
    "\3\0\1\23\1\0\1\23\1\0\6\23\11\0\1\u0189"+
    "\21\23\1\0\1\23\1\0\1\23\1\0\3\23\13\0"+
    "\5\23\7\0\2\23\3\0\1\23\1\0\1\23\1\0"+
    "\6\23\11\0\11\23\1\u018a\10\23\1\0\1\23\1\0"+
    "\1\23\1\0\3\23\13\0\5\23\7\0\2\23\3\0"+
    "\1\23\1\0\1\23\1\0\6\23\11\0\16\23\1\u018b"+
    "\3\23\1\0\1\23\1\0\1\23\1\0\3\23\13\0"+
    "\5\23\7\0\2\23\36\0\1\u018c\70\0\1\u018d\20\0"+
    "\1\u018e\14\0\1\u018f\66\0\1\u0175\74\0\1\u0170\35\0"+
    "\1\u0172\107\0\1\u0190\66\0\1\u0191\107\0\1\u0192\76\0"+
    "\1\u0175\35\0\1\u0193\100\0\1\u0194\104\0\1\u0195\65\0"+
    "\1\u0179\76\0\1\u017b\1\0\1\u017b\1\0\6\u017b\4\0"+
    "\1\u0196\4\0\22\u017b\1\0\1\u017b\1\0\1\u017b\1\0"+
    "\3\u017b\13\0\5\u017b\7\0\2\u017b\3\0\1\u017c\1\0"+
    "\1\u017c\1\0\6\u017c\11\0\22\u017c\1\0\1\u017c\1\0"+
    "\1\u017c\1\0\3\u017c\13\0\5\u017c\7\0\2\u017c\1\u0196"+
    "\32\0\1\u0197\113\0\1\u0198\55\0\1\23\1\0\1\23"+
    "\1\0\6\23\11\0\6\23\1\u0199\13\23\1\0\1\23"+
    "\1\0\1\23\1\0\3\23\13\0\5\23\7\0\2\23"+
    "\3\0\1\23\1\0\1\23\1\0\6\23\11\0\13\23"+
    "\1\u019a\6\23\1\0\1\23\1\0\1\23\1\0\3\23"+
    "\13\0\5\23\7\0\2\23\3\0\1\23\1\0\1\23"+
    "\1\0\6\23\11\0\1\23\1\u019b\20\23\1\0\1\23"+
    "\1\0\1\23\1\0\3\23\13\0\5\23\7\0\2\23"+
    "\3\0\1\23\1\0\1\23\1\0\6\23\11\0\11\23"+
    "\1\u019c\10\23\1\0\1\23\1\0\1\23\1\0\3\23"+
    "\13\0\5\23\7\0\2\23\3\0\1\23\1\0\1\23"+
    "\1\0\6\23\11\0\11\23\1\u019d\10\23\1\0\1\23"+
    "\1\0\1\23\1\0\3\23\13\0\5\23\7\0\2\23"+
    "\3\0\1\23\1\0\1\23\1\0\6\23\11\0\4\23"+
    "\1\u019e\15\23\1\0\1\23\1\0\1\23\1\0\3\23"+
    "\13\0\5\23\7\0\2\23\3\0\1\23\1\0\1\23"+
    "\1\0\6\23\11\0\16\23\1\u019f\3\23\1\0\1\23"+
    "\1\0\1\23\1\0\3\23\13\0\5\23\7\0\2\23"+
    "\3\0\1\23\1\0\1\23\1\0\6\23\11\0\4\23"+
    "\1\u01a0\15\23\1\0\1\23\1\0\1\23\1\0\3\23"+
    "\13\0\5\23\7\0\2\23\40\0\1\u01a1\66\0\1\u018d"+
    "\35\0\1\u018f\75\0\1\u01a2\106\0\1\u01a3\103\0\1\u01a4"+
    "\131\0\1\u01a1\74\0\1\u0175\67\0\1\u0195\35\0\1\u01a5"+
    "\51\0\1\u0179\1\0\1\u017a\140\0\1\u01a6\56\0\3\u01a7"+
    "\74\0\1\23\1\0\1\23\1\0\6\23\11\0\2\23"+
    "\1\u01a8\17\23\1\0\1\23\1\0\1\23\1\0\3\23"+
    "\13\0\5\23\7\0\2\23\3\0\1\23\1\0\1\23"+
    "\1\0\6\23\11\0\3\23\1\u01a9\16\23\1\0\1\23"+
    "\1\0\1\23\1\0\3\23\13\0\5\23\7\0\2\23"+
    "\3\0\1\23\1\0\1\23\1\0\6\23\11\0\11\23"+
    "\1\u01aa\10\23\1\0\1\23\1\0\1\23\1\0\3\23"+
    "\13\0\5\23\7\0\2\23\3\0\1\23\1\0\1\23"+
    "\1\0\6\23\11\0\22\23\1\0\1\23\1\0\1\23"+
    "\1\0\3\23\13\0\5\23\7\0\1\u01ab\1\23\3\0"+
    "\1\23\1\0\1\23\1\0\6\23\11\0\3\23\1\u01ac"+
    "\16\23\1\0\1\23\1\0\1\23\1\0\3\23\13\0"+
    "\5\23\7\0\2\23\3\0\1\23\1\0\1\23\1\0"+
    "\6\23\11\0\11\23\1\u01ad\10\23\1\0\1\23\1\0"+
    "\1\23\1\0\3\23\13\0\5\23\7\0\2\23\16\0"+
    "\1\u01a1\35\0\1\u01ae\64\0\1\u018d\116\0\1\u0170\70\0"+
    "\1\u01a4\35\0\1\u01af\66\0\1\u01b0\63\0\1\u01b1\2\0"+
    "\3\u01b1\1\0\1\u01b1\3\u01a7\1\u01b2\5\0\22\u01b1\1\0"+
    "\1\u01b1\1\0\1\u01b1\1\0\3\u01b1\13\0\5\u01b1\7\0"+
    "\2\u01b1\3\0\1\23\1\0\1\23\1\0\6\23\11\0"+
    "\11\23\1\u01b3\10\23\1\0\1\23\1\0\1\23\1\0"+
    "\3\23\13\0\5\23\7\0\2\23\3\0\1\23\1\0"+
    "\1\23\1\0\6\23\11\0\6\23\1\u01b4\13\23\1\0"+
    "\1\23\1\0\1\23\1\0\3\23\13\0\5\23\7\0"+
    "\2\23\3\0\1\23\1\0\1\23\1\0\6\23\11\0"+
    "\14\23\1\u01b5\5\23\1\0\1\23\1\0\1\23\1\0"+
    "\3\23\13\0\5\23\7\0\2\23\15\0\3\u01b0\41\0"+
    "\1\301\32\0\1\u01b1\1\0\1\u01b1\1\0\6\u01b1\3\u01b6"+
    "\6\0\22\u01b1\1\0\1\u01b1\1\0\1\u01b1\1\0\3\u01b1"+
    "\13\0\5\u01b1\7\0\2\u01b1\5\0\1\u01b1\2\0\3\u01b1"+
    "\1\0\1\u01b1\11\0\22\u01b1\1\0\1\u01b1\1\0\1\u01b1"+
    "\1\0\3\u01b1\13\0\5\u01b1\7\0\2\u01b1\3\0\1\23"+
    "\1\0\1\23\1\0\6\23\11\0\2\23\1\u01b7\17\23"+
    "\1\0\1\23\1\0\1\23\1\0\3\23\13\0\5\23"+
    "\7\0\2\23\5\0\1\u01b8\2\0\3\u01b8\1\0\1\u01b8"+
    "\3\u01b6\2\0\1\u01b9\3\0\22\u01b8\1\0\1\u01b8\1\0"+
    "\1\u01b8\1\0\3\u01b8\5\0\1\u01ba\3\0\1\u01b9\1\0"+
    "\5\u01b8\7\0\2\u01b8\3\0\1\23\1\0\1\23\1\0"+
    "\6\23\11\0\3\23\1\u01bb\16\23\1\0\1\23\1\0"+
    "\1\23\1\0\3\23\13\0\5\23\7\0\2\23\3\0"+
    "\1\u01b8\1\0\1\u01b8\1\0\6\u01b8\3\u01bc\2\0\1\u01b9"+
    "\3\0\22\u01b8\1\0\1\u01b8\1\0\1\u01b8\1\0\3\u01b8"+
    "\5\0\1\u01ba\3\0\1\u01b9\1\0\5\u01b8\7\0\2\u01b8"+
    "\5\0\1\u01b8\2\0\3\u01b8\1\0\1\u01b8\3\u01bc\2\0"+
    "\1\u01b9\3\0\22\u01b8\1\0\1\u01b8\1\0\1\u01b8\1\0"+
    "\3\u01b8\5\0\1\u01ba\3\0\1\u01b9\1\0\5\u01b8\7\0"+
    "\2\u01b8\66\0\1\u01bd\25\0\1\23\1\0\1\23\1\0"+
    "\6\23\11\0\11\23\1\u01be\10\23\1\0\1\23\1\0"+
    "\1\23\1\0\3\23\13\0\5\23\7\0\2\23\15\0"+
    "\3\u01bc\45\0\1\u01ba\25\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[21900];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\1\10\0\2\1\1\11\7\1\1\11\1\1"+
    "\4\11\16\1\1\11\16\1\7\11\1\1\1\11\3\1"+
    "\1\11\6\1\1\11\7\1\1\11\3\1\2\11\1\1"+
    "\1\11\2\1\1\11\1\1\23\11\2\1\1\11\3\1"+
    "\1\11\1\1\1\11\1\1\1\0\1\11\1\0\1\1"+
    "\1\0\3\11\2\0\1\1\4\0\1\11\2\0\24\1"+
    "\1\11\1\1\11\0\3\1\2\11\1\1\2\11\1\1"+
    "\2\11\1\1\1\0\2\11\1\1\1\11\1\1\5\11"+
    "\2\1\4\0\1\1\1\0\1\1\3\11\1\1\3\0"+
    "\2\1\1\11\1\1\3\0\6\1\3\0\1\1\2\0"+
    "\1\1\2\0\4\11\2\1\1\0\3\1\1\0\25\1"+
    "\11\0\2\1\4\11\3\0\1\1\1\0\1\11\3\1"+
    "\1\11\2\1\1\11\1\1\1\11\1\0\31\1\11\0"+
    "\1\1\4\0\1\11\1\0\30\1\5\0\1\11\5\0"+
    "\1\1\1\11\1\1\4\0\15\1\3\0\1\11\3\0"+
    "\1\11\5\0\10\1\4\0\1\11\2\0\6\1\2\11"+
    "\3\0\3\1\1\0\1\1\3\0\1\1\1\0\1\11"+
    "\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[446];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	private final LinkedList commentList = new LinkedList();
	private String heredoc = null;
	private String nowdoc = null;
    private boolean asp_tags = false;
    private boolean short_tags_allowed = true;
    private StateStack stack = new StateStack();
    private char yy_old_buffer[] = new char[ZZ_BUFFERSIZE];
    private int yy_old_pushbackPos;
    protected int commentStartPosition;

	private AST ast;

    public void setAST(AST ast) {
    	this.ast = ast;
    }
    
	public PHPVersion getPHPVersion() {
		return PHPVersion.PHP5_4;
	}
    
	public void setInScriptingState() {
		yybegin(ST_IN_SCRIPTING);
	}

	public void resetCommentList() {
		commentList.clear();
	}
	
	public LinkedList getCommentList() {
		return commentList;
	}	
	
	protected void addComment(int type) {
		int leftPosition = getTokenStartPosition();
		Comment comment = new Comment(commentStartPosition, leftPosition + getTokenLength(), ast, type);
		commentList.add(comment);
	}	
	
	public void setUseAspTagsAsPhp(boolean useAspTagsAsPhp) {
		asp_tags = useAspTagsAsPhp;
	}
	
	public void setUseShortTags(boolean useShortTags) {
		short_tags_allowed = useShortTags;
	}
	
    private void pushState(int state) {
        stack.pushStack(zzLexicalState);
        yybegin(state);
    }

    private void popState() {
        yybegin(stack.popStack());
    }

    public int getCurrentLine() {
        return yyline;
    }

    protected int getTokenStartPosition() {
        return zzStartRead - zzPushbackPos;
    }

    protected int getTokenLength() {
        return zzMarkedPos - zzStartRead;
    }

    public int getLength() {
        return zzEndRead - zzPushbackPos;
    }
    
    private void handleCommentStart() {
		commentStartPosition = getTokenStartPosition();
	}
	
	private void handleLineCommentEnd() {
         addComment(Comment.TYPE_SINGLE_LINE);
    }
    
    private void handleMultilineCommentEnd() {
    	addComment(Comment.TYPE_MULTILINE);
    }

    private void handlePHPDocEnd() {
		addComment(Comment.TYPE_PHPDOC);
    }
    
    protected void handleVarComment() {
    	commentStartPosition = zzStartRead;
    	addComment(Comment.TYPE_MULTILINE);
    }
        
    private Symbol createFullSymbol(int symbolNumber) {
        Symbol symbol = createSymbol(symbolNumber);
        symbol.value = yytext();
        return symbol;
    }

    protected Symbol createSymbol(int symbolNumber) {
        int leftPosition = getTokenStartPosition();
        return new Symbol(symbolNumber, leftPosition, leftPosition + getTokenLength());
    }

    public int[] getParamenters(){
    	return new int[]{zzMarkedPos, zzPushbackPos, zzCurrentPos, zzStartRead, zzEndRead, yyline};
    }
    
	protected boolean parsePHPDoc(){	
		final IDocumentorLexer documentorLexer = getDocumentorLexer(zzReader);
		if(documentorLexer == null){
			return false;
		}
		yypushback(zzMarkedPos - zzStartRead);
		int[] parameters = getParamenters();
		documentorLexer.reset(zzReader, zzBuffer, parameters);
		Object phpDocBlock = documentorLexer.parse();
		commentList.add(phpDocBlock);
		reset(zzReader, documentorLexer.getBuffer(), documentorLexer.getParamenters());
		return true;
	}
	
	
	protected IDocumentorLexer getDocumentorLexer(java.io.Reader  reader) {
		return null;
	}
	
	public void reset(java.io.Reader  reader, char[] buffer, int[] parameters){
		this.zzReader = reader;
		this.zzBuffer = buffer;
		this.zzMarkedPos = parameters[0];
		this.zzPushbackPos = parameters[1];
		this.zzCurrentPos = parameters[2];
		this.zzStartRead = parameters[3];
		this.zzEndRead = parameters[4];
		this.yyline = parameters[5];  
		this.yychar = this.zzStartRead - this.zzPushbackPos;
	}



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public PhpAstLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public PhpAstLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 166) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 82: 
          { return createSymbol(ParserConstants.T_LOGICAL_OR);
          }
        case 145: break;
        case 42: 
          { popState();
    return createFullSymbol(ParserConstants.T_STRING);
          }
        case 146: break;
        case 133: 
          { return createSymbol(ParserConstants.T_REQUIRE);
          }
        case 147: break;
        case 54: 
          { return createFullSymbol(ParserConstants.T_DNUMBER);
          }
        case 148: break;
        case 84: 
          { pushState(ST_LOOKING_FOR_VARNAME);
    return createSymbol(ParserConstants.T_DOLLAR_OPEN_CURLY_BRACES);
          }
        case 149: break;
        case 48: 
          { return createSymbol(ParserConstants.T_BACKQUATE);
          }
        case 150: break;
        case 124: 
          { int removeChars = (yytext().charAt(0) == 'b') ? 4 : 3;
    String hereOrNowDoc = yytext().substring(removeChars).trim();    // for 'b<<<' or '<<<'
    int heredoc_len = hereOrNowDoc.length();

	Symbol sym = createFullSymbol(ParserConstants.T_START_HEREDOC);

    if (hereOrNowDoc.charAt(0) == '\'') {
    	nowdoc = hereOrNowDoc.substring(1, heredoc_len-1);
    	sym.value = nowdoc;
    	heredoc_len -= 2;
    	yybegin(ST_NOWDOC);
    }
    else if (hereOrNowDoc.charAt(0) == '"') {
    	heredoc = hereOrNowDoc.substring(1, heredoc_len-1);
    	sym.value = heredoc;
    	heredoc_len -= 2;
    	yybegin(ST_HEREDOC);
    } else {
    	heredoc = hereOrNowDoc;
    	sym.value = heredoc;
    	yybegin(ST_HEREDOC);
    }
    return sym;
          }
        case 151: break;
        case 23: 
          { return createSymbol(ParserConstants.T_TIMES);
          }
        case 152: break;
        case 68: 
          { return createSymbol(ParserConstants.T_INC);
          }
        case 153: break;
        case 36: 
          { handleCommentStart();
	yybegin(ST_ONE_LINE_COMMENT);
//	yymore();
          }
        case 154: break;
        case 27: 
          { return createSymbol(ParserConstants.T_OR);
          }
        case 155: break;
        case 15: 
          { return createSymbol(ParserConstants.T_NEKUDOTAIM);
          }
        case 156: break;
        case 52: 
          { //	yymore();
          }
        case 157: break;
        case 35: 
          { /* This is a temporary fix which is dependant on flex and it's implementation */
    if (!stack.isEmpty()) {
        popState();
    }
    return createSymbol(ParserConstants.T_CURLY_CLOSE);
          }
        case 158: break;
        case 40: 
          { yypushback(yylength());
    popState();
          }
        case 159: break;
        case 73: 
          { return createSymbol(ParserConstants.T_DIV_EQUAL);
          }
        case 160: break;
        case 41: 
          { return createSymbol(ParserConstants.T_OBJECT_OPERATOR);
          }
        case 161: break;
        case 13: 
          { pushState(ST_IN_SCRIPTING);
    return createSymbol(ParserConstants.T_CURLY_OPEN);
          }
        case 162: break;
        case 76: 
          { yybegin(YYINITIAL);
    return createSymbol(ParserConstants.T_SEMICOLON);  /* implicit ';' at php-end tag */
          }
        case 163: break;
        case 101: 
          { return createSymbol(ParserConstants.T_SR_EQUAL);
          }
        case 164: break;
        case 12: 
          { yybegin(ST_BACKQUOTE);
    return createSymbol(ParserConstants.T_BACKQUATE);
          }
        case 165: break;
        case 103: 
          { return createSymbol(ParserConstants.T_SL_EQUAL);
          }
        case 166: break;
        case 93: 
          { //return createSymbol(ParserConstants.T_INLINE_HTML);
    yybegin(ST_IN_SCRIPTING);
	//return T_OPEN_TAG;
          }
        case 167: break;
        case 110: 
          { return createSymbol(ParserConstants.T_ELSE);
          }
        case 168: break;
        case 114: 
          { return createSymbol(ParserConstants.T_BREAK);
          }
        case 169: break;
        case 61: 
          { return createSymbol(ParserConstants.T_DO);
          }
        case 170: break;
        case 21: 
          { return createSymbol(ParserConstants.T_NOT);
          }
        case 171: break;
        case 115: 
          { return createSymbol(ParserConstants.T_CONST);
          }
        case 172: break;
        case 33: 
          { return createSymbol(ParserConstants.T_QUESTION_MARK);
          }
        case 173: break;
        case 131: 
          { return createSymbol(ParserConstants.T_DOUBLE_CAST);
          }
        case 174: break;
        case 37: 
          { yybegin(ST_IN_SCRIPTING);
    return createSymbol(ParserConstants.T_QUATE);
          }
        case 175: break;
        case 53: 
          { String yytext = yytext();
	switch (yytext.charAt(yytext.length() - 1)) {
		case '?':
		case '%':
		case '>':
			yypushback(1);
			break;
		default:
			handleLineCommentEnd();
			yybegin(ST_IN_SCRIPTING);
	}
//	yymore();
          }
        case 176: break;
        case 46: 
          { yypushback(1);
	popState();
	return createSymbol(ParserConstants.T_ENCAPSED_AND_WHITESPACE);
          }
        case 177: break;
        case 126: 
          { return createSymbol(ParserConstants.T_RETURN);
          }
        case 178: break;
        case 85: 
          { pushState(ST_IN_SCRIPTING);
    yypushback(yylength()-1);
    return createSymbol(ParserConstants.T_CURLY_OPEN_WITH_DOLAR);
          }
        case 179: break;
        case 135: 
          { return createSymbol(ParserConstants.T_ARRAY_CAST);
          }
        case 180: break;
        case 32: 
          { return createSymbol(ParserConstants.T_TILDA);
          }
        case 181: break;
        case 45: 
          { /* Offset could be treated as a long */
	return createFullSymbol(ParserConstants.T_NUM_STRING);
          }
        case 182: break;
        case 134: 
          { return createSymbol(ParserConstants.T_DEFAULT);
          }
        case 183: break;
        case 108: 
          { String text = yytext();

 	if (text.charAt(text.length() - 2)== ';') {
		text = text.substring(0, text.length() - 2);
        yypushback(1);
    } else {
		text = text.substring(0, text.length() - 1);
    }
 
 	int textLength = text.length();
 	int nowdocLength = nowdoc.length();
	if (textLength > nowdocLength && text.substring(textLength - nowdocLength, textLength).equals(nowdoc)) {
		yypushback(2);
       	yybegin(ST_END_HEREDOC);
       	nowdoc = null;
       	// we need to remove the closing label from the symbol value.
       	Symbol sym = createFullSymbol(ParserConstants.T_ENCAPSED_AND_WHITESPACE);
       	String value = (String)sym.value;
       	sym.value = value.substring(0, value.length() - nowdocLength + 1);
	   	return sym;
	}
	yypushback(1);
          }
        case 184: break;
        case 74: 
          { handleCommentStart();
    yybegin(ST_COMMENT);
          }
        case 185: break;
        case 69: 
          { return createSymbol(ParserConstants.T_IS_NOT_EQUAL);
          }
        case 186: break;
        case 65: 
          { return createSymbol(ParserConstants.T_IS_GREATER_OR_EQUAL);
          }
        case 187: break;
        case 20: 
          { return createSymbol(ParserConstants.T_PLUS);
          }
        case 188: break;
        case 125: 
          { return createSymbol(ParserConstants.T_SWITCH);
          }
        case 189: break;
        case 141: 
          { return createSymbol(ParserConstants.T_NAMESPACE);
          }
        case 190: break;
        case 94: 
          { return createFullSymbol(ParserConstants.T_BNUMBER);
          }
        case 191: break;
        case 26: 
          { return createSymbol(ParserConstants.T_REFERENCE);
          }
        case 192: break;
        case 78: 
          { return createSymbol(ParserConstants.T_BOOLEAN_AND);
          }
        case 193: break;
        case 14: 
          { return createSymbol(ParserConstants.T_SEMICOLON);
          }
        case 194: break;
        case 91: 
          { handlePHPDocEnd();
     yybegin(ST_IN_SCRIPTING);
          }
        case 195: break;
        case 7: 
          { return createSymbol(ParserConstants.T_MINUS);
          }
        case 196: break;
        case 3: 
          { // do nothing
          }
        case 197: break;
        case 142: 
          { return createSymbol(ParserConstants.T_ENDSWITCH);
          }
        case 198: break;
        case 67: 
          { return createSymbol(ParserConstants.T_PLUS_EQUAL);
          }
        case 199: break;
        case 31: 
          { return createSymbol(ParserConstants.T_CLOSE_RECT);
          }
        case 200: break;
        case 105: 
          { return createSymbol(ParserConstants.T_LOGICAL_XOR);
          }
        case 201: break;
        case 129: 
          { return createFullSymbol(ParserConstants.T_DEFINE);
          }
        case 202: break;
        case 90: 
          { handleMultilineCommentEnd();
    yybegin(ST_IN_SCRIPTING);
          }
        case 203: break;
        case 50: 
          { popState();
	return createSymbol(ParserConstants.T_CLOSE_RECT);
          }
        case 204: break;
        case 62: 
          { return createSymbol(ParserConstants.T_PAAMAYIM_NEKUDOTAYIM);
          }
        case 205: break;
        case 132: 
          { return createSymbol(ParserConstants.T_INCLUDE);
          }
        case 206: break;
        case 11: 
          { return createSymbol(ParserConstants.T_NS_SEPARATOR);
          }
        case 207: break;
        case 112: 
          { handleCommentStart();
          }
        case 208: break;
        case 58: 
          { return createFullSymbol(ParserConstants.T_CONSTANT_ENCAPSED_STRING);
          }
        case 209: break;
        case 63: 
          { return createSymbol(ParserConstants.T_IS_EQUAL);
          }
        case 210: break;
        case 123: 
          { return createSymbol(ParserConstants.T_ARRAY);
          }
        case 211: break;
        case 30: 
          { return createSymbol(ParserConstants.T_OPEN_RECT);
          }
        case 212: break;
        case 95: 
          { return createSymbol(ParserConstants.T_FOR);
          }
        case 213: break;
        case 140: 
          { return createSymbol(ParserConstants.T_OBJECT_CAST);
          }
        case 214: break;
        case 89: 
          { /* treat numbers (almost) as strings inside encapsulated strings */
    return createFullSymbol(ParserConstants.T_NUM_STRING);
          }
        case 215: break;
        case 118: 
          { return createSymbol(ParserConstants.T_THROW);
          }
        case 216: break;
        case 139: 
          { return createSymbol(ParserConstants.T_STRING_CAST);
          }
        case 217: break;
        case 77: 
          { return createSymbol(ParserConstants.T_AND_EQUAL);
          }
        case 218: break;
        case 120: 
          { return createSymbol(ParserConstants.T_WHILE);
          }
        case 219: break;
        case 96: 
          { return createSymbol(ParserConstants.T_NEW);
          }
        case 220: break;
        case 56: 
          { return createSymbol(ParserConstants.T_DEC);
          }
        case 221: break;
        case 128: 
          { return createSymbol(ParserConstants.T_ELSEIF);
          }
        case 222: break;
        case 75: 
          { return createSymbol(ParserConstants.T_MOD_EQUAL);
          }
        case 223: break;
        case 87: 
          { String text = yytext();
    int length = text.length() - 1;
    text = text.trim();
    
    yypushback(1);
    
    if (text.endsWith(";")) {
        text = text.substring(0, text.length() - 1);
        yypushback(1);
    }
    if (text.equals(heredoc)) {
        heredoc = null;
        yybegin(ST_IN_SCRIPTING);
        return createSymbol(ParserConstants.T_END_HEREDOC);
    }
    else {
    	yybegin(ST_HEREDOC);
    }
          }
        case 224: break;
        case 100: 
          { return createSymbol(ParserConstants.T_IS_IDENTICAL);
          }
        case 225: break;
        case 25: 
          { return createSymbol(ParserConstants.T_PRECENT);
          }
        case 226: break;
        case 64: 
          { return createSymbol(ParserConstants.T_DOUBLE_ARROW);
          }
        case 227: break;
        case 116: 
          { return createSymbol(ParserConstants.T_CATCH);
          }
        case 228: break;
        case 9: 
          { return createSymbol(ParserConstants.T_DOLLAR);
          }
        case 229: break;
        case 22: 
          { return createSymbol(ParserConstants.T_RGREATER);
          }
        case 230: break;
        case 4: 
          { return createFullSymbol(ParserConstants.T_LNUMBER);
          }
        case 231: break;
        case 127: 
          { return createSymbol(ParserConstants.T_ENDFOR);
          }
        case 232: break;
        case 28: 
          { return createSymbol(ParserConstants.T_KOVA);
          }
        case 233: break;
        case 55: 
          { return createSymbol(ParserConstants.T_CONCAT_EQUAL);
          }
        case 234: break;
        case 44: 
          { popState();
    pushState(ST_IN_SCRIPTING);
    return createFullSymbol(ParserConstants.T_STRING_VARNAME);
          }
        case 235: break;
        case 117: 
          { return createSymbol(ParserConstants.T_CLASS);
          }
        case 236: break;
        case 97: 
          { return createSymbol(ParserConstants.T_TRY);
          }
        case 237: break;
        case 107: 
          { String text = yytext();

    if (text.charAt(text.length() - 2)== ';') {
		text = text.substring(0, text.length() - 2);
        yypushback(1);
    } else {
		text = text.substring(0, text.length() - 1);
    }
	
	int textLength = text.length();
	int heredocLength = heredoc.length();
	if (textLength > heredocLength && text.substring(textLength - heredocLength, textLength).equals(heredoc)) {
		yypushback(2);
        yybegin(ST_END_HEREDOC);
        heredoc = null;
        // we need to remove the closing label from the symbol value.
        Symbol sym = createFullSymbol(ParserConstants.T_ENCAPSED_AND_WHITESPACE);
        String value = (String)sym.value;
        sym.value = value.substring(0, value.length() - heredocLength + 1);
	   	return sym;
	}
	yypushback(1);
          }
        case 238: break;
        case 39: 
          { yybegin(ST_IN_SCRIPTING);
	return createSymbol(ParserConstants.T_END_HEREDOC);
          }
        case 239: break;
        case 143: 
          { handleVarComment();
    //return createFullSymbol(ParserConstants.T_VAR_COMMENT);
          }
        case 240: break;
        case 10: 
          { yybegin(ST_DOUBLE_QUOTES);
    return createSymbol(ParserConstants.T_QUATE);
          }
        case 241: break;
        case 119: 
          { return createSymbol(ParserConstants.T_ENDIF);
          }
        case 242: break;
        case 43: 
          { yypushback(yylength());
    popState();
    pushState(ST_IN_SCRIPTING);
          }
        case 243: break;
        case 72: 
          { return createSymbol(ParserConstants.T_MUL_EQUAL);
          }
        case 244: break;
        case 92: 
          { if (asp_tags || yytext().charAt(0)!='%') { /* asp comment? */
	    handleLineCommentEnd();
        yypushback(yylength());
		yybegin(ST_IN_SCRIPTING);
		//return T_COMMENT;
	}
          }
        case 245: break;
        case 24: 
          { return createSymbol(ParserConstants.T_DIV);
          }
        case 246: break;
        case 6: 
          { return createFullSymbol(ParserConstants.T_STRING);
          }
        case 247: break;
        case 38: 
          { yybegin(ST_IN_SCRIPTING);
    return createSymbol(ParserConstants.T_BACKQUATE);
          }
        case 248: break;
        case 17: 
          { return createSymbol(ParserConstants.T_CLOSE_PARENTHESE);
          }
        case 249: break;
        case 86: 
          { yypushback(1);
	return createFullSymbol(ParserConstants.T_ENCAPSED_AND_WHITESPACE);
          }
        case 250: break;
        case 51: 
          { return createSymbol(ParserConstants.T_CURLY_CLOSE);
          }
        case 251: break;
        case 2: 
          { return createSymbol(ParserConstants.T_INLINE_HTML);
          }
        case 252: break;
        case 104: 
          { if (!parsePHPDoc()) {
handleCommentStart();
yybegin(ST_DOCBLOCK);
}
          }
        case 253: break;
        case 79: 
          { return createSymbol(ParserConstants.T_OR_EQUAL);
          }
        case 254: break;
        case 109: 
          { return createSymbol(ParserConstants.T_CASE);
          }
        case 255: break;
        case 57: 
          { return createSymbol(ParserConstants.T_MINUS_EQUAL);
          }
        case 256: break;
        case 1: 
          { return createFullSymbol(ParserConstants.T_ENCAPSED_AND_WHITESPACE);
          }
        case 257: break;
        case 60: 
          { return createSymbol(ParserConstants.T_IN);
          }
        case 258: break;
        case 122: 
          { return createSymbol(ParserConstants.T_INT_CAST);
          }
        case 259: break;
        case 49: 
          { return createSymbol(ParserConstants.T_CURLY_OPEN);
          }
        case 260: break;
        case 16: 
          { return createSymbol(ParserConstants.T_OPEN_PARENTHESE);
          }
        case 261: break;
        case 130: 
          { return createSymbol(ParserConstants.T_BOOL_CAST);
          }
        case 262: break;
        case 99: 
          { return createSymbol(ParserConstants.T_LOGICAL_AND);
          }
        case 263: break;
        case 18: 
          { return createSymbol(ParserConstants.T_EQUAL);
          }
        case 264: break;
        case 59: 
          { return createSymbol(ParserConstants.T_IF);
          }
        case 265: break;
        case 29: 
          { return createSymbol(ParserConstants.T_COMMA);
          }
        case 266: break;
        case 102: 
          { return createSymbol(ParserConstants.T_IS_NOT_IDENTICAL);
          }
        case 267: break;
        case 70: 
          { return createSymbol(ParserConstants.T_IS_SMALLER_OR_EQUAL);
          }
        case 268: break;
        case 111: 
          { return createSymbol(ParserConstants.T_EVAL);
          }
        case 269: break;
        case 80: 
          { return createSymbol(ParserConstants.T_BOOLEAN_OR);
          }
        case 270: break;
        case 83: 
          { yypushback(1);
    return createFullSymbol(ParserConstants.T_ENCAPSED_AND_WHITESPACE);
          }
        case 271: break;
        case 88: 
          { String text = yytext();
    int length = text.length() - 1;
    text = text.trim();
    
    yypushback(1);
    
    if (text.endsWith(";")) {
        text = text.substring(0, text.length() - 1);
        yypushback(1);
    }
    if (text.equals(nowdoc)) {
    	nowdoc = null;
        yybegin(ST_IN_SCRIPTING);
        return createSymbol(ParserConstants.T_END_HEREDOC);
    }
    else {
    	yybegin(ST_HEREDOC);
    }
          }
        case 272: break;
        case 66: 
          { return createSymbol(ParserConstants.T_SR);
          }
        case 273: break;
        case 136: 
          { return createSymbol(ParserConstants.T_FUNCTION);
          }
        case 274: break;
        case 19: 
          { return createSymbol(ParserConstants.T_LGREATER);
          }
        case 275: break;
        case 98: 
          { return createSymbol(ParserConstants.T_VAR);
          }
        case 276: break;
        case 138: 
          { return createSymbol(ParserConstants.T_ENDWHILE);
          }
        case 277: break;
        case 81: 
          { return createSymbol(ParserConstants.T_XOR_EQUAL);
          }
        case 278: break;
        case 106: 
          { yypushback(1);
	pushState(ST_VAR_OFFSET);
	return createFullSymbol(ParserConstants.T_VARIABLE);
          }
        case 279: break;
        case 47: 
          { return createSymbol(ParserConstants.T_QUATE);
          }
        case 280: break;
        case 137: 
          { return createSymbol(ParserConstants.T_CONTINUE);
          }
        case 281: break;
        case 5: 
          { pushState(ST_LOOKING_FOR_PROPERTY);
    return createSymbol(ParserConstants.T_OBJECT_OPERATOR);
          }
        case 282: break;
        case 121: 
          { return createSymbol(ParserConstants.T_PRINT);
          }
        case 283: break;
        case 113: 
          { yypushback(3);
	pushState(ST_LOOKING_FOR_PROPERTY);
	return createFullSymbol(ParserConstants.T_VARIABLE);
          }
        case 284: break;
        case 71: 
          { return createSymbol(ParserConstants.T_SL);
          }
        case 285: break;
        case 144: 
          { return createSymbol(ParserConstants.T_INCLUDE_ONCE);
          }
        case 286: break;
        case 8: 
          { 
          }
        case 287: break;
        case 34: 
          { return createSymbol(ParserConstants.T_AT);
          }
        case 288: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {     return createSymbol(sym.EOF);
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java PhpAstLexer <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        PhpAstLexer scanner = null;
        try {
          scanner = new PhpAstLexer( new java.io.FileReader(argv[i]) );
          while ( !scanner.zzAtEOF ) scanner.next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
