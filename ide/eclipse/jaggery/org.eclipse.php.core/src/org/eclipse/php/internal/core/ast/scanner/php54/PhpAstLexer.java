/* The following code was generated by JFlex 1.4.1 on 9/3/13 6:04 PM */

/*******************************************************************************
 * Copyright (c) 2006 Zend Corporation and IBM Corporation.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Zend and IBM - Initial implementation
 *******************************************************************************/

package org.eclipse.php.internal.core.ast.scanner.php54;

import java.io.IOException;
import java.util.LinkedList;
import java.util.List;

import org.eclipse.php.internal.core.ast.nodes.IDocumentorLexer;
import org.eclipse.php.internal.core.ast.nodes.Comment;
import java_cup.sym;
import org.eclipse.php.internal.core.ast.nodes.AST;
import java_cup.runtime.Symbol;
import org.eclipse.php.internal.core.ast.scanner.StateStack;
import org.eclipse.php.internal.core.PHPVersion;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 9/3/13 6:04 PM from the specification file
 * <tt>ast_scanner.flex</tt>
 */
public class PhpAstLexer implements org.eclipse.php.internal.core.ast.scanner.AstLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int ST_DOCBLOCK = 11;
  public static final int ST_IN_SCRIPTING = 1;
  public static final int ST_NOWDOC = 6;
  public static final int ST_LOOKING_FOR_PROPERTY = 7;
  public static final int ST_ONE_LINE_COMMENT = 12;
  public static final int ST_COMMENT = 10;
  public static final int ST_BACKQUOTE = 3;
  public static final int ST_DOUBLE_QUOTES = 2;
  public static final int YYINITIAL = 0;
  public static final int ST_VAR_OFFSET = 9;
  public static final int ST_LOOKING_FOR_VARNAME = 8;
  public static final int ST_HEREDOC = 4;
  public static final int ST_END_HEREDOC = 5;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\14\1\13\2\0\1\15\22\0\1\14\1\57\1\17\1\100"+
    "\1\16\1\63\1\64\1\77\1\51\1\52\1\61\1\4\1\67\1\45"+
    "\1\2\1\62\1\5\1\11\10\1\1\47\1\23\1\60\1\56\1\46"+
    "\1\73\1\74\1\36\1\10\1\27\1\7\1\3\1\24\1\43\1\37"+
    "\1\31\1\53\1\42\1\41\1\12\1\26\1\32\1\44\1\55\1\34"+
    "\1\33\1\30\1\25\1\50\1\40\1\6\1\35\1\12\1\70\1\20"+
    "\1\71\1\66\1\54\1\21\1\36\1\10\1\27\1\7\1\3\1\24"+
    "\1\43\1\37\1\31\1\53\1\42\1\41\1\12\1\26\1\32\1\44"+
    "\1\55\1\34\1\76\1\30\1\25\1\50\1\40\1\6\1\35\1\12"+
    "\1\22\1\65\1\75\1\72\201\12\uff00\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\10\0\2\2\1\3\1\4\1\5\1\6"+
    "\1\7\1\4\4\6\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\14\6\1\16\1\17\1\20\1\6\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\3\1\43\1\1\1\3\1\44\2\3\1\1\2\3"+
    "\1\45\1\3\3\1\3\3\1\46\3\3\1\47\1\50"+
    "\1\47\1\51\1\52\1\53\1\5\1\7\1\53\1\54"+
    "\1\55\1\56\1\57\1\16\1\17\1\20\1\21\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\60\1\61\1\10\1\62\3\10\3\63\2\62\2\0"+
    "\1\2\1\64\1\0\1\65\3\6\1\66\1\67\2\0"+
    "\2\6\1\70\1\6\4\0\1\71\2\0\7\6\1\72"+
    "\1\6\1\73\6\6\1\74\1\75\1\76\1\77\1\100"+
    "\1\101\1\6\11\0\1\102\1\103\2\104\1\105\1\106"+
    "\1\0\1\107\1\110\1\111\1\112\1\113\1\114\1\115"+
    "\1\116\1\117\1\120\5\0\2\121\1\122\1\123\1\121"+
    "\3\0\3\124\3\0\1\125\2\1\2\121\3\0\1\126"+
    "\2\0\1\127\1\130\2\0\1\131\1\132\1\133\2\134"+
    "\1\64\1\0\3\6\1\64\1\135\1\136\2\6\1\0"+
    "\1\6\1\137\1\140\3\6\1\141\6\6\1\142\3\6"+
    "\1\143\1\144\11\0\1\145\1\146\1\147\3\0\1\150"+
    "\1\0\2\112\1\0\1\151\1\152\1\1\1\153\1\0"+
    "\2\130\4\6\1\154\1\155\6\6\1\156\7\6\1\157"+
    "\1\6\15\0\1\160\2\0\1\6\1\161\4\6\1\162"+
    "\2\6\1\163\1\164\1\165\5\6\1\166\1\167\6\0"+
    "\1\170\4\0\2\171\4\0\1\172\1\173\2\6\1\174"+
    "\5\6\1\175\1\176\1\6\4\0\1\177\3\0\1\200"+
    "\4\0\2\6\1\201\2\6\1\202\1\6\1\203\4\0"+
    "\1\204\2\0\1\6\1\205\1\206\1\207\3\6\1\210"+
    "\1\211\3\0\1\212\3\6\1\0\1\6\1\213\1\6"+
    "\3\0\2\6\1\0\1\214\1\215\1\216";

  private static int [] zzUnpackAction() {
    int [] result = new int[438];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\101\0\202\0\303\0\u0104\0\u0145\0\u0186\0\u01c7"+
    "\0\u0208\0\u0249\0\u028a\0\u02cb\0\u030c\0\u034d\0\u038e\0\u03cf"+
    "\0\u0410\0\u0451\0\u0492\0\u04d3\0\u0514\0\u0555\0\u0596\0\u05d7"+
    "\0\u0618\0\u0659\0\u03cf\0\u069a\0\u03cf\0\u03cf\0\u03cf\0\u06db"+
    "\0\u071c\0\u075d\0\u079e\0\u07df\0\u0820\0\u0861\0\u08a2\0\u08e3"+
    "\0\u0924\0\u0965\0\u09a6\0\u09e7\0\u0a28\0\u0a69\0\u0aaa\0\u0aeb"+
    "\0\u03cf\0\u0b2c\0\u0b6d\0\u0bae\0\u0bef\0\u0c30\0\u0c71\0\u0cb2"+
    "\0\u0cf3\0\u0d34\0\u03cf\0\u03cf\0\u03cf\0\u03cf\0\u03cf\0\u03cf"+
    "\0\u03cf\0\u0d75\0\u03cf\0\u0db6\0\u0df7\0\u03cf\0\u0e38\0\u0e79"+
    "\0\u0eba\0\u0efb\0\u0f3c\0\u03cf\0\u0f7d\0\u0fbe\0\u0fff\0\u1040"+
    "\0\u1081\0\u10c2\0\u1103\0\u03cf\0\u1144\0\u1185\0\u11c6\0\u03cf"+
    "\0\u1207\0\u1248\0\u03cf\0\u1289\0\u12ca\0\u03cf\0\u03cf\0\u130b"+
    "\0\u03cf\0\u03cf\0\u03cf\0\u03cf\0\u03cf\0\u03cf\0\u03cf\0\u03cf"+
    "\0\u03cf\0\u03cf\0\u03cf\0\u03cf\0\u03cf\0\u03cf\0\u03cf\0\u03cf"+
    "\0\u03cf\0\u03cf\0\u03cf\0\u134c\0\u138d\0\u03cf\0\u13ce\0\u140f"+
    "\0\u1450\0\u03cf\0\u1491\0\u03cf\0\u14d2\0\u1513\0\u1554\0\u03cf"+
    "\0\u1595\0\u15d6\0\u03cf\0\u1617\0\u1658\0\u1699\0\u03cf\0\u03cf"+
    "\0\u16da\0\u171b\0\u175c\0\u179d\0\u0618\0\u17de\0\u181f\0\u0d75"+
    "\0\u069a\0\u1860\0\u03cf\0\u18a1\0\u18e2\0\u1923\0\u1964\0\u19a5"+
    "\0\u19e6\0\u1a27\0\u1a68\0\u1aa9\0\u0618\0\u1aea\0\u0618\0\u1b2b"+
    "\0\u1b6c\0\u1bad\0\u1bee\0\u1c2f\0\u1c70\0\u03cf\0\u03cf\0\u03cf"+
    "\0\u1cb1\0\u03cf\0\u03cf\0\u1cf2\0\u1d33\0\u1d74\0\u0aeb\0\u1db5"+
    "\0\u1df6\0\u1e37\0\u1e78\0\u1eb9\0\u1efa\0\u03cf\0\u1f3b\0\u1f7c"+
    "\0\u03cf\0\u03cf\0\u1fbd\0\u1ffe\0\u03cf\0\u03cf\0\u203f\0\u2080"+
    "\0\u03cf\0\u03cf\0\u03cf\0\u03cf\0\u03cf\0\u03cf\0\u20c1\0\u2102"+
    "\0\u0e38\0\u2143\0\u2184\0\u2102\0\u03cf\0\u03cf\0\u03cf\0\u2143"+
    "\0\u21c5\0\u0f3c\0\u2206\0\u21c5\0\u03cf\0\u2206\0\u2247\0\u10c2"+
    "\0\u2288\0\u1040\0\u22c9\0\u230a\0\u2247\0\u2288\0\u1144\0\u11c6"+
    "\0\u1185\0\u11c6\0\u234b\0\u238c\0\u03cf\0\u23cd\0\u240e\0\u244f"+
    "\0\u03cf\0\u03cf\0\u03cf\0\u03cf\0\u2490\0\u24d1\0\u24d1\0\u2512"+
    "\0\u2553\0\u2594\0\u16da\0\u171b\0\u0618\0\u25d5\0\u2616\0\u2657"+
    "\0\u2698\0\u0618\0\u0618\0\u26d9\0\u271a\0\u275b\0\u0618\0\u279c"+
    "\0\u27dd\0\u281e\0\u285f\0\u28a0\0\u28e1\0\u0618\0\u2922\0\u2963"+
    "\0\u29a4\0\u03cf\0\u0618\0\u29e5\0\u2a26\0\u2a67\0\u2aa8\0\u2ae9"+
    "\0\u2b2a\0\u2b6b\0\u2bac\0\u2bed\0\u03cf\0\u03cf\0\u03cf\0\u2c2e"+
    "\0\u2c6f\0\u2cb0\0\u2cf1\0\u2d32\0\u03cf\0\u2d73\0\u2db4\0\u03cf"+
    "\0\u03cf\0\u2df5\0\u03cf\0\u2e36\0\u240e\0\u244f\0\u2e77\0\u2eb8"+
    "\0\u2ef9\0\u2f3a\0\u2f7b\0\u0618\0\u2fbc\0\u2ffd\0\u303e\0\u307f"+
    "\0\u30c0\0\u3101\0\u0618\0\u3142\0\u3183\0\u31c4\0\u3205\0\u3246"+
    "\0\u3287\0\u32c8\0\u0618\0\u3309\0\u334a\0\u338b\0\u33cc\0\u340d"+
    "\0\u344e\0\u348f\0\u34d0\0\u3511\0\u3552\0\u3593\0\u35d4\0\u3615"+
    "\0\u3656\0\u03cf\0\u3697\0\u36d8\0\u3719\0\u0618\0\u375a\0\u379b"+
    "\0\u37dc\0\u381d\0\u0618\0\u385e\0\u389f\0\u0618\0\u0618\0\u0618"+
    "\0\u38e0\0\u3921\0\u3962\0\u39a3\0\u39e4\0\u0618\0\u0618\0\u3a25"+
    "\0\u3a66\0\u3aa7\0\u3ae8\0\u3b29\0\u3b6a\0\u03cf\0\u3bab\0\u3bec"+
    "\0\u3c2d\0\u3c6e\0\u03cf\0\u3caf\0\u3cf0\0\u3d31\0\u3d72\0\u3db3"+
    "\0\u03cf\0\u0618\0\u3df4\0\u3e35\0\u0618\0\u3e76\0\u3eb7\0\u3ef8"+
    "\0\u3f39\0\u3f7a\0\u0618\0\u0618\0\u3fbb\0\u3ffc\0\u403d\0\u407e"+
    "\0\u40bf\0\u03cf\0\u4100\0\u4141\0\u4182\0\u03cf\0\u41c3\0\u4204"+
    "\0\u4245\0\u4286\0\u42c7\0\u4308\0\u0618\0\u4349\0\u438a\0\u43cb"+
    "\0\u440c\0\u444d\0\u448e\0\u44cf\0\u4510\0\u4551\0\u03cf\0\u4592"+
    "\0\u45d3\0\u4614\0\u0618\0\u0618\0\u0618\0\u4655\0\u4696\0\u46d7"+
    "\0\u03cf\0\u03cf\0\u4718\0\u4759\0\u479a\0\u0618\0\u47db\0\u481c"+
    "\0\u485d\0\u489e\0\u48df\0\u0618\0\u4920\0\u4961\0\u49a2\0\u49e3"+
    "\0\u4a24\0\u4a65\0\u4aa6\0\u03cf\0\u0618\0\u0618";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[438];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\60\16\1\17\20\16\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\21\1\31\3\32\1\33"+
    "\1\34\1\20\1\35\1\36\1\37\1\40\1\31\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\31\1\50"+
    "\1\31\1\51\2\31\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\3\31\1\62\1\63\1\64\1\65"+
    "\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75"+
    "\1\76\1\77\1\100\1\101\1\46\1\102\1\103\16\104"+
    "\1\105\1\106\1\107\1\104\1\110\56\104\16\111\1\112"+
    "\1\111\1\113\1\114\1\115\56\111\3\116\1\117\2\116"+
    "\3\117\1\116\1\117\1\120\1\116\1\120\1\121\1\116"+
    "\1\122\1\116\1\123\1\116\21\117\3\116\1\117\2\116"+
    "\3\117\20\116\1\117\2\116\101\124\3\125\1\126\2\125"+
    "\3\126\1\125\1\126\1\127\1\125\1\127\6\125\21\126"+
    "\3\125\1\126\2\125\3\126\20\125\1\126\2\125\3\130"+
    "\1\131\2\130\3\131\1\130\1\131\3\32\6\130\21\131"+
    "\1\132\2\130\1\131\2\130\3\131\20\130\1\131\2\130"+
    "\3\133\1\134\2\133\3\134\1\133\1\134\11\133\21\134"+
    "\3\133\1\134\2\133\3\134\20\133\1\134\2\133\1\20"+
    "\1\135\1\136\1\31\1\137\1\140\3\31\1\135\1\31"+
    "\3\141\1\33\1\142\1\141\1\143\1\144\1\37\21\31"+
    "\1\145\1\146\1\147\1\31\1\150\1\61\3\31\1\151"+
    "\1\152\1\153\1\154\1\155\1\156\1\157\1\160\1\161"+
    "\1\73\1\74\1\162\1\76\1\77\1\100\1\163\1\31"+
    "\2\141\61\164\1\165\17\164\15\166\1\167\43\166\1\170"+
    "\17\166\13\171\1\172\1\171\1\173\30\171\1\174\14\171"+
    "\1\175\7\171\1\175\5\171\60\16\1\176\100\16\1\0"+
    "\2\16\1\177\7\16\1\0\2\16\1\200\2\16\102\0"+
    "\1\21\1\201\1\202\1\0\1\21\3\0\1\21\70\0"+
    "\1\201\3\0\1\201\3\0\1\201\44\0\1\203\23\0"+
    "\1\31\1\0\1\31\1\0\6\31\11\0\2\31\1\204"+
    "\12\31\1\205\3\31\3\0\1\206\2\0\3\31\20\0"+
    "\1\31\6\0\1\207\51\0\1\210\23\0\1\21\1\201"+
    "\1\202\1\0\1\21\1\211\1\0\1\212\1\21\70\0"+
    "\1\31\1\0\1\31\1\0\6\31\11\0\6\31\1\213"+
    "\12\31\3\0\1\31\2\0\3\31\20\0\1\31\3\0"+
    "\1\31\1\0\1\214\1\0\6\31\11\0\6\31\1\215"+
    "\12\31\3\0\1\31\2\0\3\31\20\0\1\31\3\0"+
    "\1\31\1\0\1\31\1\0\6\31\4\0\1\34\4\0"+
    "\10\31\1\216\10\31\3\0\1\31\2\0\3\31\2\0"+
    "\1\217\15\0\1\31\1\220\2\0\1\31\1\0\1\31"+
    "\1\0\6\31\11\0\21\31\3\0\1\31\2\0\3\31"+
    "\20\0\1\31\15\0\3\32\63\0\16\221\1\222\1\223"+
    "\1\224\1\221\1\225\56\221\1\0\1\31\1\0\1\31"+
    "\1\0\6\31\11\0\1\31\1\226\4\31\1\227\12\31"+
    "\3\0\1\31\2\0\3\31\20\0\1\31\3\0\1\31"+
    "\1\0\1\230\1\0\6\31\11\0\21\31\3\0\1\31"+
    "\2\0\3\31\20\0\1\31\3\0\1\31\1\0\1\31"+
    "\1\0\6\31\11\0\6\31\1\231\3\31\1\232\6\31"+
    "\3\0\1\31\2\0\3\31\20\0\1\31\3\0\1\31"+
    "\1\0\1\31\1\0\6\31\11\0\10\31\1\233\2\31"+
    "\1\234\5\31\3\0\1\31\2\0\3\31\20\0\1\31"+
    "\3\0\1\31\1\0\1\31\1\0\6\31\11\0\1\235"+
    "\1\31\1\236\16\31\3\0\1\31\2\0\3\31\20\0"+
    "\1\31\3\0\1\31\1\0\1\31\1\0\6\31\11\0"+
    "\10\31\1\237\10\31\3\0\1\31\2\0\3\31\20\0"+
    "\1\31\3\0\1\31\1\0\1\31\1\0\6\31\11\0"+
    "\14\31\1\240\4\31\3\0\1\31\2\0\3\31\20\0"+
    "\1\31\3\0\1\31\1\0\1\241\1\0\6\31\11\0"+
    "\21\31\3\0\1\31\2\0\3\31\20\0\1\31\3\0"+
    "\1\31\1\0\1\31\1\0\6\31\11\0\2\31\1\242"+
    "\16\31\3\0\1\31\2\0\3\31\20\0\1\31\3\0"+
    "\1\31\1\0\1\31\1\0\6\31\11\0\13\31\1\243"+
    "\5\31\3\0\1\31\2\0\3\31\20\0\1\31\3\0"+
    "\1\31\1\0\1\31\1\0\6\31\11\0\6\31\1\244"+
    "\12\31\3\0\1\31\2\0\3\31\20\0\1\31\3\0"+
    "\1\31\1\0\1\31\1\0\6\31\11\0\10\31\1\245"+
    "\10\31\3\0\1\31\2\0\3\31\20\0\1\31\47\0"+
    "\1\246\1\247\7\0\1\250\70\0\1\251\7\0\1\252"+
    "\71\0\1\253\32\0\1\31\1\0\1\31\1\0\6\31"+
    "\11\0\12\31\1\254\6\31\3\0\1\31\2\0\3\31"+
    "\20\0\1\31\11\0\1\255\1\256\3\0\1\257\7\0"+
    "\1\260\4\0\1\261\1\262\1\263\1\264\1\0\1\265"+
    "\37\0\1\263\50\0\1\266\7\0\1\267\100\0\1\270"+
    "\70\0\1\271\7\0\1\272\1\0\1\273\1\0\1\274"+
    "\74\0\1\275\100\0\1\276\2\0\1\277\1\103\64\0"+
    "\1\300\7\0\1\301\100\0\1\302\5\0\1\303\72\0"+
    "\1\304\6\0\1\305\71\0\1\306\22\0\20\220\1\307"+
    "\56\220\1\223\1\220\16\104\1\310\1\0\1\311\1\104"+
    "\1\312\61\104\1\313\2\104\3\313\1\104\1\313\3\104"+
    "\1\314\1\315\1\311\1\104\1\316\1\104\21\313\3\104"+
    "\1\313\2\104\3\313\20\104\1\313\121\104\1\317\1\315"+
    "\1\311\1\104\1\320\56\104\16\111\1\321\1\111\1\322"+
    "\1\0\1\323\61\111\1\313\2\111\3\313\1\111\1\313"+
    "\3\111\1\324\1\111\1\322\1\325\1\316\1\111\21\313"+
    "\3\111\1\313\2\111\3\313\20\111\1\313\121\111\1\317"+
    "\1\111\1\322\1\325\1\326\56\111\13\116\1\120\1\116"+
    "\1\120\1\327\1\116\1\330\1\116\1\331\57\116\1\117"+
    "\1\116\1\117\1\116\6\117\1\332\1\116\1\332\1\327"+
    "\1\116\1\330\1\116\1\331\1\333\21\117\3\116\1\117"+
    "\2\116\3\117\20\116\1\117\5\116\1\334\2\116\3\334"+
    "\1\116\1\334\1\120\1\116\1\120\1\327\1\116\1\330"+
    "\1\116\1\331\1\116\21\334\3\116\1\334\2\116\3\334"+
    "\20\116\1\334\5\116\1\313\2\116\3\313\1\116\1\313"+
    "\1\120\1\116\1\120\1\335\1\116\1\330\1\116\1\316"+
    "\1\116\21\313\3\116\1\313\2\116\3\313\20\116\1\313"+
    "\15\116\1\120\1\116\1\120\76\116\1\120\1\116\1\120"+
    "\1\317\1\116\1\330\1\116\1\336\56\116\13\337\1\340"+
    "\1\337\1\340\64\337\1\341\1\337\1\341\1\337\6\341"+
    "\1\342\1\337\1\342\5\337\1\343\21\341\3\337\1\341"+
    "\2\337\3\341\20\337\1\341\5\337\1\344\2\337\3\344"+
    "\1\337\1\344\1\340\1\337\1\340\6\337\21\344\3\337"+
    "\1\344\2\337\3\344\20\337\1\344\2\337\1\0\1\131"+
    "\1\0\1\131\1\0\6\131\11\0\21\131\3\0\1\131"+
    "\2\0\3\131\20\0\1\131\50\0\1\345\33\0\1\134"+
    "\1\0\1\134\1\0\6\134\11\0\21\134\3\0\1\134"+
    "\2\0\3\134\20\0\1\134\3\0\1\135\3\0\1\135"+
    "\3\0\1\135\70\0\1\346\3\0\1\346\1\347\1\0"+
    "\1\350\1\346\67\0\61\164\1\0\17\164\62\0\1\351"+
    "\31\0\1\166\147\0\1\352\16\0\13\171\1\172\1\171"+
    "\1\173\30\171\1\172\14\171\1\172\7\171\1\172\5\171"+
    "\13\0\1\172\133\0\1\353\32\0\60\16\1\0\2\16"+
    "\1\0\7\16\1\0\2\16\1\0\2\16\13\0\2\354"+
    "\1\355\64\0\1\201\1\0\1\202\1\0\1\201\3\0"+
    "\1\201\70\0\1\356\2\0\1\357\1\356\3\0\1\356"+
    "\33\0\1\357\34\0\1\31\1\0\1\31\1\0\2\31"+
    "\1\360\3\31\11\0\21\31\3\0\1\31\2\0\3\31"+
    "\20\0\1\31\3\0\1\31\1\0\1\31\1\0\6\31"+
    "\11\0\7\31\1\361\11\31\3\0\1\31\2\0\3\31"+
    "\20\0\1\361\3\0\1\31\1\0\1\31\1\0\6\31"+
    "\11\0\12\31\1\362\6\31\3\0\1\31\2\0\3\31"+
    "\20\0\1\31\3\0\1\363\1\0\1\363\1\0\1\363"+
    "\1\0\3\363\12\0\1\363\2\0\1\363\6\0\1\363"+
    "\47\0\1\364\3\0\1\364\70\0\1\31\1\0\1\31"+
    "\1\0\6\31\11\0\10\31\1\365\10\31\3\0\1\31"+
    "\2\0\3\31\20\0\1\31\3\0\1\31\1\0\1\31"+
    "\1\0\6\31\11\0\1\366\20\31\3\0\1\31\2\0"+
    "\3\31\20\0\1\31\3\0\1\31\1\0\1\367\1\0"+
    "\6\31\11\0\21\31\3\0\1\31\2\0\3\31\20\0"+
    "\1\31\62\0\1\370\20\0\3\221\1\0\2\221\3\0"+
    "\1\221\1\0\3\221\1\222\1\223\1\224\1\221\1\0"+
    "\1\221\21\0\3\221\1\0\2\221\3\0\20\221\1\0"+
    "\121\221\1\0\1\223\1\224\1\221\1\225\56\221\1\0"+
    "\1\31\1\0\1\31\1\0\6\31\11\0\2\31\1\371"+
    "\16\31\3\0\1\31\2\0\3\31\20\0\1\31\3\0"+
    "\1\31\1\0\1\31\1\0\6\31\11\0\10\31\1\372"+
    "\10\31\3\0\1\31\2\0\3\31\20\0\1\31\3\0"+
    "\1\31\1\0\1\31\1\0\6\31\11\0\14\31\1\373"+
    "\4\31\3\0\1\31\2\0\3\31\20\0\1\31\3\0"+
    "\1\31\1\0\1\31\1\0\6\31\11\0\2\31\1\374"+
    "\16\31\3\0\1\31\2\0\3\31\20\0\1\31\3\0"+
    "\1\31\1\0\1\31\1\0\6\31\11\0\4\31\1\375"+
    "\2\31\1\376\11\31\3\0\1\31\2\0\3\31\20\0"+
    "\1\376\3\0\1\31\1\0\1\31\1\0\6\31\11\0"+
    "\11\31\1\377\7\31\3\0\1\31\2\0\3\31\20\0"+
    "\1\31\3\0\1\31\1\0\1\31\1\0\6\31\11\0"+
    "\10\31\1\u0100\10\31\3\0\1\31\2\0\3\31\20\0"+
    "\1\31\3\0\1\31\1\0\1\31\1\0\6\31\11\0"+
    "\3\31\1\u0101\3\31\1\u0102\11\31\3\0\1\31\2\0"+
    "\3\31\20\0\1\u0102\3\0\1\31\1\0\1\31\1\0"+
    "\6\31\11\0\5\31\1\u0103\13\31\3\0\1\31\2\0"+
    "\3\31\20\0\1\31\3\0\1\31\1\0\1\31\1\0"+
    "\6\31\11\0\4\31\1\u0104\14\31\3\0\1\31\2\0"+
    "\2\31\1\u0105\20\0\1\31\3\0\1\31\1\0\1\31"+
    "\1\0\2\31\1\u0106\3\31\11\0\21\31\3\0\1\31"+
    "\2\0\3\31\20\0\1\31\3\0\1\31\1\0\1\31"+
    "\1\0\6\31\11\0\5\31\1\u0107\13\31\3\0\1\31"+
    "\2\0\3\31\20\0\1\31\3\0\1\31\1\0\1\31"+
    "\1\0\6\31\11\0\4\31\1\u0108\14\31\3\0\1\31"+
    "\2\0\3\31\20\0\1\31\3\0\1\31\1\0\1\31"+
    "\1\0\6\31\11\0\5\31\1\u0109\13\31\3\0\1\31"+
    "\2\0\3\31\20\0\1\31\60\0\1\u010a\23\0\1\31"+
    "\1\0\1\31\1\0\6\31\11\0\10\31\1\u010b\10\31"+
    "\3\0\1\31\2\0\3\31\20\0\1\31\34\0\1\u010c"+
    "\77\0\1\u010d\1\u010e\107\0\1\u010f\65\0\1\u0110\62\0"+
    "\1\u0111\120\0\1\u0112\53\0\1\u0113\131\0\1\u0114\122\0"+
    "\1\u0115\100\0\1\u0116\100\0\1\u0117\1\0\1\u0118\53\0"+
    "\1\u0119\42\0\1\u0119\15\0\3\u011a\43\0\1\u011b\12\0"+
    "\1\u011c\17\0\1\u011d\1\0\1\u011e\63\0\101\220\3\104"+
    "\1\0\2\104\3\0\1\104\1\0\3\104\1\314\1\315"+
    "\1\311\1\104\1\0\1\104\21\0\3\104\1\0\2\104"+
    "\3\0\20\104\1\0\20\104\1\0\1\315\1\311\1\104"+
    "\1\320\56\104\1\0\1\313\1\0\1\313\1\0\6\313"+
    "\11\0\21\313\1\u011f\2\0\1\313\2\0\3\313\12\0"+
    "\1\u0120\5\0\1\313\2\0\3\111\1\0\2\111\3\0"+
    "\1\111\1\0\3\111\1\324\1\111\1\322\1\325\1\0"+
    "\1\111\21\0\3\111\1\0\2\111\3\0\20\111\1\0"+
    "\20\111\1\0\1\111\1\322\1\325\1\326\56\111\3\116"+
    "\1\0\2\116\3\0\1\116\1\0\1\120\1\116\1\120"+
    "\1\335\1\116\1\330\1\116\1\0\1\116\21\0\3\116"+
    "\1\0\2\116\3\0\20\116\1\0\15\116\1\120\1\116"+
    "\1\120\1\0\1\116\1\330\1\116\1\336\71\116\1\332"+
    "\1\116\1\332\1\327\1\116\1\330\1\116\1\331\57\116"+
    "\1\334\1\116\1\334\1\116\6\334\1\u0121\1\116\1\u0121"+
    "\1\327\1\116\1\330\1\116\1\331\1\u0122\21\334\3\116"+
    "\1\334\2\116\3\334\20\116\1\334\2\116\13\337\1\342"+
    "\1\337\1\342\64\337\1\344\1\337\1\344\1\337\6\344"+
    "\1\u0123\1\337\1\u0123\5\337\1\u0124\21\344\3\337\1\344"+
    "\2\337\3\344\20\337\1\344\2\337\1\0\1\346\3\0"+
    "\1\346\3\0\1\346\70\0\1\u0125\1\0\1\u0125\1\0"+
    "\1\u0125\1\0\3\u0125\12\0\1\u0125\2\0\1\u0125\6\0"+
    "\1\u0125\47\0\1\u0126\3\0\1\u0126\102\0\1\354\66\0"+
    "\1\356\3\0\1\356\3\0\1\356\70\0\1\31\1\0"+
    "\1\31\1\0\6\31\11\0\1\u0127\4\31\1\u0128\1\31"+
    "\1\u0129\4\31\1\u012a\4\31\3\0\1\31\2\0\3\31"+
    "\20\0\1\u0129\3\0\1\31\1\0\1\u012b\1\0\6\31"+
    "\11\0\21\31\3\0\1\31\2\0\3\31\20\0\1\31"+
    "\3\0\1\31\1\0\1\31\1\0\6\31\11\0\15\31"+
    "\1\u012c\3\31\3\0\1\31\2\0\3\31\20\0\1\31"+
    "\3\0\1\31\1\0\1\31\1\0\6\31\11\0\12\31"+
    "\1\u012d\6\31\3\0\1\31\2\0\3\31\20\0\1\31"+
    "\3\0\1\31\1\0\1\31\1\0\6\31\11\0\12\31"+
    "\1\u012e\6\31\3\0\1\31\2\0\3\31\20\0\1\31"+
    "\62\0\1\u0118\21\0\1\31\1\0\1\31\1\0\6\31"+
    "\11\0\3\31\1\u012f\15\31\3\0\1\31\2\0\3\31"+
    "\20\0\1\31\3\0\1\31\1\0\1\31\1\0\6\31"+
    "\11\0\4\31\1\u0130\2\31\1\u0131\11\31\3\0\1\31"+
    "\2\0\3\31\20\0\1\u0131\3\0\1\31\1\0\1\31"+
    "\1\0\6\31\11\0\3\31\1\u0132\15\31\3\0\1\31"+
    "\2\0\3\31\20\0\1\31\3\0\1\31\1\0\1\u0133"+
    "\1\0\6\31\11\0\21\31\3\0\1\31\2\0\3\31"+
    "\20\0\1\31\3\0\1\31\1\0\1\31\1\0\6\31"+
    "\11\0\6\31\1\u0134\12\31\3\0\1\31\2\0\3\31"+
    "\20\0\1\31\3\0\1\31\1\0\1\31\1\0\6\31"+
    "\11\0\15\31\1\u0135\3\31\3\0\1\31\2\0\3\31"+
    "\20\0\1\31\3\0\1\31\1\0\1\31\1\0\6\31"+
    "\11\0\4\31\1\u0136\14\31\3\0\1\31\2\0\3\31"+
    "\20\0\1\31\3\0\1\31\1\0\1\31\1\0\6\31"+
    "\11\0\4\31\1\u0137\14\31\3\0\1\31\2\0\3\31"+
    "\20\0\1\31\3\0\1\31\1\0\1\31\1\0\6\31"+
    "\11\0\1\31\1\u0138\17\31\3\0\1\31\2\0\3\31"+
    "\20\0\1\31\3\0\1\31\1\0\1\31\1\0\6\31"+
    "\11\0\1\31\1\u0139\17\31\3\0\1\31\2\0\3\31"+
    "\20\0\1\31\3\0\1\31\1\0\1\31\1\0\6\31"+
    "\11\0\15\31\1\u013a\3\31\3\0\1\31\2\0\3\31"+
    "\20\0\1\31\3\0\1\31\1\0\1\31\1\0\6\31"+
    "\11\0\6\31\1\u013b\12\31\3\0\1\31\2\0\3\31"+
    "\20\0\1\31\3\0\1\31\1\0\1\31\1\0\6\31"+
    "\11\0\2\31\1\u013c\16\31\3\0\1\31\2\0\3\31"+
    "\20\0\1\31\27\0\1\u013d\101\0\1\u013e\104\0\1\u013f"+
    "\100\0\1\u0140\76\0\1\u0141\123\0\1\u0142\61\0\1\u0143"+
    "\102\0\1\u0144\76\0\1\u0145\47\0\1\u0146\2\0\3\u0146"+
    "\1\0\1\u0146\1\0\1\u0118\2\0\1\u0147\4\0\21\u0146"+
    "\3\0\1\u0146\2\0\3\u0146\20\0\1\u0146\1\u0148\30\0"+
    "\1\u0149\64\0\3\u011a\56\0\1\u011c\66\0\1\u014a\66\0"+
    "\1\u014b\43\0\1\u011d\133\0\1\u014c\32\0\13\116\1\u0121"+
    "\1\116\1\u0121\1\327\1\116\1\330\1\116\1\331\56\116"+
    "\13\337\1\u0123\1\337\1\u0123\63\337\1\0\1\31\1\0"+
    "\1\31\1\0\6\31\11\0\6\31\1\u014d\12\31\3\0"+
    "\1\31\2\0\3\31\20\0\1\31\3\0\1\31\1\0"+
    "\1\31\1\0\6\31\11\0\1\u014e\20\31\3\0\1\31"+
    "\2\0\3\31\20\0\1\31\3\0\1\31\1\0\1\31"+
    "\1\0\6\31\11\0\14\31\1\u014f\4\31\3\0\1\31"+
    "\2\0\3\31\20\0\1\31\3\0\1\31\1\0\1\31"+
    "\1\0\6\31\11\0\13\31\1\u0150\5\31\3\0\1\31"+
    "\2\0\3\31\20\0\1\31\3\0\1\31\1\0\1\31"+
    "\1\0\6\31\11\0\5\31\1\u0151\13\31\3\0\1\31"+
    "\2\0\3\31\20\0\1\31\3\0\1\31\1\0\1\31"+
    "\1\0\6\31\11\0\1\31\1\u0152\17\31\3\0\1\31"+
    "\2\0\3\31\20\0\1\31\3\0\1\31\1\0\1\31"+
    "\1\0\6\31\11\0\16\31\1\u0153\2\31\3\0\1\31"+
    "\2\0\3\31\20\0\1\31\3\0\1\31\1\0\1\31"+
    "\1\0\6\31\11\0\4\31\1\u0154\14\31\3\0\1\31"+
    "\2\0\3\31\20\0\1\31\3\0\1\31\1\0\1\31"+
    "\1\0\6\31\11\0\5\31\1\u0155\13\31\3\0\1\31"+
    "\2\0\3\31\20\0\1\31\3\0\1\31\1\0\1\31"+
    "\1\0\6\31\11\0\4\31\1\u0156\14\31\3\0\1\31"+
    "\2\0\3\31\20\0\1\31\3\0\1\31\1\0\1\31"+
    "\1\0\6\31\11\0\13\31\1\u0157\5\31\3\0\1\31"+
    "\2\0\3\31\20\0\1\31\3\0\1\31\1\0\1\31"+
    "\1\0\6\31\11\0\14\31\1\u0158\4\31\3\0\1\31"+
    "\2\0\3\31\20\0\1\31\3\0\1\31\1\0\1\31"+
    "\1\0\6\31\11\0\1\31\1\u0159\17\31\3\0\1\31"+
    "\2\0\3\31\20\0\1\31\3\0\1\31\1\0\1\31"+
    "\1\0\6\31\11\0\12\31\1\u015a\6\31\3\0\1\31"+
    "\2\0\3\31\20\0\1\31\3\0\1\31\1\0\1\31"+
    "\1\0\6\31\11\0\3\31\1\u015b\15\31\3\0\1\31"+
    "\2\0\3\31\20\0\1\31\3\0\1\31\1\0\1\31"+
    "\1\0\6\31\11\0\10\31\1\u015c\10\31\3\0\1\31"+
    "\2\0\3\31\20\0\1\31\3\0\1\31\1\0\1\31"+
    "\1\0\6\31\11\0\5\31\1\u015d\13\31\3\0\1\31"+
    "\2\0\3\31\20\0\1\31\3\0\1\31\1\0\1\u015e"+
    "\1\0\6\31\11\0\21\31\3\0\1\31\2\0\3\31"+
    "\20\0\1\31\3\0\1\31\1\0\1\31\1\0\6\31"+
    "\11\0\4\31\1\u015f\14\31\3\0\1\31\2\0\3\31"+
    "\20\0\1\31\12\0\1\u0160\126\0\1\u0161\103\0\1\u0162"+
    "\75\0\1\u0163\45\0\1\u0164\10\0\1\u0165\35\0\1\u0166"+
    "\31\0\1\u0167\126\0\1\u0168\110\0\1\u0169\75\0\1\u016a"+
    "\43\0\1\u0146\1\0\1\u0146\1\0\6\u0146\1\u016b\1\0"+
    "\1\u016c\6\0\21\u0146\3\0\1\u0146\2\0\3\u0146\20\0"+
    "\1\u0146\5\0\1\u016d\2\0\3\u016d\1\0\1\u016d\11\0"+
    "\21\u016d\3\0\1\u016d\2\0\3\u016d\20\0\1\u016d\5\0"+
    "\1\u016e\2\0\3\u016e\1\0\1\u016e\11\0\21\u016e\3\0"+
    "\1\u016e\2\0\3\u016e\20\0\1\u016e\36\0\1\u016f\102\0"+
    "\1\u0170\45\0\1\u0171\2\0\3\u0171\1\0\1\u0171\11\0"+
    "\21\u0171\3\0\1\u0171\2\0\3\u0171\20\0\1\u0171\3\0"+
    "\1\31\1\0\1\31\1\0\6\31\11\0\10\31\1\u0172"+
    "\10\31\3\0\1\31\2\0\3\31\20\0\1\31\3\0"+
    "\1\31\1\0\1\31\1\0\6\31\11\0\5\31\1\u0173"+
    "\13\31\3\0\1\31\2\0\3\31\20\0\1\31\3\0"+
    "\1\31\1\0\1\31\1\0\6\31\11\0\5\31\1\u0174"+
    "\13\31\3\0\1\31\2\0\3\31\20\0\1\31\3\0"+
    "\1\31\1\0\1\31\1\0\6\31\11\0\1\u0175\20\31"+
    "\3\0\1\31\2\0\3\31\20\0\1\31\3\0\1\31"+
    "\1\0\1\31\1\0\6\31\11\0\15\31\1\u0176\3\31"+
    "\3\0\1\31\2\0\3\31\20\0\1\31\3\0\1\31"+
    "\1\0\1\31\1\0\6\31\11\0\5\31\1\u0177\13\31"+
    "\3\0\1\31\2\0\3\31\20\0\1\31\3\0\1\31"+
    "\1\0\1\31\1\0\6\31\11\0\2\31\1\u0178\16\31"+
    "\3\0\1\31\2\0\3\31\20\0\1\31\3\0\1\31"+
    "\1\0\1\31\1\0\2\31\1\u0179\3\31\11\0\21\31"+
    "\3\0\1\31\2\0\3\31\20\0\1\31\3\0\1\31"+
    "\1\0\1\31\1\0\6\31\11\0\2\31\1\u017a\16\31"+
    "\3\0\1\31\2\0\3\31\20\0\1\31\3\0\1\31"+
    "\1\0\1\31\1\0\6\31\11\0\13\31\1\u017b\5\31"+
    "\3\0\1\31\2\0\3\31\20\0\1\31\3\0\1\31"+
    "\1\0\1\31\1\0\6\31\11\0\2\31\1\u017c\16\31"+
    "\3\0\1\31\2\0\3\31\20\0\1\31\3\0\1\31"+
    "\1\0\1\31\1\0\6\31\11\0\10\31\1\u017d\10\31"+
    "\3\0\1\31\2\0\3\31\20\0\1\31\43\0\1\u017e"+
    "\73\0\1\u017f\47\0\1\u0180\10\0\1\u0181\35\0\1\u0182"+
    "\56\0\1\u0169\113\0\1\u0183\51\0\1\u0165\35\0\1\u0166"+
    "\55\0\1\u0184\77\0\1\u0185\66\0\1\u0169\35\0\1\u0186"+
    "\63\0\1\u0187\56\0\1\u016b\66\0\1\u016d\1\0\1\u016d"+
    "\1\0\6\u016d\4\0\1\u0188\4\0\21\u016d\3\0\1\u016d"+
    "\2\0\3\u016d\20\0\1\u016d\3\0\1\u016e\1\0\1\u016e"+
    "\1\0\6\u016e\11\0\21\u016e\3\0\1\u016e\2\0\3\u016e"+
    "\20\0\1\u016e\1\u0188\32\0\1\u0189\103\0\1\u018a\45\0"+
    "\1\31\1\0\1\31\1\0\6\31\11\0\4\31\1\u018b"+
    "\14\31\3\0\1\31\2\0\3\31\20\0\1\31\3\0"+
    "\1\31\1\0\1\31\1\0\6\31\11\0\15\31\1\u018c"+
    "\3\31\3\0\1\31\2\0\3\31\20\0\1\31\3\0"+
    "\1\31\1\0\1\31\1\0\6\31\11\0\4\31\1\u018d"+
    "\14\31\3\0\1\31\2\0\3\31\20\0\1\31\3\0"+
    "\1\31\1\0\1\31\1\0\6\31\11\0\6\31\1\u018e"+
    "\12\31\3\0\1\31\2\0\3\31\20\0\1\31\3\0"+
    "\1\31\1\0\1\31\1\0\6\31\11\0\1\31\1\u018f"+
    "\17\31\3\0\1\31\2\0\3\31\20\0\1\31\3\0"+
    "\1\31\1\0\1\u0190\1\0\6\31\11\0\21\31\3\0"+
    "\1\31\2\0\3\31\20\0\1\31\3\0\1\31\1\0"+
    "\1\31\1\0\6\31\11\0\3\31\1\u0191\15\31\3\0"+
    "\1\31\2\0\3\31\20\0\1\31\3\0\1\31\1\0"+
    "\1\u0192\1\0\6\31\11\0\21\31\3\0\1\31\2\0"+
    "\3\31\20\0\1\31\5\0\1\u0169\132\0\1\u0193\101\0"+
    "\1\u0194\56\0\1\u0181\35\0\1\u0182\31\0\1\u0195\125\0"+
    "\1\u0196\113\0\1\u0193\51\0\1\u0187\35\0\1\u0197\41\0"+
    "\1\u016b\1\0\1\u016c\127\0\1\u0198\47\0\3\u0199\64\0"+
    "\1\31\1\0\1\31\1\0\6\31\11\0\3\31\1\u019a"+
    "\15\31\3\0\1\31\2\0\3\31\20\0\1\31\3\0"+
    "\1\31\1\0\1\u019b\1\0\6\31\11\0\21\31\3\0"+
    "\1\31\2\0\3\31\20\0\1\31\3\0\1\31\1\0"+
    "\1\31\1\0\6\31\11\0\2\31\1\u019c\16\31\3\0"+
    "\1\31\2\0\3\31\20\0\1\31\3\0\1\31\1\0"+
    "\1\u019d\1\0\6\31\11\0\21\31\3\0\1\31\2\0"+
    "\3\31\20\0\1\31\3\0\1\31\1\0\1\31\1\0"+
    "\6\31\11\0\21\31\3\0\1\31\2\0\1\31\1\u019e"+
    "\1\31\20\0\1\31\3\0\1\31\1\0\1\u019f\1\0"+
    "\6\31\11\0\21\31\3\0\1\31\2\0\3\31\20\0"+
    "\1\31\3\0\1\31\1\0\1\31\1\0\6\31\11\0"+
    "\21\31\3\0\1\31\2\0\1\31\1\u01a0\1\31\20\0"+
    "\1\31\16\0\1\u0193\35\0\1\u01a1\54\0\1\u0181\106\0"+
    "\1\u0165\60\0\1\u0196\35\0\1\u01a2\56\0\1\u01a3\53\0"+
    "\1\u01a4\2\0\3\u01a4\1\0\1\u01a4\3\u0199\1\u01a5\5\0"+
    "\21\u01a4\3\0\1\u01a4\2\0\3\u01a4\20\0\1\u01a4\3\0"+
    "\1\31\1\0\1\31\1\0\6\31\11\0\13\31\1\u01a6"+
    "\5\31\3\0\1\31\2\0\3\31\20\0\1\31\3\0"+
    "\1\31\1\0\1\31\1\0\6\31\11\0\6\31\1\u01a7"+
    "\12\31\3\0\1\31\2\0\3\31\20\0\1\31\3\0"+
    "\1\31\1\0\1\31\1\0\6\31\11\0\6\31\1\u01a8"+
    "\12\31\3\0\1\31\2\0\3\31\20\0\1\31\3\0"+
    "\1\31\1\0\1\31\1\0\6\31\11\0\6\31\1\u01a9"+
    "\12\31\3\0\1\31\2\0\3\31\20\0\1\31\15\0"+
    "\3\u01a3\30\0\1\300\33\0\1\u01a4\1\0\1\u01a4\1\0"+
    "\6\u01a4\3\u01aa\6\0\21\u01a4\3\0\1\u01a4\2\0\3\u01a4"+
    "\20\0\1\u01a4\5\0\1\u01a4\2\0\3\u01a4\1\0\1\u01a4"+
    "\11\0\21\u01a4\3\0\1\u01a4\2\0\3\u01a4\20\0\1\u01a4"+
    "\3\0\1\31\1\0\1\31\1\0\6\31\11\0\2\31"+
    "\1\u01ab\16\31\3\0\1\31\2\0\3\31\20\0\1\31"+
    "\3\0\1\31\1\0\1\31\1\0\6\31\11\0\1\u01ac"+
    "\20\31\3\0\1\31\2\0\3\31\20\0\1\31\3\0"+
    "\1\31\1\0\1\31\1\0\6\31\11\0\2\31\1\u01ad"+
    "\16\31\3\0\1\31\2\0\3\31\20\0\1\31\5\0"+
    "\1\u01ae\2\0\3\u01ae\1\0\1\u01ae\3\u01aa\2\0\1\u01af"+
    "\3\0\21\u01ae\3\0\1\u01ae\2\0\3\u01ae\3\0\1\u01b0"+
    "\3\0\1\u01af\10\0\1\u01ae\3\0\1\31\1\0\1\31"+
    "\1\0\6\31\11\0\3\31\1\u01b1\15\31\3\0\1\31"+
    "\2\0\3\31\20\0\1\31\3\0\1\31\1\0\1\31"+
    "\1\0\6\31\11\0\3\31\1\u01b2\15\31\3\0\1\31"+
    "\2\0\3\31\20\0\1\31\3\0\1\u01ae\1\0\1\u01ae"+
    "\1\0\6\u01ae\3\u01b3\2\0\1\u01af\3\0\21\u01ae\3\0"+
    "\1\u01ae\2\0\3\u01ae\3\0\1\u01b0\3\0\1\u01af\10\0"+
    "\1\u01ae\5\0\1\u01ae\2\0\3\u01ae\1\0\1\u01ae\3\u01b3"+
    "\2\0\1\u01af\3\0\21\u01ae\3\0\1\u01ae\2\0\3\u01ae"+
    "\3\0\1\u01b0\3\0\1\u01af\10\0\1\u01ae\64\0\1\u01b4"+
    "\17\0\1\31\1\0\1\u01b5\1\0\6\31\11\0\21\31"+
    "\3\0\1\31\2\0\3\31\20\0\1\31\3\0\1\31"+
    "\1\0\1\u01b6\1\0\6\31\11\0\21\31\3\0\1\31"+
    "\2\0\3\31\20\0\1\31\15\0\3\u01b3\43\0\1\u01b0"+
    "\17\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[19175];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\1\10\0\2\1\1\11\12\1\1\11\1\1"+
    "\3\11\21\1\1\11\11\1\7\11\1\1\1\11\2\1"+
    "\1\11\5\1\1\11\7\1\1\11\3\1\1\11\2\1"+
    "\1\11\2\1\2\11\1\1\23\11\2\1\1\11\3\1"+
    "\1\11\1\1\1\11\1\1\2\0\1\11\1\1\1\0"+
    "\1\11\3\1\2\11\2\0\4\1\4\0\1\11\2\0"+
    "\20\1\3\11\1\1\2\11\1\1\11\0\1\11\2\1"+
    "\2\11\1\1\1\0\2\11\2\1\6\11\5\0\1\1"+
    "\3\11\1\1\3\0\1\1\1\11\1\1\3\0\5\1"+
    "\3\0\1\1\2\0\1\11\1\1\2\0\4\11\2\1"+
    "\1\0\10\1\1\0\21\1\1\11\1\1\11\0\3\11"+
    "\3\0\1\1\1\0\1\11\1\1\1\0\2\11\1\1"+
    "\1\11\1\0\30\1\15\0\1\11\2\0\23\1\6\0"+
    "\1\11\4\0\1\11\1\1\4\0\1\11\14\1\4\0"+
    "\1\11\3\0\1\11\4\0\10\1\4\0\1\11\2\0"+
    "\7\1\2\11\3\0\4\1\1\0\3\1\3\0\2\1"+
    "\1\0\1\11\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[438];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	private final LinkedList commentList = new LinkedList();
	private String heredoc = null;
	private String nowdoc = null;
    private boolean asp_tags = false;
    private boolean short_tags_allowed = true;
    private StateStack stack = new StateStack();
    private char yy_old_buffer[] = new char[ZZ_BUFFERSIZE];
    private int yy_old_pushbackPos;
    protected int commentStartPosition;

	private AST ast;

    public void setAST(AST ast) {
    	this.ast = ast;
    }
    
	public PHPVersion getPHPVersion() {
		return PHPVersion.PHP5_4;
	}
    
	public void setInScriptingState() {
		yybegin(ST_IN_SCRIPTING);
	}

	public void resetCommentList() {
		commentList.clear();
	}
	
	public LinkedList getCommentList() {
		return commentList;
	}	
	
	protected void addComment(int type) {
		int leftPosition = getTokenStartPosition();
		Comment comment = new Comment(commentStartPosition, leftPosition + getTokenLength(), ast, type);
		commentList.add(comment);
	}	
	
	public void setUseAspTagsAsPhp(boolean useAspTagsAsPhp) {
		asp_tags = useAspTagsAsPhp;
	}
	
	public void setUseShortTags(boolean useShortTags) {
		short_tags_allowed = useShortTags;
	}
	
    private void pushState(int state) {
        stack.pushStack(zzLexicalState);
        yybegin(state);
    }

    private void popState() {
        yybegin(stack.popStack());
    }

    public int getCurrentLine() {
        return yyline;
    }

    protected int getTokenStartPosition() {
        return zzStartRead - zzPushbackPos;
    }

    protected int getTokenLength() {
        return zzMarkedPos - zzStartRead;
    }

    public int getLength() {
        return zzEndRead - zzPushbackPos;
    }
    
    private void handleCommentStart() {
		commentStartPosition = getTokenStartPosition();
	}
	
	private void handleLineCommentEnd() {
         addComment(Comment.TYPE_SINGLE_LINE);
    }
    
    private void handleMultilineCommentEnd() {
    	addComment(Comment.TYPE_MULTILINE);
    }

    private void handlePHPDocEnd() {
		addComment(Comment.TYPE_PHPDOC);
    }
    
    protected void handleVarComment() {
    	commentStartPosition = zzStartRead;
    	addComment(Comment.TYPE_MULTILINE);
    }
        
    private Symbol createFullSymbol(int symbolNumber) {
        Symbol symbol = createSymbol(symbolNumber);
        symbol.value = yytext();
        return symbol;
    }

    protected Symbol createSymbol(int symbolNumber) {
        int leftPosition = getTokenStartPosition();
        return new Symbol(symbolNumber, leftPosition, leftPosition + getTokenLength());
    }

    public int[] getParamenters(){
    	return new int[]{zzMarkedPos, zzPushbackPos, zzCurrentPos, zzStartRead, zzEndRead, yyline};
    }
    
	protected boolean parsePHPDoc(){	
		final IDocumentorLexer documentorLexer = getDocumentorLexer(zzReader);
		if(documentorLexer == null){
			return false;
		}
		yypushback(zzMarkedPos - zzStartRead);
		int[] parameters = getParamenters();
		documentorLexer.reset(zzReader, zzBuffer, parameters);
		Object phpDocBlock = documentorLexer.parse();
		commentList.add(phpDocBlock);
		reset(zzReader, documentorLexer.getBuffer(), documentorLexer.getParamenters());
		return true;
	}
	
	
	protected IDocumentorLexer getDocumentorLexer(java.io.Reader  reader) {
		return null;
	}
	
	public void reset(java.io.Reader  reader, char[] buffer, int[] parameters){
		this.zzReader = reader;
		this.zzBuffer = buffer;
		this.zzMarkedPos = parameters[0];
		this.zzPushbackPos = parameters[1];
		this.zzCurrentPos = parameters[2];
		this.zzStartRead = parameters[3];
		this.zzEndRead = parameters[4];
		this.yyline = parameters[5];  
		this.yychar = this.zzStartRead - this.zzPushbackPos;
	}



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public PhpAstLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public PhpAstLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 192) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 87: 
          { return createSymbol(ParserConstants.T_OBJECT_OPERATOR);
          }
        case 143: break;
        case 52: 
          { return createFullSymbol(ParserConstants.T_DNUMBER);
          }
        case 144: break;
        case 6: 
          { return createFullSymbol(ParserConstants.T_STRING);
          }
        case 145: break;
        case 118: 
          { return createSymbol(ParserConstants.T_WHILE);
          }
        case 146: break;
        case 133: 
          { return createSymbol(ParserConstants.T_ENDWHILE);
          }
        case 147: break;
        case 93: 
          { return createFullSymbol(ParserConstants.T_BNUMBER);
          }
        case 148: break;
        case 31: 
          { return createSymbol(ParserConstants.T_TILDA);
          }
        case 149: break;
        case 26: 
          { return createSymbol(ParserConstants.T_OR);
          }
        case 150: break;
        case 17: 
          { return createSymbol(ParserConstants.T_OPEN_PARENTHESE);
          }
        case 151: break;
        case 116: 
          { return createSymbol(ParserConstants.T_CATCH);
          }
        case 152: break;
        case 92: 
          { //return createSymbol(ParserConstants.T_INLINE_HTML);
    yybegin(ST_IN_SCRIPTING);
	//return T_OPEN_TAG;
          }
        case 153: break;
        case 28: 
          { return createSymbol(ParserConstants.T_COMMA);
          }
        case 154: break;
        case 138: 
          { return createSymbol(ParserConstants.T_ENDSWITCH);
          }
        case 155: break;
        case 40: 
          { popState();
    return createFullSymbol(ParserConstants.T_STRING);
          }
        case 156: break;
        case 128: 
          { return createSymbol(ParserConstants.T_DOUBLE_CAST);
          }
        case 157: break;
        case 132: 
          { return createSymbol(ParserConstants.T_ARRAY_CAST);
          }
        case 158: break;
        case 83: 
          { pushState(ST_IN_SCRIPTING);
    yypushback(yylength()-1);
    return createSymbol(ParserConstants.T_CURLY_OPEN_WITH_DOLAR);
          }
        case 159: break;
        case 41: 
          { yypushback(yylength());
    popState();
    pushState(ST_IN_SCRIPTING);
          }
        case 160: break;
        case 66: 
          { return createSymbol(ParserConstants.T_DOUBLE_ARROW);
          }
        case 161: break;
        case 135: 
          { return createSymbol(ParserConstants.T_CONTINUE);
          }
        case 162: break;
        case 68: 
          { return createSymbol(ParserConstants.T_IS_NOT_EQUAL);
          }
        case 163: break;
        case 20: 
          { return createSymbol(ParserConstants.T_NOT);
          }
        case 164: break;
        case 61: 
          { pushState(ST_LOOKING_FOR_PROPERTY);
    return createSymbol(ParserConstants.T_OBJECT_OPERATOR);
          }
        case 165: break;
        case 63: 
          { return createSymbol(ParserConstants.T_SR);
          }
        case 166: break;
        case 108: 
          { return createSymbol(ParserConstants.T_ELSE);
          }
        case 167: break;
        case 69: 
          { return createSymbol(ParserConstants.T_IS_SMALLER_OR_EQUAL);
          }
        case 168: break;
        case 34: 
          { /* This is a temporary fix which is dependant on flex and it's implementation */
    if (!stack.isEmpty()) {
        popState();
    }
    return createSymbol(ParserConstants.T_CURLY_CLOSE);
          }
        case 169: break;
        case 84: 
          { yypushback(1);
	return createFullSymbol(ParserConstants.T_ENCAPSED_AND_WHITESPACE);
          }
        case 170: break;
        case 36: 
          { yybegin(ST_IN_SCRIPTING);
    return createSymbol(ParserConstants.T_QUATE);
          }
        case 171: break;
        case 125: 
          { return createSymbol(ParserConstants.T_SWITCH);
          }
        case 172: break;
        case 90: 
          { handlePHPDocEnd();
     yybegin(ST_IN_SCRIPTING);
          }
        case 173: break;
        case 72: 
          { return createSymbol(ParserConstants.T_DIV_EQUAL);
          }
        case 174: break;
        case 104: 
          { if (!parsePHPDoc()) {
handleCommentStart();
yybegin(ST_DOCBLOCK);
}
          }
        case 175: break;
        case 123: 
          { return createSymbol(ParserConstants.T_ENDFOR);
          }
        case 176: break;
        case 112: 
          { handleCommentStart();
          }
        case 177: break;
        case 37: 
          { yybegin(ST_IN_SCRIPTING);
    return createSymbol(ParserConstants.T_BACKQUATE);
          }
        case 178: break;
        case 124: 
          { return createSymbol(ParserConstants.T_ELSEIF);
          }
        case 179: break;
        case 102: 
          { return createSymbol(ParserConstants.T_IS_NOT_IDENTICAL);
          }
        case 180: break;
        case 76: 
          { return createSymbol(ParserConstants.T_AND_EQUAL);
          }
        case 181: break;
        case 58: 
          { return createSymbol(ParserConstants.T_IF);
          }
        case 182: break;
        case 140: 
          { handleVarComment();
    //return createFullSymbol(ParserConstants.T_VAR_COMMENT);
          }
        case 183: break;
        case 60: 
          { return createSymbol(ParserConstants.T_DEC);
          }
        case 184: break;
        case 131: 
          { return createSymbol(ParserConstants.T_REQUIRE);
          }
        case 185: break;
        case 9: 
          { return createSymbol(ParserConstants.T_DOLLAR);
          }
        case 186: break;
        case 59: 
          { return createSymbol(ParserConstants.T_LOGICAL_OR);
          }
        case 187: break;
        case 22: 
          { return createSymbol(ParserConstants.T_TIMES);
          }
        case 188: break;
        case 139: 
          { return createSymbol(ParserConstants.T_INSTANCEOF);
          }
        case 189: break;
        case 119: 
          { return createSymbol(ParserConstants.T_PRINT);
          }
        case 190: break;
        case 100: 
          { return createSymbol(ParserConstants.T_VAR);
          }
        case 191: break;
        case 10: 
          { yybegin(ST_DOUBLE_QUOTES);
    return createSymbol(ParserConstants.T_QUATE);
          }
        case 192: break;
        case 70: 
          { return createSymbol(ParserConstants.T_SL);
          }
        case 193: break;
        case 117: 
          { return createSymbol(ParserConstants.T_THROW);
          }
        case 194: break;
        case 2: 
          { return createSymbol(ParserConstants.T_INLINE_HTML);
          }
        case 195: break;
        case 81: 
          { yypushback(1);
    return createFullSymbol(ParserConstants.T_ENCAPSED_AND_WHITESPACE);
          }
        case 196: break;
        case 71: 
          { return createSymbol(ParserConstants.T_MUL_EQUAL);
          }
        case 197: break;
        case 16: 
          { return createSymbol(ParserConstants.T_NEKUDOTAIM);
          }
        case 198: break;
        case 80: 
          { return createSymbol(ParserConstants.T_XOR_EQUAL);
          }
        case 199: break;
        case 115: 
          { return createSymbol(ParserConstants.T_CONST);
          }
        case 200: break;
        case 25: 
          { return createSymbol(ParserConstants.T_REFERENCE);
          }
        case 201: break;
        case 121: 
          { int removeChars = (yytext().charAt(0) == 'b') ? 4 : 3;
    String hereOrNowDoc = yytext().substring(removeChars).trim();    // for 'b<<<' or '<<<'
    int heredoc_len = hereOrNowDoc.length();

	Symbol sym = createFullSymbol(ParserConstants.T_START_HEREDOC);

    if (hereOrNowDoc.charAt(0) == '\'') {
    	nowdoc = hereOrNowDoc.substring(1, heredoc_len-1);
    	sym.value = nowdoc;
    	heredoc_len -= 2;
    	yybegin(ST_NOWDOC);
    }
    else if (hereOrNowDoc.charAt(0) == '"') {
    	heredoc = hereOrNowDoc.substring(1, heredoc_len-1);
    	sym.value = heredoc;
    	heredoc_len -= 2;
    	yybegin(ST_HEREDOC);
    } else {
    	heredoc = hereOrNowDoc;
    	sym.value = heredoc;
    	yybegin(ST_HEREDOC);
    }
    return sym;
          }
        case 202: break;
        case 15: 
          { return createSymbol(ParserConstants.T_LGREATER);
          }
        case 203: break;
        case 74: 
          { yybegin(YYINITIAL);
    return createSymbol(ParserConstants.T_SEMICOLON);  /* implicit ';' at php-end tag */
          }
        case 204: break;
        case 89: 
          { handleMultilineCommentEnd();
    yybegin(ST_IN_SCRIPTING);
          }
        case 205: break;
        case 50: 
          { //	yymore();
          }
        case 206: break;
        case 75: 
          { return createSymbol(ParserConstants.T_MOD_EQUAL);
          }
        case 207: break;
        case 5: 
          { return createSymbol(ParserConstants.T_NEKUDA);
          }
        case 208: break;
        case 7: 
          { return createSymbol(ParserConstants.T_PLUS);
          }
        case 209: break;
        case 114: 
          { return createSymbol(ParserConstants.T_BREAK);
          }
        case 210: break;
        case 142: 
          { return createSymbol(ParserConstants.T_REQUIRE_ONCE);
          }
        case 211: break;
        case 13: 
          { return createSymbol(ParserConstants.T_SEMICOLON);
          }
        case 212: break;
        case 38: 
          { yybegin(ST_IN_SCRIPTING);
	return createSymbol(ParserConstants.T_END_HEREDOC);
          }
        case 213: break;
        case 44: 
          { yypushback(1);
	popState();
	return createSymbol(ParserConstants.T_ENCAPSED_AND_WHITESPACE);
          }
        case 214: break;
        case 39: 
          { yypushback(yylength());
    popState();
          }
        case 215: break;
        case 54: 
          { return createSymbol(ParserConstants.T_INC);
          }
        case 216: break;
        case 65: 
          { return createSymbol(ParserConstants.T_PAAMAYIM_NEKUDOTAYIM);
          }
        case 217: break;
        case 88: 
          { /* treat numbers (almost) as strings inside encapsulated strings */
    return createFullSymbol(ParserConstants.T_NUM_STRING);
          }
        case 218: break;
        case 98: 
          { return createSymbol(ParserConstants.T_LOGICAL_AND);
          }
        case 219: break;
        case 109: 
          { return createSymbol(ParserConstants.T_EVAL);
          }
        case 220: break;
        case 106: 
          { String text = yytext();

    if (text.charAt(text.length() - 2)== ';') {
		text = text.substring(0, text.length() - 2);
        yypushback(1);
    } else {
		text = text.substring(0, text.length() - 1);
    }
	
	int textLength = text.length();
	int heredocLength = heredoc.length();
	if (textLength > heredocLength && text.substring(textLength - heredocLength, textLength).equals(heredoc)) {
		yypushback(2);
        yybegin(ST_END_HEREDOC);
        heredoc = null;
        // we need to remove the closing label from the symbol value.
        Symbol sym = createFullSymbol(ParserConstants.T_ENCAPSED_AND_WHITESPACE);
        String value = (String)sym.value;
        sym.value = value.substring(0, value.length() - heredocLength + 1);
	   	return sym;
	}
	yypushback(1);
          }
        case 221: break;
        case 137: 
          { return createSymbol(ParserConstants.T_OBJECT_CAST);
          }
        case 222: break;
        case 120: 
          { return createSymbol(ParserConstants.T_INT_CAST);
          }
        case 223: break;
        case 33: 
          { return createSymbol(ParserConstants.T_AT);
          }
        case 224: break;
        case 29: 
          { return createSymbol(ParserConstants.T_OPEN_RECT);
          }
        case 225: break;
        case 111: 
          { return createSymbol(ParserConstants.T_GOTO);
          }
        case 226: break;
        case 127: 
          { return createSymbol(ParserConstants.T_BOOL_CAST);
          }
        case 227: break;
        case 49: 
          { return createSymbol(ParserConstants.T_CURLY_CLOSE);
          }
        case 228: break;
        case 4: 
          { return createFullSymbol(ParserConstants.T_LNUMBER);
          }
        case 229: break;
        case 91: 
          { if (asp_tags || yytext().charAt(0)!='%') { /* asp comment? */
	    handleLineCommentEnd();
        yypushback(yylength());
		yybegin(ST_IN_SCRIPTING);
		//return T_COMMENT;
	}
          }
        case 230: break;
        case 78: 
          { return createSymbol(ParserConstants.T_OR_EQUAL);
          }
        case 231: break;
        case 21: 
          { return createSymbol(ParserConstants.T_RGREATER);
          }
        case 232: break;
        case 95: 
          { return createSymbol(ParserConstants.T_FOR);
          }
        case 233: break;
        case 42: 
          { popState();
    pushState(ST_IN_SCRIPTING);
    return createFullSymbol(ParserConstants.T_STRING_VARNAME);
          }
        case 234: break;
        case 43: 
          { /* Offset could be treated as a long */
	return createFullSymbol(ParserConstants.T_NUM_STRING);
          }
        case 235: break;
        case 57: 
          { return createFullSymbol(ParserConstants.T_CONSTANT_ENCAPSED_STRING);
          }
        case 236: break;
        case 134: 
          { return createSymbol(ParserConstants.T_FUNCTION);
          }
        case 237: break;
        case 99: 
          { return createSymbol(ParserConstants.T_SR_EQUAL);
          }
        case 238: break;
        case 48: 
          { popState();
	return createSymbol(ParserConstants.T_CLOSE_RECT);
          }
        case 239: break;
        case 27: 
          { return createSymbol(ParserConstants.T_KOVA);
          }
        case 240: break;
        case 53: 
          { return createSymbol(ParserConstants.T_CONCAT_EQUAL);
          }
        case 241: break;
        case 141: 
          { return createSymbol(ParserConstants.T_INCLUDE_ONCE);
          }
        case 242: break;
        case 96: 
          { return createSymbol(ParserConstants.T_NEW);
          }
        case 243: break;
        case 79: 
          { return createSymbol(ParserConstants.T_BOOLEAN_OR);
          }
        case 244: break;
        case 126: 
          { return createSymbol(ParserConstants.T_RETURN);
          }
        case 245: break;
        case 86: 
          { String text = yytext();
    int length = text.length() - 1;
    text = text.trim();
    
    yypushback(1);
    
    if (text.endsWith(";")) {
        text = text.substring(0, text.length() - 1);
        yypushback(1);
    }
    if (text.equals(nowdoc)) {
    	nowdoc = null;
        yybegin(ST_IN_SCRIPTING);
        return createSymbol(ParserConstants.T_END_HEREDOC);
    }
    else {
    	yybegin(ST_HEREDOC);
    }
          }
        case 246: break;
        case 51: 
          { String yytext = yytext();
	switch (yytext.charAt(yytext.length() - 1)) {
		case '?':
		case '%':
		case '>':
			yypushback(1);
			break;
		default:
			handleLineCommentEnd();
			yybegin(ST_IN_SCRIPTING);
	}
//	yymore();
          }
        case 247: break;
        case 23: 
          { return createSymbol(ParserConstants.T_DIV);
          }
        case 248: break;
        case 45: 
          { return createSymbol(ParserConstants.T_QUATE);
          }
        case 249: break;
        case 18: 
          { return createSymbol(ParserConstants.T_CLOSE_PARENTHESE);
          }
        case 250: break;
        case 1: 
          { return createFullSymbol(ParserConstants.T_ENCAPSED_AND_WHITESPACE);
          }
        case 251: break;
        case 14: 
          { return createSymbol(ParserConstants.T_MINUS);
          }
        case 252: break;
        case 129: 
          { return createSymbol(ParserConstants.T_DEFAULT);
          }
        case 253: break;
        case 85: 
          { String text = yytext();
    int length = text.length() - 1;
    text = text.trim();
    
    yypushback(1);
    
    if (text.endsWith(";")) {
        text = text.substring(0, text.length() - 1);
        yypushback(1);
    }
    if (text.equals(heredoc)) {
        heredoc = null;
        yybegin(ST_IN_SCRIPTING);
        return createSymbol(ParserConstants.T_END_HEREDOC);
    }
    else {
    	yybegin(ST_HEREDOC);
    }
          }
        case 254: break;
        case 19: 
          { return createSymbol(ParserConstants.T_EQUAL);
          }
        case 255: break;
        case 35: 
          { handleCommentStart();
	yybegin(ST_ONE_LINE_COMMENT);
//	yymore();
          }
        case 256: break;
        case 11: 
          { yybegin(ST_BACKQUOTE);
    return createSymbol(ParserConstants.T_BACKQUATE);
          }
        case 257: break;
        case 47: 
          { return createSymbol(ParserConstants.T_CURLY_OPEN);
          }
        case 258: break;
        case 94: 
          { return createSymbol(ParserConstants.T_LOGICAL_XOR);
          }
        case 259: break;
        case 77: 
          { return createSymbol(ParserConstants.T_BOOLEAN_AND);
          }
        case 260: break;
        case 101: 
          { return createSymbol(ParserConstants.T_IS_IDENTICAL);
          }
        case 261: break;
        case 82: 
          { pushState(ST_LOOKING_FOR_VARNAME);
    return createSymbol(ParserConstants.T_DOLLAR_OPEN_CURLY_BRACES);
          }
        case 262: break;
        case 56: 
          { return createSymbol(ParserConstants.T_DO);
          }
        case 263: break;
        case 130: 
          { return createSymbol(ParserConstants.T_INCLUDE);
          }
        case 264: break;
        case 64: 
          { return createSymbol(ParserConstants.T_IS_GREATER_OR_EQUAL);
          }
        case 265: break;
        case 122: 
          { yypushback(3);
	pushState(ST_LOOKING_FOR_PROPERTY);
	return createFullSymbol(ParserConstants.T_VARIABLE);
          }
        case 266: break;
        case 136: 
          { return createSymbol(ParserConstants.T_STRING_CAST);
          }
        case 267: break;
        case 3: 
          { // do nothing
          }
        case 268: break;
        case 12: 
          { pushState(ST_IN_SCRIPTING);
    return createSymbol(ParserConstants.T_CURLY_OPEN);
          }
        case 269: break;
        case 30: 
          { return createSymbol(ParserConstants.T_CLOSE_RECT);
          }
        case 270: break;
        case 97: 
          { return createSymbol(ParserConstants.T_TRY);
          }
        case 271: break;
        case 73: 
          { handleCommentStart();
    yybegin(ST_COMMENT);
          }
        case 272: break;
        case 110: 
          { return createSymbol(ParserConstants.T_CASE);
          }
        case 273: break;
        case 62: 
          { return createSymbol(ParserConstants.T_MINUS_EQUAL);
          }
        case 274: break;
        case 67: 
          { return createSymbol(ParserConstants.T_IS_EQUAL);
          }
        case 275: break;
        case 103: 
          { return createSymbol(ParserConstants.T_SL_EQUAL);
          }
        case 276: break;
        case 32: 
          { return createSymbol(ParserConstants.T_QUESTION_MARK);
          }
        case 277: break;
        case 107: 
          { String text = yytext();

 	if (text.charAt(text.length() - 2)== ';') {
		text = text.substring(0, text.length() - 2);
        yypushback(1);
    } else {
		text = text.substring(0, text.length() - 1);
    }
 
 	int textLength = text.length();
 	int nowdocLength = nowdoc.length();
	if (textLength > nowdocLength && text.substring(textLength - nowdocLength, textLength).equals(nowdoc)) {
		yypushback(2);
       	yybegin(ST_END_HEREDOC);
       	nowdoc = null;
       	// we need to remove the closing label from the symbol value.
       	Symbol sym = createFullSymbol(ParserConstants.T_ENCAPSED_AND_WHITESPACE);
       	String value = (String)sym.value;
       	sym.value = value.substring(0, value.length() - nowdocLength + 1);
	   	return sym;
	}
	yypushback(1);
          }
        case 278: break;
        case 105: 
          { yypushback(1);
	pushState(ST_VAR_OFFSET);
	return createFullSymbol(ParserConstants.T_VARIABLE);
          }
        case 279: break;
        case 46: 
          { return createSymbol(ParserConstants.T_BACKQUATE);
          }
        case 280: break;
        case 55: 
          { return createSymbol(ParserConstants.T_PLUS_EQUAL);
          }
        case 281: break;
        case 113: 
          { return createSymbol(ParserConstants.T_ENDIF);
          }
        case 282: break;
        case 8: 
          { 
          }
        case 283: break;
        case 24: 
          { return createSymbol(ParserConstants.T_PRECENT);
          }
        case 284: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {     return createSymbol(sym.EOF);
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java PhpAstLexer <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        PhpAstLexer scanner = null;
        try {
          scanner = new PhpAstLexer( new java.io.FileReader(argv[i]) );
          while ( !scanner.zzAtEOF ) scanner.next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
