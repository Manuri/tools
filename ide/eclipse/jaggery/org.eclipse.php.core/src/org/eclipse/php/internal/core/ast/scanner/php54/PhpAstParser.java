
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Tue Sep 10 15:38:26 IST 2013
//----------------------------------------------------

package org.eclipse.php.internal.core.ast.scanner.php54;

import java.util.*;
import org.eclipse.php.internal.core.ast.nodes.*;
import org.eclipse.dltk.ast.Modifiers;

/** CUP v0.10k generated parser.
  * @version Tue Sep 10 15:38:26 IST 2013
  */
public class PhpAstParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public PhpAstParser() {super();}

  /** Constructor which sets the default scanner. */
  public PhpAstParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0153\000\002\003\003\000\002\002\004\000\002\004" +
    "\004\000\002\004\002\000\002\005\003\000\002\005\003" +
    "\000\002\007\004\000\002\007\002\000\002\010\003\000" +
    "\002\010\003\000\002\006\003\000\002\011\005\000\002" +
    "\011\011\000\002\011\014\000\002\011\007\000\002\011" +
    "\011\000\002\011\013\000\002\011\007\000\002\011\004" +
    "\000\002\011\005\000\002\011\004\000\002\011\005\000" +
    "\002\011\004\000\002\011\005\000\002\011\005\000\002" +
    "\011\005\000\002\011\003\000\002\011\004\000\002\011" +
    "\003\000\002\011\005\000\002\011\005\000\002\011\003" +
    "\000\002\011\004\000\002\013\003\000\002\014\003\000" +
    "\002\014\005\000\002\131\003\000\002\132\003\000\002" +
    "\047\002\000\002\047\003\000\002\137\013\000\002\140" +
    "\011\000\002\141\003\000\002\141\004\000\002\141\004" +
    "\000\002\141\003\000\002\142\002\000\002\114\003\000" +
    "\002\143\002\000\002\143\004\000\002\015\002\000\002" +
    "\015\004\000\002\016\003\000\002\016\004\000\002\017" +
    "\003\000\002\017\005\000\002\020\003\000\002\020\005" +
    "\000\002\021\003\000\002\021\005\000\002\022\005\000" +
    "\002\022\007\000\002\023\005\000\002\023\006\000\002" +
    "\023\005\000\002\023\006\000\002\024\002\000\002\024" +
    "\007\000\002\024\006\000\002\025\003\000\002\025\003" +
    "\000\002\026\003\000\002\026\005\000\002\027\002\000" +
    "\002\027\010\000\002\030\002\000\002\030\011\000\002" +
    "\031\002\000\002\031\004\000\002\032\002\000\002\032" +
    "\005\000\002\033\003\000\002\033\002\000\002\036\003" +
    "\000\002\036\005\000\002\037\004\000\002\037\006\000" +
    "\002\145\002\000\002\040\003\000\002\040\002\000\002" +
    "\041\003\000\002\041\003\000\002\041\004\000\002\041" +
    "\005\000\002\041\005\000\002\041\006\000\002\042\005" +
    "\000\002\042\003\000\002\043\003\000\002\043\004\000" +
    "\002\043\006\000\002\044\005\000\002\044\007\000\002" +
    "\044\003\000\002\044\005\000\002\045\004\000\002\045" +
    "\002\000\002\046\005\000\002\046\004\000\002\046\012" +
    "\000\002\046\004\000\002\201\002\000\002\201\003\000" +
    "\002\124\003\000\002\124\005\000\002\147\003\000\002" +
    "\123\002\000\002\123\003\000\002\125\003\000\002\125" +
    "\004\000\002\126\003\000\002\126\003\000\002\126\003" +
    "\000\002\126\003\000\002\126\003\000\002\126\003\000" +
    "\002\121\005\000\002\121\007\000\002\121\003\000\002" +
    "\121\005\000\002\122\007\000\002\122\006\000\002\050" +
    "\005\000\002\050\003\000\002\051\002\000\002\051\003" +
    "\000\002\052\005\000\002\052\003\000\002\052\004\000" +
    "\002\205\002\000\002\206\005\000\002\053\010\000\002" +
    "\053\005\000\002\053\006\000\002\053\010\000\002\053" +
    "\004\000\002\053\005\000\002\053\005\000\002\053\005" +
    "\000\002\053\005\000\002\053\005\000\002\053\005\000" +
    "\002\053\005\000\002\053\005\000\002\053\005\000\002" +
    "\053\005\000\002\053\005\000\002\053\004\000\002\053" +
    "\004\000\002\053\004\000\002\053\004\000\002\053\005" +
    "\000\002\053\005\000\002\053\005\000\002\053\005\000" +
    "\002\053\005\000\002\053\005\000\002\053\005\000\002" +
    "\053\005\000\002\053\005\000\002\053\005\000\002\053" +
    "\005\000\002\053\005\000\002\053\005\000\002\053\005" +
    "\000\002\053\005\000\002\053\005\000\002\053\004\000" +
    "\002\053\004\000\002\053\004\000\002\053\004\000\002" +
    "\053\005\000\002\053\005\000\002\053\005\000\002\053" +
    "\005\000\002\053\005\000\002\053\005\000\002\053\005" +
    "\000\002\053\005\000\002\053\005\000\002\053\005\000" +
    "\002\053\003\000\002\053\006\000\002\053\007\000\002" +
    "\053\006\000\002\053\003\000\002\053\004\000\002\053" +
    "\004\000\002\053\004\000\002\053\004\000\002\053\004" +
    "\000\002\053\004\000\002\053\004\000\002\053\004\000" +
    "\002\053\004\000\002\053\003\000\002\053\006\000\002" +
    "\053\005\000\002\053\005\000\002\053\004\000\002\053" +
    "\013\000\002\053\014\000\002\034\002\000\002\034\006" +
    "\000\002\035\005\000\002\035\006\000\002\035\003\000" +
    "\002\035\004\000\002\054\006\000\002\117\003\000\002" +
    "\117\003\000\002\156\003\000\002\156\003\000\002\160" +
    "\003\000\002\055\002\000\002\055\004\000\002\055\005" +
    "\000\002\107\002\000\002\107\003\000\002\107\003\000" +
    "\002\056\002\000\002\056\005\000\002\057\003\000\002" +
    "\057\003\000\002\057\003\000\002\057\003\000\002\057" +
    "\003\000\002\057\003\000\002\057\003\000\002\057\003" +
    "\000\002\057\003\000\002\057\003\000\002\057\003\000" +
    "\002\057\003\000\002\057\005\000\002\057\004\000\002" +
    "\060\003\000\002\060\004\000\002\060\004\000\002\060" +
    "\006\000\002\060\005\000\002\060\003\000\002\164\005" +
    "\000\002\061\003\000\002\061\003\000\002\061\005\000" +
    "\002\061\005\000\002\062\002\000\002\062\004\000\002" +
    "\063\002\000\002\063\003\000\002\064\007\000\002\064" +
    "\005\000\002\064\005\000\002\064\003\000\002\066\003" +
    "\000\002\066\005\000\002\065\003\000\002\065\003\000" +
    "\002\146\003\000\002\116\003\000\002\150\003\000\002" +
    "\133\003\000\002\207\005\000\002\210\006\000\002\210" +
    "\006\000\002\127\003\000\002\127\003\000\002\127\002" +
    "\000\002\151\003\000\002\151\004\000\002\153\005\000" +
    "\002\153\005\000\002\071\003\000\002\165\003\000\002" +
    "\165\003\000\002\161\003\000\002\161\004\000\002\161" +
    "\003\000\002\070\006\000\002\070\006\000\002\070\003" +
    "\000\002\072\003\000\002\072\006\000\002\073\003\000" +
    "\002\076\003\000\002\076\005\000\002\077\003\000\002" +
    "\077\004\000\002\100\005\000\002\100\003\000\002\101" +
    "\003\000\002\101\006\000\002\101\002\000\002\102\002" +
    "\000\002\102\004\000\002\103\007\000\002\103\005\000" +
    "\002\103\005\000\002\103\003\000\002\104\002\000\002" +
    "\104\003\000\002\105\005\000\002\105\003\000\002\106" +
    "\004\000\002\106\004\000\002\106\003\000\002\106\004" +
    "\000\002\110\003\000\002\110\006\000\002\110\005\000" +
    "\002\110\005\000\002\110\010\000\002\110\005\000\002" +
    "\111\003\000\002\111\003\000\002\112\006\000\002\112" +
    "\006\000\002\112\004\000\002\112\004\000\002\112\006" +
    "\000\002\112\004\000\002\112\004\000\002\154\003\000" +
    "\002\154\005\000\002\157\005\000\002\157\005\000\002" +
    "\155\003\000\002\113\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0213\000\002\001\ufffe\000\004\002\u0215\001\002\000" +
    "\204\003\104\004\125\005\137\006\075\007\011\010\053" +
    "\011\027\012\046\015\065\017\112\021\106\022\036\024" +
    "\026\033\072\035\114\041\050\042\107\043\063\044\076" +
    "\046\121\051\135\054\134\056\130\057\025\067\131\070" +
    "\012\071\017\072\040\073\041\074\115\075\006\076\030" +
    "\102\055\106\113\107\034\111\021\113\024\114\061\115" +
    "\043\116\110\117\074\124\054\142\010\162\073\163\057" +
    "\167\126\170\015\172\045\173\133\174\023\175\117\176" +
    "\033\177\111\200\064\201\120\202\060\203\031\204\044" +
    "\206\066\212\035\220\132\223\070\224\101\225\051\231" +
    "\103\001\001\000\002\001\uff14\000\004\220\u0212\001\002" +
    "\000\002\001\uffe5\000\002\001\uff18\000\004\220\u020f\001" +
    "\uff25\000\002\001\uff42\000\002\001\uff34\000\144\004\125" +
    "\006\075\007\011\010\053\011\027\012\046\017\112\033" +
    "\072\044\142\056\130\057\025\067\131\070\012\071\017" +
    "\072\040\073\041\074\115\075\006\076\030\106\113\107" +
    "\034\113\024\114\061\115\043\116\110\117\074\124\054" +
    "\162\073\163\057\167\126\170\015\172\045\173\133\174" +
    "\023\175\117\176\033\177\111\200\064\201\120\202\060" +
    "\203\031\204\044\206\066\212\035\220\132\223\070\224" +
    "\101\225\051\231\103\001\002\000\070\032\263\121\252" +
    "\122\273\123\244\141\247\142\u020d\143\243\144\264\145" +
    "\245\146\254\147\265\150\271\151\256\152\241\153\253" +
    "\154\270\155\266\156\250\157\267\160\262\161\255\162" +
    "\272\163\251\164\261\165\257\166\242\171\246\001\002" +
    "\000\002\001\uff12\000\002\001\ufee1\000\204\003\104\004" +
    "\125\005\137\006\075\007\011\010\053\011\027\012\046" +
    "\015\065\017\112\021\106\022\036\024\026\033\072\035" +
    "\114\041\050\042\107\043\063\044\142\046\121\051\135" +
    "\054\134\056\130\057\025\067\131\070\012\071\017\072" +
    "\040\073\041\074\115\075\006\076\030\102\055\106\113" +
    "\107\034\111\021\113\024\114\061\115\043\116\110\117" +
    "\074\124\054\142\010\162\073\163\057\167\126\170\015" +
    "\172\045\173\133\174\023\175\117\176\033\177\111\200" +
    "\064\201\120\202\060\203\031\204\044\206\066\212\035" +
    "\220\132\223\070\224\101\225\051\231\103\001\002\000" +
    "\036\125\u014a\126\u014e\127\u014b\130\u0155\131\u014d\132\u0153" +
    "\133\u0150\134\u0152\135\u014c\136\u0149\137\u014f\140\u0151\172" +
    "\ufef2\173\ufef2\001\ufef4\000\144\004\125\006\075\007\011" +
    "\010\053\011\027\012\046\017\112\033\072\044\142\056" +
    "\130\057\025\067\131\070\012\071\017\072\040\073\041" +
    "\074\115\075\006\076\030\106\113\107\034\113\024\114" +
    "\061\115\043\116\110\117\074\124\054\162\073\163\057" +
    "\167\126\170\015\172\045\173\133\174\023\175\117\176" +
    "\033\177\111\200\064\201\120\202\060\203\031\204\044" +
    "\206\066\212\035\220\132\223\070\224\101\225\051\231" +
    "\103\001\002\000\144\004\125\006\075\007\011\010\053" +
    "\011\027\012\046\017\112\033\072\044\142\056\130\057" +
    "\025\067\131\070\012\071\017\072\040\073\041\074\115" +
    "\075\006\076\030\106\113\107\034\113\024\114\061\115" +
    "\043\116\110\117\074\124\054\162\073\163\057\167\126" +
    "\170\015\172\045\173\133\174\023\175\117\176\033\177" +
    "\111\200\064\201\120\202\060\203\031\204\044\206\066" +
    "\212\035\220\132\223\070\224\101\225\051\231\103\001" +
    "\002\000\004\220\u0207\001\002\000\004\220\u01f5\001\002" +
    "\000\002\001\ufeb0\000\014\011\027\016\u01f3\077\236\100" +
    "\u019f\101\u019e\001\002\000\144\004\125\006\075\007\011" +
    "\010\053\011\027\012\046\017\112\033\072\044\142\056" +
    "\130\057\025\067\131\070\012\071\017\072\040\073\041" +
    "\074\115\075\006\076\030\106\113\107\034\113\024\114" +
    "\061\115\043\116\110\117\074\124\054\162\073\163\057" +
    "\167\126\170\015\172\045\173\133\174\023\175\117\176" +
    "\033\177\111\200\064\201\120\202\060\203\031\204\044" +
    "\206\066\212\035\220\132\223\070\224\101\225\051\231" +
    "\103\001\002\000\002\001\ufee5\000\144\004\125\006\075" +
    "\007\011\010\053\011\027\012\046\017\112\033\072\044" +
    "\142\056\130\057\025\067\131\070\012\071\017\072\040" +
    "\073\041\074\115\075\006\076\030\106\113\107\034\113" +
    "\024\114\061\115\043\116\110\117\074\124\054\162\073" +
    "\163\057\167\126\170\015\172\045\173\133\174\023\175" +
    "\117\176\033\177\111\200\064\201\120\202\060\203\031" +
    "\204\044\206\066\212\035\220\132\223\070\224\101\225" +
    "\051\231\103\001\002\000\002\001\uff13\000\004\044\u01e7" +
    "\001\uff26\000\004\220\u01df\001\002\000\002\001\ufee4\000" +
    "\002\001\uff10\000\002\001\uff0f\000\002\001\ufef1\000\004" +
    "\220\u01dc\001\002\000\144\004\125\006\075\007\011\010" +
    "\053\011\027\012\046\017\112\033\072\044\142\056\130" +
    "\057\025\067\131\070\012\071\017\072\040\073\041\074" +
    "\115\075\006\076\030\106\113\107\034\113\024\114\061" +
    "\115\043\116\110\117\074\124\054\162\073\163\057\167" +
    "\126\170\015\172\045\173\133\174\023\175\117\176\033" +
    "\177\111\200\064\201\120\202\060\203\031\204\044\206" +
    "\066\212\035\220\132\223\070\224\101\225\051\231\103" +
    "\001\ufecb\000\012\011\027\070\306\212\212\223\070\001" +
    "\002\000\002\001\uff04\000\012\102\313\104\ufee6\204\314" +
    "\220\ufeea\001\ufee3\000\146\004\125\006\075\007\011\010" +
    "\053\011\027\012\046\017\112\033\072\044\142\056\130" +
    "\057\025\067\131\070\012\071\017\072\040\073\041\074" +
    "\115\075\006\076\030\106\113\107\034\113\024\114\061" +
    "\115\043\116\110\117\074\124\054\142\u01d2\162\073\163" +
    "\057\167\126\170\015\172\045\173\133\174\023\175\117" +
    "\176\033\177\111\200\064\201\120\202\060\203\031\204" +
    "\044\206\066\212\035\220\132\223\070\224\101\225\051" +
    "\231\103\001\002\000\012\011\027\016\u01d0\100\u019f\101" +
    "\u019e\001\uff1e\000\004\104\327\001\002\000\002\001\uff17" +
    "\000\144\004\125\006\075\007\011\010\053\011\027\012" +
    "\046\017\112\033\072\044\142\056\130\057\025\067\131" +
    "\070\012\071\017\072\040\073\041\074\115\075\006\076" +
    "\030\106\113\107\034\113\024\114\061\115\043\116\110" +
    "\117\074\124\054\162\073\163\057\167\126\170\015\172" +
    "\045\173\133\174\023\175\117\176\033\177\111\200\064" +
    "\201\120\202\060\203\031\204\044\206\066\212\035\220" +
    "\132\223\070\224\101\225\051\231\103\001\002\000\002" +
    "\001\ufffa\000\002\001\uff3e\000\144\004\125\006\075\007" +
    "\011\010\053\011\027\012\046\017\112\033\072\044\142" +
    "\056\130\057\025\067\131\070\012\071\017\072\040\073" +
    "\041\074\115\075\006\076\030\106\113\107\034\113\024" +
    "\114\061\115\043\116\110\117\074\124\054\162\073\163" +
    "\057\167\126\170\015\172\045\173\133\174\023\175\117" +
    "\176\033\177\111\200\064\201\120\202\060\203\031\204" +
    "\044\206\066\212\035\220\132\223\070\224\101\225\051" +
    "\231\103\001\002\000\144\004\125\006\075\007\011\010" +
    "\053\011\027\012\046\017\112\033\072\044\142\056\130" +
    "\057\025\067\131\070\012\071\017\072\040\073\041\074" +
    "\115\075\006\076\030\106\113\107\034\113\024\114\061" +
    "\115\043\116\110\117\074\124\054\162\073\163\057\167" +
    "\126\170\015\172\045\173\133\174\023\175\117\176\033" +
    "\177\111\200\064\201\120\202\060\203\031\204\044\206" +
    "\066\212\035\220\132\223\070\224\101\225\051\231\103" +
    "\001\002\000\144\004\125\006\075\007\011\010\053\011" +
    "\027\012\046\017\112\033\072\044\142\056\130\057\025" +
    "\067\131\070\012\071\017\072\040\073\041\074\115\075" +
    "\006\076\030\106\113\107\034\113\024\114\061\115\043" +
    "\116\110\117\074\124\054\162\073\163\057\167\126\170" +
    "\015\172\045\173\133\174\023\175\117\176\033\177\111" +
    "\200\064\201\120\202\060\203\031\204\044\206\066\212" +
    "\035\220\132\223\070\224\101\225\051\231\103\001\002" +
    "\000\006\011\027\223\323\001\002\000\004\011\u01c5\001" +
    "\002\000\144\004\125\006\075\007\011\010\053\011\027" +
    "\012\046\017\112\033\072\044\142\056\130\057\025\067" +
    "\131\070\012\071\017\072\040\073\041\074\115\075\006" +
    "\076\030\106\113\107\034\113\024\114\061\115\043\116" +
    "\110\117\074\124\054\162\073\163\057\167\126\170\015" +
    "\172\045\173\133\174\023\175\117\176\033\177\111\200" +
    "\064\201\120\202\060\203\031\204\044\206\066\212\035" +
    "\220\132\223\070\224\101\225\051\231\103\001\002\000" +
    "\002\001\uffe7\000\012\011\027\070\306\212\212\223\070" +
    "\001\002\000\006\172\u01c0\173\u01c1\001\002\000\004\102" +
    "\324\001\ufed8\000\002\001\ufffc\000\144\004\125\006\075" +
    "\007\011\010\053\011\027\012\046\017\112\033\072\044" +
    "\142\056\130\057\025\067\131\070\012\071\017\072\040" +
    "\073\041\074\115\075\006\076\030\106\113\107\034\113" +
    "\024\114\061\115\043\116\110\117\074\124\054\162\073" +
    "\163\057\167\126\170\015\172\045\173\133\174\023\175" +
    "\117\176\033\177\111\200\064\201\120\202\060\203\031" +
    "\204\044\206\066\212\035\220\132\223\070\224\101\225" +
    "\051\231\103\001\002\000\144\004\125\006\075\007\011" +
    "\010\053\011\027\012\046\017\112\033\072\044\142\056" +
    "\130\057\025\067\131\070\012\071\017\072\040\073\041" +
    "\074\115\075\006\076\030\106\113\107\034\113\024\114" +
    "\061\115\043\116\110\117\074\124\054\162\073\163\057" +
    "\167\126\170\015\172\045\173\133\174\023\175\117\176" +
    "\033\177\111\200\064\201\120\202\060\203\031\204\044" +
    "\206\066\212\035\220\132\223\070\224\101\225\051\231" +
    "\103\001\002\000\144\004\125\006\075\007\011\010\053" +
    "\011\027\012\046\017\112\033\072\044\142\056\130\057" +
    "\025\067\131\070\012\071\017\072\040\073\041\074\115" +
    "\075\006\076\030\106\113\107\034\113\024\114\061\115" +
    "\043\116\110\117\074\124\054\162\073\163\057\167\126" +
    "\170\015\172\045\173\133\174\023\175\117\176\033\177" +
    "\111\200\064\201\120\202\060\203\031\204\044\206\066" +
    "\212\035\220\132\223\070\224\101\225\051\231\103\001" +
    "\002\000\002\001\uff19\000\004\147\143\001\uffdb\000\002" +
    "\001\uff03\000\002\001\ufff7\000\012\011\027\016\u01a0\100" +
    "\u019f\101\u019e\001\002\000\002\001\ufedd\000\002\001\uff11" +
    "\000\002\001\uffe2\000\002\001\ufede\000\204\003\104\004" +
    "\125\005\137\006\075\007\011\010\053\011\027\012\046" +
    "\015\065\017\112\021\106\022\036\024\026\033\072\035" +
    "\114\041\050\042\107\043\063\044\142\046\121\051\135" +
    "\054\134\056\130\057\025\067\131\070\012\071\017\072" +
    "\040\073\041\074\115\075\006\076\030\102\055\106\113" +
    "\107\034\111\021\113\024\114\061\115\043\116\110\117" +
    "\074\124\054\142\010\162\073\163\057\167\126\170\015" +
    "\172\045\173\133\174\023\175\117\176\033\177\111\200" +
    "\064\201\120\202\060\203\031\204\044\206\066\212\035" +
    "\220\132\223\070\224\101\225\051\231\103\001\002\000" +
    "\146\004\125\006\075\007\011\010\053\011\027\012\046" +
    "\017\112\033\072\044\142\056\130\057\025\067\131\070" +
    "\012\071\017\072\040\073\041\074\115\075\006\076\030" +
    "\106\113\107\034\113\024\114\061\115\043\116\110\117" +
    "\074\124\054\142\u0192\162\073\163\057\167\126\170\015" +
    "\172\045\173\133\174\023\175\117\176\033\177\111\200" +
    "\064\201\120\202\060\203\031\204\044\206\066\212\035" +
    "\220\132\223\070\224\101\225\051\231\103\001\002\000" +
    "\144\004\125\006\075\007\011\010\053\011\027\012\046" +
    "\017\112\033\072\044\142\056\130\057\025\067\131\070" +
    "\012\071\017\072\040\073\041\074\115\075\006\076\030" +
    "\106\113\107\034\113\024\114\061\115\043\116\110\117" +
    "\074\124\054\162\073\163\057\167\126\170\015\172\045" +
    "\173\133\174\023\175\117\176\033\177\111\200\064\201" +
    "\120\202\060\203\031\204\044\206\066\212\035\220\132" +
    "\223\070\224\101\225\051\231\103\001\002\000\144\004" +
    "\125\006\075\007\011\010\053\011\027\012\046\017\112" +
    "\033\072\044\142\056\130\057\025\067\131\070\012\071" +
    "\017\072\040\073\041\074\115\075\006\076\030\106\113" +
    "\107\034\113\024\114\061\115\043\116\110\117\074\124" +
    "\054\162\073\163\057\167\126\170\015\172\045\173\133" +
    "\174\023\175\117\176\033\177\111\200\064\201\120\202" +
    "\060\203\031\204\044\206\066\212\035\220\132\223\070" +
    "\224\101\225\051\231\103\001\002\000\002\001\uff16\000" +
    "\002\001\uff0e\000\004\220\u0177\001\002\000\002\001\uff15" +
    "\000\002\001\uffdd\000\144\004\125\006\075\007\011\010" +
    "\053\011\027\012\046\017\112\033\072\044\142\056\130" +
    "\057\025\067\131\070\012\071\017\072\040\073\041\074" +
    "\115\075\006\076\030\106\113\107\034\113\024\114\061" +
    "\115\043\116\110\117\074\124\054\162\073\163\057\167" +
    "\126\170\015\172\045\173\133\174\023\175\117\176\033" +
    "\177\111\200\064\201\120\202\060\203\031\204\044\206" +
    "\066\212\035\220\132\223\070\224\101\225\051\231\103" +
    "\001\002\000\144\004\125\006\075\007\011\010\053\011" +
    "\027\012\046\017\112\033\072\044\142\056\130\057\025" +
    "\067\131\070\012\071\017\072\040\073\041\074\115\075" +
    "\006\076\030\106\113\107\034\113\024\114\061\115\043" +
    "\116\110\117\074\124\054\162\073\163\057\167\126\170" +
    "\015\172\045\173\133\174\023\175\117\176\033\177\111" +
    "\200\064\201\120\202\060\203\031\204\044\206\066\212" +
    "\035\220\132\223\070\224\101\225\051\231\103\001\002" +
    "\000\146\004\125\006\075\007\011\010\053\011\027\012" +
    "\046\017\112\033\072\044\142\056\130\057\025\067\131" +
    "\070\012\071\017\072\040\073\041\074\115\075\006\076" +
    "\030\106\113\107\034\113\024\114\061\115\043\116\110" +
    "\117\074\124\054\142\u0144\162\073\163\057\167\126\170" +
    "\015\172\045\173\133\174\023\175\117\176\033\177\111" +
    "\200\064\201\120\202\060\203\031\204\044\206\066\212" +
    "\035\220\132\223\070\224\101\225\051\231\103\001\002" +
    "\000\002\001\ufef5\000\004\104\u0142\001\002\000\002\001" +
    "\ufef6\000\004\220\u013d\001\uff21\000\144\004\125\006\075" +
    "\007\011\010\053\011\027\012\046\017\112\033\072\044" +
    "\142\056\130\057\025\067\131\070\012\071\017\072\040" +
    "\073\041\074\115\075\006\076\030\106\113\107\034\113" +
    "\024\114\061\115\043\116\110\117\074\124\054\162\073" +
    "\163\057\167\126\170\015\172\045\173\133\174\023\175" +
    "\117\176\033\177\111\200\064\201\120\202\060\203\031" +
    "\204\044\206\066\212\035\220\132\223\070\224\101\225" +
    "\051\231\103\001\002\000\002\001\ufffd\000\004\220\u0136" +
    "\001\002\000\004\220\u0129\001\002\000\144\004\125\006" +
    "\075\007\011\010\053\011\027\012\046\017\112\033\072" +
    "\044\142\056\130\057\025\067\131\070\012\071\017\072" +
    "\040\073\041\074\115\075\006\076\030\106\113\107\034" +
    "\113\024\114\061\115\043\116\110\117\074\124\054\162" +
    "\073\163\057\167\126\170\015\172\045\173\133\174\023" +
    "\175\117\176\033\177\111\200\064\201\120\202\060\203" +
    "\031\204\044\206\066\212\035\220\132\223\070\224\101" +
    "\225\051\231\103\001\002\000\012\011\027\070\306\212" +
    "\212\223\070\001\002\000\004\011\u010d\001\002\000\144" +
    "\004\125\006\075\007\011\010\053\011\027\012\046\017" +
    "\112\033\072\044\142\056\130\057\025\067\131\070\012" +
    "\071\017\072\040\073\041\074\115\075\006\076\030\106" +
    "\113\107\034\113\024\114\061\115\043\116\110\117\074" +
    "\124\054\162\073\163\057\167\126\170\015\172\045\173" +
    "\133\174\023\175\117\176\033\177\111\200\064\201\120" +
    "\202\060\203\031\204\044\206\066\212\035\220\132\223" +
    "\070\224\101\225\051\231\103\001\002\000\002\001\uffff" +
    "\000\004\220\140\001\002\000\144\004\125\006\075\007" +
    "\011\010\053\011\027\012\046\017\112\033\072\044\142" +
    "\056\130\057\025\067\131\070\012\071\017\072\040\073" +
    "\041\074\115\075\006\076\030\106\113\107\034\113\024" +
    "\114\061\115\043\116\110\117\074\124\054\162\073\163" +
    "\057\167\126\170\015\172\045\173\133\174\023\175\117" +
    "\176\033\177\111\200\064\201\120\202\060\203\031\204" +
    "\044\206\066\212\035\220\132\223\070\224\101\225\051" +
    "\231\103\001\002\000\070\032\263\121\252\122\273\123" +
    "\244\141\247\143\243\144\264\145\245\146\254\147\265" +
    "\150\271\151\256\152\241\153\253\154\270\155\266\156" +
    "\250\157\267\160\262\161\255\162\272\163\251\164\261" +
    "\165\257\166\242\171\246\221\260\001\002\000\004\147" +
    "\143\001\uffdb\000\002\001\uffda\000\004\220\145\001\002" +
    "\000\004\221\uffaf\001\uffaa\000\006\011\200\013\177\001" +
    "\002\000\004\221\154\001\002\000\004\120\152\001\uffb0" +
    "\000\002\001\uffae\000\002\001\uffaa\000\002\001\uffad\000" +
    "\004\052\155\001\uff2d\000\004\220\165\001\002\000\004" +
    "\102\157\001\002\000\002\001\ufffa\000\206\003\104\004" +
    "\125\005\137\006\075\007\011\010\053\011\027\012\046" +
    "\015\065\017\112\021\106\022\036\024\026\033\072\035" +
    "\114\041\050\042\107\043\063\044\076\046\121\051\135" +
    "\054\134\056\130\057\025\067\131\070\012\071\017\072" +
    "\040\073\041\074\115\075\006\076\030\102\055\103\163" +
    "\106\113\107\034\111\021\113\024\114\061\115\043\116" +
    "\110\117\074\124\054\142\010\162\073\163\057\167\126" +
    "\170\015\172\045\173\133\174\023\175\117\176\033\177" +
    "\111\200\064\201\120\202\060\203\031\204\044\206\066" +
    "\212\035\220\132\223\070\224\101\225\051\231\103\001" +
    "\002\000\002\001\ufffb\000\002\001\ufff8\000\002\001\uff2f" +
    "\000\002\001\ufff9\000\006\013\170\147\166\001\002\000" +
    "\004\013\176\001\002\000\006\120\172\221\171\001\002" +
    "\000\002\001\uff29\000\002\001\uff2c\000\006\013\174\147" +
    "\173\001\002\000\004\013\175\001\002\000\002\001\uff2b" +
    "\000\002\001\uff2a\000\002\001\uff28\000\004\125\201\001" +
    "\002\000\002\001\uffac\000\046\006\075\007\011\010\053" +
    "\017\112\070\206\071\017\072\040\073\041\074\115\075" +
    "\006\076\202\106\113\107\034\162\213\163\204\204\207" +
    "\212\212\231\103\001\002\000\006\016\237\077\236\001" +
    "\002\000\002\001\uff0b\000\046\006\075\007\011\010\053" +
    "\017\112\070\206\071\017\072\040\073\041\074\115\075" +
    "\006\076\202\106\113\107\034\162\213\163\204\204\207" +
    "\212\212\231\103\001\002\000\002\001\uff06\000\004\220" +
    "\232\001\uff25\000\046\006\075\007\011\010\053\017\112" +
    "\070\206\071\017\072\040\073\041\074\115\075\006\076" +
    "\202\106\113\107\034\162\213\163\204\204\207\212\212" +
    "\231\103\001\uff00\000\004\104\215\001\002\000\002\001" +
    "\uffab\000\002\001\uff26\000\046\006\075\007\011\010\053" +
    "\017\112\070\206\071\017\072\040\073\041\074\115\075" +
    "\006\076\202\106\113\107\034\162\213\163\204\204\207" +
    "\212\212\231\103\001\002\000\002\001\uff0a\000\004\011" +
    "\216\001\002\000\002\001\uff05\000\004\205\231\001\002" +
    "\000\004\120\224\001\ufefe\000\004\066\222\001\ufef9\000" +
    "\046\006\075\007\011\010\053\017\112\070\206\071\017" +
    "\072\040\073\041\074\115\075\006\076\202\106\113\107" +
    "\034\162\213\163\204\204\207\212\212\231\103\001\002" +
    "\000\002\001\ufefa\000\046\006\075\007\011\010\053\017" +
    "\112\070\206\071\017\072\040\073\041\074\115\075\006" +
    "\076\202\106\113\107\034\162\213\163\204\204\207\212" +
    "\212\231\103\001\ufefd\000\002\001\ufeff\000\004\066\227" +
    "\001\ufefb\000\046\006\075\007\011\010\053\017\112\070" +
    "\206\071\017\072\040\073\041\074\115\075\006\076\202" +
    "\106\113\107\034\162\213\163\204\204\207\212\212\231" +
    "\103\001\002\000\002\001\ufefc\000\002\001\uff07\000\046" +
    "\006\075\007\011\010\053\017\112\070\206\071\017\072" +
    "\040\073\041\074\115\075\006\076\202\106\113\107\034" +
    "\162\213\163\204\204\207\212\212\231\103\001\uff00\000" +
    "\004\221\234\001\002\000\002\001\uff08\000\002\001\uff09" +
    "\000\002\001\uff0c\000\004\077\240\001\002\000\002\001" +
    "\uff0d\000\144\004\125\006\075\007\011\010\053\011\027" +
    "\012\046\017\112\033\072\044\142\056\130\057\025\067" +
    "\131\070\012\071\017\072\040\073\041\074\115\075\006" +
    "\076\030\106\113\107\034\113\024\114\061\115\043\116" +
    "\110\117\074\124\054\162\073\163\057\167\126\170\015" +
    "\172\045\173\133\174\023\175\117\176\033\177\111\200" +
    "\064\201\120\202\060\203\031\204\044\206\066\212\035" +
    "\220\132\223\070\224\101\225\051\231\103\001\002\000" +
    "\144\004\125\006\075\007\011\010\053\011\027\012\046" +
    "\017\112\033\072\044\142\056\130\057\025\067\131\070" +
    "\012\071\017\072\040\073\041\074\115\075\006\076\030" +
    "\106\113\107\034\113\024\114\061\115\043\116\110\117" +
    "\074\124\054\162\073\163\057\167\126\170\015\172\045" +
    "\173\133\174\023\175\117\176\033\177\111\200\064\201" +
    "\120\202\060\203\031\204\044\206\066\212\035\220\132" +
    "\223\070\224\101\225\051\231\103\001\002\000\144\004" +
    "\125\006\075\007\011\010\053\011\027\012\046\017\112" +
    "\033\072\044\142\056\130\057\025\067\131\070\012\071" +
    "\017\072\040\073\041\074\115\075\006\076\030\106\113" +
    "\107\034\113\024\114\061\115\043\116\110\117\074\124" +
    "\054\162\073\163\057\167\126\170\015\172\045\173\133" +
    "\174\023\175\117\176\033\177\111\200\064\201\120\202" +
    "\060\203\031\204\044\206\066\212\035\220\132\223\070" +
    "\224\101\225\051\231\103\001\002\000\144\004\125\006" +
    "\075\007\011\010\053\011\027\012\046\017\112\033\072" +
    "\044\142\056\130\057\025\067\131\070\012\071\017\072" +
    "\040\073\041\074\115\075\006\076\030\106\113\107\034" +
    "\113\024\114\061\115\043\116\110\117\074\124\054\162" +
    "\073\163\057\167\126\170\015\172\045\173\133\174\023" +
    "\175\117\176\033\177\111\200\064\201\120\202\060\203" +
    "\031\204\044\206\066\212\035\220\132\223\070\224\101" +
    "\225\051\231\103\001\002\000\144\004\125\006\075\007" +
    "\011\010\053\011\027\012\046\017\112\033\072\044\142" +
    "\056\130\057\025\067\131\070\012\071\017\072\040\073" +
    "\041\074\115\075\006\076\030\106\113\107\034\113\024" +
    "\114\061\115\043\116\110\117\074\124\054\162\073\163" +
    "\057\167\126\170\015\172\045\173\133\174\023\175\117" +
    "\176\033\177\111\200\064\201\120\202\060\203\031\204" +
    "\044\206\066\212\035\220\132\223\070\224\101\225\051" +
    "\231\103\001\002\000\144\004\125\006\075\007\011\010" +
    "\053\011\027\012\046\017\112\033\072\044\142\056\130" +
    "\057\025\067\131\070\012\071\017\072\040\073\041\074" +
    "\115\075\006\076\030\106\113\107\034\113\024\114\061" +
    "\115\043\116\110\117\074\124\054\162\073\163\057\167" +
    "\126\170\015\172\045\173\133\174\023\175\117\176\033" +
    "\177\111\200\064\201\120\202\060\203\031\204\044\206" +
    "\066\212\035\220\132\223\070\224\101\225\051\231\103" +
    "\001\002\000\146\004\125\006\075\007\011\010\053\011" +
    "\027\012\046\017\112\033\072\044\142\056\130\057\025" +
    "\067\131\070\012\071\017\072\040\073\041\074\115\075" +
    "\006\076\030\106\113\107\034\113\024\114\061\115\043" +
    "\116\110\117\074\124\054\162\073\163\057\167\126\170" +
    "\015\172\045\173\133\174\023\175\117\176\033\177\111" +
    "\200\064\201\120\202\060\203\031\204\044\206\066\212" +
    "\035\220\132\222\377\223\070\224\101\225\051\231\103" +
    "\001\002\000\144\004\125\006\075\007\011\010\053\011" +
    "\027\012\046\017\112\033\072\044\142\056\130\057\025" +
    "\067\131\070\012\071\017\072\040\073\041\074\115\075" +
    "\006\076\030\106\113\107\034\113\024\114\061\115\043" +
    "\116\110\117\074\124\054\162\073\163\057\167\126\170" +
    "\015\172\045\173\133\174\023\175\117\176\033\177\111" +
    "\200\064\201\120\202\060\203\031\204\044\206\066\212" +
    "\035\220\132\223\070\224\101\225\051\231\103\001\002" +
    "\000\144\004\125\006\075\007\011\010\053\011\027\012" +
    "\046\017\112\033\072\044\142\056\130\057\025\067\131" +
    "\070\012\071\017\072\040\073\041\074\115\075\006\076" +
    "\030\106\113\107\034\113\024\114\061\115\043\116\110" +
    "\117\074\124\054\162\073\163\057\167\126\170\015\172" +
    "\045\173\133\174\023\175\117\176\033\177\111\200\064" +
    "\201\120\202\060\203\031\204\044\206\066\212\035\220" +
    "\132\223\070\224\101\225\051\231\103\001\002\000\144" +
    "\004\125\006\075\007\011\010\053\011\027\012\046\017" +
    "\112\033\072\044\142\056\130\057\025\067\131\070\012" +
    "\071\017\072\040\073\041\074\115\075\006\076\030\106" +
    "\113\107\034\113\024\114\061\115\043\116\110\117\074" +
    "\124\054\162\073\163\057\167\126\170\015\172\045\173" +
    "\133\174\023\175\117\176\033\177\111\200\064\201\120" +
    "\202\060\203\031\204\044\206\066\212\035\220\132\223" +
    "\070\224\101\225\051\231\103\001\002\000\144\004\125" +
    "\006\075\007\011\010\053\011\027\012\046\017\112\033" +
    "\072\044\142\056\130\057\025\067\131\070\012\071\017" +
    "\072\040\073\041\074\115\075\006\076\030\106\113\107" +
    "\034\113\024\114\061\115\043\116\110\117\074\124\054" +
    "\162\073\163\057\167\126\170\015\172\045\173\133\174" +
    "\023\175\117\176\033\177\111\200\064\201\120\202\060" +
    "\203\031\204\044\206\066\212\035\220\132\223\070\224" +
    "\101\225\051\231\103\001\002\000\144\004\125\006\075" +
    "\007\011\010\053\011\027\012\046\017\112\033\072\044" +
    "\142\056\130\057\025\067\131\070\012\071\017\072\040" +
    "\073\041\074\115\075\006\076\030\106\113\107\034\113" +
    "\024\114\061\115\043\116\110\117\074\124\054\162\073" +
    "\163\057\167\126\170\015\172\045\173\133\174\023\175" +
    "\117\176\033\177\111\200\064\201\120\202\060\203\031" +
    "\204\044\206\066\212\035\220\132\223\070\224\101\225" +
    "\051\231\103\001\002\000\144\004\125\006\075\007\011" +
    "\010\053\011\027\012\046\017\112\033\072\044\142\056" +
    "\130\057\025\067\131\070\012\071\017\072\040\073\041" +
    "\074\115\075\006\076\030\106\113\107\034\113\024\114" +
    "\061\115\043\116\110\117\074\124\054\162\073\163\057" +
    "\167\126\170\015\172\045\173\133\174\023\175\117\176" +
    "\033\177\111\200\064\201\120\202\060\203\031\204\044" +
    "\206\066\212\035\220\132\223\070\224\101\225\051\231" +
    "\103\001\002\000\144\004\125\006\075\007\011\010\053" +
    "\011\027\012\046\017\112\033\072\044\142\056\130\057" +
    "\025\067\131\070\012\071\017\072\040\073\041\074\115" +
    "\075\006\076\030\106\113\107\034\113\024\114\061\115" +
    "\043\116\110\117\074\124\054\162\073\163\057\167\126" +
    "\170\015\172\045\173\133\174\023\175\117\176\033\177" +
    "\111\200\064\201\120\202\060\203\031\204\044\206\066" +
    "\212\035\220\132\223\070\224\101\225\051\231\103\001" +
    "\002\000\144\004\125\006\075\007\011\010\053\011\027" +
    "\012\046\017\112\033\072\044\142\056\130\057\025\067" +
    "\131\070\012\071\017\072\040\073\041\074\115\075\006" +
    "\076\030\106\113\107\034\113\024\114\061\115\043\116" +
    "\110\117\074\124\054\162\073\163\057\167\126\170\015" +
    "\172\045\173\133\174\023\175\117\176\033\177\111\200" +
    "\064\201\120\202\060\203\031\204\044\206\066\212\035" +
    "\220\132\223\070\224\101\225\051\231\103\001\002\000" +
    "\206\003\104\004\125\005\137\006\075\007\011\010\053" +
    "\011\027\012\046\015\065\017\112\021\106\022\036\024" +
    "\026\033\072\035\114\041\050\042\107\043\063\044\142" +
    "\046\121\051\135\054\134\056\130\057\025\067\131\070" +
    "\012\071\017\072\040\073\041\074\115\075\006\076\030" +
    "\102\055\106\113\107\034\111\021\113\024\114\061\115" +
    "\043\116\110\117\074\124\054\142\010\162\073\163\057" +
    "\167\126\170\015\172\045\173\133\174\023\175\117\176" +
    "\033\177\111\200\064\201\120\202\060\203\031\204\044" +
    "\206\066\212\035\220\132\222\336\223\070\224\101\225" +
    "\051\231\103\001\002\000\144\004\125\006\075\007\011" +
    "\010\053\011\027\012\046\017\112\033\072\044\142\056" +
    "\130\057\025\067\131\070\012\071\017\072\040\073\041" +
    "\074\115\075\006\076\030\106\113\107\034\113\024\114" +
    "\061\115\043\116\110\117\074\124\054\162\073\163\057" +
    "\167\126\170\015\172\045\173\133\174\023\175\117\176" +
    "\033\177\111\200\064\201\120\202\060\203\031\204\044" +
    "\206\066\212\035\220\132\223\070\224\101\225\051\231" +
    "\103\001\002\000\144\004\125\006\075\007\011\010\053" +
    "\011\027\012\046\017\112\033\072\044\142\056\130\057" +
    "\025\067\131\070\012\071\017\072\040\073\041\074\115" +
    "\075\006\076\030\106\113\107\034\113\024\114\061\115" +
    "\043\116\110\117\074\124\054\162\073\163\057\167\126" +
    "\170\015\172\045\173\133\174\023\175\117\176\033\177" +
    "\111\200\064\201\120\202\060\203\031\204\044\206\066" +
    "\212\035\220\132\223\070\224\101\225\051\231\103\001" +
    "\002\000\012\011\027\070\306\212\212\223\070\001\002" +
    "\000\144\004\125\006\075\007\011\010\053\011\027\012" +
    "\046\017\112\033\072\044\142\056\130\057\025\067\131" +
    "\070\012\071\017\072\040\073\041\074\115\075\006\076" +
    "\030\106\113\107\034\113\024\114\061\115\043\116\110" +
    "\117\074\124\054\162\073\163\057\167\126\170\015\172" +
    "\045\173\133\174\023\175\117\176\033\177\111\200\064" +
    "\201\120\202\060\203\031\204\044\206\066\212\035\220" +
    "\132\223\070\224\101\225\051\231\103\001\002\000\144" +
    "\004\125\006\075\007\011\010\053\011\027\012\046\017" +
    "\112\033\072\044\142\056\130\057\025\067\131\070\012" +
    "\071\017\072\040\073\041\074\115\075\006\076\030\106" +
    "\113\107\034\113\024\114\061\115\043\116\110\117\074" +
    "\124\054\162\073\163\057\167\126\170\015\172\045\173" +
    "\133\174\023\175\117\176\033\177\111\200\064\201\120" +
    "\202\060\203\031\204\044\206\066\212\035\220\132\223" +
    "\070\224\101\225\051\231\103\001\002\000\144\004\125" +
    "\006\075\007\011\010\053\011\027\012\046\017\112\033" +
    "\072\044\142\056\130\057\025\067\131\070\012\071\017" +
    "\072\040\073\041\074\115\075\006\076\030\106\113\107" +
    "\034\113\024\114\061\115\043\116\110\117\074\124\054" +
    "\162\073\163\057\167\126\170\015\172\045\173\133\174" +
    "\023\175\117\176\033\177\111\200\064\201\120\202\060" +
    "\203\031\204\044\206\066\212\035\220\132\223\070\224" +
    "\101\225\051\231\103\001\002\000\144\004\125\006\075" +
    "\007\011\010\053\011\027\012\046\017\112\033\072\044" +
    "\142\056\130\057\025\067\131\070\012\071\017\072\040" +
    "\073\041\074\115\075\006\076\030\106\113\107\034\113" +
    "\024\114\061\115\043\116\110\117\074\124\054\162\073" +
    "\163\057\167\126\170\015\172\045\173\133\174\023\175" +
    "\117\176\033\177\111\200\064\201\120\202\060\203\031" +
    "\204\044\206\066\212\035\220\132\223\070\224\101\225" +
    "\051\231\103\001\002\000\144\004\125\006\075\007\011" +
    "\010\053\011\027\012\046\017\112\033\072\044\142\056" +
    "\130\057\025\067\131\070\012\071\017\072\040\073\041" +
    "\074\115\075\006\076\030\106\113\107\034\113\024\114" +
    "\061\115\043\116\110\117\074\124\054\162\073\163\057" +
    "\167\126\170\015\172\045\173\133\174\023\175\117\176" +
    "\033\177\111\200\064\201\120\202\060\203\031\204\044" +
    "\206\066\212\035\220\132\223\070\224\101\225\051\231" +
    "\103\001\002\000\144\004\125\006\075\007\011\010\053" +
    "\011\027\012\046\017\112\033\072\044\142\056\130\057" +
    "\025\067\131\070\012\071\017\072\040\073\041\074\115" +
    "\075\006\076\030\106\113\107\034\113\024\114\061\115" +
    "\043\116\110\117\074\124\054\162\073\163\057\167\126" +
    "\170\015\172\045\173\133\174\023\175\117\176\033\177" +
    "\111\200\064\201\120\202\060\203\031\204\044\206\066" +
    "\212\035\220\132\223\070\224\101\225\051\231\103\001" +
    "\002\000\144\004\125\006\075\007\011\010\053\011\027" +
    "\012\046\017\112\033\072\044\142\056\130\057\025\067" +
    "\131\070\012\071\017\072\040\073\041\074\115\075\006" +
    "\076\030\106\113\107\034\113\024\114\061\115\043\116" +
    "\110\117\074\124\054\162\073\163\057\167\126\170\015" +
    "\172\045\173\133\174\023\175\117\176\033\177\111\200" +
    "\064\201\120\202\060\203\031\204\044\206\066\212\035" +
    "\220\132\223\070\224\101\225\051\231\103\001\002\000" +
    "\144\004\125\006\075\007\011\010\053\011\027\012\046" +
    "\017\112\033\072\044\142\056\130\057\025\067\131\070" +
    "\012\071\017\072\040\073\041\074\115\075\006\076\030" +
    "\106\113\107\034\113\024\114\061\115\043\116\110\117" +
    "\074\124\054\162\073\163\057\167\126\170\015\172\045" +
    "\173\133\174\023\175\117\176\033\177\111\200\064\201" +
    "\120\202\060\203\031\204\044\206\066\212\035\220\132" +
    "\223\070\224\101\225\051\231\103\001\002\000\062\032" +
    "\263\123\244\141\247\143\243\144\264\145\245\146\254" +
    "\147\265\150\271\151\256\152\241\153\253\154\270\155" +
    "\266\156\250\157\267\160\262\161\255\162\272\163\251" +
    "\164\261\165\257\166\242\171\246\001\uff5c\000\012\032" +
    "\263\164\261\165\257\166\242\001\uff57\000\034\032\263" +
    "\154\270\155\266\156\250\157\267\160\262\161\255\162" +
    "\272\163\251\164\261\165\257\166\242\171\246\001\uff4a" +
    "\000\024\032\263\160\262\161\255\162\272\163\251\164" +
    "\261\165\257\166\242\171\246\001\uff47\000\024\032\263" +
    "\160\262\161\255\162\272\163\251\164\261\165\257\166" +
    "\242\171\246\001\uff46\000\024\032\263\160\262\161\255" +
    "\162\272\163\251\164\261\165\257\166\242\171\246\001" +
    "\uff45\000\044\032\263\150\271\151\256\152\241\153\253" +
    "\154\270\155\266\156\250\157\267\160\262\161\255\162" +
    "\272\163\251\164\261\165\257\166\242\171\246\001\uff5a" +
    "\000\052\032\263\145\245\146\254\147\265\150\271\151" +
    "\256\152\241\153\253\154\270\155\266\156\250\157\267" +
    "\160\262\161\255\162\272\163\251\164\261\165\257\166" +
    "\242\171\246\001\uff5f\000\002\001\uff44\000\002\001\uff22" +
    "\000\002\001\uff25\000\002\001\uff23\000\004\104\327\001" +
    "\uff24\000\006\011\027\223\323\001\002\000\010\102\313" +
    "\104\ufee6\204\314\001\ufee3\000\144\004\125\006\075\007" +
    "\011\010\053\011\027\012\046\017\112\033\072\044\142" +
    "\056\130\057\025\067\131\070\012\071\017\072\040\073" +
    "\041\074\115\075\006\076\030\106\113\107\034\113\024" +
    "\114\061\115\043\116\110\117\074\124\054\162\073\163" +
    "\057\167\126\170\015\172\045\173\133\174\023\175\117" +
    "\176\033\177\111\200\064\201\120\202\060\203\031\204" +
    "\044\206\066\212\035\220\132\223\070\224\101\225\051" +
    "\231\103\001\002\000\144\004\125\006\075\007\011\010" +
    "\053\011\027\012\046\017\112\033\072\044\142\056\130" +
    "\057\025\067\131\070\012\071\017\072\040\073\041\074" +
    "\115\075\006\076\030\106\113\107\034\113\024\114\061" +
    "\115\043\116\110\117\074\124\054\162\073\163\057\167" +
    "\126\170\015\172\045\173\133\174\023\175\117\176\033" +
    "\177\111\200\064\201\120\202\060\203\031\204\044\206" +
    "\066\212\035\220\132\223\070\224\101\225\051\231\103" +
    "\001\002\000\004\205\317\001\002\000\066\032\263\121" +
    "\252\122\273\123\244\141\247\143\243\144\264\145\245" +
    "\146\254\147\265\150\271\151\256\152\241\153\253\154" +
    "\270\155\266\156\250\157\267\160\262\161\255\162\272" +
    "\163\251\164\261\165\257\166\242\171\246\001\ufedb\000" +
    "\002\001\ufee0\000\070\032\263\103\321\121\252\122\273" +
    "\123\244\141\247\143\243\144\264\145\245\146\254\147" +
    "\265\150\271\151\256\152\241\153\253\154\270\155\266" +
    "\156\250\157\267\160\262\161\255\162\272\163\251\164" +
    "\261\165\257\166\242\171\246\001\002\000\002\001\ufedf" +
    "\000\006\102\313\204\314\001\ufee2\000\004\102\324\001" +
    "\ufed7\000\144\004\125\006\075\007\011\010\053\011\027" +
    "\012\046\017\112\033\072\044\142\056\130\057\025\067" +
    "\131\070\012\071\017\072\040\073\041\074\115\075\006" +
    "\076\030\106\113\107\034\113\024\114\061\115\043\116" +
    "\110\117\074\124\054\162\073\163\057\167\126\170\015" +
    "\172\045\173\133\174\023\175\117\176\033\177\111\200" +
    "\064\201\120\202\060\203\031\204\044\206\066\212\035" +
    "\220\132\223\070\224\101\225\051\231\103\001\002\000" +
    "\070\032\263\103\326\121\252\122\273\123\244\141\247" +
    "\143\243\144\264\145\245\146\254\147\265\150\271\151" +
    "\256\152\241\153\253\154\270\155\266\156\250\157\267" +
    "\160\262\161\255\162\272\163\251\164\261\165\257\166" +
    "\242\171\246\001\002\000\002\001\ufedc\000\006\011\027" +
    "\223\070\001\002\000\002\001\ufee8\000\006\011\027\223" +
    "\323\001\002\000\006\102\313\204\314\001\ufeea\000\006" +
    "\102\313\204\314\001\ufee9\000\020\032\263\162\272\163" +
    "\251\164\261\165\257\166\242\171\246\001\uff52\000\004" +
    "\032\263\001\uff55\000\002\001\ufffa\000\002\001\uffb8\000" +
    "\006\210\343\211\342\001\uffb4\000\002\001\ufff5\000\204" +
    "\003\104\004\125\005\137\006\075\007\011\010\053\011" +
    "\027\012\046\015\065\017\112\021\106\022\036\024\026" +
    "\033\072\035\114\041\050\042\107\043\063\044\142\046" +
    "\121\051\135\054\134\056\130\057\025\067\131\070\012" +
    "\071\017\072\040\073\041\074\115\075\006\076\030\102" +
    "\055\106\113\107\034\111\021\113\024\114\061\115\043" +
    "\116\110\117\074\124\054\142\010\162\073\163\057\167" +
    "\126\170\015\172\045\173\133\174\023\175\117\176\033" +
    "\177\111\200\064\201\120\202\060\203\031\204\044\206" +
    "\066\212\035\220\132\223\070\224\101\225\051\231\103" +
    "\001\002\000\004\220\344\001\002\000\144\004\125\006" +
    "\075\007\011\010\053\011\027\012\046\017\112\033\072" +
    "\044\142\056\130\057\025\067\131\070\012\071\017\072" +
    "\040\073\041\074\115\075\006\076\030\106\113\107\034" +
    "\113\024\114\061\115\043\116\110\117\074\124\054\162" +
    "\073\163\057\167\126\170\015\172\045\173\133\174\023" +
    "\175\117\176\033\177\111\200\064\201\120\202\060\203" +
    "\031\204\044\206\066\212\035\220\132\223\070\224\101" +
    "\225\051\231\103\001\002\000\070\032\263\121\252\122" +
    "\273\123\244\141\247\143\243\144\264\145\245\146\254" +
    "\147\265\150\271\151\256\152\241\153\253\154\270\155" +
    "\266\156\250\157\267\160\262\161\255\162\272\163\251" +
    "\164\261\165\257\166\242\171\246\221\346\001\002\000" +
    "\204\003\104\004\125\005\137\006\075\007\011\010\053" +
    "\011\027\012\046\015\065\017\112\021\106\022\036\024" +
    "\026\033\072\035\114\041\050\042\107\043\063\044\142" +
    "\046\121\051\135\054\134\056\130\057\025\067\131\070" +
    "\012\071\017\072\040\073\041\074\115\075\006\076\030" +
    "\102\055\106\113\107\034\111\021\113\024\114\061\115" +
    "\043\116\110\117\074\124\054\142\010\162\073\163\057" +
    "\167\126\170\015\172\045\173\133\174\023\175\117\176" +
    "\033\177\111\200\064\201\120\202\060\203\031\204\044" +
    "\206\066\212\035\220\132\223\070\224\101\225\051\231" +
    "\103\001\002\000\002\001\uffb7\000\002\001\uffb3\000\204" +
    "\003\104\004\125\005\137\006\075\007\011\010\053\011" +
    "\027\012\046\015\065\017\112\021\106\022\036\024\026" +
    "\033\072\035\114\041\050\042\107\043\063\044\076\046" +
    "\121\051\135\054\134\056\130\057\025\067\131\070\012" +
    "\071\017\072\040\073\041\074\115\075\006\076\030\102" +
    "\055\106\113\107\034\111\021\113\024\114\061\115\043" +
    "\116\110\117\074\124\054\142\010\162\073\163\057\167" +
    "\126\170\015\172\045\173\133\174\023\175\117\176\033" +
    "\177\111\200\064\201\120\202\060\203\031\204\044\206" +
    "\066\212\035\220\132\223\070\224\101\225\051\231\103" +
    "\001\uffb6\000\006\210\355\211\354\001\uffb2\000\004\207" +
    "\365\001\002\000\004\222\363\001\002\000\004\220\356" +
    "\001\002\000\144\004\125\006\075\007\011\010\053\011" +
    "\027\012\046\017\112\033\072\044\142\056\130\057\025" +
    "\067\131\070\012\071\017\072\040\073\041\074\115\075" +
    "\006\076\030\106\113\107\034\113\024\114\061\115\043" +
    "\116\110\117\074\124\054\162\073\163\057\167\126\170" +
    "\015\172\045\173\133\174\023\175\117\176\033\177\111" +
    "\200\064\201\120\202\060\203\031\204\044\206\066\212" +
    "\035\220\132\223\070\224\101\225\051\231\103\001\002" +
    "\000\070\032\263\121\252\122\273\123\244\141\247\143" +
    "\243\144\264\145\245\146\254\147\265\150\271\151\256" +
    "\152\241\153\253\154\270\155\266\156\250\157\267\160" +
    "\262\161\255\162\272\163\251\164\261\165\257\166\242" +
    "\171\246\221\360\001\002\000\004\222\361\001\002\000" +
    "\002\001\ufffa\000\204\003\104\004\125\005\137\006\075" +
    "\007\011\010\053\011\027\012\046\015\065\017\112\021" +
    "\106\022\036\024\026\033\072\035\114\041\050\042\107" +
    "\043\063\044\076\046\121\051\135\054\134\056\130\057" +
    "\025\067\131\070\012\071\017\072\040\073\041\074\115" +
    "\075\006\076\030\102\055\106\113\107\034\111\021\113" +
    "\024\114\061\115\043\116\110\117\074\124\054\142\010" +
    "\162\073\163\057\167\126\170\015\172\045\173\133\174" +
    "\023\175\117\176\033\177\111\200\064\201\120\202\060" +
    "\203\031\204\044\206\066\212\035\220\132\223\070\224" +
    "\101\225\051\231\103\001\uffb5\000\002\001\ufffa\000\204" +
    "\003\104\004\125\005\137\006\075\007\011\010\053\011" +
    "\027\012\046\015\065\017\112\021\106\022\036\024\026" +
    "\033\072\035\114\041\050\042\107\043\063\044\076\046" +
    "\121\051\135\054\134\056\130\057\025\067\131\070\012" +
    "\071\017\072\040\073\041\074\115\075\006\076\030\102" +
    "\055\106\113\107\034\111\021\113\024\114\061\115\043" +
    "\116\110\117\074\124\054\142\010\162\073\163\057\167" +
    "\126\170\015\172\045\173\133\174\023\175\117\176\033" +
    "\177\111\200\064\201\120\202\060\203\031\204\044\206" +
    "\066\212\035\220\132\223\070\224\101\225\051\231\103" +
    "\001\uffb1\000\004\142\366\001\002\000\002\001\ufff4\000" +
    "\004\032\263\001\uff54\000\034\032\263\154\270\155\266" +
    "\156\250\157\267\160\262\161\255\162\272\163\251\164" +
    "\261\165\257\166\242\171\246\001\uff49\000\020\032\263" +
    "\162\272\163\251\164\261\165\257\166\242\171\246\001" +
    "\uff51\000\046\032\263\147\265\150\271\151\256\152\241" +
    "\153\253\154\270\155\266\156\250\157\267\160\262\161" +
    "\255\162\272\163\251\164\261\165\257\166\242\171\246" +
    "\001\uff59\000\034\032\263\154\270\155\266\156\250\157" +
    "\267\160\262\161\255\162\272\163\251\164\261\165\257" +
    "\166\242\171\246\001\uff4b\000\064\032\263\122\273\123" +
    "\244\141\247\143\243\144\264\145\245\146\254\147\265" +
    "\150\271\151\256\152\241\153\253\154\270\155\266\156" +
    "\250\157\267\160\262\161\255\162\272\163\251\164\261" +
    "\165\257\166\242\171\246\001\uff5e\000\012\032\263\164" +
    "\261\165\257\166\242\001\uff56\000\024\032\263\160\262" +
    "\161\255\162\272\163\251\164\261\165\257\166\242\171" +
    "\246\001\uff48\000\144\004\125\006\075\007\011\010\053" +
    "\011\027\012\046\017\112\033\072\044\142\056\130\057" +
    "\025\067\131\070\012\071\017\072\040\073\041\074\115" +
    "\075\006\076\030\106\113\107\034\113\024\114\061\115" +
    "\043\116\110\117\074\124\054\162\073\163\057\167\126" +
    "\170\015\172\045\173\133\174\023\175\117\176\033\177" +
    "\111\200\064\201\120\202\060\203\031\204\044\206\066" +
    "\212\035\220\132\223\070\224\101\225\051\231\103\001" +
    "\002\000\070\032\263\121\252\122\273\123\244\141\247" +
    "\143\243\144\264\145\245\146\254\147\265\150\271\151" +
    "\256\152\241\153\253\154\270\155\266\156\250\157\267" +
    "\160\262\161\255\162\272\163\251\164\261\165\257\166" +
    "\242\171\246\222\u0101\001\002\000\144\004\125\006\075" +
    "\007\011\010\053\011\027\012\046\017\112\033\072\044" +
    "\142\056\130\057\025\067\131\070\012\071\017\072\040" +
    "\073\041\074\115\075\006\076\030\106\113\107\034\113" +
    "\024\114\061\115\043\116\110\117\074\124\054\162\073" +
    "\163\057\167\126\170\015\172\045\173\133\174\023\175" +
    "\117\176\033\177\111\200\064\201\120\202\060\203\031" +
    "\204\044\206\066\212\035\220\132\223\070\224\101\225" +
    "\051\231\103\001\002\000\066\032\263\121\252\122\273" +
    "\123\244\141\247\143\243\144\264\145\245\146\254\147" +
    "\265\150\271\151\256\152\241\153\253\154\270\155\266" +
    "\156\250\157\267\160\262\161\255\162\272\163\251\164" +
    "\261\165\257\166\242\171\246\001\uff40\000\066\032\263" +
    "\121\252\122\273\123\244\141\247\143\243\144\264\145" +
    "\245\146\254\147\265\150\271\151\256\152\241\153\253" +
    "\154\270\155\266\156\250\157\267\160\262\161\255\162" +
    "\272\163\251\164\261\165\257\166\242\171\246\001\uff3f" +
    "\000\012\032\263\164\261\165\257\166\242\001\uff58\000" +
    "\050\032\263\146\254\147\265\150\271\151\256\152\241" +
    "\153\253\154\270\155\266\156\250\157\267\160\262\161" +
    "\255\162\272\163\251\164\261\165\257\166\242\171\246" +
    "\001\uff5b\000\060\032\263\141\247\143\243\144\264\145" +
    "\245\146\254\147\265\150\271\151\256\152\241\153\253" +
    "\154\270\155\266\156\250\157\267\160\262\161\255\162" +
    "\272\163\251\164\261\165\257\166\242\171\246\001\uff5d" +
    "\000\054\032\263\144\264\145\245\146\254\147\265\150" +
    "\271\151\256\152\241\153\253\154\270\155\266\156\250" +
    "\157\267\160\262\161\255\162\272\163\251\164\261\165" +
    "\257\166\242\171\246\001\uff60\000\004\032\263\001\uff53" +
    "\000\034\032\263\154\270\155\266\156\250\157\267\160" +
    "\262\161\255\162\272\163\251\164\261\165\257\166\242" +
    "\171\246\001\uff4c\000\070\032\263\121\252\122\273\123" +
    "\244\141\247\142\u010b\143\243\144\264\145\245\146\254" +
    "\147\265\150\271\151\256\152\241\153\253\154\270\155" +
    "\266\156\250\157\267\160\262\161\255\162\272\163\251" +
    "\164\261\165\257\166\242\171\246\001\002\000\002\001" +
    "\uffe4\000\006\120\u011d\142\u011e\001\002\000\004\125\u010e" +
    "\001\uff9a\000\146\004\125\006\075\007\011\010\053\011" +
    "\027\012\046\017\112\033\072\044\142\056\130\057\025" +
    "\067\131\070\012\071\017\072\040\073\041\074\115\075" +
    "\006\076\030\102\u0110\106\113\107\034\113\024\114\061" +
    "\115\043\116\110\117\074\124\054\162\073\163\057\167" +
    "\126\170\015\172\045\173\133\174\023\175\117\176\033" +
    "\177\111\200\064\201\120\202\060\203\031\204\044\206" +
    "\066\212\035\220\132\223\070\224\101\225\051\231\103" +
    "\001\002\000\002\001\uff99\000\144\004\125\006\075\007" +
    "\011\010\053\011\027\012\046\017\112\033\072\044\142" +
    "\056\130\057\025\067\131\070\012\071\017\072\040\073" +
    "\041\074\115\075\006\076\030\106\113\107\034\113\024" +
    "\114\061\115\043\116\110\117\074\124\054\162\073\163" +
    "\057\167\126\170\015\172\045\173\133\174\023\175\117" +
    "\176\033\177\111\200\064\201\120\202\060\203\031\204" +
    "\044\206\066\212\035\220\132\223\070\224\101\225\051" +
    "\231\103\001\ufed1\000\066\032\263\121\252\122\273\123" +
    "\244\141\247\143\243\144\264\145\245\146\254\147\265" +
    "\150\271\151\256\152\241\153\253\154\270\155\266\156" +
    "\250\157\267\160\262\161\255\162\272\163\251\164\261" +
    "\165\257\166\242\171\246\001\ufef8\000\004\103\u011c\001" +
    "\002\000\070\032\263\121\252\122\273\123\244\141\247" +
    "\143\243\144\264\145\245\146\254\147\265\150\271\151" +
    "\256\152\241\153\253\154\270\155\266\156\250\157\267" +
    "\160\262\161\255\162\272\163\251\164\261\165\257\166" +
    "\242\171\246\222\u011a\001\ufecc\000\004\120\u0115\001\ufefe" +
    "\000\144\004\125\006\075\007\011\010\053\011\027\012" +
    "\046\017\112\033\072\044\142\056\130\057\025\067\131" +
    "\070\012\071\017\072\040\073\041\074\115\075\006\076" +
    "\030\106\113\107\034\113\024\114\061\115\043\116\110" +
    "\117\074\124\054\162\073\163\057\167\126\170\015\172" +
    "\045\173\133\174\023\175\117\176\033\177\111\200\064" +
    "\201\120\202\060\203\031\204\044\206\066\212\035\220" +
    "\132\223\070\224\101\225\051\231\103\001\ufefd\000\002" +
    "\001\ufed0\000\070\032\263\121\252\122\273\123\244\141" +
    "\247\143\243\144\264\145\245\146\254\147\265\150\271" +
    "\151\256\152\241\153\253\154\270\155\266\156\250\157" +
    "\267\160\262\161\255\162\272\163\251\164\261\165\257" +
    "\166\242\171\246\222\u0118\001\ufecd\000\144\004\125\006" +
    "\075\007\011\010\053\011\027\012\046\017\112\033\072" +
    "\044\142\056\130\057\025\067\131\070\012\071\017\072" +
    "\040\073\041\074\115\075\006\076\030\106\113\107\034" +
    "\113\024\114\061\115\043\116\110\117\074\124\054\162" +
    "\073\163\057\167\126\170\015\172\045\173\133\174\023" +
    "\175\117\176\033\177\111\200\064\201\120\202\060\203" +
    "\031\204\044\206\066\212\035\220\132\223\070\224\101" +
    "\225\051\231\103\001\002\000\066\032\263\121\252\122" +
    "\273\123\244\141\247\143\243\144\264\145\245\146\254" +
    "\147\265\150\271\151\256\152\241\153\253\154\270\155" +
    "\266\156\250\157\267\160\262\161\255\162\272\163\251" +
    "\164\261\165\257\166\242\171\246\001\ufecf\000\144\004" +
    "\125\006\075\007\011\010\053\011\027\012\046\017\112" +
    "\033\072\044\142\056\130\057\025\067\131\070\012\071" +
    "\017\072\040\073\041\074\115\075\006\076\030\106\113" +
    "\107\034\113\024\114\061\115\043\116\110\117\074\124" +
    "\054\162\073\163\057\167\126\170\015\172\045\173\133" +
    "\174\023\175\117\176\033\177\111\200\064\201\120\202" +
    "\060\203\031\204\044\206\066\212\035\220\132\223\070" +
    "\224\101\225\051\231\103\001\002\000\066\032\263\121" +
    "\252\122\273\123\244\141\247\143\243\144\264\145\245" +
    "\146\254\147\265\150\271\151\256\152\241\153\253\154" +
    "\270\155\266\156\250\157\267\160\262\161\255\162\272" +
    "\163\251\164\261\165\257\166\242\171\246\001\ufece\000" +
    "\002\001\ufef7\000\004\011\u011f\001\002\000\002\001\uffe8" +
    "\000\004\125\u0120\001\uff9c\000\146\004\125\006\075\007" +
    "\011\010\053\011\027\012\046\017\112\033\072\044\142" +
    "\056\130\057\025\067\131\070\012\071\017\072\040\073" +
    "\041\074\115\075\006\076\030\102\u0110\106\113\107\034" +
    "\113\024\114\061\115\043\116\110\117\074\124\054\162" +
    "\073\163\057\167\126\170\015\172\045\173\133\174\023" +
    "\175\117\176\033\177\111\200\064\201\120\202\060\203" +
    "\031\204\044\206\066\212\035\220\132\223\070\224\101" +
    "\225\051\231\103\001\002\000\002\001\uff9b\000\002\001" +
    "\ufef2\000\002\001\uff61\000\004\221\u0127\001\uff42\000\070" +
    "\032\263\121\252\122\273\123\244\141\247\143\243\144" +
    "\264\145\245\146\254\147\265\150\271\151\256\152\241" +
    "\153\253\154\270\155\266\156\250\157\267\160\262\161" +
    "\255\162\272\163\251\164\261\165\257\166\242\171\246" +
    "\221\u0126\001\002\000\002\001\uff43\000\002\001\uff76\000" +
    "\002\001\uff41\000\014\011\027\067\u012d\070\306\212\212" +
    "\223\070\001\ufed2\000\006\120\u0131\221\u0133\001\002\000" +
    "\002\001\ufed5\000\002\001\ufed4\000\004\220\u012e\001\002" +
    "\000\014\011\027\067\u012d\070\306\212\212\223\070\001" +
    "\ufed2\000\006\120\u0131\221\u0130\001\002\000\002\001\ufed3" +
    "\000\014\011\027\067\u012d\070\306\212\212\223\070\001" +
    "\ufed2\000\002\001\ufed6\000\004\125\u0134\001\002\000\144" +
    "\004\125\006\075\007\011\010\053\011\027\012\046\017" +
    "\112\033\072\044\142\056\130\057\025\067\131\070\012" +
    "\071\017\072\040\073\041\074\115\075\006\076\030\106" +
    "\113\107\034\113\024\114\061\115\043\116\110\117\074" +
    "\124\054\162\073\163\057\167\126\170\015\172\045\173" +
    "\133\174\023\175\117\176\033\177\111\200\064\201\120" +
    "\202\060\203\031\204\044\206\066\212\035\220\132\223" +
    "\070\224\101\225\051\231\103\001\002\000\060\032\263" +
    "\141\247\143\243\144\264\145\245\146\254\147\265\150" +
    "\271\151\256\152\241\153\253\154\270\155\266\156\250" +
    "\157\267\160\262\161\255\162\272\163\251\164\261\165" +
    "\257\166\242\171\246\001\uff74\000\012\011\027\070\306" +
    "\212\212\223\070\001\002\000\002\001\ufeb4\000\006\120" +
    "\u013a\221\u0139\001\002\000\002\001\ufebb\000\012\011\027" +
    "\070\306\212\212\223\070\001\002\000\002\001\ufeb3\000" +
    "\004\032\263\001\uff4e\000\146\004\125\006\075\007\011" +
    "\010\053\011\027\012\046\017\112\033\072\044\142\056" +
    "\130\057\025\067\131\070\012\071\017\072\040\073\041" +
    "\074\115\075\006\076\030\106\113\107\034\113\024\114" +
    "\061\115\043\116\110\117\074\124\054\162\073\163\057" +
    "\167\126\170\015\172\045\173\133\174\023\175\117\176" +
    "\033\177\111\200\064\201\120\202\060\203\031\204\044" +
    "\206\066\212\035\220\132\221\u0140\223\070\224\101\225" +
    "\051\231\103\001\002\000\002\001\uff36\000\070\032\263" +
    "\121\252\122\273\123\244\141\247\143\243\144\264\145" +
    "\245\146\254\147\265\150\271\151\256\152\241\153\253" +
    "\154\270\155\266\156\250\157\267\160\262\161\255\162" +
    "\272\163\251\164\261\165\257\166\242\171\246\221\u0141" +
    "\001\002\000\002\001\uff20\000\002\001\uff1f\000\006\011" +
    "\027\223\070\001\002\000\002\001\ufee7\000\002\001\uffeb" +
    "\000\040\125\u014a\126\u014e\127\u014b\130\u0155\131\u014d\132" +
    "\u0153\133\u0150\134\u0152\135\u014c\136\u0149\137\u014f\140\u0151" +
    "\142\u0154\172\ufef2\173\ufef2\001\ufef4\000\066\032\263\121" +
    "\252\122\273\123\244\141\247\143\243\144\264\145\245" +
    "\146\254\147\265\150\271\151\256\152\241\153\253\154" +
    "\270\155\266\156\250\157\267\160\262\161\255\162\272" +
    "\163\251\164\261\165\257\166\242\171\246\001\002\000" +
    "\004\142\u0148\001\ufef5\000\002\001\uffea\000\144\004\125" +
    "\006\075\007\011\010\053\011\027\012\046\017\112\033" +
    "\072\044\142\056\130\057\025\067\131\070\012\071\017" +
    "\072\040\073\041\074\115\075\006\076\030\106\113\107" +
    "\034\113\024\114\061\115\043\116\110\117\074\124\054" +
    "\162\073\163\057\167\126\170\015\172\045\173\133\174" +
    "\023\175\117\176\033\177\111\200\064\201\120\202\060" +
    "\203\031\204\044\206\066\212\035\220\132\223\070\224" +
    "\101\225\051\231\103\001\002\000\146\004\125\006\075" +
    "\007\011\010\053\011\027\012\046\017\112\033\072\044" +
    "\142\056\130\057\025\067\131\070\012\071\017\072\040" +
    "\073\041\074\115\075\006\076\030\106\113\107\034\113" +
    "\024\114\061\115\043\116\110\117\074\124\054\147\u0160" +
    "\162\073\163\057\167\126\170\015\172\045\173\133\174" +
    "\023\175\117\176\033\177\111\200\064\201\120\202\060" +
    "\203\031\204\044\206\066\212\035\220\132\223\070\224" +
    "\101\225\051\231\103\001\002\000\144\004\125\006\075" +
    "\007\011\010\053\011\027\012\046\017\112\033\072\044" +
    "\142\056\130\057\025\067\131\070\012\071\017\072\040" +
    "\073\041\074\115\075\006\076\030\106\113\107\034\113" +
    "\024\114\061\115\043\116\110\117\074\124\054\162\073" +
    "\163\057\167\126\170\015\172\045\173\133\174\023\175" +
    "\117\176\033\177\111\200\064\201\120\202\060\203\031" +
    "\204\044\206\066\212\035\220\132\223\070\224\101\225" +
    "\051\231\103\001\002\000\144\004\125\006\075\007\011" +
    "\010\053\011\027\012\046\017\112\033\072\044\142\056" +
    "\130\057\025\067\131\070\012\071\017\072\040\073\041" +
    "\074\115\075\006\076\030\106\113\107\034\113\024\114" +
    "\061\115\043\116\110\117\074\124\054\162\073\163\057" +
    "\167\126\170\015\172\045\173\133\174\023\175\117\176" +
    "\033\177\111\200\064\201\120\202\060\203\031\204\044" +
    "\206\066\212\035\220\132\223\070\224\101\225\051\231" +
    "\103\001\002\000\144\004\125\006\075\007\011\010\053" +
    "\011\027\012\046\017\112\033\072\044\142\056\130\057" +
    "\025\067\131\070\012\071\017\072\040\073\041\074\115" +
    "\075\006\076\030\106\113\107\034\113\024\114\061\115" +
    "\043\116\110\117\074\124\054\162\073\163\057\167\126" +
    "\170\015\172\045\173\133\174\023\175\117\176\033\177" +
    "\111\200\064\201\120\202\060\203\031\204\044\206\066" +
    "\212\035\220\132\223\070\224\101\225\051\231\103\001" +
    "\002\000\144\004\125\006\075\007\011\010\053\011\027" +
    "\012\046\017\112\033\072\044\142\056\130\057\025\067" +
    "\131\070\012\071\017\072\040\073\041\074\115\075\006" +
    "\076\030\106\113\107\034\113\024\114\061\115\043\116" +
    "\110\117\074\124\054\162\073\163\057\167\126\170\015" +
    "\172\045\173\133\174\023\175\117\176\033\177\111\200" +
    "\064\201\120\202\060\203\031\204\044\206\066\212\035" +
    "\220\132\223\070\224\101\225\051\231\103\001\002\000" +
    "\144\004\125\006\075\007\011\010\053\011\027\012\046" +
    "\017\112\033\072\044\142\056\130\057\025\067\131\070" +
    "\012\071\017\072\040\073\041\074\115\075\006\076\030" +
    "\106\113\107\034\113\024\114\061\115\043\116\110\117" +
    "\074\124\054\162\073\163\057\167\126\170\015\172\045" +
    "\173\133\174\023\175\117\176\033\177\111\200\064\201" +
    "\120\202\060\203\031\204\044\206\066\212\035\220\132" +
    "\223\070\224\101\225\051\231\103\001\002\000\144\004" +
    "\125\006\075\007\011\010\053\011\027\012\046\017\112" +
    "\033\072\044\142\056\130\057\025\067\131\070\012\071" +
    "\017\072\040\073\041\074\115\075\006\076\030\106\113" +
    "\107\034\113\024\114\061\115\043\116\110\117\074\124" +
    "\054\162\073\163\057\167\126\170\015\172\045\173\133" +
    "\174\023\175\117\176\033\177\111\200\064\201\120\202" +
    "\060\203\031\204\044\206\066\212\035\220\132\223\070" +
    "\224\101\225\051\231\103\001\002\000\144\004\125\006" +
    "\075\007\011\010\053\011\027\012\046\017\112\033\072" +
    "\044\142\056\130\057\025\067\131\070\012\071\017\072" +
    "\040\073\041\074\115\075\006\076\030\106\113\107\034" +
    "\113\024\114\061\115\043\116\110\117\074\124\054\162" +
    "\073\163\057\167\126\170\015\172\045\173\133\174\023" +
    "\175\117\176\033\177\111\200\064\201\120\202\060\203" +
    "\031\204\044\206\066\212\035\220\132\223\070\224\101" +
    "\225\051\231\103\001\002\000\144\004\125\006\075\007" +
    "\011\010\053\011\027\012\046\017\112\033\072\044\142" +
    "\056\130\057\025\067\131\070\012\071\017\072\040\073" +
    "\041\074\115\075\006\076\030\106\113\107\034\113\024" +
    "\114\061\115\043\116\110\117\074\124\054\162\073\163" +
    "\057\167\126\170\015\172\045\173\133\174\023\175\117" +
    "\176\033\177\111\200\064\201\120\202\060\203\031\204" +
    "\044\206\066\212\035\220\132\223\070\224\101\225\051" +
    "\231\103\001\002\000\144\004\125\006\075\007\011\010" +
    "\053\011\027\012\046\017\112\033\072\044\142\056\130" +
    "\057\025\067\131\070\012\071\017\072\040\073\041\074" +
    "\115\075\006\076\030\106\113\107\034\113\024\114\061" +
    "\115\043\116\110\117\074\124\054\162\073\163\057\167" +
    "\126\170\015\172\045\173\133\174\023\175\117\176\033" +
    "\177\111\200\064\201\120\202\060\203\031\204\044\206" +
    "\066\212\035\220\132\223\070\224\101\225\051\231\103" +
    "\001\002\000\002\001\uffe9\000\144\004\125\006\075\007" +
    "\011\010\053\011\027\012\046\017\112\033\072\044\142" +
    "\056\130\057\025\067\131\070\012\071\017\072\040\073" +
    "\041\074\115\075\006\076\030\106\113\107\034\113\024" +
    "\114\061\115\043\116\110\117\074\124\054\162\073\163" +
    "\057\167\126\170\015\172\045\173\133\174\023\175\117" +
    "\176\033\177\111\200\064\201\120\202\060\203\031\204" +
    "\044\206\066\212\035\220\132\223\070\224\101\225\051" +
    "\231\103\001\002\000\060\032\263\141\247\143\243\144" +
    "\264\145\245\146\254\147\265\150\271\151\256\152\241" +
    "\153\253\154\270\155\266\156\250\157\267\160\262\161" +
    "\255\162\272\163\251\164\261\165\257\166\242\171\246" +
    "\001\uff6d\000\060\032\263\141\247\143\243\144\264\145" +
    "\245\146\254\147\265\150\271\151\256\152\241\153\253" +
    "\154\270\155\266\156\250\157\267\160\262\161\255\162" +
    "\272\163\251\164\261\165\257\166\242\171\246\001\uff6b" +
    "\000\060\032\263\141\247\143\243\144\264\145\245\146" +
    "\254\147\265\150\271\151\256\152\241\153\253\154\270" +
    "\155\266\156\250\157\267\160\262\161\255\162\272\163" +
    "\251\164\261\165\257\166\242\171\246\001\uff69\000\060" +
    "\032\263\141\247\143\243\144\264\145\245\146\254\147" +
    "\265\150\271\151\256\152\241\153\253\154\270\155\266" +
    "\156\250\157\267\160\262\161\255\162\272\163\251\164" +
    "\261\165\257\166\242\171\246\001\uff65\000\060\032\263" +
    "\141\247\143\243\144\264\145\245\146\254\147\265\150" +
    "\271\151\256\152\241\153\253\154\270\155\266\156\250" +
    "\157\267\160\262\161\255\162\272\163\251\164\261\165" +
    "\257\166\242\171\246\001\uff6a\000\060\032\263\141\247" +
    "\143\243\144\264\145\245\146\254\147\265\150\271\151" +
    "\256\152\241\153\253\154\270\155\266\156\250\157\267" +
    "\160\262\161\255\162\272\163\251\164\261\165\257\166" +
    "\242\171\246\001\uff66\000\060\032\263\141\247\143\243" +
    "\144\264\145\245\146\254\147\265\150\271\151\256\152" +
    "\241\153\253\154\270\155\266\156\250\157\267\160\262" +
    "\161\255\162\272\163\251\164\261\165\257\166\242\171" +
    "\246\001\uff6f\000\060\032\263\141\247\143\243\144\264" +
    "\145\245\146\254\147\265\150\271\151\256\152\241\153" +
    "\253\154\270\155\266\156\250\157\267\160\262\161\255" +
    "\162\272\163\251\164\261\165\257\166\242\171\246\001" +
    "\uff6c\000\060\032\263\141\247\143\243\144\264\145\245" +
    "\146\254\147\265\150\271\151\256\152\241\153\253\154" +
    "\270\155\266\156\250\157\267\160\262\161\255\162\272" +
    "\163\251\164\261\165\257\166\242\171\246\001\uff68\000" +
    "\060\032\263\141\247\143\243\144\264\145\245\146\254" +
    "\147\265\150\271\151\256\152\241\153\253\154\270\155" +
    "\266\156\250\157\267\160\262\161\255\162\272\163\251" +
    "\164\261\165\257\166\242\171\246\001\uff6e\000\014\011" +
    "\027\070\306\206\u0162\212\212\223\070\001\002\000\060" +
    "\032\263\141\247\143\243\144\264\145\245\146\254\147" +
    "\265\150\271\151\256\152\241\153\253\154\270\155\266" +
    "\156\250\157\267\160\262\161\255\162\272\163\251\164" +
    "\261\165\257\166\242\171\246\001\uff73\000\012\011\027" +
    "\070\306\212\212\223\070\001\002\000\002\001\uff72\000" +
    "\004\220\u0166\001\uff1b\000\002\001\uff71\000\146\004\125" +
    "\006\075\007\011\010\053\011\027\012\046\017\112\033" +
    "\072\044\142\056\130\057\025\067\131\070\012\071\017" +
    "\072\040\073\041\074\115\075\006\076\030\106\113\107" +
    "\034\113\024\114\061\115\043\116\110\117\074\124\054" +
    "\147\u0168\162\073\163\057\167\126\170\015\172\045\173" +
    "\133\174\023\175\117\176\033\177\111\200\064\201\120" +
    "\202\060\203\031\204\044\206\066\212\035\220\132\223" +
    "\070\224\101\225\051\231\103\001\uffa8\000\004\221\u0173" +
    "\001\002\000\012\011\027\070\306\212\212\223\070\001" +
    "\002\000\042\120\uffa6\125\u014a\126\u014e\127\u014b\130\u0155" +
    "\131\u014d\132\u0153\133\u0150\134\u0152\135\u014c\136\u0149\137" +
    "\u014f\140\u0151\172\ufef2\173\ufef2\221\uffa6\001\ufef4\000\004" +
    "\120\u016c\001\uffa9\000\006\120\uffa7\221\uffa7\001\ufef5\000" +
    "\146\004\125\006\075\007\011\010\053\011\027\012\046" +
    "\017\112\033\072\044\142\056\130\057\025\067\131\070" +
    "\012\071\017\072\040\073\041\074\115\075\006\076\030" +
    "\106\113\107\034\113\024\114\061\115\043\116\110\117" +
    "\074\124\054\147\u016e\162\073\163\057\167\126\170\015" +
    "\172\045\173\133\174\023\175\117\176\033\177\111\200" +
    "\064\201\120\202\060\203\031\204\044\206\066\212\035" +
    "\220\132\223\070\224\101\225\051\231\103\001\002\000" +
    "\042\120\uffa3\125\u014a\126\u014e\127\u014b\130\u0155\131\u014d" +
    "\132\u0153\133\u0150\134\u0152\135\u014c\136\u0149\137\u014f\140" +
    "\u0151\172\ufef2\173\ufef2\221\uffa3\001\ufef4\000\012\011\027" +
    "\070\306\212\212\223\070\001\002\000\006\120\uffa4\221" +
    "\uffa4\001\ufef5\000\002\001\uffa2\000\002\001\ufef3\000\002" +
    "\001\uffa5\000\002\001\uff1a\000\060\032\263\141\247\143" +
    "\243\144\264\145\245\146\254\147\265\150\271\151\256" +
    "\152\241\153\253\154\270\155\266\156\250\157\267\160" +
    "\262\161\255\162\272\163\251\164\261\165\257\166\242" +
    "\171\246\001\uff67\000\002\001\uff38\000\002\001\uff3c\000" +
    "\144\004\125\006\075\007\011\010\053\011\027\012\046" +
    "\017\112\033\072\044\142\056\130\057\025\067\131\070" +
    "\012\071\017\072\040\073\041\074\115\075\006\076\030" +
    "\106\113\107\034\113\024\114\061\115\043\116\110\117" +
    "\074\124\054\162\073\163\057\167\126\170\015\172\045" +
    "\173\133\174\023\175\117\176\033\177\111\200\064\201" +
    "\120\202\060\203\031\204\044\206\066\212\035\220\132" +
    "\223\070\224\101\225\051\231\103\001\002\000\070\032" +
    "\263\121\252\122\273\123\244\141\247\143\243\144\264" +
    "\145\245\146\254\147\265\150\271\151\256\152\241\153" +
    "\253\154\270\155\266\156\250\157\267\160\262\161\255" +
    "\162\272\163\251\164\261\165\257\166\242\171\246\221" +
    "\u0179\001\002\000\006\102\u017b\222\u017c\001\002\000\002" +
    "\001\ufff0\000\004\142\u018c\001\uffbf\000\004\142\u017e\001" +
    "\uffbf\000\010\036\u018a\037\u0181\040\u0182\001\002\000\002" +
    "\001\uffbf\000\010\036\u0180\037\u0181\040\u0182\001\002\000" +
    "\002\001\uffc0\000\144\004\125\006\075\007\011\010\053" +
    "\011\027\012\046\017\112\033\072\044\142\056\130\057" +
    "\025\067\131\070\012\071\017\072\040\073\041\074\115" +
    "\075\006\076\030\106\113\107\034\113\024\114\061\115" +
    "\043\116\110\117\074\124\054\162\073\163\057\167\126" +
    "\170\015\172\045\173\133\174\023\175\117\176\033\177" +
    "\111\200\064\201\120\202\060\203\031\204\044\206\066" +
    "\212\035\220\132\223\070\224\101\225\051\231\103\001" +
    "\002\000\006\142\u0185\222\u0184\001\002\000\002\001\ufffa" +
    "\000\002\001\uffbc\000\002\001\uffbb\000\204\003\104\004" +
    "\125\005\137\006\075\007\011\010\053\011\027\012\046" +
    "\015\065\017\112\021\106\022\036\024\026\033\072\035" +
    "\114\041\050\042\107\043\063\044\076\046\121\051\135" +
    "\054\134\056\130\057\025\067\131\070\012\071\017\072" +
    "\040\073\041\074\115\075\006\076\030\102\055\106\113" +
    "\107\034\111\021\113\024\114\061\115\043\116\110\117" +
    "\074\124\054\142\010\162\073\163\057\167\126\170\015" +
    "\172\045\173\133\174\023\175\117\176\033\177\111\200" +
    "\064\201\120\202\060\203\031\204\044\206\066\212\035" +
    "\220\132\223\070\224\101\225\051\231\103\001\uffbd\000" +
    "\072\032\263\121\252\122\273\123\244\141\247\142\u0185" +
    "\143\243\144\264\145\245\146\254\147\265\150\271\151" +
    "\256\152\241\153\253\154\270\155\266\156\250\157\267" +
    "\160\262\161\255\162\272\163\251\164\261\165\257\166" +
    "\242\171\246\222\u0184\001\002\000\002\001\ufffa\000\204" +
    "\003\104\004\125\005\137\006\075\007\011\010\053\011" +
    "\027\012\046\015\065\017\112\021\106\022\036\024\026" +
    "\033\072\035\114\041\050\042\107\043\063\044\076\046" +
    "\121\051\135\054\134\056\130\057\025\067\131\070\012" +
    "\071\017\072\040\073\041\074\115\075\006\076\030\102" +
    "\055\106\113\107\034\111\021\113\024\114\061\115\043" +
    "\116\110\117\074\124\054\142\010\162\073\163\057\167" +
    "\126\170\015\172\045\173\133\174\023\175\117\176\033" +
    "\177\111\200\064\201\120\202\060\203\031\204\044\206" +
    "\066\212\035\220\132\223\070\224\101\225\051\231\103" +
    "\001\uffbe\000\002\001\uffc1\000\010\037\u0181\040\u0182\103" +
    "\u018f\001\002\000\002\001\uffbf\000\010\037\u0181\040\u0182" +
    "\103\u018e\001\002\000\002\001\uffc2\000\002\001\uffc3\000" +
    "\002\001\uff3a\000\066\032\263\121\252\122\273\123\244" +
    "\141\247\143\243\144\264\145\245\146\254\147\265\150" +
    "\271\151\256\152\241\153\253\154\270\155\266\156\250" +
    "\157\267\160\262\161\255\162\272\163\251\164\261\165" +
    "\257\166\242\171\246\001\ufeb6\000\002\001\uffed\000\070" +
    "\032\263\121\252\122\273\123\244\141\247\142\u0194\143" +
    "\243\144\264\145\245\146\254\147\265\150\271\151\256" +
    "\152\241\153\253\154\270\155\266\156\250\157\267\160" +
    "\262\161\255\162\272\163\251\164\261\165\257\166\242" +
    "\171\246\001\002\000\002\001\uffec\000\004\022\u0196\001" +
    "\002\000\004\220\u0197\001\002\000\144\004\125\006\075" +
    "\007\011\010\053\011\027\012\046\017\112\033\072\044" +
    "\142\056\130\057\025\067\131\070\012\071\017\072\040" +
    "\073\041\074\115\075\006\076\030\106\113\107\034\113" +
    "\024\114\061\115\043\116\110\117\074\124\054\162\073" +
    "\163\057\167\126\170\015\172\045\173\133\174\023\175" +
    "\117\176\033\177\111\200\064\201\120\202\060\203\031" +
    "\204\044\206\066\212\035\220\132\223\070\224\101\225" +
    "\051\231\103\001\002\000\070\032\263\121\252\122\273" +
    "\123\244\141\247\143\243\144\264\145\245\146\254\147" +
    "\265\150\271\151\256\152\241\153\253\154\270\155\266" +
    "\156\250\157\267\160\262\161\255\162\272\163\251\164" +
    "\261\165\257\166\242\171\246\221\u0199\001\002\000\004" +
    "\142\u019a\001\002\000\002\001\ufff2\000\006\065\u01af\204" +
    "\u01ae\001\ufec3\000\014\011\027\016\u01ad\100\u019f\101\u019e" +
    "\224\u01ac\001\002\000\002\001\ufec5\000\012\011\027\070" +
    "\306\212\212\223\070\001\002\000\144\004\125\006\075" +
    "\007\011\010\053\011\027\012\u01a2\017\112\033\072\044" +
    "\142\056\130\057\025\067\131\070\012\071\017\072\040" +
    "\073\041\074\115\075\006\076\030\106\113\107\034\113" +
    "\024\114\061\115\043\116\110\117\074\124\054\162\073" +
    "\163\057\167\126\170\015\172\045\173\133\174\023\175" +
    "\117\176\033\177\111\200\064\201\120\202\060\203\031" +
    "\204\044\206\066\212\035\220\132\223\070\224\101\225" +
    "\051\231\103\001\002\000\010\011\027\100\u019f\101\u019e" +
    "\001\002\000\002\001\ufec4\000\004\204\u01a5\001\uff04\000" +
    "\070\032\263\103\u01a4\121\252\122\273\123\244\141\247" +
    "\143\243\144\264\145\245\146\254\147\265\150\271\151" +
    "\256\152\241\153\253\154\270\155\266\156\250\157\267" +
    "\160\262\161\255\162\272\163\251\164\261\165\257\166" +
    "\242\171\246\001\002\000\002\001\ufec0\000\144\004\125" +
    "\006\075\007\011\010\053\011\027\012\046\017\112\033" +
    "\072\044\142\056\130\057\025\067\131\070\012\071\017" +
    "\072\040\073\041\074\115\075\006\076\030\106\113\107" +
    "\034\113\024\114\061\115\043\116\110\117\074\124\054" +
    "\162\073\163\057\167\126\170\015\172\045\173\133\174" +
    "\023\175\117\176\033\177\111\200\064\201\120\202\060" +
    "\203\031\204\044\206\066\212\035\220\132\223\070\224" +
    "\101\225\051\231\103\001\002\000\070\032\263\121\252" +
    "\122\273\123\244\141\247\143\243\144\264\145\245\146" +
    "\254\147\265\150\271\151\256\152\241\153\253\154\270" +
    "\155\266\156\250\157\267\160\262\161\255\162\272\163" +
    "\251\164\261\165\257\166\242\171\246\205\u01a7\001\002" +
    "\000\004\103\u01a8\001\002\000\002\001\ufebf\000\004\103" +
    "\u01aa\001\002\000\002\001\ufebe\000\002\001\ufec7\000\002" +
    "\001\uff02\000\002\001\ufec6\000\006\011\u01b3\014\u01b2\001" +
    "\002\000\004\011\u01b0\001\002\000\002\001\ufec1\000\004" +
    "\205\u01b4\001\002\000\002\001\ufebc\000\002\001\ufebd\000" +
    "\002\001\ufec2\000\006\011\u01b6\220\145\001\002\000\004" +
    "\220\u01b7\001\002\000\004\221\uffaf\001\uffaa\000\004\221" +
    "\u01b9\001\002\000\004\102\u01ba\001\002\000\002\001\ufffa" +
    "\000\206\003\104\004\125\005\137\006\075\007\011\010" +
    "\053\011\027\012\046\015\065\017\112\021\106\022\036" +
    "\024\026\033\072\035\114\041\050\042\107\043\063\044" +
    "\076\046\121\051\135\054\134\056\130\057\025\067\131" +
    "\070\012\071\017\072\040\073\041\074\115\075\006\076" +
    "\030\102\055\103\u01bc\106\113\107\034\111\021\113\024" +
    "\114\061\115\043\116\110\117\074\124\054\142\010\162" +
    "\073\163\057\167\126\170\015\172\045\173\133\174\023" +
    "\175\117\176\033\177\111\200\064\201\120\202\060\203" +
    "\031\204\044\206\066\212\035\220\132\223\070\224\101" +
    "\225\051\231\103\001\002\000\002\001\uffd9\000\066\032" +
    "\263\121\252\122\273\123\244\141\247\143\243\144\264" +
    "\145\245\146\254\147\265\150\271\151\256\152\241\153" +
    "\253\154\270\155\266\156\250\157\267\160\262\161\255" +
    "\162\272\163\251\164\261\165\257\166\242\171\246\001" +
    "\ufeb5\000\012\032\263\164\261\165\257\166\242\001\uff50" +
    "\000\002\001\uff70\000\002\001\uff64\000\002\001\uff62\000" +
    "\004\220\u0166\001\uff1b\000\002\001\uff75\000\002\001\uff39" +
    "\000\004\142\u01c6\001\002\000\002\001\uffe3\000\010\102" +
    "\313\204\314\220\ufee9\001\ufee2\000\066\032\263\121\252" +
    "\122\273\123\244\141\247\143\243\144\264\145\245\146" +
    "\254\147\265\150\271\151\256\152\241\153\253\154\270" +
    "\155\266\156\250\157\267\160\262\161\255\162\272\163" +
    "\251\164\261\165\257\166\242\171\246\001\ufeb8\000\002" +
    "\001\uff37\000\012\032\263\164\261\165\257\166\242\001" +
    "\uff4f\000\206\003\104\004\125\005\137\006\075\007\011" +
    "\010\053\011\027\012\046\015\065\017\112\021\106\022" +
    "\036\024\026\033\072\035\114\041\050\042\107\043\063" +
    "\044\076\046\121\051\135\054\134\056\130\057\025\067" +
    "\131\070\012\071\017\072\040\073\041\074\115\075\006" +
    "\076\030\102\055\103\u01cc\106\113\107\034\111\021\113" +
    "\024\114\061\115\043\116\110\117\074\124\054\142\010" +
    "\162\073\163\057\167\126\170\015\172\045\173\133\174" +
    "\023\175\117\176\033\177\111\200\064\201\120\202\060" +
    "\203\031\204\044\206\066\212\035\220\132\223\070\224" +
    "\101\225\051\231\103\001\002\000\002\001\ufff6\000\060" +
    "\032\263\141\247\143\243\144\264\145\245\146\254\147" +
    "\265\150\271\151\256\152\241\153\253\154\270\155\266" +
    "\156\250\157\267\160\262\161\255\162\272\163\251\164" +
    "\261\165\257\166\242\171\246\001\uff30\000\004\225\u01d1" +
    "\001\002\000\012\011\027\016\u01ad\100\u019f\101\u019e\001" +
    "\uff1c\000\010\011\027\100\u019f\101\u019e\001\uff1d\000\002" +
    "\001\uff31\000\002\001\uffef\000\070\032\263\121\252\122" +
    "\273\123\244\141\247\142\u01d4\143\243\144\264\145\245" +
    "\146\254\147\265\150\271\151\256\152\241\153\253\154" +
    "\270\155\266\156\250\157\267\160\262\161\255\162\272" +
    "\163\251\164\261\165\257\166\242\171\246\001\002\000" +
    "\002\001\uffee\000\002\001\uff63\000\004\205\u01db\001\002" +
    "\000\004\120\u01d9\001\ufeca\000\066\032\263\121\252\122" +
    "\273\123\244\141\247\143\243\144\264\145\245\146\254" +
    "\147\265\150\271\151\256\152\241\153\253\154\270\155" +
    "\266\156\250\157\267\160\262\161\255\162\272\163\251" +
    "\164\261\165\257\166\242\171\246\001\ufec8\000\144\004" +
    "\125\006\075\007\011\010\053\011\027\012\046\017\112" +
    "\033\072\044\142\056\130\057\025\067\131\070\012\071" +
    "\017\072\040\073\041\074\115\075\006\076\030\106\113" +
    "\107\034\113\024\114\061\115\043\116\110\117\074\124" +
    "\054\162\073\163\057\167\126\170\015\172\045\173\133" +
    "\174\023\175\117\176\033\177\111\200\064\201\120\202" +
    "\060\203\031\204\044\206\066\212\035\220\132\223\070" +
    "\224\101\225\051\231\103\001\002\000\066\032\263\121" +
    "\252\122\273\123\244\141\247\143\243\144\264\145\245" +
    "\146\254\147\265\150\271\151\256\152\241\153\253\154" +
    "\270\155\266\156\250\157\267\160\262\161\255\162\272" +
    "\163\251\164\261\165\257\166\242\171\246\001\ufec9\000" +
    "\002\001\uff32\000\144\004\125\006\075\007\011\010\053" +
    "\011\027\012\046\017\112\033\072\044\142\056\130\057" +
    "\025\067\131\070\012\071\017\072\040\073\041\074\115" +
    "\075\006\076\030\106\113\107\034\113\024\114\061\115" +
    "\043\116\110\117\074\124\054\162\073\163\057\167\126" +
    "\170\015\172\045\173\133\174\023\175\117\176\033\177" +
    "\111\200\064\201\120\202\060\203\031\204\044\206\066" +
    "\212\035\220\132\223\070\224\101\225\051\231\103\001" +
    "\002\000\070\032\263\121\252\122\273\123\244\141\247" +
    "\143\243\144\264\145\245\146\254\147\265\150\271\151" +
    "\256\152\241\153\253\154\270\155\266\156\250\157\267" +
    "\160\262\161\255\162\272\163\251\164\261\165\257\166" +
    "\242\171\246\221\u01de\001\002\000\002\001\ufeb7\000\144" +
    "\004\125\006\075\007\011\010\053\011\027\012\046\017" +
    "\112\033\072\044\142\056\130\057\025\067\131\070\012" +
    "\071\017\072\040\073\041\074\115\075\006\076\030\106" +
    "\113\107\034\113\024\114\061\115\043\116\110\117\074" +
    "\124\054\162\073\163\057\167\126\170\015\172\045\173" +
    "\133\174\023\175\117\176\033\177\111\200\064\201\120" +
    "\202\060\203\031\204\044\206\066\212\035\220\132\223" +
    "\070\224\101\225\051\231\103\001\002\000\070\032\263" +
    "\121\252\122\273\123\244\141\247\143\243\144\264\145" +
    "\245\146\254\147\265\150\271\151\256\152\241\153\253" +
    "\154\270\155\266\156\250\157\267\160\262\161\255\162" +
    "\272\163\251\164\261\165\257\166\242\171\246\221\u01e1" +
    "\001\002\000\206\003\104\004\125\005\137\006\075\007" +
    "\011\010\053\011\027\012\046\015\065\017\112\021\106" +
    "\022\036\024\026\033\072\035\114\041\050\042\107\043" +
    "\063\044\142\046\121\051\135\054\134\056\130\057\025" +
    "\067\131\070\012\071\017\072\040\073\041\074\115\075" +
    "\006\076\030\102\055\106\113\107\034\111\021\113\024" +
    "\114\061\115\043\116\110\117\074\124\054\142\010\162" +
    "\073\163\057\167\126\170\015\172\045\173\133\174\023" +
    "\175\117\176\033\177\111\200\064\201\120\202\060\203" +
    "\031\204\044\206\066\212\035\220\132\222\u01e2\223\070" +
    "\224\101\225\051\231\103\001\002\000\002\001\ufffa\000" +
    "\002\001\ufff3\000\002\001\uffba\000\206\003\104\004\125" +
    "\005\137\006\075\007\011\010\053\011\027\012\046\015" +
    "\065\017\112\021\106\022\036\023\u01e6\024\026\033\072" +
    "\035\114\041\050\042\107\043\063\044\076\046\121\051" +
    "\135\054\134\056\130\057\025\067\131\070\012\071\017" +
    "\072\040\073\041\074\115\075\006\076\030\102\055\106" +
    "\113\107\034\111\021\113\024\114\061\115\043\116\110" +
    "\117\074\124\054\142\010\162\073\163\057\167\126\170" +
    "\015\172\045\173\133\174\023\175\117\176\033\177\111" +
    "\200\064\201\120\202\060\203\031\204\044\206\066\212" +
    "\035\220\132\223\070\224\101\225\051\231\103\001\002" +
    "\000\002\001\uffb9\000\004\147\143\001\uffdb\000\004\220" +
    "\u01e9\001\002\000\004\221\uffaf\001\uffaa\000\004\221\u01eb" +
    "\001\002\000\004\052\155\001\uff2d\000\004\102\u01ed\001" +
    "\002\000\002\001\ufffa\000\206\003\104\004\125\005\137" +
    "\006\075\007\011\010\053\011\027\012\046\015\065\017" +
    "\112\021\106\022\036\024\026\033\072\035\114\041\050" +
    "\042\107\043\063\044\076\046\121\051\135\054\134\056" +
    "\130\057\025\067\131\070\012\071\017\072\040\073\041" +
    "\074\115\075\006\076\030\102\055\103\u01ef\106\113\107" +
    "\034\111\021\113\024\114\061\115\043\116\110\117\074" +
    "\124\054\142\010\162\073\163\057\167\126\170\015\172" +
    "\045\173\133\174\023\175\117\176\033\177\111\200\064" +
    "\201\120\202\060\203\031\204\044\206\066\212\035\220" +
    "\132\223\070\224\101\225\051\231\103\001\002\000\002" +
    "\001\uff2e\000\002\001\uff3b\000\002\001\uff35\000\014\011" +
    "\027\016\u01ad\077\u01f4\100\u019f\101\u019e\001\002\000\012" +
    "\011\027\077\240\100\u019f\101\u019e\001\002\000\002\001" +
    "\uff01\000\146\004\125\006\075\007\011\010\053\011\027" +
    "\012\046\017\112\033\072\044\142\054\u01f9\056\130\057" +
    "\025\067\131\070\012\071\017\072\040\073\041\074\115" +
    "\075\006\076\030\106\113\107\034\113\024\114\061\115" +
    "\043\116\110\117\074\124\054\162\073\163\057\167\126" +
    "\170\015\172\045\173\133\174\023\175\117\176\033\177" +
    "\111\200\064\201\120\202\060\203\031\204\044\206\066" +
    "\212\035\220\132\223\070\224\101\225\051\231\103\001" +
    "\uff7b\000\066\032\263\121\252\122\273\123\244\141\247" +
    "\143\243\144\264\145\245\146\254\147\265\150\271\151" +
    "\256\152\241\153\253\154\270\155\266\156\250\157\267" +
    "\160\262\161\255\162\272\163\251\164\261\165\257\166" +
    "\242\171\246\001\uff78\000\004\142\u01fd\001\002\000\004" +
    "\120\u01fb\001\uff7a\000\004\011\u010d\001\002\000\004\120" +
    "\u011d\001\uff77\000\144\004\125\006\075\007\011\010\053" +
    "\011\027\012\046\017\112\033\072\044\142\056\130\057" +
    "\025\067\131\070\012\071\017\072\040\073\041\074\115" +
    "\075\006\076\030\106\113\107\034\113\024\114\061\115" +
    "\043\116\110\117\074\124\054\162\073\163\057\167\126" +
    "\170\015\172\045\173\133\174\023\175\117\176\033\177" +
    "\111\200\064\201\120\202\060\203\031\204\044\206\066" +
    "\212\035\220\132\223\070\224\101\225\051\231\103\001" +
    "\002\000\066\032\263\121\252\122\273\123\244\141\247" +
    "\143\243\144\264\145\245\146\254\147\265\150\271\151" +
    "\256\152\241\153\253\154\270\155\266\156\250\157\267" +
    "\160\262\161\255\162\272\163\251\164\261\165\257\166" +
    "\242\171\246\001\uff79\000\146\004\125\006\075\007\011" +
    "\010\053\011\027\012\046\017\112\033\072\044\142\054" +
    "\u01f9\056\130\057\025\067\131\070\012\071\017\072\040" +
    "\073\041\074\115\075\006\076\030\106\113\107\034\113" +
    "\024\114\061\115\043\116\110\117\074\124\054\162\073" +
    "\163\057\167\126\170\015\172\045\173\133\174\023\175" +
    "\117\176\033\177\111\200\064\201\120\202\060\203\031" +
    "\204\044\206\066\212\035\220\132\223\070\224\101\225" +
    "\051\231\103\001\uff7b\000\004\142\u01ff\001\002\000\146" +
    "\004\125\006\075\007\011\010\053\011\027\012\046\017" +
    "\112\033\072\044\142\054\u01f9\056\130\057\025\067\131" +
    "\070\012\071\017\072\040\073\041\074\115\075\006\076" +
    "\030\106\113\107\034\113\024\114\061\115\043\116\110" +
    "\117\074\124\054\162\073\163\057\167\126\170\015\172" +
    "\045\173\133\174\023\175\117\176\033\177\111\200\064" +
    "\201\120\202\060\203\031\204\044\206\066\212\035\220" +
    "\132\223\070\224\101\225\051\231\103\001\uff7b\000\004" +
    "\221\u0201\001\002\000\206\003\104\004\125\005\137\006" +
    "\075\007\011\010\053\011\027\012\046\015\065\017\112" +
    "\021\106\022\036\024\026\033\072\035\114\041\050\042" +
    "\107\043\063\044\142\046\121\051\135\054\134\056\130" +
    "\057\025\067\131\070\012\071\017\072\040\073\041\074" +
    "\115\075\006\076\030\102\055\106\113\107\034\111\021" +
    "\113\024\114\061\115\043\116\110\117\074\124\054\142" +
    "\010\162\073\163\057\167\126\170\015\172\045\173\133" +
    "\174\023\175\117\176\033\177\111\200\064\201\120\202" +
    "\060\203\031\204\044\206\066\212\035\220\132\222\u0203" +
    "\223\070\224\101\225\051\231\103\001\002\000\002\001" +
    "\ufff1\000\002\001\ufffa\000\002\001\uffcb\000\206\003\104" +
    "\004\125\005\137\006\075\007\011\010\053\011\027\012" +
    "\046\015\065\017\112\021\106\022\036\024\026\025\u0206" +
    "\033\072\035\114\041\050\042\107\043\063\044\076\046" +
    "\121\051\135\054\134\056\130\057\025\067\131\070\012" +
    "\071\017\072\040\073\041\074\115\075\006\076\030\102" +
    "\055\106\113\107\034\111\021\113\024\114\061\115\043" +
    "\116\110\117\074\124\054\142\010\162\073\163\057\167" +
    "\126\170\015\172\045\173\133\174\023\175\117\176\033" +
    "\177\111\200\064\201\120\202\060\203\031\204\044\206" +
    "\066\212\035\220\132\223\070\224\101\225\051\231\103" +
    "\001\002\000\002\001\uffca\000\012\011\027\070\306\212" +
    "\212\223\070\001\002\000\004\221\u0209\001\002\000\002" +
    "\001\ufeba\000\066\032\263\121\252\122\273\123\244\141" +
    "\247\143\243\144\264\145\245\146\254\147\265\150\271" +
    "\151\256\152\241\153\253\154\270\155\266\156\250\157" +
    "\267\160\262\161\255\162\272\163\251\164\261\165\257" +
    "\166\242\171\246\001\ufeb9\000\002\001\uff3d\000\002\001" +
    "\uffe1\000\002\001\uffe6\000\002\001\uff4d\000\144\004\125" +
    "\006\075\007\011\010\053\011\027\012\046\017\112\033" +
    "\072\044\142\056\130\057\025\067\131\070\012\071\017" +
    "\072\040\073\041\074\115\075\006\076\030\106\113\107" +
    "\034\113\024\114\061\115\043\116\110\117\074\124\054" +
    "\162\073\163\057\167\126\170\015\172\045\173\133\174" +
    "\023\175\117\176\033\177\111\200\064\201\120\202\060" +
    "\203\031\204\044\206\066\212\035\220\132\223\070\224" +
    "\101\225\051\231\103\001\ufecb\000\004\221\u0211\001\002" +
    "\000\002\001\uff33\000\146\004\125\006\075\007\011\010" +
    "\053\011\027\012\046\017\112\033\072\044\142\056\130" +
    "\057\025\067\131\070\012\071\017\072\040\073\041\074" +
    "\115\075\006\076\030\106\113\107\034\113\024\114\061" +
    "\115\043\116\110\117\074\124\054\147\u0168\162\073\163" +
    "\057\167\126\170\015\172\045\173\133\174\023\175\117" +
    "\176\033\177\111\200\064\201\120\202\060\203\031\204" +
    "\044\206\066\212\035\220\132\223\070\224\101\225\051" +
    "\231\103\001\uffa8\000\004\221\u0214\001\002\000\002\001" +
    "\uff27\000\002\001\000" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0213\000\006\003\003\004\004\001\001\000\002\001" +
    "\001\000\064\005\135\006\126\011\077\053\121\054\036" +
    "\057\076\061\013\065\015\070\046\071\122\072\104\077" +
    "\061\112\055\117\051\131\070\133\021\137\115\146\123" +
    "\150\066\151\006\153\017\155\101\161\031\165\041\206" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\052\053\121\054\036\057\076" +
    "\061\013\065\u020d\070\046\071\122\072\104\077\061\112" +
    "\055\117\051\133\021\146\123\150\066\151\006\153\017" +
    "\155\101\161\031\165\041\206\012\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\054\011\u020b" +
    "\053\121\054\036\057\076\061\013\065\015\070\046\071" +
    "\122\072\104\077\061\112\055\117\051\133\021\146\123" +
    "\150\066\151\006\153\017\155\101\161\031\165\041\206" +
    "\012\001\001\000\002\001\001\000\052\053\121\054\036" +
    "\057\076\061\013\065\u020a\070\046\071\122\072\104\077" +
    "\061\112\055\117\051\133\021\146\123\150\066\151\006" +
    "\153\017\155\101\161\031\165\041\206\012\001\001\000" +
    "\052\053\121\054\036\057\076\061\013\065\u0209\070\046" +
    "\071\122\072\104\077\061\112\055\117\051\133\021\146" +
    "\123\150\066\151\006\153\017\155\101\161\031\165\041" +
    "\206\012\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\106\u01f1\110\u019c\155\u019a\001\001" +
    "\000\052\053\121\054\036\057\076\061\013\065\u01f0\070" +
    "\046\071\122\072\104\077\061\112\055\117\051\133\021" +
    "\146\123\150\066\151\006\153\017\155\101\161\031\165" +
    "\041\206\012\001\001\000\002\001\001\000\052\053\121" +
    "\054\036\057\076\061\013\065\u01ef\070\046\071\122\072" +
    "\104\077\061\112\055\117\051\133\021\146\123\150\066" +
    "\151\006\153\017\155\101\161\031\165\041\206\012\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\056\053\121\054\036" +
    "\057\076\061\013\065\u01d7\070\046\071\122\072\104\077" +
    "\061\104\u01d5\105\u01d6\112\055\117\051\133\021\146\123" +
    "\150\066\151\006\153\017\155\101\161\031\165\041\206" +
    "\012\001\001\000\034\054\036\070\046\071\122\072\104" +
    "\077\061\117\051\133\u0121\150\u01d4\151\006\153\017\155" +
    "\101\161\031\165\041\001\001\000\002\001\001\000\002" +
    "\001\001\000\052\053\121\054\036\057\076\061\013\065" +
    "\u01d2\070\046\071\122\072\104\077\061\112\055\117\051" +
    "\133\021\146\123\150\066\151\006\153\017\155\101\161" +
    "\031\165\041\206\012\001\001\000\012\106\u01ce\107\u01cd" +
    "\110\u019c\155\u019a\001\001\000\002\001\001\000\002\001" +
    "\001\000\052\053\121\054\036\057\076\061\013\065\u01cc" +
    "\070\046\071\122\072\104\077\061\112\055\117\051\133" +
    "\021\146\123\150\066\151\006\153\017\155\101\161\031" +
    "\165\041\206\012\001\001\000\004\007\u01ca\001\001\000" +
    "\002\001\001\000\052\053\121\054\036\057\076\061\013" +
    "\065\u01c9\070\046\071\122\072\104\077\061\112\055\117" +
    "\051\133\021\146\123\150\066\151\006\153\017\155\101" +
    "\161\031\165\041\206\012\001\001\000\052\053\121\054" +
    "\036\057\076\061\013\065\u01c8\070\046\071\122\072\104" +
    "\077\061\112\055\117\051\133\021\146\123\150\066\151" +
    "\006\153\017\155\101\161\031\165\041\206\012\001\001" +
    "\000\052\053\121\054\036\057\076\061\013\065\u01c7\070" +
    "\046\071\122\072\104\077\061\112\055\117\051\133\021" +
    "\146\123\150\066\151\006\153\017\155\101\161\031\165" +
    "\041\206\012\001\001\000\010\070\u01c6\072\104\155\101" +
    "\001\001\000\002\001\001\000\052\053\121\054\036\057" +
    "\076\061\013\065\u01c3\070\046\071\122\072\104\077\061" +
    "\112\055\117\051\133\021\146\123\150\066\151\006\153" +
    "\017\155\101\161\031\165\041\206\012\001\001\000\002" +
    "\001\001\000\026\070\311\071\122\072\104\077\310\117" +
    "\307\153\017\155\101\156\u01c1\160\306\161\304\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\052\053\121\054\036\057\076\061\013\065\u01be\070\046" +
    "\071\122\072\104\077\061\112\055\117\051\133\021\146" +
    "\123\150\066\151\006\153\017\155\101\161\031\165\041" +
    "\206\012\001\001\000\052\053\121\054\036\057\076\061" +
    "\013\065\u01bd\070\046\071\122\072\104\077\061\112\055" +
    "\117\051\133\021\146\123\150\066\151\006\153\017\155" +
    "\101\161\031\165\041\206\012\001\001\000\052\053\121" +
    "\054\036\057\076\061\013\065\u01bc\070\046\071\122\072" +
    "\104\077\061\112\055\117\051\133\021\146\123\150\066" +
    "\151\006\153\017\155\101\161\031\165\041\206\012\001" +
    "\001\000\002\001\001\000\004\047\u01b4\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\106\u019b\110\u019c\155" +
    "\u019a\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\056\006\u0194\011\077\053" +
    "\121\054\036\057\076\061\013\065\015\070\046\071\122" +
    "\072\104\077\061\112\055\117\051\133\021\146\123\150" +
    "\066\151\006\153\017\155\101\161\031\165\041\206\012" +
    "\001\001\000\052\053\121\054\036\057\076\061\013\065" +
    "\u0192\070\046\071\122\072\104\077\061\112\055\117\051" +
    "\133\021\146\123\150\066\151\006\153\017\155\101\161" +
    "\031\165\041\206\012\001\001\000\052\053\121\054\036" +
    "\057\076\061\013\065\u0190\070\046\071\122\072\104\077" +
    "\061\112\055\117\051\133\021\146\123\150\066\151\006" +
    "\153\017\155\101\161\031\165\041\206\012\001\001\000" +
    "\052\053\121\054\036\057\076\061\013\065\u018f\070\046" +
    "\071\122\072\104\077\061\112\055\117\051\133\021\146" +
    "\123\150\066\151\006\153\017\155\101\161\031\165\041" +
    "\206\012\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\052" +
    "\053\121\054\036\057\076\061\013\065\u0175\070\046\071" +
    "\122\072\104\077\061\112\055\117\051\133\021\146\123" +
    "\150\066\151\006\153\017\155\101\161\031\165\041\206" +
    "\012\001\001\000\052\053\121\054\036\057\076\061\013" +
    "\065\u0174\070\046\071\122\072\104\077\061\112\055\117" +
    "\051\133\021\146\123\150\066\151\006\153\017\155\101" +
    "\161\031\165\041\206\012\001\001\000\052\053\u0146\054" +
    "\036\057\076\061\013\065\u0145\070\046\071\122\072\104" +
    "\077\061\112\055\117\051\133\u0144\146\123\150\066\151" +
    "\006\153\017\155\101\161\031\165\041\206\012\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\055\u013d\001\001\000\052\053\121\054\036\057\076" +
    "\061\013\065\u013b\070\046\071\122\072\104\077\061\112" +
    "\055\117\051\133\021\146\123\150\066\151\006\153\017" +
    "\155\101\161\031\165\041\206\012\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\052\053\121" +
    "\054\036\057\076\061\013\065\u0124\070\046\071\122\072" +
    "\104\077\061\112\055\117\051\133\021\146\123\150\066" +
    "\151\006\153\017\155\101\161\031\165\041\206\u0123\001" +
    "\001\000\034\054\036\070\046\071\122\072\104\077\061" +
    "\117\051\133\u0121\150\u0122\151\006\153\017\155\101\161" +
    "\031\165\041\001\001\000\004\044\u010b\001\001\000\052" +
    "\053\121\054\036\057\076\061\013\065\u0109\070\046\071" +
    "\122\072\104\077\061\112\055\117\051\133\021\146\123" +
    "\150\066\151\006\153\017\155\101\161\031\165\041\206" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\052" +
    "\053\121\054\036\057\076\061\013\065\140\070\046\071" +
    "\122\072\104\077\061\112\055\117\051\133\021\146\123" +
    "\150\066\151\006\153\017\155\101\161\031\165\041\206" +
    "\012\001\001\000\002\001\001\000\004\047\143\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\033\146\036" +
    "\147\037\150\145\145\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\037" +
    "\152\145\145\001\001\000\002\001\001\000\004\034\155" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\157\001\001\000\064\006\163\010\160\011\077\053\121" +
    "\054\036\057\076\061\013\065\015\070\046\071\122\072" +
    "\104\077\061\112\055\117\051\131\161\133\021\137\115" +
    "\146\123\150\066\151\006\153\017\155\101\161\031\165" +
    "\041\206\012\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\035\166\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\057\202\060\210\117" +
    "\207\164\204\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\057\202\060\234\117\207\164\204\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\057\202\060\220" +
    "\062\216\064\217\117\207\164\204\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\057\202" +
    "\060\213\117\207\164\204\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\063\224\001\001\000\002\001\001\000\012\057\202\060" +
    "\222\117\207\164\204\001\001\000\002\001\001\000\012" +
    "\057\202\060\225\117\207\164\204\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\057\202\060\227\117\207" +
    "\164\204\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\057\202\060\220\062\232\064\217\117\207\164\204" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\052\053\121\054\036\057\076\061\013\065\u0108\070" +
    "\046\071\122\072\104\077\061\112\055\117\051\133\021" +
    "\146\123\150\066\151\006\153\017\155\101\161\031\165" +
    "\041\206\012\001\001\000\052\053\121\054\036\057\076" +
    "\061\013\065\u0107\070\046\071\122\072\104\077\061\112" +
    "\055\117\051\133\021\146\123\150\066\151\006\153\017" +
    "\155\101\161\031\165\041\206\012\001\001\000\052\053" +
    "\121\054\036\057\076\061\013\065\u0106\070\046\071\122" +
    "\072\104\077\061\112\055\117\051\133\021\146\123\150" +
    "\066\151\006\153\017\155\101\161\031\165\041\206\012" +
    "\001\001\000\052\053\121\054\036\057\076\061\013\065" +
    "\u0105\070\046\071\122\072\104\077\061\112\055\117\051" +
    "\133\021\146\123\150\066\151\006\153\017\155\101\161" +
    "\031\165\041\206\012\001\001\000\052\053\121\054\036" +
    "\057\076\061\013\065\u0104\070\046\071\122\072\104\077" +
    "\061\112\055\117\051\133\021\146\123\150\066\151\006" +
    "\153\017\155\101\161\031\165\041\206\012\001\001\000" +
    "\052\053\121\054\036\057\076\061\013\065\u0103\070\046" +
    "\071\122\072\104\077\061\112\055\117\051\133\021\146" +
    "\123\150\066\151\006\153\017\155\101\161\031\165\041" +
    "\206\012\001\001\000\052\053\121\054\036\057\076\061" +
    "\013\065\377\070\046\071\122\072\104\077\061\112\055" +
    "\117\051\133\021\146\123\150\066\151\006\153\017\155" +
    "\101\161\031\165\041\206\012\001\001\000\052\053\121" +
    "\054\036\057\076\061\013\065\375\070\046\071\122\072" +
    "\104\077\061\112\055\117\051\133\021\146\123\150\066" +
    "\151\006\153\017\155\101\161\031\165\041\206\012\001" +
    "\001\000\052\053\121\054\036\057\076\061\013\065\374" +
    "\070\046\071\122\072\104\077\061\112\055\117\051\133" +
    "\021\146\123\150\066\151\006\153\017\155\101\161\031" +
    "\165\041\206\012\001\001\000\052\053\121\054\036\057" +
    "\076\061\013\065\373\070\046\071\122\072\104\077\061" +
    "\112\055\117\051\133\021\146\123\150\066\151\006\153" +
    "\017\155\101\161\031\165\041\206\012\001\001\000\052" +
    "\053\121\054\036\057\076\061\013\065\372\070\046\071" +
    "\122\072\104\077\061\112\055\117\051\133\021\146\123" +
    "\150\066\151\006\153\017\155\101\161\031\165\041\206" +
    "\012\001\001\000\052\053\121\054\036\057\076\061\013" +
    "\065\371\070\046\071\122\072\104\077\061\112\055\117" +
    "\051\133\021\146\123\150\066\151\006\153\017\155\101" +
    "\161\031\165\041\206\012\001\001\000\052\053\121\054" +
    "\036\057\076\061\013\065\370\070\046\071\122\072\104" +
    "\077\061\112\055\117\051\133\021\146\123\150\066\151" +
    "\006\153\017\155\101\161\031\165\041\206\012\001\001" +
    "\000\052\053\121\054\036\057\076\061\013\065\367\070" +
    "\046\071\122\072\104\077\061\112\055\117\051\133\021" +
    "\146\123\150\066\151\006\153\017\155\101\161\031\165" +
    "\041\206\012\001\001\000\052\053\121\054\036\057\076" +
    "\061\013\065\366\070\046\071\122\072\104\077\061\112" +
    "\055\117\051\133\021\146\123\150\066\151\006\153\017" +
    "\155\101\161\031\165\041\206\012\001\001\000\056\006" +
    "\336\011\077\053\121\054\036\057\076\061\013\065\015" +
    "\070\046\071\122\072\104\077\061\112\055\117\051\133" +
    "\021\146\123\150\066\151\006\153\017\155\101\161\031" +
    "\165\041\206\012\001\001\000\052\053\121\054\036\057" +
    "\076\061\013\065\334\070\046\071\122\072\104\077\061" +
    "\112\055\117\051\133\021\146\123\150\066\151\006\153" +
    "\017\155\101\161\031\165\041\206\012\001\001\000\052" +
    "\053\121\054\036\057\076\061\013\065\333\070\046\071" +
    "\122\072\104\077\061\112\055\117\051\133\021\146\123" +
    "\150\066\151\006\153\017\155\101\161\031\165\041\206" +
    "\012\001\001\000\026\070\311\071\122\072\104\077\310" +
    "\117\307\153\017\155\101\156\303\160\306\161\304\001" +
    "\001\000\052\053\121\054\036\057\076\061\013\065\302" +
    "\070\046\071\122\072\104\077\061\112\055\117\051\133" +
    "\021\146\123\150\066\151\006\153\017\155\101\161\031" +
    "\165\041\206\012\001\001\000\052\053\121\054\036\057" +
    "\076\061\013\065\301\070\046\071\122\072\104\077\061" +
    "\112\055\117\051\133\021\146\123\150\066\151\006\153" +
    "\017\155\101\161\031\165\041\206\012\001\001\000\052" +
    "\053\121\054\036\057\076\061\013\065\300\070\046\071" +
    "\122\072\104\077\061\112\055\117\051\133\021\146\123" +
    "\150\066\151\006\153\017\155\101\161\031\165\041\206" +
    "\012\001\001\000\052\053\121\054\036\057\076\061\013" +
    "\065\277\070\046\071\122\072\104\077\061\112\055\117" +
    "\051\133\021\146\123\150\066\151\006\153\017\155\101" +
    "\161\031\165\041\206\012\001\001\000\052\053\121\054" +
    "\036\057\076\061\013\065\276\070\046\071\122\072\104" +
    "\077\061\112\055\117\051\133\021\146\123\150\066\151" +
    "\006\153\017\155\101\161\031\165\041\206\012\001\001" +
    "\000\052\053\121\054\036\057\076\061\013\065\275\070" +
    "\046\071\122\072\104\077\061\112\055\117\051\133\021" +
    "\146\123\150\066\151\006\153\017\155\101\161\031\165" +
    "\041\206\012\001\001\000\052\053\121\054\036\057\076" +
    "\061\013\065\274\070\046\071\122\072\104\077\061\112" +
    "\055\117\051\133\021\146\123\150\066\151\006\153\017" +
    "\155\101\161\031\165\041\206\012\001\001\000\052\053" +
    "\121\054\036\057\076\061\013\065\273\070\046\071\122" +
    "\072\104\077\061\112\055\117\051\133\021\146\123\150" +
    "\066\151\006\153\017\155\101\161\031\165\041\206\012" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\070\321\072\104\155\101\001\001\000" +
    "\002\001\001\000\052\053\121\054\036\057\076\061\013" +
    "\065\317\070\046\071\122\072\104\077\061\112\055\117" +
    "\051\133\021\146\123\150\066\151\006\153\017\155\101" +
    "\161\031\165\041\206\012\001\001\000\054\053\121\054" +
    "\036\057\076\061\013\065\315\070\046\071\122\072\104" +
    "\073\314\077\061\112\055\117\051\133\021\146\123\150" +
    "\066\151\006\153\017\155\101\161\031\165\041\206\012" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\052\053\121\054\036\057\076\061" +
    "\013\065\324\070\046\071\122\072\104\077\061\112\055" +
    "\117\051\133\021\146\123\150\066\151\006\153\017\155" +
    "\101\161\031\165\041\206\012\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\070\331\072\104\077\330\151" +
    "\327\155\101\001\001\000\002\001\001\000\010\070\332" +
    "\072\104\155\101\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\350" +
    "\001\001\000\004\027\337\001\001\000\004\031\340\001" +
    "\001\000\002\001\001\000\056\006\347\011\077\053\121" +
    "\054\036\057\076\061\013\065\015\070\046\071\122\072" +
    "\104\077\061\112\055\117\051\133\021\146\123\150\066" +
    "\151\006\153\017\155\101\161\031\165\041\206\012\001" +
    "\001\000\002\001\001\000\052\053\121\054\036\057\076" +
    "\061\013\065\344\070\046\071\122\072\104\077\061\112" +
    "\055\117\051\133\021\146\123\150\066\151\006\153\017" +
    "\155\101\161\031\165\041\206\012\001\001\000\002\001" +
    "\001\000\056\006\346\011\077\053\121\054\036\057\076" +
    "\061\013\065\015\070\046\071\122\072\104\077\061\112" +
    "\055\117\051\133\021\146\123\150\066\151\006\153\017" +
    "\155\101\161\031\165\041\206\012\001\001\000\002\001" +
    "\001\000\002\001\001\000\066\006\163\010\160\011\077" +
    "\030\351\053\121\054\036\057\076\061\013\065\015\070" +
    "\046\071\122\072\104\077\061\112\055\117\051\131\161" +
    "\133\021\137\115\146\123\150\066\151\006\153\017\155" +
    "\101\161\031\165\041\206\012\001\001\000\004\032\352" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\052\053\121\054\036\057\076\061\013\065\356" +
    "\070\046\071\122\072\104\077\061\112\055\117\051\133" +
    "\021\146\123\150\066\151\006\153\017\155\101\161\031" +
    "\165\041\206\012\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\361\001\001\000\064\006\163\010\160" +
    "\011\077\053\121\054\036\057\076\061\013\065\015\070" +
    "\046\071\122\072\104\077\061\112\055\117\051\131\161" +
    "\133\021\137\115\146\123\150\066\151\006\153\017\155" +
    "\101\161\031\165\041\206\012\001\001\000\004\007\363" +
    "\001\001\000\064\006\163\010\160\011\077\053\121\054" +
    "\036\057\076\061\013\065\015\070\046\071\122\072\104" +
    "\077\061\112\055\117\051\131\161\133\021\137\115\146" +
    "\123\150\066\151\006\153\017\155\101\161\031\165\041" +
    "\206\012\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\052\053\121\054\036\057\076" +
    "\061\013\065\u0102\070\046\071\122\072\104\077\061\112" +
    "\055\117\051\133\021\146\123\150\066\151\006\153\017" +
    "\155\101\161\031\165\041\206\012\001\001\000\002\001" +
    "\001\000\052\053\121\054\036\057\076\061\013\065\u0101" +
    "\070\046\071\122\072\104\077\061\112\055\117\051\133" +
    "\021\146\123\150\066\151\006\153\017\155\101\161\031" +
    "\165\041\206\012\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\054\053\121\054\036\057\076\061\013\065" +
    "\u0110\066\u010e\070\046\071\122\072\104\077\061\112\055" +
    "\117\051\133\021\146\123\150\066\151\006\153\017\155" +
    "\101\161\031\165\041\206\012\001\001\000\002\001\001" +
    "\000\056\053\121\054\036\057\076\061\013\065\u0112\070" +
    "\046\071\122\072\104\077\061\102\u0111\103\u0113\112\055" +
    "\117\051\133\021\146\123\150\066\151\006\153\017\155" +
    "\101\161\031\165\041\206\012\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\063\u0115\001" +
    "\001\000\052\053\121\054\036\057\076\061\013\065\u0116" +
    "\070\046\071\122\072\104\077\061\112\055\117\051\133" +
    "\021\146\123\150\066\151\006\153\017\155\101\161\031" +
    "\165\041\206\012\001\001\000\002\001\001\000\002\001" +
    "\001\000\052\053\121\054\036\057\076\061\013\065\u0118" +
    "\070\046\071\122\072\104\077\061\112\055\117\051\133" +
    "\021\146\123\150\066\151\006\153\017\155\101\161\031" +
    "\165\041\206\012\001\001\000\002\001\001\000\052\053" +
    "\121\054\036\057\076\061\013\065\u011a\070\046\071\122" +
    "\072\104\077\061\112\055\117\051\133\021\146\123\150" +
    "\066\151\006\153\017\155\101\161\031\165\041\206\012" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\054\053\121" +
    "\054\036\057\076\061\013\065\u0110\066\u0120\070\046\071" +
    "\122\072\104\077\061\112\055\117\051\133\021\146\123" +
    "\150\066\151\006\153\017\155\101\161\031\165\041\206" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\205\u0127\001\001\000\002\001\001\000\036" +
    "\054\036\070\046\071\122\072\104\077\061\100\u0129\101" +
    "\u012a\117\051\133\u012b\151\006\153\017\155\101\161\031" +
    "\165\041\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\054\036\070\046" +
    "\071\122\072\104\077\061\100\u012e\101\u012a\117\051\133" +
    "\u012b\151\006\153\017\155\101\161\031\165\041\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\054\036\070" +
    "\046\071\122\072\104\077\061\101\u0131\117\051\133\u012b" +
    "\151\006\153\017\155\101\161\031\165\041\001\001\000" +
    "\002\001\001\000\002\001\001\000\052\053\121\054\036" +
    "\057\076\061\013\065\u0134\070\046\071\122\072\104\077" +
    "\061\112\055\117\051\133\021\146\123\150\066\151\006" +
    "\153\017\155\101\161\031\165\041\206\012\001\001\000" +
    "\002\001\001\000\034\054\036\070\046\071\122\072\104" +
    "\077\061\117\051\133\u0136\151\006\153\017\154\u0137\155" +
    "\101\161\031\165\041\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\054\036\070\046\071" +
    "\122\072\104\077\061\117\051\133\u013a\151\006\153\017" +
    "\155\101\161\031\165\041\001\001\000\002\001\001\000" +
    "\002\001\001\000\052\053\121\054\036\057\076\061\013" +
    "\065\u013e\070\046\071\122\072\104\077\061\112\055\117" +
    "\051\133\021\146\123\150\066\151\006\153\017\155\101" +
    "\161\031\165\041\206\012\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\070\331\072\104\077\330\151\u0142\155\101\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\052\053" +
    "\121\054\036\057\076\061\013\065\u0173\070\046\071\122" +
    "\072\104\077\061\112\055\117\051\133\021\146\123\150" +
    "\066\151\006\153\017\155\101\161\031\165\041\206\012" +
    "\001\001\000\052\053\121\054\036\057\076\061\013\065" +
    "\u0160\070\046\071\122\072\104\077\061\112\055\117\051" +
    "\133\021\146\123\150\066\151\006\153\017\155\101\161" +
    "\031\165\041\206\012\001\001\000\052\053\121\054\036" +
    "\057\076\061\013\065\u015e\070\046\071\122\072\104\077" +
    "\061\112\055\117\051\133\021\146\123\150\066\151\006" +
    "\153\017\155\101\161\031\165\041\206\012\001\001\000" +
    "\052\053\121\054\036\057\076\061\013\065\u015d\070\046" +
    "\071\122\072\104\077\061\112\055\117\051\133\021\146" +
    "\123\150\066\151\006\153\017\155\101\161\031\165\041" +
    "\206\012\001\001\000\052\053\121\054\036\057\076\061" +
    "\013\065\u015c\070\046\071\122\072\104\077\061\112\055" +
    "\117\051\133\021\146\123\150\066\151\006\153\017\155" +
    "\101\161\031\165\041\206\012\001\001\000\052\053\121" +
    "\054\036\057\076\061\013\065\u015b\070\046\071\122\072" +
    "\104\077\061\112\055\117\051\133\021\146\123\150\066" +
    "\151\006\153\017\155\101\161\031\165\041\206\012\001" +
    "\001\000\052\053\121\054\036\057\076\061\013\065\u015a" +
    "\070\046\071\122\072\104\077\061\112\055\117\051\133" +
    "\021\146\123\150\066\151\006\153\017\155\101\161\031" +
    "\165\041\206\012\001\001\000\052\053\121\054\036\057" +
    "\076\061\013\065\u0159\070\046\071\122\072\104\077\061" +
    "\112\055\117\051\133\021\146\123\150\066\151\006\153" +
    "\017\155\101\161\031\165\041\206\012\001\001\000\052" +
    "\053\121\054\036\057\076\061\013\065\u0158\070\046\071" +
    "\122\072\104\077\061\112\055\117\051\133\021\146\123" +
    "\150\066\151\006\153\017\155\101\161\031\165\041\206" +
    "\012\001\001\000\052\053\121\054\036\057\076\061\013" +
    "\065\u0157\070\046\071\122\072\104\077\061\112\055\117" +
    "\051\133\021\146\123\150\066\151\006\153\017\155\101" +
    "\161\031\165\041\206\012\001\001\000\052\053\121\054" +
    "\036\057\076\061\013\065\u0156\070\046\071\122\072\104" +
    "\077\061\112\055\117\051\133\021\146\123\150\066\151" +
    "\006\153\017\155\101\161\031\165\041\206\012\001\001" +
    "\000\002\001\001\000\052\053\121\054\036\057\076\061" +
    "\013\065\u0155\070\046\071\122\072\104\077\061\112\055" +
    "\117\051\133\021\146\123\150\066\151\006\153\017\155" +
    "\101\161\031\165\041\206\012\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\054" +
    "\036\070\046\071\122\072\104\077\061\117\051\133\u0162" +
    "\151\006\153\017\155\101\161\031\165\041\001\001\000" +
    "\002\001\001\000\026\070\311\071\122\072\104\077\310" +
    "\117\307\153\017\155\101\156\u0163\160\306\161\304\001" +
    "\001\000\002\001\001\000\004\056\u0164\001\001\000\002" +
    "\001\001\000\056\040\u0166\041\u0169\053\u016a\054\036\057" +
    "\076\061\013\065\u0145\070\046\071\122\072\104\077\061" +
    "\112\055\117\051\133\u0168\146\123\150\066\151\006\153" +
    "\017\155\101\161\031\165\041\206\012\001\001\000\002" +
    "\001\001\000\034\054\036\070\046\071\122\072\104\077" +
    "\061\116\u0171\117\051\133\u0170\151\006\153\017\155\101" +
    "\161\031\165\041\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\052\053\u016e\054\036\057\076" +
    "\061\013\065\u0145\070\046\071\122\072\104\077\061\112" +
    "\055\117\051\133\u016c\146\123\150\066\151\006\153\017" +
    "\155\101\161\031\165\041\206\012\001\001\000\002\001" +
    "\001\000\034\054\036\070\046\071\122\072\104\077\061" +
    "\116\u016f\117\051\133\u0170\151\006\153\017\155\101\161" +
    "\031\165\041\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\052" +
    "\053\121\054\036\057\076\061\013\065\u0177\070\046\071" +
    "\122\072\104\077\061\112\055\117\051\133\021\146\123" +
    "\150\066\151\006\153\017\155\101\161\031\165\041\206" +
    "\012\001\001\000\002\001\001\000\004\023\u0179\001\001" +
    "\000\002\001\001\000\004\024\u018a\001\001\000\004\024" +
    "\u017c\001\001\000\002\001\001\000\004\024\u017e\001\001" +
    "\000\002\001\001\000\002\001\001\000\052\053\121\054" +
    "\036\057\076\061\013\065\u0186\070\046\071\122\072\104" +
    "\077\061\112\055\117\051\133\021\146\123\150\066\151" +
    "\006\153\017\155\101\161\031\165\041\206\012\001\001" +
    "\000\004\025\u0182\001\001\000\004\007\u0185\001\001\000" +
    "\002\001\001\000\002\001\001\000\064\006\163\010\160" +
    "\011\077\053\121\054\036\057\076\061\013\065\015\070" +
    "\046\071\122\072\104\077\061\112\055\117\051\131\161" +
    "\133\021\137\115\146\123\150\066\151\006\153\017\155" +
    "\101\161\031\165\041\206\012\001\001\000\004\025\u0187" +
    "\001\001\000\004\007\u0188\001\001\000\064\006\163\010" +
    "\160\011\077\053\121\054\036\057\076\061\013\065\015" +
    "\070\046\071\122\072\104\077\061\112\055\117\051\131" +
    "\161\133\021\137\115\146\123\150\066\151\006\153\017" +
    "\155\101\161\031\165\041\206\012\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\024\u018c\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\052\053\121\054\036\057\076\061\013\065\u0197\070\046" +
    "\071\122\072\104\077\061\112\055\117\051\133\021\146" +
    "\123\150\066\151\006\153\017\155\101\161\031\165\041" +
    "\206\012\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\110\u01aa\155\u019a" +
    "\001\001\000\002\001\001\000\032\054\036\070\046\071" +
    "\122\072\104\077\061\117\051\133\u01a8\151\006\153\017" +
    "\155\101\161\031\165\041\001\001\000\052\053\121\054" +
    "\036\057\076\061\013\065\u01a2\070\046\071\122\072\104" +
    "\077\061\112\055\117\051\133\021\146\123\150\066\151" +
    "\006\153\017\155\101\161\031\165\041\206\012\001\001" +
    "\000\006\110\u01a0\155\u019a\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\052" +
    "\053\121\054\036\057\076\061\013\065\u01a5\070\046\071" +
    "\122\072\104\077\061\112\055\117\051\133\021\146\123" +
    "\150\066\151\006\153\017\155\101\161\031\165\041\206" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\111\u01b0" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\033\u01b7\036" +
    "\147\037\150\145\145\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\u01ba\001\001\000\064\006\163\010" +
    "\160\011\077\053\121\054\036\057\076\061\013\065\015" +
    "\070\046\071\122\072\104\077\061\112\055\117\051\131" +
    "\161\133\021\137\115\146\123\150\066\151\006\153\017" +
    "\155\101\161\031\165\041\206\012\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\056\u01c2\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\064\006\163\010\160" +
    "\011\077\053\121\054\036\057\076\061\013\065\015\070" +
    "\046\071\122\072\104\077\061\112\055\117\051\131\161" +
    "\133\021\137\115\146\123\150\066\151\006\153\017\155" +
    "\101\161\031\165\041\206\012\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\110\u01aa\155" +
    "\u019a\001\001\000\006\110\u01a0\155\u019a\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\052\053\121\054\036\057\076\061" +
    "\013\065\u01d9\070\046\071\122\072\104\077\061\112\055" +
    "\117\051\133\021\146\123\150\066\151\006\153\017\155" +
    "\101\161\031\165\041\206\012\001\001\000\002\001\001" +
    "\000\002\001\001\000\052\053\121\054\036\057\076\061" +
    "\013\065\u01dc\070\046\071\122\072\104\077\061\112\055" +
    "\117\051\133\021\146\123\150\066\151\006\153\017\155" +
    "\101\161\031\165\041\206\012\001\001\000\002\001\001" +
    "\000\002\001\001\000\052\053\121\054\036\057\076\061" +
    "\013\065\u01df\070\046\071\122\072\104\077\061\112\055" +
    "\117\051\133\021\146\123\150\066\151\006\153\017\155" +
    "\101\161\031\165\041\206\012\001\001\000\002\001\001" +
    "\000\060\006\u01e3\011\077\026\u01e2\053\121\054\036\057" +
    "\076\061\013\065\015\070\046\071\122\072\104\077\061" +
    "\112\055\117\051\133\021\146\123\150\066\151\006\153" +
    "\017\155\101\161\031\165\041\206\012\001\001\000\004" +
    "\007\u01e4\001\001\000\002\001\001\000\002\001\001\000" +
    "\064\006\163\010\160\011\077\053\121\054\036\057\076" +
    "\061\013\065\015\070\046\071\122\072\104\077\061\112" +
    "\055\117\051\131\161\133\021\137\115\146\123\150\066" +
    "\151\006\153\017\155\101\161\031\165\041\206\012\001" +
    "\001\000\002\001\001\000\004\047\u01e7\001\001\000\002" +
    "\001\001\000\012\033\u01e9\036\147\037\150\145\145\001" +
    "\001\000\002\001\001\000\004\034\u01eb\001\001\000\002" +
    "\001\001\000\004\007\u01ed\001\001\000\064\006\163\010" +
    "\160\011\077\053\121\054\036\057\076\061\013\065\015" +
    "\070\046\071\122\072\104\077\061\112\055\117\051\131" +
    "\161\133\021\137\115\146\123\150\066\151\006\153\017" +
    "\155\101\161\031\165\041\206\012\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\110\u01aa" +
    "\155\u019a\001\001\000\006\110\u01a0\155\u019a\001\001\000" +
    "\002\001\001\000\056\051\u01f6\052\u01f7\053\121\054\036" +
    "\057\076\061\013\065\u01f5\070\046\071\122\072\104\077" +
    "\061\112\055\117\051\133\021\146\123\150\066\151\006" +
    "\153\017\155\101\161\031\165\041\206\012\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\044\u01f9\001\001\000\002\001\001\000\052\053\121\054" +
    "\036\057\076\061\013\065\u01fb\070\046\071\122\072\104" +
    "\077\061\112\055\117\051\133\021\146\123\150\066\151" +
    "\006\153\017\155\101\161\031\165\041\206\012\001\001" +
    "\000\002\001\001\000\056\051\u01fd\052\u01f7\053\121\054" +
    "\036\057\076\061\013\065\u01f5\070\046\071\122\072\104" +
    "\077\061\112\055\117\051\133\021\146\123\150\066\151" +
    "\006\153\017\155\101\161\031\165\041\206\012\001\001" +
    "\000\002\001\001\000\056\051\u01ff\052\u01f7\053\121\054" +
    "\036\057\076\061\013\065\u01f5\070\046\071\122\072\104" +
    "\077\061\112\055\117\051\133\021\146\123\150\066\151" +
    "\006\153\017\155\101\161\031\165\041\206\012\001\001" +
    "\000\002\001\001\000\060\006\u0203\011\077\017\u0201\053" +
    "\121\054\036\057\076\061\013\065\015\070\046\071\122" +
    "\072\104\077\061\112\055\117\051\133\021\146\123\150" +
    "\066\151\006\153\017\155\101\161\031\165\041\206\012" +
    "\001\001\000\002\001\001\000\004\007\u0204\001\001\000" +
    "\002\001\001\000\064\006\163\010\160\011\077\053\121" +
    "\054\036\057\076\061\013\065\015\070\046\071\122\072" +
    "\104\077\061\112\055\117\051\131\161\133\021\137\115" +
    "\146\123\150\066\151\006\153\017\155\101\161\031\165" +
    "\041\206\012\001\001\000\002\001\001\000\032\054\036" +
    "\070\046\071\122\072\104\077\061\117\051\133\u0207\151" +
    "\006\153\017\155\101\161\031\165\041\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\056\053\121\054\036\057\076\061\013\065\u01d7\070" +
    "\046\071\122\072\104\077\061\104\u020f\105\u01d6\112\055" +
    "\117\051\133\021\146\123\150\066\151\006\153\017\155" +
    "\101\161\031\165\041\206\012\001\001\000\002\001\001" +
    "\000\002\001\001\000\056\040\u0212\041\u0169\053\u016a\054" +
    "\036\057\076\061\013\065\u0145\070\046\071\122\072\104" +
    "\077\061\112\055\117\051\133\u0168\146\123\150\066\151" +
    "\006\153\017\155\101\161\031\165\041\206\012\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$PhpAstParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$PhpAstParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$PhpAstParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	protected final static Integer PUBLIC = new Integer(Modifiers.AccPublic);
	protected final static Integer PRIVATE = new Integer(Modifiers.AccPrivate);
	protected final static Integer PROTECTED = new Integer(Modifiers.AccProtected);
	protected final static Integer ABSTRACT = new Integer(Modifiers.AccAbstract);
	protected final static Integer FINAL = new Integer(Modifiers.AccFinal);
	protected final static Integer STATIC = new Integer(Modifiers.AccStatic);
	
	AST ast;
  
	public final void setAST (AST ast) {
		this.ast = ast;
	}

	public Dispatch createDispatch(VariableBase dispatcher, VariableBase property) {
		Dispatch dispatch = null;
		if (property instanceof Variable) {
			dispatch = new FieldAccess(dispatcher.getStart(), property.getEnd(), ast, dispatcher, (Variable)property);
		} else if (property instanceof FunctionInvocation) {
			dispatch = new MethodInvocation(dispatcher.getStart(), property.getEnd(), ast ,dispatcher, (FunctionInvocation)property);
		} else {
			throw new IllegalArgumentException();
		}
		return dispatch;
	}

    /**
     * Report a non fatal error (or warning).  This method takes a message
     * string and an additional object (to be used by specializations implemented in subclasses).
     * The super class prints the message to System.err.
     * @param message an error message.
     * @param info    an extra object reserved for use by specialized subclasses.
     */
    public void report_error(String message, Object info) {
		// System.err.print(message);
  		// if (info instanceof Symbol)
		//	if (((Symbol)info).left != -1)
		//		System.err.println(" at character " + ((Symbol)info).left + " of input");
		//	else System.err.println("");
	    // else 
	   	//	System.err.println("");
    }
	

	public void report_fatal_error(
    String   message, 
    Object   info)
    throws java.lang.Exception
    {
      /* stop parsing (not really necessary since we throw an exception, but) */
      done_parsing();

      /* use the normal error message reporting to put out the message */
      report_error(message, info);

      /* throw an exception */
     // throw new Exception("Can't recover from previous error(s)");
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$PhpAstParser$actions {
  private final PhpAstParser parser;

  /** Constructor */
  CUP$PhpAstParser$actions(PhpAstParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$PhpAstParser$do_action(
    int                        CUP$PhpAstParser$act_num,
    java_cup.runtime.lr_parser CUP$PhpAstParser$parser,
    java.util.Stack            CUP$PhpAstParser$stack,
    int                        CUP$PhpAstParser$top)
    throws java.lang.Exception
    {
      if (CUP$PhpAstParser$act_num < 100) {
        return CUP$PhpAstParser$do_action1(
             CUP$PhpAstParser$act_num, CUP$PhpAstParser$parser,CUP$PhpAstParser$stack,CUP$PhpAstParser$top);
      }
      else       if (CUP$PhpAstParser$act_num < 200) {
        return CUP$PhpAstParser$do_action2(
             CUP$PhpAstParser$act_num, CUP$PhpAstParser$parser,CUP$PhpAstParser$stack,CUP$PhpAstParser$top);
      }
      else       if (CUP$PhpAstParser$act_num < 300) {
        return CUP$PhpAstParser$do_action3(
             CUP$PhpAstParser$act_num, CUP$PhpAstParser$parser,CUP$PhpAstParser$stack,CUP$PhpAstParser$top);
      }
      else  {
        return CUP$PhpAstParser$do_action4(
             CUP$PhpAstParser$act_num, CUP$PhpAstParser$parser,CUP$PhpAstParser$stack,CUP$PhpAstParser$top);
      }
    }


  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$PhpAstParser$do_action1(
    int                        CUP$PhpAstParser$act_num,
    java_cup.runtime.lr_parser CUP$PhpAstParser$parser,
    java.util.Stack            CUP$PhpAstParser$stack,
    int                        CUP$PhpAstParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$PhpAstParser$result;

      /* select the action based on the action number */
      switch (CUP$PhpAstParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // thestart ::= top_statement_list 
            {
              Program RESULT = null;
		int sListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int sListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		List sList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	PhpAstLexer phpAstLexer = (PhpAstLexer) parser.getScanner();
	List commentList = phpAstLexer.getCommentList();
	RESULT = new Program(sListleft, sListright, parser.ast, sList, commentList);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(1/*thestart*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= thestart EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		RESULT = start_val;
              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$PhpAstParser$parser.done_parsing();
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // top_statement_list ::= top_statement_list top_statement 
            {
              List RESULT = null;
		int sListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int sListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List sList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	if(statement != null) {
		if (!(statement instanceof NamespaceDeclaration) && sList.size() > 0) {
			Statement lastStatement = (Statement) ((LinkedList) sList).getLast();
			//EmptyStatement length equals to 2,means it is "?>",equals to 1,means it is ";"
			if (!(statement instanceof EmptyStatement && statement.getLength() == 2) && lastStatement instanceof NamespaceDeclaration && !((NamespaceDeclaration)lastStatement).isBracketed()) {
				((NamespaceDeclaration)lastStatement).addStatement(statement);
			} else {
				sList.add(statement);
			}
		} else {
			sList.add(statement);
		}
	}
	RESULT = sList;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(2/*top_statement_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // top_statement_list ::= 
            {
              List RESULT = null;
		 
	RESULT = new LinkedList(); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(2/*top_statement_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // top_statement ::= statement 
            {
              Statement RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = statement; 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(3/*top_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // top_statement ::= function_declaration_statement 
            {
              Statement RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		FunctionDeclaration statement = (FunctionDeclaration)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = statement; 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(3/*top_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // inner_statement_list ::= inner_statement_list inner_statement 
            {
              List RESULT = null;
		int sListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int sListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List sList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	// Ignore null statements
	if(statement != null) {
		sList.add(statement);
	}		
	RESULT = sList;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(5/*inner_statement_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // inner_statement_list ::= 
            {
              List RESULT = null;
		 
	RESULT = new LinkedList(); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(5/*inner_statement_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // inner_statement ::= statement 
            {
              Statement RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = statement; 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(6/*inner_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // inner_statement ::= function_declaration_statement 
            {
              Statement RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		FunctionDeclaration statement = (FunctionDeclaration)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = statement; 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(6/*inner_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // statement ::= unticked_statement 
            {
              Statement RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = statement; 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(4/*statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // unticked_statement ::= T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int sListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int sListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List sList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new Block(tokenleft, eright, parser.ast, sList);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(7/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // unticked_statement ::= T_IF T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE statement elseif_list else_single 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-6)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-6)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-6)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).right;
		Expression cond = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).value;
		int iftrueleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int iftrueright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Statement iftrue = (Statement)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int elseifleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int elseifright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List[] elseif = (List[])((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int iffalseleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int iffalseright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Statement iffalse = (Statement)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	Expression innerCondition = null;	
	Statement trueStatement = null;
	Statement falseStatement = iffalse;

	for (int i=0 ; i < elseif[0].size() ; i++) {
		innerCondition = (Expression)elseif[0].get(i);	
	 	trueStatement = (Statement)elseif[1].get(i);
	 	int s = ((Integer)elseif[2].get(i)).intValue();
		falseStatement = new IfStatement(s, iffalseright, parser.ast, innerCondition, trueStatement, falseStatement);
	}
	RESULT = new IfStatement(tokenleft, iffalseright, parser.ast, cond, iftrue, falseStatement);		

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(7/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // unticked_statement ::= T_IF T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE T_NEKUDOTAIM inner_statement_list new_elseif_list new_else_single T_ENDIF T_SEMICOLON 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-9)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-9)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-9)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-7)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-7)).right;
		Expression cond = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-7)).value;
		int colonleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).right;
		Object colon = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).value;
		int ifTrueStatementListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).left;
		int ifTrueStatementListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).right;
		List ifTrueStatementList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).value;
		int elseifleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int elseifright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		List[] elseif = (List[])((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int iffalseleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int iffalseright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Statement iffalse = (Statement)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	Expression innerCondition = null;	
	Statement trueStatement = null;
	Statement falseStatement = iffalse;
		
	for (int i=0 ; i < elseif[0].size() ; i++) {
		innerCondition = (Expression)elseif[0].get(i);	
	 	trueStatement = (Statement)elseif[1].get(i);
	 	int s = ((Integer)elseif[2].get(i)).intValue();
		falseStatement = new IfStatement(s, iffalseright, parser.ast, innerCondition, trueStatement, falseStatement);
	}
	Block block = new Block(colonleft, ifTrueStatementListright, parser.ast, ifTrueStatementList, false);
	RESULT = new IfStatement(tokenleft, eright, parser.ast, cond, block, falseStatement);		

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(7/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-9)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // unticked_statement ::= T_WHILE T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE while_statement 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new WhileStatement(tokenleft, statementright, parser.ast, expr, statement);			

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(7/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // unticked_statement ::= T_DO statement T_WHILE T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE T_SEMICOLON 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-6)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-6)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-6)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new DoStatement(tokenleft, eright, parser.ast, expr, statement);			

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(7/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // unticked_statement ::= T_FOR T_OPEN_PARENTHESE for_expr T_SEMICOLON for_expr T_SEMICOLON for_expr T_CLOSE_PARENTHESE for_statement 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-8)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-8)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-8)).value;
		int initializationsleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-6)).left;
		int initializationsright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-6)).right;
		List initializations = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-6)).value;
		int condsleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).left;
		int condsright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).right;
		List conds = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).value;
		int increasementsleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int increasementsright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		List increasements = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
				
	RESULT = new ForStatement(tokenleft, statementright, parser.ast, initializations, conds, increasements, statement);			

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(7/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-8)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // unticked_statement ::= T_SWITCH T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE switch_case_list 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int caseBlockleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int caseBlockright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Block caseBlock = (Block)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new SwitchStatement(tokenleft, caseBlockright, parser.ast, expr, caseBlock);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(7/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // unticked_statement ::= T_BREAK T_SEMICOLON 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new BreakStatement(tokenleft, eright, parser.ast); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(7/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // unticked_statement ::= T_BREAK expr T_SEMICOLON 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new BreakStatement(tokenleft, eright, parser.ast, expr); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(7/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // unticked_statement ::= T_CONTINUE T_SEMICOLON 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new ContinueStatement(tokenleft, eright, parser.ast); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(7/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // unticked_statement ::= T_CONTINUE expr T_SEMICOLON 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new ContinueStatement(tokenleft, eright, parser.ast, expr); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(7/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // unticked_statement ::= T_RETURN T_SEMICOLON 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new ReturnStatement(tokenleft, eright, parser.ast); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(7/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // unticked_statement ::= T_RETURN expr_without_variable T_SEMICOLON 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new ReturnStatement(tokenleft, eright, parser.ast, expr); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(7/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // unticked_statement ::= T_RETURN variable T_SEMICOLON 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		VariableBase expr = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new ReturnStatement(tokenleft, eright, parser.ast, expr); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(7/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // unticked_statement ::= T_VAR static_var_list T_SEMICOLON 
            {
              Statement RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new VarStatement(sleft, eright, parser.ast, list);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(7/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // unticked_statement ::= T_INLINE_HTML 
            {
              Statement RESULT = null;
		int htmlleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int htmlright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object html = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new InLineHtml(htmlleft, htmlright, parser.ast);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(7/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // unticked_statement ::= expr T_SEMICOLON 
            {
              Statement RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new ExpressionStatement(exprleft, eright, parser.ast, expr);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(7/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // unticked_statement ::= T_SEMICOLON 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new EmptyStatement(tokenleft, tokenright, parser.ast); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(7/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // unticked_statement ::= T_THROW expr T_SEMICOLON 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new ThrowStatement(tokenleft, eright, parser.ast, expr); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(7/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // unticked_statement ::= T_GOTO T_STRING T_SEMICOLON 
            {
              Statement RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int labelleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		String label = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new GotoStatement(sleft, eright, parser.ast, new Identifier(labelleft, labelright, parser.ast, label));

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(7/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // unticked_statement ::= error 
            {
              Statement RESULT = null;
		int theErrorleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int theErrorright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object theError = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	ASTError error = new ASTError(theErrorleft, theErrorright, parser.ast);
	RESULT = error;	

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(7/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // unticked_statement ::= T_VAR_COMMENT unticked_statement 
            {
              Statement RESULT = null;
		int varCommentleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int varCommentright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		String varComment = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = statement;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(7/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // unset_variable ::= variable 
            {
              VariableBase RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = var;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(9/*unset_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // use_filename ::= T_CONSTANT_ENCAPSED_STRING 
            {
              Expression RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new Scalar(scalarleft, scalarright, parser.ast, scalar, Scalar.TYPE_STRING);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(10/*use_filename*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // use_filename ::= T_OPEN_PARENTHESE T_CONSTANT_ENCAPSED_STRING T_CLOSE_PARENTHESE 
            {
              Expression RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new Scalar(sleft, eright, parser.ast, scalar, Scalar.TYPE_STRING);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(10/*use_filename*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // function_declaration_statement ::= unticked_function_declaration_statement 
            {
              FunctionDeclaration RESULT = null;
		int functionDeclarationleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int functionDeclarationright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		FunctionDeclaration functionDeclaration = (FunctionDeclaration)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = functionDeclaration;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(87/*function_declaration_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // class_declaration_statement ::= unticked_class_declaration_statement 
            {
              Statement RESULT = null;
		int classDeclarationleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int classDeclarationright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Statement classDeclaration = (Statement)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = classDeclaration;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(88/*class_declaration_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // is_reference ::= 
            {
              Boolean RESULT = null;
		
	RESULT = Boolean.FALSE;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(37/*is_reference*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // is_reference ::= T_REFERENCE 
            {
              Boolean RESULT = null;
		
	RESULT = Boolean.TRUE;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(37/*is_reference*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // unticked_function_declaration_statement ::= T_FUNCTION is_reference T_STRING T_OPEN_PARENTHESE parameter_list T_CLOSE_PARENTHESE T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              FunctionDeclaration RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-8)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-8)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-8)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-7)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-7)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-7)).value;
		int fnleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-6)).left;
		int fnright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-6)).right;
		String fn = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-6)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).right;
		List paramList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).value;
		int blockStartleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int blockStartright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Object blockStart = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int sListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int sListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List sList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int blockEndleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int blockEndright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object blockEnd = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new FunctionDeclaration(sleft, blockEndright, parser.ast,
		new Identifier(fnleft, fnright, parser.ast, fn), paramList,
		new Block(blockStartleft, blockEndright, parser.ast, sList), isReference.booleanValue());

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(93/*unticked_function_declaration_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-8)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // unticked_class_declaration_statement ::= class_entry_type T_STRING extends_from implements_list T_CURLY_OPEN class_statement_list T_CURLY_CLOSE 
            {
              Statement RESULT = null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-6)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-6)).right;
		Integer modifier = (Integer)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-6)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).value;
		int superClassleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).left;
		int superClassright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).right;
		Expression superClass = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).value;
		int interfacesleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int interfacesright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		List interfaces = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int blockStartleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int blockStartright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Object blockStart = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int sListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int sListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List sList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int blockEndleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int blockEndright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object blockEnd = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	if(modifier.intValue()==ClassDeclaration.MODIFIER_TRAIT){
		RESULT = new TraitDeclaration(modifierleft ,blockEndright, parser.ast, ClassDeclaration.MODIFIER_NONE,
			new Identifier(classNameleft, classNameright, parser.ast, className), superClass, interfaces,
			new Block(blockStartleft, blockEndright, parser.ast, sList));
	}else{
		RESULT = new ClassDeclaration(modifierleft ,blockEndright, parser.ast, modifier.intValue(),
			new Identifier(classNameleft, classNameright, parser.ast, className), superClass, interfaces,
			new Block(blockStartleft, blockEndright, parser.ast, sList));
	}

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(94/*unticked_class_declaration_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // class_entry_type ::= T_CLASS 
            {
              Integer RESULT = null;
		
	RESULT = new Integer(ClassDeclaration.MODIFIER_NONE);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(95/*class_entry_type*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // class_entry_type ::= T_ABSTRACT T_CLASS 
            {
              Integer RESULT = null;
		
	RESULT = new Integer(ClassDeclaration.MODIFIER_ABSTRACT);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(95/*class_entry_type*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // class_entry_type ::= T_FINAL T_CLASS 
            {
              Integer RESULT = null;
		
	RESULT = new Integer(ClassDeclaration.MODIFIER_FINAL);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(95/*class_entry_type*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // class_entry_type ::= T_TRAIT 
            {
              Integer RESULT = null;
		
	RESULT = new Integer(ClassDeclaration.MODIFIER_TRAIT);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(95/*class_entry_type*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // extends_from ::= 
            {
              Expression RESULT = null;
		
	RESULT = null;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(96/*extends_from*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // interface_entry ::= T_INTERFACE 
            {
              Integer RESULT = null;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(74/*interface_entry*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // implements_list ::= 
            {
              List RESULT = null;
		
	List list = new LinkedList();
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(97/*implements_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // implements_list ::= T_IMPLEMENTS interface_list 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(97/*implements_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // foreach_optional_arg ::= 
            {
              Expression RESULT = null;
		 
	RESULT = null;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(11/*foreach_optional_arg*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // foreach_optional_arg ::= T_DOUBLE_ARROW foreach_variable 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = var;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(11/*foreach_optional_arg*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // foreach_variable ::= variable 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = var;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(12/*foreach_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // foreach_variable ::= T_REFERENCE variable 
            {
              Expression RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new Reference (sleft, varright, parser.ast, var);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(12/*foreach_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // for_statement ::= statement 
            {
              Statement RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = statement;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(13/*for_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // for_statement ::= T_NEKUDOTAIM inner_statement_list T_ENDFOR 
            {
              Statement RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	Block block = new Block(startleft, endright, parser.ast, statementList, false);
	RESULT = block;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(13/*for_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // foreach_statement ::= statement 
            {
              Statement RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = statement;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(14/*foreach_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // foreach_statement ::= T_NEKUDOTAIM inner_statement_list T_ENDFOREACH 
            {
              Statement RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	Block block = new Block(startleft, endright, parser.ast, statementList, false);
	RESULT = block;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(14/*foreach_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // declare_statement ::= statement 
            {
              Statement RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = statement;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(15/*declare_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // declare_statement ::= T_NEKUDOTAIM inner_statement_list T_ENDDECLARE 
            {
              Statement RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	Block block = new Block(startleft, endright, parser.ast, statementList, false);
	RESULT = block;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(15/*declare_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // declare_list ::= T_STRING T_EQUAL static_scalar 
            {
              List[] RESULT = null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		String key = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	List listKeys = new LinkedList();
	List listValues = new LinkedList();
	
	listKeys.add(new Identifier(keyleft, keyright, parser.ast, key));
	listValues.add(value);

	RESULT = new List[] { listKeys, listValues };

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(16/*declare_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // declare_list ::= declare_list T_COMMA T_STRING T_EQUAL static_scalar 
            {
              List[] RESULT = null;
		int listsleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).left;
		int listsright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).right;
		List[] lists = (List[])((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).value;
		int keyleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		String key = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	lists[0].add(new Identifier(keyleft, keyright, parser.ast, key));
	lists[1].add(value);
	RESULT = lists;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(16/*declare_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // switch_case_list ::= T_CURLY_OPEN case_list T_CURLY_CLOSE 
            {
              Block RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new Block(sleft, eright, parser.ast, caseList);	

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(17/*switch_case_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // switch_case_list ::= T_CURLY_OPEN T_SEMICOLON case_list T_CURLY_CLOSE 
            {
              Block RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new Block(sleft, eright, parser.ast, caseList);	

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(17/*switch_case_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // switch_case_list ::= T_NEKUDOTAIM case_list T_ENDSWITCH 
            {
              Block RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	Block block = new Block(startleft, endright, parser.ast, caseList, false);	
	RESULT = block; 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(17/*switch_case_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // switch_case_list ::= T_NEKUDOTAIM T_SEMICOLON case_list T_ENDSWITCH 
            {
              Block RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	Block block = new Block(startleft, endright, parser.ast, caseList, false);	
	RESULT = block; 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(17/*switch_case_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // case_list ::= 
            {
              List RESULT = null;
		
	RESULT = new LinkedList(); // of SwitchCase

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(18/*case_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // case_list ::= case_list T_CASE expr case_separator inner_statement_list 
            {
              List RESULT = null;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		List statements = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	SwitchCase switchCase = new SwitchCase(tokenleft, statementsright, parser.ast, expr, statements, false);
	if (caseList == null) {
		caseList = new LinkedList(); // of switchCase
	}
	caseList.add(switchCase);
	RESULT = caseList;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(18/*case_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // case_list ::= case_list T_DEFAULT case_separator inner_statement_list 
            {
              List RESULT = null;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		List statements = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	SwitchCase switchCase = new SwitchCase(tokenleft, statementsright, parser.ast, null, statements, true);
	if (caseList == null) {
		caseList = new LinkedList(); // of SwitchCase
	}
	caseList.add(switchCase);
	RESULT = caseList;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(18/*case_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // case_separator ::= T_NEKUDOTAIM 
            {
              Object RESULT = null;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(19/*case_separator*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // case_separator ::= T_SEMICOLON 
            {
              Object RESULT = null;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(19/*case_separator*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // while_statement ::= statement 
            {
              Statement RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = statement;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(20/*while_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // while_statement ::= T_NEKUDOTAIM inner_statement_list T_ENDWHILE 
            {
              Statement RESULT = null;
		int colonleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Object colon = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	Block block = new Block(colonleft, endright, parser.ast, statementList, false);
	RESULT = block;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(20/*while_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // elseif_list ::= 
            {
              List[] RESULT = null;
		
	List listConditions = new LinkedList();
	List listStatements = new LinkedList();
	List listTokens = new LinkedList();
	RESULT = new List[] { listConditions, listStatements, listTokens };

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(21/*elseif_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // elseif_list ::= elseif_list T_ELSEIF T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE statement 
            {
              List[] RESULT = null;
		int elseifListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).left;
		int elseifListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).right;
		List[] elseifList = (List[])((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Expression cond = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int iftrueleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int iftrueright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Statement iftrue = (Statement)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
			
	((LinkedList)elseifList[0]).addFirst(cond);
	((LinkedList)elseifList[1]).addFirst(iftrue);
	((LinkedList)elseifList[2]).addFirst(new Integer(tokenleft));
	RESULT = elseifList;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(21/*elseif_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // new_elseif_list ::= 
            {
              List[] RESULT = null;
		
	List listConditions = new LinkedList();
	List listStatements = new LinkedList();
	List listTokens = new LinkedList();
	RESULT = new List[] { listConditions, listStatements, listTokens };

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(22/*new_elseif_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // new_elseif_list ::= new_elseif_list T_ELSEIF T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE T_NEKUDOTAIM inner_statement_list 
            {
              List[] RESULT = null;
		int elseifListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-6)).left;
		int elseifListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-6)).right;
		List[] elseifList = (List[])((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-6)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		Expression cond = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int colonleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Object colon = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int sListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int sListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		List sList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
			
	Block block = new Block(colonleft, sListright, parser.ast, sList, false);
	((LinkedList)elseifList[0]).addFirst(cond);
	((LinkedList)elseifList[1]).addFirst(block);
	((LinkedList)elseifList[2]).addFirst(new Integer(tokenleft));
	RESULT = elseifList;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(22/*new_elseif_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // else_single ::= 
            {
              Statement RESULT = null;
		
	RESULT = null;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(23/*else_single*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // else_single ::= T_ELSE statement 
            {
              Statement RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = statement;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(23/*else_single*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // new_else_single ::= 
            {
              Statement RESULT = null;
		
	RESULT = null;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(24/*new_else_single*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // new_else_single ::= T_ELSE T_NEKUDOTAIM inner_statement_list 
            {
              Statement RESULT = null;
		int colonleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Object colon = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new Block(colonleft, listright, parser.ast, list, false);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(24/*new_else_single*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // parameter_list ::= non_empty_parameter_list 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(25/*parameter_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // parameter_list ::= 
            {
              List RESULT = null;
		
	RESULT = new LinkedList();

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(25/*parameter_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // non_empty_parameter_list ::= parameter 
            {
              List RESULT = null;
		int parameterleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int parameterright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		FormalParameter parameter = (FormalParameter)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	List list = new LinkedList();
	list.add(parameter);
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(28/*non_empty_parameter_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // non_empty_parameter_list ::= non_empty_parameter_list T_COMMA parameter 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int parameterleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int parameterright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		FormalParameter parameter = (FormalParameter)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	list.add(parameter);
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(28/*non_empty_parameter_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // parameter ::= optional_class_type T_STRING 
            {
              FormalParameter RESULT = null;
		int classTypeleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int classTyperight = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Expression classType = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	int s = classType == null ? varleft : classTypeleft;
	Variable v = new Variable(varleft, varright, parser.ast, var);
	RESULT = new FormalParameter(s, varright, parser.ast, classType, v);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(29/*parameter*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // parameter ::= optional_class_type T_VARIABLE T_EQUAL static_scalar 
            {
              FormalParameter RESULT = null;
		int classTypeleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int classTyperight = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		Expression classType = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression scalar = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	int s = classType == null ? varleft : classTypeleft;
	Variable v = new Variable(varleft, varright, parser.ast, var);
	RESULT = new FormalParameter(s, scalarright, parser.ast, classType, v, scalar);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(29/*parameter*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // optional_class_type ::= 
            {
              Expression RESULT = null;
		
	RESULT = null;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(99/*optional_class_type*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // function_call_parameter_list ::= non_empty_function_call_parameter_list 
            {
              List RESULT = null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		List paramsList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = paramsList;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(30/*function_call_parameter_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // function_call_parameter_list ::= 
            {
              List RESULT = null;
		
	RESULT = new LinkedList();

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(30/*function_call_parameter_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // non_empty_function_call_parameter_list ::= expr_without_variable 
            {
              List RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	List paramsList = new LinkedList();
	paramsList.add(var);	
	RESULT = paramsList;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(31/*non_empty_function_call_parameter_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // non_empty_function_call_parameter_list ::= variable 
            {
              List RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	List paramsList = new LinkedList();
	paramsList.add(var);	
	RESULT = paramsList;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(31/*non_empty_function_call_parameter_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // non_empty_function_call_parameter_list ::= T_REFERENCE w_variable 
            {
              List RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	List paramsList = new LinkedList();
	Expression var_ref = new Reference(sleft, varright, parser.ast, var);
	paramsList.add(var_ref);	
	RESULT = paramsList;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(31/*non_empty_function_call_parameter_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // non_empty_function_call_parameter_list ::= non_empty_function_call_parameter_list T_COMMA expr_without_variable 
            {
              List RESULT = null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		List paramsList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	paramsList.add(var);	
	RESULT = paramsList;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(31/*non_empty_function_call_parameter_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // non_empty_function_call_parameter_list ::= non_empty_function_call_parameter_list T_COMMA variable 
            {
              List RESULT = null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		List paramsList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	paramsList.add(var);
	RESULT = paramsList;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(31/*non_empty_function_call_parameter_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // non_empty_function_call_parameter_list ::= non_empty_function_call_parameter_list T_COMMA T_REFERENCE w_variable 
            {
              List RESULT = null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		List paramsList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	Expression var_ref = new Reference(sleft, varright, parser.ast, var);
	paramsList.add(var_ref);	
	RESULT = paramsList;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(31/*non_empty_function_call_parameter_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // global_var_list ::= global_var_list T_COMMA global_var 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	list.add(var);
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(32/*global_var_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // global_var_list ::= global_var 
            {
              List RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	List list = new LinkedList();
	list.add(var);
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(32/*global_var_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // global_var ::= T_VARIABLE 
            {
              VariableBase RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new Variable(varleft, varright, parser.ast, var);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(33/*global_var*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // global_var ::= T_DOLLAR r_variable 
            {
              VariableBase RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new ReflectionVariable(sleft, varright, parser.ast, var);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(33/*global_var*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$PhpAstParser$do_action2(
    int                        CUP$PhpAstParser$act_num,
    java_cup.runtime.lr_parser CUP$PhpAstParser$parser,
    java.util.Stack            CUP$PhpAstParser$stack,
    int                        CUP$PhpAstParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$PhpAstParser$result;

      /* select the action based on the action number */
      switch (CUP$PhpAstParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // global_var ::= T_DOLLAR T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              VariableBase RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Expression varName = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new ReflectionVariable(sleft, eright, parser.ast, varName);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(33/*global_var*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // static_var_list ::= static_var_list T_COMMA T_STRING 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	Variable v = new Variable(varleft, varright, parser.ast, var); 
	list.add(v);
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(34/*static_var_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // static_var_list ::= static_var_list T_COMMA T_STRING T_EQUAL var_expr 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	Variable v = new Variable(varleft, varright, parser.ast, var); 
	Assignment assignment = new Assignment(varleft, exprright, parser.ast, v, Assignment.OP_EQUAL, expr); 
	list.add(assignment);
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(34/*static_var_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // static_var_list ::= T_STRING 
            {
              List RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	Variable v = new Variable(varleft, varright, parser.ast, var); 
	List list = new LinkedList();
	list.add(v);
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(34/*static_var_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // static_var_list ::= T_STRING T_EQUAL var_expr 
            {
              List RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	Variable v = new Variable(varleft, varright, parser.ast, var); 
	Assignment assignment = new Assignment(varleft, exprright, parser.ast, v, Assignment.OP_EQUAL, expr); 
	List list = new LinkedList();
	list.add(assignment);
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(34/*static_var_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // class_statement_list ::= class_statement_list class_statement 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int classStatementleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int classStatementright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Statement classStatement = (Statement)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	list.add(classStatement);
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(35/*class_statement_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // class_statement_list ::= 
            {
              List RESULT = null;
		
	RESULT = new LinkedList();

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(35/*class_statement_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // class_statement ::= variable_modifiers class_variable_declaration T_SEMICOLON 
            {
              Statement RESULT = null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Integer modifier = (Integer)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int decListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int decListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List decList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new FieldsDeclaration(modifierleft, eright, parser.ast, modifier.intValue(), decList);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(36/*class_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // class_statement ::= constant_declaration T_SEMICOLON 
            {
              Statement RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new ConstantDeclaration(listleft, eright, parser.ast, list);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(36/*class_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // class_statement ::= method_modifiers T_FUNCTION is_reference T_STRING T_OPEN_PARENTHESE parameter_list T_CLOSE_PARENTHESE method_body 
            {
              Statement RESULT = null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-7)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-7)).right;
		Integer modifier = (Integer)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-7)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-6)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-6)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-6)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).value;
		int fnleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).left;
		int fnright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).right;
		String fn = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		List paramList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Block body = (Block)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	int methodStart = modifier == null ? sleft : modifierleft;
	modifier = modifier == null ? PhpAstParser.PUBLIC : modifier;
	Identifier functionId = new Identifier(fnleft, fnright, parser.ast, fn);
	FunctionDeclaration functionDeclaration = new FunctionDeclaration(sleft, bodyright, parser.ast, functionId, paramList, body, isReference.booleanValue());
	RESULT = new MethodDeclaration(methodStart, bodyright, parser.ast, modifier.intValue(), functionDeclaration, true);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(36/*class_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // class_statement ::= T_VAR_COMMENT unticked_statement 
            {
              Statement RESULT = null;
		int varCommentleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int varCommentright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		String varComment = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = statement;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(36/*class_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // trait_modifiers ::= 
            {
              Integer RESULT = null;
		
	RESULT = null;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(127/*trait_modifiers*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // trait_modifiers ::= member_modifier 
            {
              Integer RESULT = null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Integer modifier = (Integer)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = modifier;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(127/*trait_modifiers*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // method_body ::= T_SEMICOLON 
            {
              Block RESULT = null;
		
	RESULT = null;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(82/*method_body*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // method_body ::= T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              Block RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	Block block = new Block(sleft, eright, parser.ast, list);
	RESULT = block;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(82/*method_body*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // variable_modifiers ::= non_empty_member_modifiers 
            {
              Integer RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	int result = 0;
	for (Iterator it = list.iterator(); it.hasNext() ; ) {
		Integer modifier = (Integer)it.next();
		result |= modifier.intValue();
	}
	RESULT = new Integer(result);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(101/*variable_modifiers*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // method_modifiers ::= 
            {
              Integer RESULT = null;
		
	RESULT = null;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(81/*method_modifiers*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // method_modifiers ::= non_empty_member_modifiers 
            {
              Integer RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	int result = 0;
	for (Iterator it = list.iterator(); it.hasNext() ; ) {
		Integer modifier = (Integer)it.next();
		result |= modifier.intValue();
	}
	RESULT = new Integer(result);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(81/*method_modifiers*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // non_empty_member_modifiers ::= member_modifier 
            {
              List RESULT = null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Integer modifier = (Integer)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	List list = new LinkedList();
	list.add(modifier);
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(83/*non_empty_member_modifiers*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // non_empty_member_modifiers ::= non_empty_member_modifiers member_modifier 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Integer modifier = (Integer)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	list.add(modifier);
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(83/*non_empty_member_modifiers*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // member_modifier ::= T_PUBLIC 
            {
              Integer RESULT = null;
		
	RESULT = PhpAstParser.PUBLIC;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(84/*member_modifier*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // member_modifier ::= T_PROTECTED 
            {
              Integer RESULT = null;
		
	RESULT = PhpAstParser.PROTECTED;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(84/*member_modifier*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // member_modifier ::= T_PRIVATE 
            {
              Integer RESULT = null;
		
	RESULT = PhpAstParser.PRIVATE;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(84/*member_modifier*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // member_modifier ::= T_STATIC 
            {
              Integer RESULT = null;
		
	RESULT = PhpAstParser.STATIC;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(84/*member_modifier*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // member_modifier ::= T_ABSTRACT 
            {
              Integer RESULT = null;
		
	RESULT = PhpAstParser.ABSTRACT;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(84/*member_modifier*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // member_modifier ::= T_FINAL 
            {
              Integer RESULT = null;
		
	RESULT = PhpAstParser.FINAL;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(84/*member_modifier*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // class_variable_declaration ::= class_variable_declaration T_COMMA T_VARIABLE 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	Variable varId = new Variable(varleft, varright, parser.ast, var);
	list.add(new ASTNode[] {varId, null});
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(79/*class_variable_declaration*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // class_variable_declaration ::= class_variable_declaration T_COMMA T_VARIABLE T_EQUAL static_scalar 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	Variable varId = new Variable(varleft, varright, parser.ast, var);
	list.add(new ASTNode[] {varId, expr});
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(79/*class_variable_declaration*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // class_variable_declaration ::= T_VARIABLE 
            {
              List RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	List list = new LinkedList();
	Variable varId = new Variable(varleft, varright, parser.ast, var);
	list.add(new ASTNode[] {varId, null});
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(79/*class_variable_declaration*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // class_variable_declaration ::= T_VARIABLE T_EQUAL static_scalar 
            {
              List RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	List list = new LinkedList();
	Variable varId = new Variable(varleft, varright, parser.ast, var);
	list.add(new ASTNode[] {varId, expr});
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(79/*class_variable_declaration*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // constant_declaration ::= constant_declaration T_COMMA T_STRING T_EQUAL static_scalar 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).value;
		int constNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int constNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		String constName = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	Identifier constId = new Identifier(constNameleft, constNameright, parser.ast, constName);
	list.add(new ASTNode[] {constId, expr});
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(80/*constant_declaration*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // constant_declaration ::= T_CONST T_STRING T_EQUAL static_scalar 
            {
              List RESULT = null;
		int constNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int constNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		String constName = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	List list = new LinkedList();
	Identifier constId = new Identifier(constNameleft, constNameright, parser.ast, constName);
	list.add(new ASTNode[] {constId, expr});
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(80/*constant_declaration*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // echo_expr_list ::= echo_expr_list T_COMMA expr 
            {
              List RESULT = null;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		List exprList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	exprList.add(expr);
	RESULT = exprList;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(38/*echo_expr_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // echo_expr_list ::= expr 
            {
              List RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	List exprList = new LinkedList();
	exprList.add(expr);
	RESULT = exprList;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(38/*echo_expr_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // for_expr ::= 
            {
              List RESULT = null;
		
	RESULT = new LinkedList();

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(39/*for_expr*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // for_expr ::= non_empty_for_expr 
            {
              List RESULT = null;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		List exprList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = exprList;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(39/*for_expr*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // non_empty_for_expr ::= non_empty_for_expr T_COMMA expr 
            {
              List RESULT = null;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		List exprList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	exprList.add(expr);
	RESULT = exprList;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(40/*non_empty_for_expr*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // non_empty_for_expr ::= expr 
            {
              List RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	List exprList = new LinkedList();
	exprList.add(expr);
	RESULT = exprList;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(40/*non_empty_for_expr*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // non_empty_for_expr ::= T_VAR static_var_list 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(40/*non_empty_for_expr*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // instance_call ::= 
            {
              ChainingInstanceCall RESULT = null;
		
	RESULT = null;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(131/*instance_call*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // new_expr ::= T_NEW class_name_reference ctor_arguments 
            {
              ClassInstanceCreation RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		ClassName className = (ClassName)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int ctorleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int ctorright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		List ctor = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new ClassInstanceCreation(sleft, ctorright, parser.ast, className, ctor);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(132/*new_expr*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // expr_without_variable ::= T_LIST T_OPEN_PARENTHESE assignment_list T_CLOSE_PARENTHESE T_EQUAL expr 
            {
              Expression RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).value;
		int varListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		List varList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int closeleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int closeright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Object close = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	ListVariable vars = new ListVariable(sleft, closeright, parser.ast, varList);
	RESULT = new Assignment(sleft, exprright, parser.ast, vars, Assignment.OP_EQUAL, expr);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(41/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // expr_without_variable ::= variable T_EQUAL expr 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new Assignment(varleft, exprright, parser.ast, var, Assignment.OP_EQUAL, expr); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(41/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // expr_without_variable ::= variable T_EQUAL T_REFERENCE variable 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int reftokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int reftokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Object reftoken = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int refvarleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int refvarright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		VariableBase refvar = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new Assignment(varleft, refvarright, parser.ast, var, Assignment.OP_EQUAL, new Reference(reftokenleft, refvarright, parser.ast, refvar)); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(41/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // expr_without_variable ::= variable T_EQUAL T_REFERENCE T_NEW class_name_reference ctor_arguments 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).value;
		int reftokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int reftokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		Object reftoken = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		ClassName className = (ClassName)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int ctorleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int ctorright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		List ctor = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new Assignment(varleft, ctorright, parser.ast, var, Assignment.OP_EQUAL, 
		new Reference(reftokenleft, ctorright, parser.ast, 
			new ClassInstanceCreation(sleft, ctorright, parser.ast, className, ctor)));

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(41/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // expr_without_variable ::= T_CLONE expr 
            {
              Expression RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new CloneExpression(sleft, exprright, parser.ast, expr);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(41/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // expr_without_variable ::= variable T_PLUS_EQUAL expr 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new Assignment(varleft, exprright, parser.ast, var , Assignment.OP_PLUS_EQUAL, expr); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(41/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // expr_without_variable ::= variable T_MINUS_EQUAL expr 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new Assignment(varleft, exprright, parser.ast, var , Assignment.OP_MINUS_EQUAL, expr); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(41/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // expr_without_variable ::= variable T_MUL_EQUAL expr 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new Assignment(varleft, exprright, parser.ast, var , Assignment.OP_MUL_EQUAL, expr); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(41/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // expr_without_variable ::= variable T_DIV_EQUAL expr 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 	
	RESULT = new Assignment(varleft, exprright, parser.ast, var , Assignment.OP_DIV_EQUAL, expr); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(41/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // expr_without_variable ::= variable T_CONCAT_EQUAL expr 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new Assignment(varleft, exprright, parser.ast, var , Assignment.OP_CONCAT_EQUAL, expr); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(41/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // expr_without_variable ::= variable T_MOD_EQUAL expr 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new Assignment(varleft, exprright, parser.ast, var , Assignment.OP_MOD_EQUAL, expr); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(41/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // expr_without_variable ::= variable T_AND_EQUAL expr 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new Assignment(varleft, exprright, parser.ast, var , Assignment.OP_AND_EQUAL, expr); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(41/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // expr_without_variable ::= variable T_OR_EQUAL expr 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new Assignment(varleft, exprright, parser.ast, var , Assignment.OP_OR_EQUAL, expr); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(41/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // expr_without_variable ::= variable T_XOR_EQUAL expr 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new Assignment(varleft, exprright, parser.ast, var , Assignment.OP_XOR_EQUAL, expr); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(41/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // expr_without_variable ::= variable T_SL_EQUAL expr 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new Assignment(varleft, exprright, parser.ast, var , Assignment.OP_SL_EQUAL, expr); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(41/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // expr_without_variable ::= variable T_SR_EQUAL expr 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new Assignment(varleft, exprright, parser.ast, var , Assignment.OP_SR_EQUAL, expr); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(41/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // expr_without_variable ::= rw_variable T_INC 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new PostfixExpression(varleft, tokenright, parser.ast, var , PostfixExpression.OP_INC); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(41/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // expr_without_variable ::= T_INC rw_variable 
            {
              Expression RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new PrefixExpression(tokenleft, varright, parser.ast, var , PrefixExpression.OP_INC); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(41/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // expr_without_variable ::= rw_variable T_DEC 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new PostfixExpression(varleft, tokenright, parser.ast, var , PostfixExpression.OP_DEC); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(41/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // expr_without_variable ::= T_DEC rw_variable 
            {
              Expression RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new PrefixExpression(tokenleft, varright, parser.ast, var , PrefixExpression.OP_DEC); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(41/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // expr_without_variable ::= expr T_BOOLEAN_OR expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1 , InfixExpression.OP_BOOL_OR, expr2); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(41/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // expr_without_variable ::= expr T_BOOLEAN_AND expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1 , InfixExpression.OP_BOOL_AND, expr2); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(41/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // expr_without_variable ::= expr T_LOGICAL_OR expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1 , InfixExpression.OP_STRING_OR, expr2); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(41/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // expr_without_variable ::= expr T_LOGICAL_AND expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1 , InfixExpression.OP_STRING_AND, expr2); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(41/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // expr_without_variable ::= expr T_LOGICAL_XOR expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1 , InfixExpression.OP_STRING_XOR, expr2);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(41/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // expr_without_variable ::= expr T_OR expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1 , InfixExpression.OP_OR, expr2); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(41/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // expr_without_variable ::= expr T_REFERENCE expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1 , InfixExpression.OP_AND, expr2); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(41/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // expr_without_variable ::= expr T_KOVA expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1 , InfixExpression.OP_XOR, expr2); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(41/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // expr_without_variable ::= expr T_NEKUDA expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1 , InfixExpression.OP_CONCAT, expr2); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(41/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // expr_without_variable ::= expr T_PLUS expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1 , InfixExpression.OP_PLUS, expr2); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(41/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // expr_without_variable ::= expr T_MINUS expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1 , InfixExpression.OP_MINUS, expr2); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(41/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // expr_without_variable ::= expr T_TIMES expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1 , InfixExpression.OP_MUL, expr2); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(41/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // expr_without_variable ::= expr T_DIV expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1 , InfixExpression.OP_DIV, expr2); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(41/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // expr_without_variable ::= expr T_PRECENT expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1 , InfixExpression.OP_MOD, expr2); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(41/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // expr_without_variable ::= expr T_SL expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1 , InfixExpression.OP_SL, expr2); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(41/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // expr_without_variable ::= expr T_SR expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1 , InfixExpression.OP_SR, expr2); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(41/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // expr_without_variable ::= T_PLUS expr 
            {
              Expression RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new UnaryOperation(tokenleft, exprright, parser.ast, expr , UnaryOperation.OP_PLUS); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(41/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // expr_without_variable ::= T_MINUS expr 
            {
              Expression RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new UnaryOperation(tokenleft, exprright, parser.ast, expr , UnaryOperation.OP_MINUS); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(41/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // expr_without_variable ::= T_NOT expr 
            {
              Expression RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new UnaryOperation(tokenleft, exprright, parser.ast, expr , UnaryOperation.OP_NOT); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(41/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // expr_without_variable ::= T_TILDA expr 
            {
              Expression RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new UnaryOperation(tokenleft, exprright, parser.ast, expr , UnaryOperation.OP_TILDA); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(41/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // expr_without_variable ::= expr T_IS_IDENTICAL expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1 , InfixExpression.OP_IS_IDENTICAL, expr2); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(41/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // expr_without_variable ::= expr T_IS_NOT_IDENTICAL expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1 , InfixExpression.OP_IS_NOT_IDENTICAL, expr2); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(41/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // expr_without_variable ::= expr T_IS_EQUAL expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1 , InfixExpression.OP_IS_EQUAL, expr2); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(41/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // expr_without_variable ::= expr T_IS_NOT_EQUAL expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1 , InfixExpression.OP_IS_NOT_EQUAL, expr2); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(41/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // expr_without_variable ::= expr T_RGREATER expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1 , InfixExpression.OP_RGREATER, expr2); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(41/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // expr_without_variable ::= expr T_IS_SMALLER_OR_EQUAL expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1 , InfixExpression.OP_IS_SMALLER_OR_EQUAL, expr2); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(41/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // expr_without_variable ::= expr T_LGREATER expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1 , InfixExpression.OP_LGREATER, expr2); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(41/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // expr_without_variable ::= expr T_IS_GREATER_OR_EQUAL expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1 , InfixExpression.OP_IS_GREATER_OR_EQUAL, expr2); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(41/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // expr_without_variable ::= expr T_INSTANCEOF class_name_reference 
            {
              Expression RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		ClassName className = (ClassName)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new InstanceOfExpression(exprleft, classNameright, parser.ast, expr , className); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(41/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // expr_without_variable ::= T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE 
            {
              Expression RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new ParenthesisExpression(sleft, eright, parser.ast, expr);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(41/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // expr_without_variable ::= new_expr 
            {
              Expression RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		ClassInstanceCreation expr = (ClassInstanceCreation)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = expr; 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(41/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // expr_without_variable ::= T_OPEN_PARENTHESE new_expr T_CLOSE_PARENTHESE instance_call 
            {
              Expression RESULT = null;
		int openleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int openright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		Object open = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		ClassInstanceCreation expr = (ClassInstanceCreation)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int callleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int callright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		ChainingInstanceCall call = (ChainingInstanceCall)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	expr = expr.cloneWithNewStart(openleft);
	expr.setChainingInstanceCall(call);
	
	if (call!=null && !call.getChainingMethodOrProperty().isEmpty()) {
		// then get the aggregated list of properties (->...->...->...)
		List list = call.getChainingMethodOrProperty();
		
		// now create the dispatch(es) nodes 
		Dispatch dispatch = null;
		VariableBase dispatcher = expr;
	
		Iterator listIt = list.iterator();
		while (listIt.hasNext()) {
			VariableBase property = (VariableBase)listIt.next();
			dispatch = parser.createDispatch(dispatcher, property);
			dispatcher = dispatch;
		}	
		RESULT = dispatcher;
	}else{
		RESULT = expr; 
	}

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(41/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // expr_without_variable ::= expr T_QUESTION_MARK expr T_NEKUDOTAIM expr 
            {
              Expression RESULT = null;
		int condleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).right;
		Expression cond = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).value;
		int ifTrueleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int ifTrueright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Expression ifTrue = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int ifFalseleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int ifFalseright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression ifFalse = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new ConditionalExpression(condleft, ifFalseright, parser.ast, cond , ifTrue, ifFalse); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(41/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // expr_without_variable ::= expr T_QUESTION_MARK T_NEKUDOTAIM expr 
            {
              Expression RESULT = null;
		int condleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		Expression cond = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int ifFalseleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int ifFalseright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression ifFalse = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new ConditionalExpression(condleft, ifFalseright, parser.ast, cond , null, ifFalse); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(41/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // expr_without_variable ::= internal_functions_in_yacc 
            {
              Expression RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = expr;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(41/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // expr_without_variable ::= T_INT_CAST expr 
            {
              Expression RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new CastExpression(tokenleft, exprright, parser.ast, expr , CastExpression.TYPE_INT); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(41/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // expr_without_variable ::= T_DOUBLE_CAST expr 
            {
              Expression RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new CastExpression(tokenleft, exprright, parser.ast, expr , CastExpression.TYPE_REAL); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(41/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // expr_without_variable ::= T_STRING_CAST expr 
            {
              Expression RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new CastExpression(tokenleft, exprright, parser.ast, expr , CastExpression.TYPE_STRING); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(41/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // expr_without_variable ::= T_ARRAY_CAST expr 
            {
              Expression RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new CastExpression(tokenleft, exprright, parser.ast, expr , CastExpression.TYPE_ARRAY); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(41/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$PhpAstParser$do_action3(
    int                        CUP$PhpAstParser$act_num,
    java_cup.runtime.lr_parser CUP$PhpAstParser$parser,
    java.util.Stack            CUP$PhpAstParser$stack,
    int                        CUP$PhpAstParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$PhpAstParser$result;

      /* select the action based on the action number */
      switch (CUP$PhpAstParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // expr_without_variable ::= T_OBJECT_CAST expr 
            {
              Expression RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new CastExpression(tokenleft, exprright, parser.ast, expr , CastExpression.TYPE_OBJECT); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(41/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // expr_without_variable ::= T_BOOL_CAST expr 
            {
              Expression RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new CastExpression(tokenleft, exprright, parser.ast, expr , CastExpression.TYPE_BOOL); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(41/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // expr_without_variable ::= T_UNSET_CAST expr 
            {
              Expression RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new CastExpression(tokenleft, exprright, parser.ast, expr , CastExpression.TYPE_UNSET); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(41/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // expr_without_variable ::= T_EXIT exit_expr 
            {
              Expression RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	List expList = new LinkedList();
	if (expr != null) {
		expList.add(expr);
	}
	RESULT = new FunctionInvocation(sleft, exprright, parser.ast,
		new FunctionName(sleft, sright, parser.ast, 
			new Identifier(sleft, sright, parser.ast, s)), expList);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(41/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // expr_without_variable ::= T_AT expr 
            {
              Expression RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new IgnoreError(sleft, exprright, parser.ast, expr);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(41/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // expr_without_variable ::= scalar 
            {
              Expression RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression scalar = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = scalar; 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(41/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // expr_without_variable ::= T_ARRAY T_OPEN_PARENTHESE array_pair_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new ArrayCreation(sleft, eright, parser.ast, list);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(41/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // expr_without_variable ::= T_OPEN_RECT array_pair_list T_CLOSE_RECT 
            {
              Expression RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new ArrayCreation(sleft, eright, parser.ast, list,false);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(41/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // expr_without_variable ::= T_BACKQUATE backticks_expr T_BACKQUATE 
            {
              Expression RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new BackTickExpression(sleft, eright, parser.ast, list);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(41/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // expr_without_variable ::= T_PRINT expr 
            {
              Expression RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	List expList = new LinkedList();
	if (expr != null) {
		expList.add(expr);
	}
	RESULT = new FunctionInvocation(sleft, exprright, parser.ast,
		new FunctionName(sleft, sright, parser.ast, 
			new Identifier(sleft, sright, parser.ast, "print")), expList);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(41/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // expr_without_variable ::= T_FUNCTION is_reference T_OPEN_PARENTHESE parameter_list T_CLOSE_PARENTHESE lexical_vars T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              Expression RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-8)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-8)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-8)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-7)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-7)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-7)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).right;
		List paramList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).value;
		int varsListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int varsListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		List varsList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int blockStartleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int blockStartright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Object blockStart = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int blockEndleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int blockEndright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object blockEnd = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new LambdaFunctionDeclaration(sleft, blockEndright, parser.ast, paramList, varsList, 
		new Block(blockStartleft, blockEndright, parser.ast, list), isReference.booleanValue());

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(41/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-8)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // expr_without_variable ::= T_STATIC T_FUNCTION is_reference T_OPEN_PARENTHESE parameter_list T_CLOSE_PARENTHESE lexical_vars T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              Expression RESULT = null;
		int stleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-9)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-9)).right;
		Object st = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-9)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-8)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-8)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-8)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-7)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-7)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-7)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).right;
		List paramList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).value;
		int varsListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int varsListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		List varsList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int blockStartleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int blockStartright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Object blockStart = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int blockEndleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int blockEndright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object blockEnd = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new LambdaFunctionDeclaration(sleft, blockEndright, parser.ast, paramList, varsList, 
		new Block(blockStartleft, blockEndright, parser.ast, list), isReference.booleanValue(),true,stleft);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(41/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-9)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // lexical_vars ::= 
            {
              List RESULT = null;
		
	RESULT = null;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(26/*lexical_vars*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // lexical_vars ::= T_USE T_OPEN_PARENTHESE lexical_var_list T_CLOSE_PARENTHESE 
            {
              List RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(26/*lexical_vars*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // lexical_var_list ::= lexical_var_list T_COMMA T_VARIABLE 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	Variable v = new Variable(varleft, varright, parser.ast, var);
	list.add(v);
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(27/*lexical_var_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // lexical_var_list ::= lexical_var_list T_COMMA T_REFERENCE T_VARIABLE 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int refleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Object ref = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	list.add(new Reference (refleft, varright, parser.ast, new Variable(varleft, varright, parser.ast, var)));
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(27/*lexical_var_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // lexical_var_list ::= T_VARIABLE 
            {
              List RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	List list = new LinkedList();
	list.add(new Variable(varleft, varright, parser.ast, var));
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(27/*lexical_var_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // lexical_var_list ::= T_REFERENCE T_VARIABLE 
            {
              List RESULT = null;
		int refleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Object ref = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	List list = new LinkedList();
	list.add(new Reference (refleft, varright, parser.ast, new Variable(varleft, varright, parser.ast, var)));
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(27/*lexical_var_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // function_call ::= variable_without_objects T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              VariableBase RESULT = null;
		int reflectionNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int reflectionNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		Variable reflectionName = (Variable)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List parameters = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new FunctionInvocation(reflectionNameleft, eright, parser.ast, 
		new FunctionName(reflectionNameleft, reflectionNameright, parser.ast, reflectionName), parameters); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(42/*function_call*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // class_name ::= T_STATIC 
            {
              Expression RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new Identifier(sleft, sright, parser.ast, "static");

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(77/*class_name*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // class_name ::= T_ARRAY 
            {
              Expression RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new Identifier(sleft, sright, parser.ast, "Array");

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(77/*class_name*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // class_name_reference ::= class_name 
            {
              ClassName RESULT = null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new ClassName(classNameleft, classNameright, parser.ast, className);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(108/*class_name_reference*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // class_name_reference ::= dynamic_class_name_reference 
            {
              ClassName RESULT = null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		ClassName className = (ClassName)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = className;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(108/*class_name_reference*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // dynamic_class_name_reference ::= base_variable 
            {
              ClassName RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	 RESULT = new ClassName(varleft, varright, parser.ast, var);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(110/*dynamic_class_name_reference*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // exit_expr ::= 
            {
              Expression RESULT = null;
		
	RESULT = null;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(43/*exit_expr*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // exit_expr ::= T_OPEN_PARENTHESE T_CLOSE_PARENTHESE 
            {
              Expression RESULT = null;
		
	RESULT = null;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(43/*exit_expr*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // exit_expr ::= T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE 
            {
              Expression RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		
	RESULT = expr;	

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(43/*exit_expr*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // backticks_expr ::= 
            {
              List RESULT = null;
		
	RESULT = new LinkedList();

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(69/*backticks_expr*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // backticks_expr ::= T_ENCAPSED_AND_WHITESPACE 
            {
              List RESULT = null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	List list = new LinkedList();
	Scalar scalar = new Scalar(stringleft, stringright, parser.ast, string, string == null ? Scalar.TYPE_UNKNOWN : Scalar.TYPE_STRING);
	list.add(scalar);
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(69/*backticks_expr*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // backticks_expr ::= encaps_list 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(69/*backticks_expr*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // ctor_arguments ::= 
            {
              List RESULT = null;
		
	RESULT = new LinkedList();

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(44/*ctor_arguments*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // ctor_arguments ::= T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              List RESULT = null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List paramsList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		
	RESULT = paramsList;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(44/*ctor_arguments*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // common_scalar ::= T_LNUMBER 
            {
              Expression RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new Scalar(scalarleft, scalarright, parser.ast, scalar, Scalar.TYPE_INT);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(45/*common_scalar*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // common_scalar ::= T_DNUMBER 
            {
              Expression RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new Scalar(scalarleft, scalarright, parser.ast, scalar, Scalar.TYPE_REAL);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(45/*common_scalar*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // common_scalar ::= T_BNUMBER 
            {
              Expression RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new Scalar(scalarleft, scalarright, parser.ast, scalar, Scalar.TYPE_BIN);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(45/*common_scalar*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // common_scalar ::= T_CONSTANT_ENCAPSED_STRING 
            {
              Expression RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new Scalar(scalarleft, scalarright, parser.ast, scalar, Scalar.TYPE_STRING);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(45/*common_scalar*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // common_scalar ::= T_LINE 
            {
              Expression RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new Scalar(scalarleft, scalarright, parser.ast, "__LINE__", Scalar.TYPE_SYSTEM);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(45/*common_scalar*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // common_scalar ::= T_FILE 
            {
              Expression RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new Scalar(scalarleft, scalarright, parser.ast, "__FILE__", Scalar.TYPE_SYSTEM);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(45/*common_scalar*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // common_scalar ::= T_DIR 
            {
              Expression RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new Scalar(scalarleft, scalarright, parser.ast, "__DIR__", Scalar.TYPE_SYSTEM);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(45/*common_scalar*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // common_scalar ::= T_CLASS_C 
            {
              Expression RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new Scalar(scalarleft, scalarright, parser.ast, "__CLASS__", Scalar.TYPE_SYSTEM);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(45/*common_scalar*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // common_scalar ::= T_TRAIT_C 
            {
              Expression RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new Scalar(scalarleft, scalarright, parser.ast, "__TRAIT__", Scalar.TYPE_SYSTEM);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(45/*common_scalar*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // common_scalar ::= T_METHOD_C 
            {
              Expression RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new Scalar(scalarleft, scalarright, parser.ast, "__METHOD__", Scalar.TYPE_SYSTEM);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(45/*common_scalar*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // common_scalar ::= T_FUNC_C 
            {
              Expression RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new Scalar(scalarleft, scalarright, parser.ast, "__FUNCTION__", Scalar.TYPE_SYSTEM);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(45/*common_scalar*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // common_scalar ::= T_NS_C 
            {
              Expression RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new Scalar(scalarleft, scalarright, parser.ast, "__NAMESPACE__", Scalar.TYPE_SYSTEM);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(45/*common_scalar*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // common_scalar ::= T_START_HEREDOC T_ENCAPSED_AND_WHITESPACE T_END_HEREDOC 
            {
              Expression RESULT = null;
		int labelleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		String label = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	List list = new LinkedList();
	list.add(new Scalar(stringleft, stringright, parser.ast, string, string == null ? Scalar.TYPE_UNKNOWN : Scalar.TYPE_STRING));
	RESULT = new Quote(labelleft, eright, parser.ast, list, label.charAt(0) == '\'' ? Quote.QT_NOWDOC : Quote.QT_HEREDOC);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(45/*common_scalar*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // common_scalar ::= T_START_HEREDOC T_END_HEREDOC 
            {
              Expression RESULT = null;
		int labelleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		String label = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new Quote(labelleft, eright, parser.ast, new LinkedList(), label.charAt(0) == '\'' ? Quote.QT_NOWDOC : Quote.QT_HEREDOC);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(45/*common_scalar*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // static_scalar ::= common_scalar 
            {
              Expression RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression scalar = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = scalar;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(46/*static_scalar*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // static_scalar ::= T_PLUS static_scalar 
            {
              Expression RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new UnaryOperation(sleft, exprright, parser.ast, expr, UnaryOperation.OP_PLUS);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(46/*static_scalar*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // static_scalar ::= T_MINUS static_scalar 
            {
              Expression RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new UnaryOperation(sleft, exprright, parser.ast, expr, UnaryOperation.OP_MINUS);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(46/*static_scalar*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // static_scalar ::= T_ARRAY T_OPEN_PARENTHESE static_array_pair_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new ArrayCreation(sleft, eright, parser.ast, list);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(46/*static_scalar*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // static_scalar ::= T_OPEN_RECT static_array_pair_list T_CLOSE_RECT 
            {
              Expression RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new ArrayCreation(sleft, eright, parser.ast, list,false);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(46/*static_scalar*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // static_scalar ::= static_class_constant 
            {
              Expression RESULT = null;
		int classConstantleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int classConstantright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		StaticConstantAccess classConstant = (StaticConstantAccess)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = classConstant;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(46/*static_scalar*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // static_class_constant ::= class_name T_PAAMAYIM_NEKUDOTAYIM T_STRING 
            {
              StaticConstantAccess RESULT = null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new StaticConstantAccess(classNameleft, varNameright, parser.ast, className, 
		new Identifier(varNameleft, varNameright, parser.ast, varName)); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(114/*static_class_constant*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // scalar ::= T_STRING_VARNAME 
            {
              Expression RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new Scalar(scalarleft, scalarright, parser.ast, scalar, Scalar.TYPE_STRING);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(47/*scalar*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // scalar ::= common_scalar 
            {
              Expression RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression scalar = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = scalar;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(47/*scalar*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // scalar ::= T_QUATE encaps_list T_QUATE 
            {
              Expression RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new Quote(sleft, eright, parser.ast, list, Quote.QT_QUOTE);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(47/*scalar*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // scalar ::= T_START_HEREDOC encaps_list T_END_HEREDOC 
            {
              Expression RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new Quote(sleft, eright, parser.ast, list, Quote.QT_HEREDOC);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(47/*scalar*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // static_array_pair_list ::= 
            {
              List RESULT = null;
		
	RESULT = new LinkedList();

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(48/*static_array_pair_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // static_array_pair_list ::= non_empty_static_array_pair_list possible_comma 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(48/*static_array_pair_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // possible_comma ::= 
            {
              Object RESULT = null;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(49/*possible_comma*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // possible_comma ::= T_COMMA 
            {
              Object RESULT = null;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(49/*possible_comma*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // non_empty_static_array_pair_list ::= non_empty_static_array_pair_list T_COMMA static_scalar T_DOUBLE_ARROW static_scalar 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).value;
		int keyleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	list.add(new ArrayElement(keyleft, valueright, parser.ast, key, value));
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(50/*non_empty_static_array_pair_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // non_empty_static_array_pair_list ::= non_empty_static_array_pair_list T_COMMA static_scalar 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	list.add(new ArrayElement(valueleft, valueright, parser.ast, value));
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(50/*non_empty_static_array_pair_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // non_empty_static_array_pair_list ::= static_scalar T_DOUBLE_ARROW static_scalar 
            {
              List RESULT = null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	List list = new LinkedList();
	list.add(new ArrayElement(keyleft, valueright, parser.ast, key, value));
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(50/*non_empty_static_array_pair_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // non_empty_static_array_pair_list ::= static_scalar 
            {
              List RESULT = null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	List list = new LinkedList();
	list.add(new ArrayElement(valueleft, valueright, parser.ast, value));
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(50/*non_empty_static_array_pair_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // var_expr ::= expr 
            {
              Expression RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
		RESULT = expr;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(52/*var_expr*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // var_expr ::= T_CURLY_OPEN object_pair_list T_CURLY_CLOSE 
            {
              Expression RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
		RESULT = new ArrayCreation(sleft, eright, parser.ast, list);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(52/*var_expr*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // expr ::= r_variable 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 RESULT = var; 
              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(51/*expr*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // expr ::= expr_without_variable 
            {
              Expression RESULT = null;
		int ewvleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int ewvright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression ewv = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 RESULT = ewv; 
              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(51/*expr*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // r_variable ::= variable 
            {
              VariableBase RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 RESULT = var; 
              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(100/*r_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // w_variable ::= variable 
            {
              VariableBase RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 RESULT = var; 
              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(76/*w_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // rw_variable ::= variable 
            {
              VariableBase RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 RESULT = var; 
              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(102/*rw_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // variable ::= base_variable_with_function_calls 
            {
              VariableBase RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = var; 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(89/*variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // method ::= T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              ParameterAndDereferenceList RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List paramsList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	ParameterAndDereferenceList list = new ParameterAndDereferenceList();
	list.parameterList = paramsList;
	RESULT = list;	

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(133/*method*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // array_method_dereference ::= array_method_dereference T_OPEN_RECT dim_offset T_CLOSE_RECT 
            {
              ParameterAndDereferenceList RESULT = null;
		int dereferenceleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int dereferenceright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		ParameterAndDereferenceList dereference = (ParameterAndDereferenceList)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	DereferenceNode var = new DereferenceNode(startleft, endright,parser.ast, index);
	dereference.arrayDereferenceList.getDereferences().add(var);
	RESULT = dereference;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(134/*array_method_dereference*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // array_method_dereference ::= method T_OPEN_RECT dim_offset T_CLOSE_RECT 
            {
              ParameterAndDereferenceList RESULT = null;
		int methodleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int methodright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		ParameterAndDereferenceList method = (ParameterAndDereferenceList)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	PHPArrayDereferenceList arrayDereferenceList = new PHPArrayDereferenceList(parser.ast);
	method.arrayDereferenceList = arrayDereferenceList;
	DereferenceNode var = new DereferenceNode(startleft, endright,parser.ast, index);
	arrayDereferenceList.getDereferences().add(var);
	RESULT = method;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(134/*array_method_dereference*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // method_or_not ::= array_method_dereference 
            {
              ParameterAndDereferenceList RESULT = null;
		int dereferenceleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int dereferenceright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		ParameterAndDereferenceList dereference = (ParameterAndDereferenceList)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	//RESULT = (PHPCallArgumentsList)dereference.getParent();
	RESULT = dereference;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(85/*method_or_not*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // method_or_not ::= method 
            {
              ParameterAndDereferenceList RESULT = null;
		int methodleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int methodright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		ParameterAndDereferenceList method = (ParameterAndDereferenceList)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = method;	

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(85/*method_or_not*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // method_or_not ::= 
            {
              ParameterAndDereferenceList RESULT = null;
		
	RESULT = null;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(85/*method_or_not*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // variable_without_objects ::= reference_variable 
            {
              Variable RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = var; 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(103/*variable_without_objects*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // variable_without_objects ::= simple_indirect_reference reference_variable 
            {
              Variable RESULT = null;
		int ref_countleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int ref_countright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Integer ref_count = (Integer)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	// the ref_count counts the number of reflection (DOLLAR sign) so now we should 
	// accomulate the dolars into reflection variables
	Variable finalVar = var;
	for (int i=0; i<ref_count.intValue(); i++) {
		finalVar = new ReflectionVariable(ref_countright - i - 1, varright, parser.ast, finalVar);				
	}
	RESULT = finalVar;	

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(103/*variable_without_objects*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // static_member ::= class_name T_PAAMAYIM_NEKUDOTAYIM variable_without_objects 
            {
              VariableBase RESULT = null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new StaticFieldAccess(classNameleft, varright, parser.ast, className, var);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(105/*static_member*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // static_member ::= variable_class_name T_PAAMAYIM_NEKUDOTAYIM variable_without_objects 
            {
              VariableBase RESULT = null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Variable className = (Variable)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new StaticFieldAccess(classNameleft, varright, parser.ast, className, var);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(105/*static_member*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // variable_class_name ::= reference_variable 
            {
              Variable RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = var;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(55/*variable_class_name*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // base_variable_with_function_calls ::= base_variable 
            {
              VariableBase RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 RESULT = var; 
              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(115/*base_variable_with_function_calls*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // base_variable_with_function_calls ::= function_call 
            {
              VariableBase RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 RESULT = var; 
              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(115/*base_variable_with_function_calls*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // base_variable ::= reference_variable 
            {
              VariableBase RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = var; 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(111/*base_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // base_variable ::= simple_indirect_reference reference_variable 
            {
              VariableBase RESULT = null;
		int ref_countleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int ref_countright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Integer ref_count = (Integer)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	// the ref_count counts the number of reflection (DOLLAR sign) so now we should 
	// accomulate the dolars into reflection variables
	VariableBase finalVar = var;
	for (int i=0; i<ref_count.intValue(); i++) {
		finalVar = new ReflectionVariable(ref_countright - i - 1, varright, parser.ast, finalVar);				
	}
	RESULT = finalVar;	

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(111/*base_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // base_variable ::= static_member 
            {
              VariableBase RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		VariableBase s = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = s;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(111/*base_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // reference_variable ::= reference_variable T_OPEN_RECT dim_offset T_CLOSE_RECT 
            {
              Variable RESULT = null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		Variable varName = (Variable)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new ArrayAccess(varNameleft, eright, parser.ast, varName, index, ArrayAccess.VARIABLE_ARRAY);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(54/*reference_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // reference_variable ::= reference_variable T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              Variable RESULT = null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		Variable varName = (Variable)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new ArrayAccess(varNameleft, eright, parser.ast, varName, index, ArrayAccess.VARIABLE_HASHTABLE);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(54/*reference_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // reference_variable ::= compound_variable 
            {
              Variable RESULT = null;
		int comp_varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int comp_varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Variable comp_var = (Variable)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 RESULT = comp_var; 
              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(54/*reference_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // compound_variable ::= tracked_variable 
            {
              Variable RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 RESULT = var; 
              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(56/*compound_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // compound_variable ::= T_DOLLAR T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              Variable RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	ReflectionVariable var = new ReflectionVariable(sleft, eright, parser.ast, expr);
	RESULT = var;	 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(56/*compound_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // dim_offset ::= expr 
            {
              Expression RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = expr; 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(57/*dim_offset*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // variable_name ::= T_STRING 
            {
              VariableBase RESULT = null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new Variable(varNameleft, varNameright, parser.ast, varName); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(60/*variable_name*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // variable_name ::= T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              VariableBase RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new ReflectionVariable(sleft, eright, parser.ast, expr); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(60/*variable_name*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // simple_indirect_reference ::= T_DOLLAR 
            {
              Integer RESULT = null;
		
	RESULT = new Integer(1);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(61/*simple_indirect_reference*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // simple_indirect_reference ::= simple_indirect_reference T_DOLLAR 
            {
              Integer RESULT = null;
		int refleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Integer ref = (Integer)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		
	RESULT = new Integer(1 + ref.intValue());

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(61/*simple_indirect_reference*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // assignment_list ::= assignment_list T_COMMA assignment_list_element 
            {
              List RESULT = null;
		int listElementsleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int listElementsright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		List listElements = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int elementleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int elementright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		VariableBase element = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	if (element != null) {
		listElements.add(element);
	} else {
		listElements.add(new Variable(elementleft, elementright, parser.ast, ""));
	}	
	RESULT = listElements;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(62/*assignment_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$PhpAstParser$do_action4(
    int                        CUP$PhpAstParser$act_num,
    java_cup.runtime.lr_parser CUP$PhpAstParser$parser,
    java.util.Stack            CUP$PhpAstParser$stack,
    int                        CUP$PhpAstParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$PhpAstParser$result;

      /* select the action based on the action number */
      switch (CUP$PhpAstParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // assignment_list ::= assignment_list_element 
            {
              List RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	List listElements = new LinkedList();
	if (var != null) {
		listElements.add(var);	
	} else {
		listElements.add(new Variable(varleft, varright, parser.ast, ""));
	}
	RESULT = listElements;
	;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(62/*assignment_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // assignment_list_element ::= variable 
            {
              VariableBase RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = var;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(63/*assignment_list_element*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // assignment_list_element ::= T_LIST T_OPEN_PARENTHESE assignment_list T_CLOSE_PARENTHESE 
            {
              VariableBase RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int varListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List varList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new ListVariable(sleft, eright, parser.ast, varList);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(63/*assignment_list_element*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // assignment_list_element ::= 
            {
              VariableBase RESULT = null;
		
	RESULT = null;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(63/*assignment_list_element*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // object_pair_list ::= 
            {
              List RESULT = null;
		
	RESULT = new LinkedList();

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(64/*object_pair_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // object_pair_list ::= non_empty_object_pair_list possible_comma 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(64/*object_pair_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // non_empty_object_pair_list ::= non_empty_object_pair_list T_COMMA expr T_NEKUDOTAIM expr 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).value;
		int keyleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	list.add(new ArrayElement(keyleft, valueright, parser.ast, key, value));
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(65/*non_empty_object_pair_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // non_empty_object_pair_list ::= expr T_NEKUDOTAIM expr 
            {
              List RESULT = null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	List list = new LinkedList();
	list.add(new ArrayElement(keyleft, valueright, parser.ast, key, value));
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(65/*non_empty_object_pair_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // non_empty_object_pair_list ::= non_empty_object_pair_list T_COMMA expr 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	list.add(new ArrayElement(exprleft, exprright, parser.ast, expr));
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(65/*non_empty_object_pair_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // non_empty_object_pair_list ::= expr 
            {
              List RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	List list = new LinkedList();
	list.add(new ArrayElement(exprleft, exprright, parser.ast, expr));
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(65/*non_empty_object_pair_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // array_pair_list ::= 
            {
              List RESULT = null;
		
	RESULT = new LinkedList();

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(66/*array_pair_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // array_pair_list ::= non_empty_array_pair_list 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(66/*array_pair_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // non_empty_array_pair_list ::= non_empty_array_pair_list T_COMMA expr 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	list.add(new ArrayElement(exprleft, exprright, parser.ast, expr));
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(67/*non_empty_array_pair_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // non_empty_array_pair_list ::= expr 
            {
              List RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	List list = new LinkedList();
	list.add(new ArrayElement(exprleft, exprright, parser.ast, expr));
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(67/*non_empty_array_pair_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // encaps_list ::= encaps_list encaps_var 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	list.add(var);
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(68/*encaps_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // encaps_list ::= encaps_list T_ENCAPSED_AND_WHITESPACE 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	list.add(new Scalar(stringleft, stringright, parser.ast, string, string == null ? Scalar.TYPE_UNKNOWN : Scalar.TYPE_STRING));
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(68/*encaps_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // encaps_list ::= encaps_var 
            {
              List RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	List list = new LinkedList();
	list.add(var);
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(68/*encaps_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // encaps_list ::= T_ENCAPSED_AND_WHITESPACE encaps_var 
            {
              List RESULT = null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	List list = new LinkedList();
	list.add(new Scalar(stringleft, stringright, parser.ast, string, string == null ? Scalar.TYPE_UNKNOWN : Scalar.TYPE_STRING));
	list.add(var);
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(68/*encaps_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // encaps_var ::= tracked_variable 
            {
              VariableBase RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = var;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(70/*encaps_var*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // encaps_var ::= tracked_variable T_OPEN_RECT encaps_var_offset T_CLOSE_RECT 
            {
              VariableBase RESULT = null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		Variable varName = (Variable)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new ArrayAccess(varNameleft, eright, parser.ast, varName, index, ArrayAccess.VARIABLE_ARRAY);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(70/*encaps_var*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // encaps_var ::= tracked_variable T_OBJECT_OPERATOR T_STRING 
            {
              VariableBase RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = parser.createDispatch(var, new Variable(stringleft, stringright, parser.ast, string));

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(70/*encaps_var*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // encaps_var ::= T_DOLLAR_OPEN_CURLY_BRACES expr T_CURLY_CLOSE 
            {
              VariableBase RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new ReflectionVariable(sleft, eright, parser.ast, expr);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(70/*encaps_var*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // encaps_var ::= T_DOLLAR_OPEN_CURLY_BRACES T_STRING_VARNAME T_OPEN_RECT expr T_CLOSE_RECT T_CURLY_CLOSE 
            {
              VariableBase RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new ArrayAccess(sleft, eright, parser.ast,
		new Variable(varNameleft, varNameright, parser.ast, varName), index, ArrayAccess.VARIABLE_ARRAY);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(70/*encaps_var*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // encaps_var ::= T_CURLY_OPEN_WITH_DOLAR variable T_CURLY_CLOSE 
            {
              VariableBase RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new ReflectionVariable(sleft, eright, parser.ast, var);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(70/*encaps_var*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // encaps_var_offset ::= T_STRING 
            {
              Expression RESULT = null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new Identifier(stringleft, stringright, parser.ast, string);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(71/*encaps_var_offset*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // encaps_var_offset ::= T_NUM_STRING 
            {
              Expression RESULT = null;
		int numleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new Scalar(numleft,numright, parser.ast, num, Scalar.TYPE_REAL);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(71/*encaps_var_offset*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // internal_functions_in_yacc ::= T_ISSET T_OPEN_PARENTHESE isset_variables T_CLOSE_PARENTHESE 
            {
              Expression RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int varListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List varList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new FunctionInvocation(sleft, eright, parser.ast, 
		new FunctionName(sleft, sright, parser.ast, 
			new Identifier(sleft, sright, parser.ast, "isset")), varList);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(72/*internal_functions_in_yacc*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // internal_functions_in_yacc ::= T_EMPTY T_OPEN_PARENTHESE variable T_CLOSE_PARENTHESE 
            {
              Expression RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	LinkedList varList = new LinkedList();
	varList.add(var);
	RESULT = new FunctionInvocation(sleft, eright, parser.ast, 
		new FunctionName(sleft, sright, parser.ast, new Identifier(sleft, sright, parser.ast, "empty")), varList);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(72/*internal_functions_in_yacc*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // internal_functions_in_yacc ::= T_INCLUDE expr 
            {
              Expression RESULT = null;
		int includeleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int includeright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		String include = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new Include(includeleft, exprright, parser.ast, expr, Include.IT_INCLUDE);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(72/*internal_functions_in_yacc*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // internal_functions_in_yacc ::= T_INCLUDE_ONCE expr 
            {
              Expression RESULT = null;
		int includeleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int includeright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		String include = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new Include(includeleft, exprright, parser.ast, expr, Include.IT_INCLUDE_ONCE);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(72/*internal_functions_in_yacc*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // internal_functions_in_yacc ::= T_EVAL T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE 
            {
              Expression RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	LinkedList exprList = new LinkedList();
	exprList.add(expr);
	RESULT = new FunctionInvocation(sleft, eright, parser.ast, 
		new FunctionName(sleft, sright, parser.ast, new Identifier(sleft, sright, parser.ast, "eval")), exprList);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(72/*internal_functions_in_yacc*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // internal_functions_in_yacc ::= T_REQUIRE expr 
            {
              Expression RESULT = null;
		int includeleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int includeright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		String include = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new Include(includeleft, exprright, parser.ast, expr, Include.IT_REQUIRE);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(72/*internal_functions_in_yacc*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // internal_functions_in_yacc ::= T_REQUIRE_ONCE expr 
            {
              Expression RESULT = null;
		int includeleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int includeright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		String include = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new Include(includeleft, exprright, parser.ast, expr, Include.IT_REQUIRE_ONCE);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(72/*internal_functions_in_yacc*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // isset_variables ::= variable 
            {
              List RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	List list = new LinkedList();
	list.add(var);
	RESULT = list;	

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(106/*isset_variables*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // isset_variables ::= isset_variables T_COMMA variable 
            {
              List RESULT = null;
		int varListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		List varList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	varList.add(var);
	RESULT = varList;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(106/*isset_variables*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // class_constant ::= class_name T_PAAMAYIM_NEKUDOTAYIM T_STRING 
            {
              StaticConstantAccess RESULT = null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new StaticConstantAccess(classNameleft, varNameright, parser.ast, className, 
		new Identifier(varNameleft, varNameright, parser.ast, varName)); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(109/*class_constant*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // class_constant ::= variable_class_name T_PAAMAYIM_NEKUDOTAYIM T_STRING 
            {
              StaticConstantAccess RESULT = null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Variable className = (Variable)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new StaticConstantAccess(classNameleft, varNameright, parser.ast, className, 
		new Identifier(varNameleft, varNameright, parser.ast, varName)); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(109/*class_constant*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // tracked_variable ::= T_STRING 
            {
              Variable RESULT = null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new Variable(varNameleft, varNameright, parser.ast, varName); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(107/*tracked_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // string_st ::= T_STRING 
            {
              String RESULT = null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 RESULT = value; 
              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(73/*string_st*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

