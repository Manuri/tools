<!--
		~ Copyright 2005-2007 WSO2, Inc. (http://wso2.com) ~ ~ Licensed under
		the Apache License, Version 2.0 (the "License"); ~ you may not use
		this file except in compliance with the License. ~ You may obtain a
		copy of the License at ~ ~ http://www.apache.org/licenses/LICENSE-2.0
		~ ~ Unless required by applicable law or agreed to in writing,
		software ~ distributed under the License is distributed on an "AS IS"
		BASIS, ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
		or implied. ~ See the License for the specific language governing
		permissions and ~ limitations under the License.
	-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
        "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
	<body>

		<h1>Retail Banking Sample</h1>
		<p>
		This document explain how you can model simple scenario of a normal retail bank when a 
		customer wants to open a bank account. 
        </p>
		<h2>Content</h2>
		<div class="toc">
			<ul>
				<li>
					<a href="#sample">Sample Scenario</a>
				</li>
				<li>
					<a href="#design">Design the Solution</a>
				</li>
				<li>
					<a href="#prerequisits">Pre-requisits</a>
				</li>
				<li>
					<a href="#source">Download Source</a>
				</li>
				<li>
					<a href="#try">Try the Sample with WSO2 Developer Studio</a>
				</li>
			</ul>
		</div>

		<h2 id="sample">Sample Scenario</h2>
		<p>
		This sample is about account opening process of a normal retail bank. We are going to develop 
		a simple application to model that scenario using <strong>WSO2 Developer Studio</strong>.
		</p>
		
		<p>
		Here is a simplified description of a common retail banking process.
		</p>
		
		<p>
		When a potential customer walks into a bank branch to open an account, the first thing the 
		bank does is establish the person's identity. 
		Once the person's identity is established, the branch staff perform a query against a 
		customer database to see if the person is an existing customer. Legacy banking systems 
		are based on account numbers, but banks today are focused on getting a 
		“single view of the customer”, which requires the generation of customer numbers. 
		It's therefore important to ensure that a customer is not 
		assigned more than one customer number by mistake. 
		</p>
		
		<p>
		If the person is a prior customer, the customer number is retrieved from the customer database. 
		If not, a fresh customer number is generated. This customer number is then associated with the 
		new account number of the account that is to be opened. Accounts are still held on thirty year 
		old mainframe systems, which alone can generate fresh account numbers.
		</p>
		
		<p>
		A debit card is normally issued with the first cheque or savings account that is opened. 
		However, not all branches have the equipment to generate and issue them on the spot. 
		Hence cards are issued centrally and sent to the customers. If this is an existing customer, 
		the new account is “linked” to their existing debit card on the spot. Most branches are unable to 
		provide secure PIN printing facilities, so this too is centralised. 
		</p>
		
		<p>
		The mainframe can only send and receive messages over a message queue, and uses a COBOL copybook 
		format to structure its data inputs and outputs. The card system is an off-the-shelf product 
		that supports web services, but these conform to a vendor-provided schema that is different 
		from the rest of the bank's systems.
		</p>
		
		<h2 id="design">Design the Solution</h2>
		
		<p>
		There is only one process (Open Account) that needs to be initiated, and this consists of a 
		number of steps, which would be natural points at which services are invoked. The functions 
		performed at these various steps are:
		</p>
		<ol>
			<li>
			<strong>Check if existing customer</strong>: This is the first thing that needs to be done, 
			because the subsequent processing for prior and new customers is different. 
			This query is to be made against the customer database, which requires a 
			<strong>Data Service</strong> in front of it to turn it into a true service.
			</li>
			<li>
			<strong>Create customer</strong>: This service is only invoked if the customer is new. This is 
			once again a function that needs to be implemented against the customer database, 
			so another Data Service is required to turn it into a true service.
			</li>
			<li>
			<strong>Create account</strong>: This needs to be done regardless of whether this is 
			an existing or new customer. Accounts are maintained on the mainframe, and account 
			creation can only be invoked by passing in a special message formatted as a 
			COBOL copybook sent over MQ. A Broker is required to act as an adapter to the MQ 
			interface as well as a transformer to present the COBOL copybook syntax as a 
			more open XML document.
			</li>
			<li>
			<strong>Link card to account</strong>: This is done for both existing and new customers, 
			but invoked at different points in the process. 
			</li>
			<li>
			<strong>Issue card</strong>: This is for new customers who don't already possess a 
			debit card. The actual processing occurs on a card system that exposes a web service. 
			However, the data elements of this service don't conform to the data model of the 
			retail bank. A Broker is again required to transform the XML documents supported by 
			the card system to equivalent ones that conform to the bank's data model.
			</li>
		</ol>
		
		<table border="2">
			<tbody>
				<tr>
					<td><strong>Process</strong></td>
					<td><strong>Service</strong></td>
					<td><strong>Operation</strong></td>
				</tr>
				<tr>
					<td></td>
					<td>Customer</td>
					<td>1. Check if existing customer</td>
				</tr>
				<tr>
					<td></td>
					<td></td>
					<td>2. Create customer</td>
				</tr>
				<tr>
					<td>Open Account</td>
					<td>Account</td>
					<td>3. Create account</td>
				</tr>
				<tr>
					<td></td>
					<td></td>
					<td>4. Link card to account</td>
				</tr>
				<tr>
					<td></td>
					<td>Card</td>
					<td>5. Issue card</td>
				</tr>
			</tbody>
		</table>
		
		<p>
		The following diagram shows how these components hang together.
		</p>
		
		<p>
			<br></br>
			<img alt="New Server Runtime" src="images/banking-sample1.png"></img>
			<br></br>
		</p>
		
		<h2 id="prerequisits">Pre-requisits</h2>
		<p>
		Now we are going to implement the solution using <strong>WSO2 Developer Studio</strong>. 
		Before start implementing, you will need following third party tools
		and <strong>WSO2 Products</strong>.
		</p>
		
		<br></br>
		<p>
		<strong>Third Party Tools</strong>
		</p>
		<ul>
			<li>
				MySQL 5.x Server (download from <a href="http://www.mysql.com/">http://www.mysql.com/</a>)
			</li>
			<li>
				ActiveMQ 5.x (download from <a href="http://www.apache.org/">http://www.apache.org/</a>)
			</li>
			<li>
			
			</li>
		</ul>
		
		<p>
		<strong>WSO2 Products</strong>
		</p>
		
		<ul>
			<li>
				<a href="http://wso2.com/products/enterprise-service-bus">WSO2 Enterprise Service Bus</a>
			</li>
			<li>
				<a href="http://wso2.com/products/application-server">WSO2 Application Server</a>
			</li>
			<li>
				<a href="http://wso2.com/products/business-process-server">WSO2 Business Process Server</a>
			</li>
			<li>
				<a href="http://wso2.com/products/data-services-server">WSO2 Data Services Server</a>
			</li>
		</ul>
		
		<p>
		<strong>Necessary Software Libraries and Drivers</strong>
		</p>		
		
		<ul>
			<li>
				ActiveMQ
					<ul>
						<li>activemq-core-5.4.2.jar</li>
						<li>geronimo-j2ee-management_1.1_spec-1.0.1.jar</li>
						<li>geronimo-jms_1.1_spec-1.1.1.jar</li>
					</ul>
			</li>
			<li>
				MySQL JDBC Driver
				<ul>
						<li>mysql-connector-java-5.1.13-bin.jar</li>
				</ul>
			</li>
		</ul>
		
		<p>
		Install and configure the third party libraries and drivers. I assume you already have 
		<strong>WSO2 Developer Studio</strong> installed Eclipse version with you. If you have not 
		installed <strong>WSO2 Developer Studio</strong> yet, please refer the 
		<a href="install_guide.html">Installation Guide</a> for more information on how to install 
		WSO2 Developer Studio in your <strong>Eclipse</strong> instance.
 		</p>

		<h2 id="source">Download Source</h2>
		
		<p>
		You can check-out the latest up-to-date version from 
		<a href="https://svn.wso2.org/repos/wso2/trunk/tools/ide/eclipse/docs/src/main/resources/samples/banking-sample">here</a>
		</p>
		
		<h2 id="try">Try the Sample with WSO2 Developer Studio</h2>
		<div class="toc">
			<ul>
				<li>
					<a href="#gettingReady">Getting Ready</a>
				</li>
				<li>
					<a href="#installMySQL">Install and configure MySQL</a>
				</li>
				<li>
					<a href="#installActiveMQ">Install and configure Apache ActiveMQ</a>
				</li>
				<li>
					<a href="#installWSO2">Install and Configure WSO2 Servers</a>
				</li>
				<li>
					<a href="#createMock">Creating Mock Objects to represent Legacy Systems</a>
				</li>
				<li>
					<a href="#createMainframeProxy">Create Proxy Services to abstract the Mainframe</a>
				</li>
				<li>
					<a href="#createCardProxy">Create Proxy Services to abstract the Cards System</a>
				</li>
				<li>
					<a href="#createBPEL">Create the Process to coordinate all the above Services</a>
				</li>
				<li>
					<a href="#deploy">Deploy the SOA Integration Solution</a>
				</li>
				<li>
					<a href="#test">Testing the Working Solution</a>
				</li>
			</ul>
		</div>
		
		<h3 id="gettingReady">Getting Ready</h3>
		<p>
		Following is the logical solution diagram that we are going to use while implementing the 
		solution. This diagram shows how each and every <strong>WSO2 Product</strong> incorparate to 
		come up with end to end solution. 
		</p>
		<p>
			<br></br>
			<img alt="New Server Runtime" src="images/banking-sample2.png"></img>
			<br></br>
		</p>
		
		<p>
		In this sample, we are going to create seven projects for each and every component. 
		</p>
		
		<ul>
			<li>MainframePojoService - Model account creation mainframe</li>
			<li>CardAxis2Service - Model Card Issueing Service</li>
			<li>CustomerDS - Data Service that handles Customer ID Creation</li>
			<li>SynapseConfigs - Contains all the ESB configurations</li>
			<li>RegistryResources - Contains xslt files, wsdl files etc</li>
			<li>AccountOpeningProcess - BPEL process</li>
			<li>BankingSample - Carbon Application</li>
		</ul>
		
		<h3 id="installMySQL">Install and configure MySQL</h3>
		<p>
		Follow the default instructions provided by <a href="http://www.mysql.com/">MySQL.com</a> 
		to install MySQL server (the default procedure is typically unpack, install, and run). 
		It is recommended that MySQL be set up to run automatically on system startup.
		</p>
		
		<h3 id="installActiveMQ">Install and configure Apache ActiveMQ</h3>
		<p>
		Follow the default instructions provided by <a href="http://activemq.apache.org/">
		http://activemq.apache.org/</a> to install ActiveMQ server (the default procedure is 
		typically unpack, install, and run).
		</p>
		<p>
		To start <strong>activemq</strong>, go to bin folder of <strong>ACTIVEMQ_HOME</strong> 
		and run the command <strong>activemq start</strong> in the command line.
		</p>
		
		<h3 id="installWSO2">Install and Configure WSO2 Servers</h3>
		<p>
		All you need to do to install a WSO2 server is to unpack the downloaded archive. As a 
		reference point, we will use the following logical directory names to refer to the 
		installation folders of each WSO2 server:
		</p>
		<ul>
			<li>WSO2 Application Server - AS_HOME</li>
			<li>WSO2 Data Services Server - DSS_HOME</li>
			<li>WSO2 ESB - ESB_HOME</li>
			<li>WSO2 Business Process Server - BPS_HOME</li>
		</ul>
		<p>
		(We will refer to the installation directory of any generic server as <strong>CARBON_HOME</strong>.)
		<br/>
		</p>
		
		<p>
		If you are running all the required WSO2 products on the same machine as these 
		instructions assume, you will need to avoid port conflict, because all WSO2 server 
		products listen on ports 9763 (HTTP) and 9443 (HTTPS) by default. This port conflict 
		can be avoided by changing an "offset" parameter in the servers' main configuration 
		file (the file <strong>carbon.xml</strong> found in 
		<strong>$CARBON_HOME/repository/conf</strong>).
		</p>
		
		<p>
		We set offset for different <strong>carbon servers</strong> as follows.
		</p>
		
		<ul>
			<li>WSO2 App Server - 0 (App Server will now listen on 9764 and 9444)</li>
			<li>WSO2 ESB - 1 (ESB will now listen on 9764 and 9444)</li>
			<li>WSO2 BPS - 2 (Business Process Server will now listen on 9765 and 9445)</li>
			<li>WSO2 DSS - 6 (Data Services Server will now listen on 9769 and 9449)</li>
		</ul>
		
		<p>
		Let's configure following WSO2 Servers.
		</p>
		<div class="toc">
			<ul>
				<li>
					<a href="#configDSS">Configure WSO2 Data Services Server</a>
				</li>
				<li>
					<a href="#configAppServer">Configure WSO2 Application Server</a>
				</li>
				<li>
					<a href="#configESB">Configure WSO2 ESB</a>
				</li>
				<li>
					<a href="#configBPS">Configure WSO2 Business Process Server</a>
				</li>
			</ul>
		</div>
		
		<h4 id="configDSS">Configure WSO2 Data Services Server</h4>
		<p>
		<strong>Avoid port conflicts </strong>
		</p>
		<br/>
		<p>
		Edit <strong>$DSS_HOME/repository/conf/carbon.xml</strong> to set the offset parameter.
		Set the value to 
		</p>
		<pre style='color:#000000;background:#ffffff;'><span style='color:#a65700; '>&lt;</span><span style='color:#5f5035; '>Offset</span><span style='color:#a65700; '>></span><span style='color:#008c00; '>6</span><span style='color:#a65700; '>&lt;/</span><span style='color:#5f5035; '>Offset</span><span style='color:#a65700; '>></span></pre>
		<br></br>
		<p>
		<strong>Enable database access</strong>
		</p>
		<br/>
		<p>
		Copy the MySQL driver library (<strong>mysql-connector-java-5.1.13-bin.jar</strong>) to 
		(<strong>$DSS_HOME/repository/components/lib</strong>).
		</p>
					
		<h4 id="configAppServer">Configure WSO2 Application Server</h4>
		<p>
		<strong>Avoid port conflicts </strong>
		</p>
		<br/>
		<p>
		Leave the offset parameter of the <strong>$AS_HOME/repository/conf/carbon.xml</strong> as 
		it is. That is keep the offset parameter to 0. 
		</p>
		<pre style='color:#000000;background:#ffffff;'><span style='color:#a65700; '>&lt;</span><span style='color:#5f5035; '>Offset</span><span style='color:#a65700; '>></span><span style='color:#008c00; '>0</span><span style='color:#a65700; '>&lt;/</span><span style='color:#5f5035; '>Offset</span><span style='color:#a65700; '>></span></pre> 
		<p>
		<strong>Enable the Application Server to talk over a message queue</strong>
		<br/>
		Copy the ActiveMQ libraries (<strong>activemq-core-5.4.2.jar, 
		geronimo-j2ee-management_1.1_spec-1.0.1.jar and geronimo-jms_1.1_spec-1.1.1.jar</strong>) 
		to the App Server ($AS_HOME/repository/components/lib).
		<br/>
		</p>
		
		<p>
		<strong>Enable the JMS transport on the App Server (this can also be done via the admin console, 
		but this will not be described here)</strong>
		<br/>
		This only requires un-commenting two sections in the App Server's configuration file. 
		To enable JMS transport, we are going to edit <strong>axis2.xml</strong> resides in 
		<strong>$AS_HOME/repository/conf</strong>
		</p>
		
		<p>
		Look for the two sections that begin with <strong>[transportReceiver name="jms"]</strong> and 
		<strong>[transportSender name="jms"]</strong> and uncomment the XML.
		</p>
		<p>
		After un-commenting, your <strong>axis2.xml</strong> will be as below.
		</p>
		<pre 
		style='color:#000000;background:#ffffff;'><span style='color:#a65700; '>&lt;</span><span style='color:#5f5035; '>transportReceiver</span><span style='color:#274796; '> </span><span style='color:#074726; '>name</span><span style='color:#808030; '>=</span><span style='color:#0000e6; '>"jms"</span><span style='color:#274796; '> </span><span style='color:#074726; '>class</span><span style='color:#808030; '>=</span><span style='color:#0000e6; '>"org.apache.axis2.transport.jms.JMSListener"</span><span style='color:#a65700;'>></span><span style='color:#a65700;'>/</span><span style='color:#5f5035; '>transportReceiver</span><span style='color:#a65700;'>></span></pre>
		
		<p>
		<strong>AND</strong>
		</p>
		
		<pre style='color:#000000;background:#ffffff;'><span style='color:#a65700; '>&lt;</span><span style='color:#5f5035; '>transportSender</span><span style='color:#274796; '> </span><span style='color:#074726; '>name</span><span style='color:#808030; '>=</span><span style='color:#0000e6; '>"jms"</span><span style='color:#274796; '> </span><span style='color:#074726; '>class</span><span style='color:#808030; '>=</span><span style='color:#0000e6; '>"org.apache.axis2.transport.jms.JMSSender"</span><span style='color:#a65700; '>/></span></pre>
		<p>
		Ensure that you are uncommenting the section corresponding to <strong>ActiveMQ</strong> 
		and not Qpid.
		</p>
		
		<h4 id="configESB">Configure WSO2 ESB</h4>
		<p>
		<strong>Avoid port conflicts </strong>
		</p>
		<br/>
		<p>
		Edit <strong>$ESB_HOME/repository/conf/carbon.xml</strong> to set the offset parameter.
		Set the value to </p>
		<pre style='color:#000000;background:#ffffff;'><span style='color:#a65700; '>&lt;</span><span style='color:#5f5035; '>Offset</span><span style='color:#a65700; '>></span><span style='color:#008c00; '>1</span><span style='color:#a65700; '>&lt;/</span><span style='color:#5f5035; '>Offset</span><span style='color:#a65700; '>></span></pre>
		<p>
		<strong>Enable the ESB to talk over a message queue</strong>
		<br/>
		Copy the ActiveMQ libraries (<strong>activemq-core-5.4.2.jar, 
		geronimo-j2ee-management_1.1_spec-1.0.1.jar and geronimo-jms_1.1_spec-1.1.1.jar</strong>) 
		to the App Server ($ESB_HOME/repository/components/lib).
		<br/>
		</p>
		
		<p>
		<strong>Enable the JMS transport on the ESB</strong>
		<br/>
		Follow the same step that we did for App Server in the previous step. 
		</p>
		
		
		<h4 id="configBPS">Configure WSO2 Business Process Server</h4>
		<p>
		<strong>Avoid port conflicts </strong>
		</p>
		<br/>
		<p>
		Edit <strong>$BPS_HOME/repository/conf/carbon.xml</strong> to set the offset parameter.
		Set the value to </p>
		<pre style='color:#000000;background:#ffffff;'><span style='color:#a65700; '>&lt;</span><span style='color:#5f5035; '>Offset</span><span style='color:#a65700; '>></span><span style='color:#008c00; '>2</span><span style='color:#a65700; '>&lt;/</span><span style='color:#5f5035; '>Offset</span><span style='color:#a65700; '>></span></pre>
		
		<h3 id="createMock">Creating Mock Objects to represent Legacy Systems</h3>
		<p>
		There are three legacy systems in this environment which you will need to create 
		in your environment:
		</p>
		<ol>
			<li>The Customer Database</li>
			<li>The Mainframe holding account data and performing account-related functions</li>
			<li>The Cards System holding card data and performing card-related functions</li>
		</ol>
		<p>
		The integration solution using WSO2 middleware components can then be run against these 
		mock objects representing legacy systems.
		</p>
		
		<div class="toc">
			<ul>
				<li>
					<a href="#customerDS">Set up the Customer Database using MySQL</a>
				</li>
				<li>
					<a href="#customerDataService">Set up Customer Data Service</a>
				</li>
				<li>
					<a href="#mockServices">Set up Mock Objects representing the Mainframe and Cards System</a>
				</li>
			</ul>
		</div>
		
		<h4 id="customerDS">Set up the Customer Database using MySQL</h4>
		<p>
		Create a database within MySQL called <strong>CustomersDatabase</strong>. Against 
		this database, run the scripts <strong>CreateTables</strong> and 
		<strong>getCustomer.sql</strong> from 
		<a href="https://svn.wso2.org/repos/wso2/trunk/tools/ide/eclipse/docs/src/main/resources/samples/banking-sample/ds/sql/">
		$DOWNLOAD_HOME/banking-sample/ds/sql</a>  
		</p>
		
		<p>
		This script will create the <strong>Customer</strong> table and a 
		stored procedure to retrieve and create customer data.
		</p>
		
		<h4 id="customerDataService">Set up Customer Data Service</h4>
		
		<p>
		Open the <strong>Developer Studio Dashboard</strong> by clicking on 
		<strong>Open Dashboard</strong> option under top menu item 
		<strong>Developer Studio</strong>. 
		</p>
		
		<p>
			<br></br>
			<img alt="New Server Runtime" src="images/banking1.png"></img>
			<br></br>
		</p>
		
		<p>
		To create a <strong>Data Service</strong>, click on <strong>Data Service Project</strong> 
		under <strong>Data Services Server</strong> category.
		</p>
		
		<p>
			<br></br>
			<img alt="New Server Runtime" src="images/banking16.png"></img>
			<br></br>
		</p>
		
		<p>
		Select <strong>Import Data Service</strong> option and click <strong>Next</strong>.
		</p>
		<p>
			<br></br>
			<img alt="New Server Runtime" src="images/banking17.png"></img>
			<br></br>
		</p>
		
		<p>
		Browse for the <strong>Data Services Descriptor</strong> file, <strong>CustomerDS.dbs</strong> under 
		<a href="https://svn.wso2.org/repos/wso2/trunk/tools/ide/eclipse/docs/src/main/resources/samples/banking-sample/ds/dbs">
		$DOWNLOAD_HOME/banking-sample/ds/dbs</a> and click <strong>Finish</strong>.
		</p>
		
		<p>
			<br></br>
			<img alt="New Server Runtime" src="images/banking18.png"></img>
			<br></br>
		</p>
		
		<p>
		Now you will see that the <strong>Data Service Project</strong> has been created in the 
		workspace and make sure to change the <strong>User Name</strong> and 
		<strong>Password</strong> according to your MySQL credentials.
		</p>
		<p>
			<br></br>
			<img alt="New Server Runtime" src="images/banking19.png"></img>
			<br></br>
		</p>
		
		
		<h4 id="mockServices">Set up Mock Objects representing the Mainframe and Cards System</h4>
		<p>
		To create the mock objects, go to Eclipse instance which you have <strong>WSO2 
		Developer Studio</strong> installed. 
		</p>
		
		<p>
		<strong>1. Modeling Account System</strong>
		</p>
		<p>
		Open the <strong>Developer Studio Dashboard</strong> by clicking on 
		<strong>Open Dashboard</strong> option under top menu item 
		<strong>Developer Studio</strong>. 
		</p>
		
		<p>
			<br></br>
			<img alt="New Server Runtime" src="images/banking1.png"></img>
			<br></br>
		</p>
		
		<p>
		To create the <strong>Pojo Service</strong>, select <strong>Axis2 Service Project</strong> 
		from the <strong>Dashboard</strong>.
		</p>
		
		<p>
			<br></br>
			<img alt="New Server Runtime" src="images/banking2.png"></img>
			<br></br>
		</p>
		
		<p>
		From the Axis2 Service Creation Wizard, select <strong>Create New Axis2 Service</strong> 
		and click <strong>Next</strong>.
		</p>
		
		<p>
			<br></br>
			<img alt="New Server Runtime" src="images/banking3.png"></img>
			<br></br>
		</p>
		
		<p>
		Fill the following information for <strong>Project Name, Package Name and Class Name</strong>. 
		</p>
		
		<ul>
			<li>Project Name - MainframePojoService</li>
			<li>Package Name - wso2.hcc</li>
			<li>Class Name - MainframePojoService</li>
		</ul>
		
		<p>
			<br></br>
			<img alt="New Server Runtime" src="images/banking4.png"></img>
			<br></br>
		</p>
		
		<p>
		After giving necessary details, click <strong>Finish</strong>.
		</p>
		
		<p>
		Now you can see that the <strong>Axis2 Service</strong> has been created in the workspace. 
		</p>
		
		<p>
			<br></br>
			<img alt="New Server Runtime" src="images/banking5.png"></img>
			<br></br>
		</p>
		
		<p>
		Now go and copy the two source files <strong>MainframePojoService.java and Account.java</strong> 
		from <a href="https://svn.wso2.org/repos/wso2/trunk/tools/ide/eclipse/docs/src/main/resources/samples/banking-sample/appserver/AccountService/src/wso2/hcc">
		$DOWNLOAD_HOME/banking-sample/appserver/AccountService/src/wso2/hcc</a> and paste in to 
		<strong>wso2.hcc</strong> package in the <strong>MainframePojoService</strong> project.
		</p>
		
		<p>
			<br></br>
			<img alt="New Server Runtime" src="images/banking6.png"></img>
			<br></br>
		</p>
		
		<p>
		Now we want to enable, <strong>JMS transport</strong> since this service will 
		communicate via <strong>JMS transport</strong>. To enable this, we need to add 
		following block to <strong>services.xml</strong> under 
		<strong>/src/main/resources/META-INF</strong>. 
		</p>
		
		<pre style='color:#000000;background:#ffffff;'><span style='color:#a65700; '>&lt;</span><span style='color:#5f5035; '>transports</span><span style='color:#a65700; '>></span>
    <span style='color:#a65700; '>&lt;</span><span style='color:#5f5035; '>transport</span><span style='color:#a65700; '>></span>jms<span style='color:#a65700; '>&lt;/</span><span style='color:#5f5035; '>transport</span><span style='color:#a65700; '>></span>
<span style='color:#a65700; '>&lt;/</span><span style='color:#5f5035; '>transports</span><span style='color:#a65700; '>></span>
</pre>		
		<p>
		Now your services.xml will look like below.
		</p>
		<p>
			<br></br>
			<img alt="New Server Runtime" src="images/banking7.png"></img>
			<br></br>
		</p>
		
		<p>
		Now we are done with modeling <strong>Account Service</strong>.
		</p>
		
		<p>
		<strong>2. Modeling Card System</strong>
		</p>
		
		<p>
		Now we want to create the Card System. This will be another <strong>Apache Axis2 
		Service Project</strong>. Select <strong>Axis2 Service Project</strong> from 
		<strong>WSO2 Developer Studio Dashboard</strong> as you done in the previous 
		step.
		</p>
		
		<p>
		Select <strong>Create New Axis2 Service</strong> option from the wizard and give following 
		details to <strong>Project Name, Package Name and Class Name</strong>.
		</p>
		<ul>
			<li>Project Name - CardAxis2Service</li>
			<li>Package Name - org.wso2.sample</li>
			<li>Class Name - CardAxis2Service</li>
		</ul>
		
		<p>
			<br></br>
			<img alt="New Server Runtime" src="images/banking8.png"></img>
			<br></br>
		</p>
		
		<p>
		Now you will see the <strong>CardAxis2Service</strong> has been created in the 
		workspace. Now copy the original sources 
		<strong>CardAxis2Service.java, Customer.java and Card.java</strong> from 
		<a href="https://svn.wso2.org/repos/wso2/trunk/tools/ide/eclipse/docs/src/main/resources/samples/banking-sample/appserver/CardApplication/src/main/java/org/wso2/sample/">
		$DOWNLOAD_HOME/banking-sample/appserver/CardApplication/src/main/java/org/wso2/sample</a> 
		and paste in to <strong>org.wso2.sample</strong> package of <strong>CardAxis2Service</strong> 
		project.
		</p>
		<p>
		Now we are done with creating two mock services and we are ready to deploy those two services 
		in to <strong>WSO2 Application Server.</strong>
		</p>
		
		<p>
		Before deploying the services to <strong>Application Server</strong>, we need to create 
		a <strong>Carbon Application Project</strong> to group the two created axis2 services. 
		</p>
		
		<p>
		<strong>3. Create a Carbon Application Project to group mock objects</strong>
		</p>
		
		<p>
		Open <strong>WSO2 Developer Studio Dashboard</strong> again and select 
		<strong>Carbon Application Project</strong> under <strong>Destribution</strong> 
		category. 
		</p>
		
		<p>
			<br></br>
			<img alt="New Server Runtime" src="images/banking9.png"></img>
			<br></br>
		</p>
		
		<p>
		Give a name to the <strong>Carbon Application Project</strong> and select both 
		<strong>services</strong> that we created. 
		</p>
		
		<p>
			<br></br>
			<img alt="New Server Runtime" src="images/banking10.png"></img>
			<br></br>
		</p>
		
		<p>
		Now you will see that the <strong>Carbon Application Project</strong> has been created 
		in the workspace with the name you have specified.
 		</p>
 		
 		<p>
			<br></br>
			<img alt="New Server Runtime" src="images/banking11.png"></img>
			<br></br>
		</p>
		
		<p>
		<strong>4. Deploy the Carbon Application Project in to WSO2 App Server</strong>
		</p>	
		
		<p>
		Now we are going to deploy the created <strong>Carbon Application Project</strong> in 
		to <strong>WSO2 Application Server</strong>. Before starting the <strong>WSO2 
		App Server</strong>, make sure <strong>Apache ActiveMQ</strong> is up and 
		running. 
		</p>
		<p>
		In this section, we are going to start the <strong>WSO2 App Service</strong> inside 
		Eclipse. Follow the steps in <a href="testing_deploying_category.html#Deploy">
		Deploy C-App to a running Server inside Eclipse</a> section under 
		<strong>Testing and Deploying</strong> document.
		</p>
		<p>
		Once you add the server successfully, start the server and add <strong>BankingSample</strong> 
		Carbon Application to the running server.
		</p>
		
		<p>
			<br></br>
			<img alt="New Server Runtime" src="images/banking12.png"></img>
			<br></br>
		</p>
		
		<p>
		Wait till the application get deployed successfully to the server. Once the deployement 
		is completed, you will see following logs in the Eclipse Console.
		</p>
		
		<p>
		[2012-04-20 10:05:57,818]  INFO {org.wso2.carbon.application.deployer.internal.ApplicationManager} -  Deploying Carbon Application : BankingSample.car...
		<br/>
		[2012-04-20 10:05:58,059]  INFO {org.wso2.carbon.application.deployer.internal.ApplicationManager} -  Successfully Deployed Carbon Application : BankingSample {super-tenant}
		<br/>
		[2012-04-20 10:06:07,881]  INFO {org.wso2.carbon.core.deployment.DeploymentInterceptor} -  Deploying Axis2 service: MainframePojoService {super-tenant}
		<br/>
		[2012-04-20 10:06:10,517]  INFO {org.apache.axis2.transport.jms.ServiceTaskManager} -  Task manager for service : MainframePojoService [re-]initialized
		<br/>
		[2012-04-20 10:06:11,528]  INFO {org.apache.axis2.transport.jms.JMSListener} -  Started to listen on destination : MainframePojoService of type queue for service MainframePojoService
		<br/>
		[2012-04-20 10:06:11,570]  INFO {org.apache.axis2.deployment.DeploymentEngine} -  Deploying Web service: MainframePojoService-1.0.0.aar - file:/media/dev/CS-Resources/2.0.0/review-02-04-2012/servers/wso2as-4.1.2/repository/deployment/server/axis2services/MainframePojoService-1.0.0.aar
		<br/>
		[2012-04-20 10:06:11,605]  INFO {org.wso2.carbon.core.deployment.DeploymentInterceptor} -  Deploying Axis2 service: CardAxis2Service {super-tenant}
		<br/>
		[2012-04-20 10:06:12,224]  INFO {org.apache.axis2.transport.jms.ServiceTaskManager} -  Task manager for service : CardAxis2Service [re-]initialized
		<br/>
		[2012-04-20 10:06:13,233]  INFO {org.apache.axis2.transport.jms.JMSListener} -  Started to listen on destination : CardAxis2Service of type queue for service CardAxis2Service
		<br/>
		[2012-04-20 10:06:13,234]  INFO {org.apache.axis2.deployment.DeploymentEngine} -  Deploying Web service: CardAxis2Service-1.0.0.aar - file:/media/dev/CS-Resources/2.0.0/review-02-04-2012/servers/wso2as-4.1.2/repository/deployment/server/axis2services/CardAxis2Service-1.0.0.aar
		
		</p>
		
		<p>
		As deplayed in the console log, you can see that the <strong>MainframePojoService</strong> 
		and <strong>CardAxis2Service</strong> have been deployed in to <strong>WSO2 Application 
		Server</strong>. Go to management console in the browser and check for <strong>Deployed 
		Services</strong>.
		</p>
		
		<p>
			<br></br>
			<img alt="New Server Runtime" src="images/banking13.png"></img>
			<br></br>
		</p>
		
		<p>
		If you click on the <strong>MainframePojoService</strong> and check for <strong>Endpoints</strong> 
		section, you will see a <strong>JMS endpoint</strong>. This is because we have specified 
		transport for this service as JMS.
		</p>
		
		<p>
			<br></br>
			<img alt="New Server Runtime" src="images/banking14.png"></img>
			<br></br>
		</p>
		
		<p>
		If you check on other service <strong>CardAxis2Service</strong>, you will see both 
		<strong>HTTP</strong> and <strong>JMS</strong> transport endpoints are available.
		</p>
		
		<p>
			<br></br>
			<img alt="New Server Runtime" src="images/banking15.png"></img>
			<br></br>
		</p>
		
		<p> 
		Now we are going to create proxy services to abstract above two services.
		</p>
				
		<h3 id="createMainframeProxy">Create Proxy Services to abstract the Mainframe</h3>
		<p>
		<strong>1. Create an "address endpoint" for the mainframe on the ESB</strong>
		</p>
		
		<p>
		Open <strong>WSO2 Developer Studio Dashboard</strong> and select <strong>Endpoint</strong>. 
		</p>
		<p>
			<br></br>
			<img alt="New Server Runtime" src="images/banking20.png"></img>
			<br></br>
		</p>
		
		<p>
		Select <strong>Import Endpoint</strong> option and click <strong>Next</strong>. Browse for the 
		<strong>MainFrameEP.xml</strong> from 
		<a href="https://svn.wso2.org/repos/wso2/trunk/tools/ide/eclipse/docs/src/main/resources/samples/banking-sample/esb/synapse-configs/default/endpoints">
		$DOWNLOAD_HOME/banking-sample/esb/synapse-configs/default/endpoints</a> folder.
		</p>
		
		<p>
		All your ESB configurations should be saved in a project type called <strong>ESB Config Project</strong>. 
		Since our workspace does not have any created <strong>ESB Config Projects</strong>, we need 
		to create an <strong>ESB Config Projects</strong> in order to save our endpoint. To create 
		<strong>ESB Config Project</strong>, click on <strong>Create New Project</strong> link.
		</p>
		<p>
			<br></br>
			<img alt="New Server Runtime" src="images/banking21.png"></img>
			<br></br>
		</p>
		
		<p>
		Give a name to <strong>ESB Config Project</strong> and click <strong>Finish</strong>.
		</p>	
		
		<h3 id="installMySQL">Install and configure MySQL</h3>
		<p>
		
		</p>
		<h3 id="installMySQL">Install and configure MySQL</h3>
		<p>
		
		</p>
		
	</body>
</html>
