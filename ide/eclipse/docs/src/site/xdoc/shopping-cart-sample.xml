<!--
~ Copyright 2005-2007 WSO2, Inc. (http://wso2.com) ~ ~ Licensed under
the Apache License, Version 2.0 (the "License"); ~ you may not use
this file except in compliance with the License. ~ You may obtain a
copy of the License at ~ ~ http://www.apache.org/licenses/LICENSE-2.0
~ ~ Unless required by applicable law or agreed to in writing,
software ~ distributed under the License is distributed on an "AS IS"
BASIS, ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
or implied. ~ See the License for the specific language governing
permissions and ~ limitations under the License.
-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
        "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
	<body>
		<h1>Shopping Cart Sample</h1>
		<h2>Content</h2>
		<div class="toc">
			<ul>
				<li>
					<a href="#SampleSceneario">Sample Scenario</a>
				</li>
				<li>
					<a href="#SampleSource">Download/View Sample Source Code</a>
				</li>
				<li>
					<a href="#TrySample">Try the Sample with Carbon Studio</a>
				</li>
			</ul>
		</div>
		<h2 id="SampleSceneario">Sample Scenario</h2>
		<p>
		This is a simple shopping cart called Acme where you can purchase items. It contains three views 
		as below.
		</p>
		<ol>
			<li>User's view</li>
			<li>Operator view</li>
			<li>CEO view</li>
		</ol>
		<p>
		User's view provides the ability to search for items, view related products, purchase items etc. 
		There are user level gadgets to display statistics of the products that have been purchased.
		Operator view facilitate  to add new products, edit product details and other operator related 
		functionalities. CEO view contains gadgets that helpful for top level management of the Acme 
		Shopping Cart to take decisions. 
		</p>
		
		<p>Acme shopping cart system has a legacy database where it stores information regarding products. 
		</p>
		
		<p>
				<br></br>
				<br></br>
				<img alt="New Server Runtime" src="images/shoppingCart.png"></img>
				<br></br>
				<br></br>
		</p>
		
		<h2 id="SampleSource">Download/View Sample Source Code</h2>
        <p> You can check-out the latest up-to-date version from 
        <a href="https://svn.wso2.org/repos/wso2/branches/tools/eclipse/carbon-studio/1.0.0/samples/shopping-cart">here</a>. 
        It contains resources related to several artifact types such as <strong>ESB, BPS, Data Services, Gadgets</strong> etc. 
		</p>

		<h2 id="TrySample">Try the Sample with Carbon Studio</h2>
		<div class="toc">
			<ul>
				<li>
					<a href="#gettingReady">Getting Ready</a>
				</li>
				<li>
					<a href="#ShoppingCartDS">Create Shopping Cart Data Service</a>
				</li>
				<li>
					<a href="#ShoppingCartEPs">EndPoints pointing to the created Data Service</a>
				</li>
				<li>
					<a href="#ShoppingCartProxy">Proxy service to created Data Service</a>
				</li>
				<li>
					<a href="#ShoppingCartRegRes">Adding dependent resources to registry</a>
				</li>
				<li>
					<a href="#ShoppingCartGadget">Gadget to Data Service</a>
				</li>
				<li>
					<a href="#ShoppingCartBPEL">BPEL to manage scheduled task</a>
				</li>
				<li>
					<a href="#ShoppingCartAxis2Service">Apache Axis2 Service to Handle message coming from ESB</a>
				</li>
				<li>
					<a href="#CreateWebApps">Create User Portal and Admin Portal</a>
				</li>
				<!-- li>
					<a href="#TrySample">Try the Sample with Carbon Studio</a>
				</li-->
			</ul>
		</div>
		
		<h3 id="gettingReady">Getting Ready</h3>
		<p>Solution architecture can be described by below diagram. It shows how different <strong>WSO2 
		products</strong> helpful in achieving the goal.
		</p>
		<p>
				<br></br>
				<br></br>
				<img alt="New Server Runtime" src="images/solutionArchi.png"></img>
				<br></br>
				<br></br>
		</p>		
		<p>
		In this sample, we create five carbon application projects according to artifact type as below.
		 This is just to organize our Eclipse workspace in a user friendly understandable manner. 
		</p>
		
		<ol>
			<li>AcmeBackendServices - to create all the back-end related artifacts</li>
			<li>AcmeFrontendMonitor - to create all front-end gadgets</li>
			<li>AcmeFrontendOperator - to create Web application artifact to manage Acme shopping cart</li>
			<li>AcmeFrontendUser - to create front-end portal</li>
			<li>AcmeShoppingService - to create inter-mediate message passing ESB artifacts</li>
		</ol>
		<p>
		
		</p>
		
		<h3 id="ShoppingCartDS">Create Shopping Cart Data Service</h3>
		<p>
		We need to create a data service which will represent the legacy database system of the 
		Acme Shopping cart system. With carbon studio, we can create data service artifacts pointing to 
		a data service descriptor file (.dbs) in several ways. In this sample, we will just import the 
		data service descriptor file that we have checked out. 
		</p>
		
		<p>
		<br/>
		<br/>
		<strong>Creating Sample Shopping Cart Database</strong>
		<br/>
		<br/>
		</p>
		
		<p>
		If you are planning to deploy data service in to WSO2 Data Services Server 2.5.1, the compatible H2 database version will 
		be <strong>H2-1.1.112</strong>. As a result, you have to run database scripts which is located inside 
		<strong>data-service/sql/h2</strong> against a <strong>H2-1.1.112</strong> database.
		</p>
		<br/>
		<p>
		In this sample, we will create sample Shopping Cart Database in a stand-alone H2 database which is 
		compatible with WSO2 DataService 2.5.1 Server. 
		</p>
		<br/>
		<p>
		We have provided necessary files and scripts to build the database along with the 
		<a href="https://svn.wso2.org/repos/wso2/branches/tools/eclipse/carbon-studio/1.0.0/samples/shopping-cart">source</a>.
		You have to have maven2 installed in your computer in order to do this.
		</p>
		<br/>
		<p>
		To build the database, goto <strong>data-service</strong> directory inside the source (from command line)
		execute the following command
		</p>
		<br/>
		<p>
		<strong>mvn install</strong>
		</p>
		<br/>
		<p>
		It will automatically download necessary files and build the database. After it's completed,
		you will see a directory named <strong>target</strong> created inside the current directory.
		The database is created in ./target/database.
		</p>
		<br/>
		<p>
		In the database descriptor file, you have to specify this database path. It is described in following
		section. If the database is created successfully, you can move to the next step.
		</p>
		
		<p>
		<br/>
		<br/>
		<strong>Creating Data Service Artifact</strong>
		<br/>
		<br/>
		</p>
		<p>
		To create a data service artifact, first we will create a carbon application project called 
		<strong>AcmeBackendServices</strong>. To create a CApp project, go to <strong>File -> new ->
		project</strong> and select <strong>Carbon Application Project</strong> from the wizard. 
		</p>
		
		<p>
				<br></br>
				<br></br>
				<img alt="New Server Runtime" src="images/mal-img1.png"></img>
				<br></br>
				<br></br>
		</p>
			
		<p>
				<br></br>
				<br></br>
				<img alt="New Server Runtime" src="images/mal-img2.png"></img>
				<br></br>
				<br></br>
		</p>
		
		<p>
		Give the name for the project as <strong>AcmeBackendServices</strong> and a location to save 
		and click <strong>Finish</strong>.  
		</p>
		<p>
			<br></br>
			<br></br>
			<img alt="New Server Runtime" src="images/mal-img3.png"></img>
			<br></br>
			<br></br>
		</p>

		<p>
		Now you will see a new project is created with the given name, according to the following 
		structure.
		</p>
		<p>
			<br></br>
			<br></br>
			<img alt="New Server Runtime" src="images/mal-img4.png"></img>
			<br></br>
			<br></br>
		</p>
		
		<p>
		All the artifacts that has been created will be saved in the <strong>artifacts</strong> 
		folder.</p>
		
		<p>To create a data service, right click on the <strong>AcmeBackendServices</strong> CApp project and 
		select <strong>Data Service</strong> from the menu. 
		</p>
		
		<p>
			<br></br>
			<br></br>
			<img alt="New Server Runtime" src="images/mal-img5.png"></img>
			<br></br>
			<br></br>
		</p>
		
		<p>Now you will get a wizard page, displaying all the options that are available to create a data service 
		artifact.</p>
		
		<p>
			<br></br>
			<br></br>
			<img alt="New Server Runtime" src="images/mal-img6.png"></img>
			<br></br>
			<br></br>
		</p>
		
		<p>For this sample, we will select the <strong>Import Data Service From File</strong> option.Browse the 
		data service descriptor file at the checked-out location under <strong>shopping-cart/data-service/dbs</strong>
		 folder. 
		 </p>

		<p>
			<br></br>
			<br></br>
			<img alt="New Server Runtime" src="images/img8.PNG"></img>
			<br></br>
			<br></br>
		</p>		
		<p>Select the <strong>AcmeBackendServices</strong> CApp project and click <strong>Finish</strong>.
		</p>
		<p>
			<br></br>
			<br></br>
			<img alt="New Server Runtime" src="images/img9.PNG"></img>
			<br></br>
			<br></br>
		</p>	
		
		<p>Now you will see new Data Service artifact is created under <strong>AcmeBackendServices</strong> project.
		</p>
		<p>
			<br></br>
			<br></br>
			<img alt="New Server Runtime" src="images/img10.PNG"></img>
			<br></br>
			<br></br>
		</p>	
		
		<p>We use this data service to connect with other partners. As a best practice, we do not directly 
		connect to the legacy database system. Created data service will be used when we create 
		ESB configurations later in this sample.</p>
		
		<p>To get the service URLs we need to deploy created data service artifact in a server. 
		 In this sample we will need several servers running in our setting. As a result, we have to 
		 assign different ports to each product to each product to run separately.  
		 </p>
		 <p>Here are HTTP and HTTPS ports that we assigned to each products respectively.
		 </p>
		
		<table border="2">
			<tbody>
				<tr>
					<td>Server</td>
					<td>HTTPS Port</td>
					<td>HTTP Port</td>
				</tr>
				<tr>
					<td>Data Services Server (DS)</td>
					<td>9443</td>
					<td>9763</td>
				</tr>
				<tr>
					<td>Application Server (AppServer)</td>
					<td>9444</td>
					<td>9764</td>
				</tr>
				<tr>
					<td>Enterprise Service Bus (ESB)</td>
					<td>9445</td>
					<td>9765</td>
				</tr>
				<tr>
					<td>Business Process Server (BPS)</td>
					<td>9446</td>
					<td>9766</td>
				</tr>	
				<tr>
					<td>Mash-up Server (MS)</td>
					<td>9447</td>
					<td>9767</td>
				</tr>	
				<tr>
					<td>Gadget Server (GS)</td>
					<td>9448</td>
					<td>9768</td>
				</tr>							
			</tbody>
		</table>
		
		<p>We can deploy data service in a <strong>WSO2 DSS</strong> or any other 
		carbon server which has data service feature installed.You can deploy the data service artifact while 
		you are in your Eclipse workspace.</p>
		
		<p>
		Here, you need to change the <strong>JDBC URL</strong> property of the 
		database descriptor file to the location of the sample database you created
		as described above.
		</p>
		<br/>
		<p>
		You can specify absolute path.<br/>
		For example jdbc:h2:file:/home/amila/shoppingcartExample/shopping-cart/data-service/target/database/SHOPPING_CART_SAMPLE_DB<br/>
		Or you can copy database files to the location of the server and specify the relative path.<br/>
		  For example, if you copy them to $DSS_HOME/samples/database/, 
		    The JDBC URL will be,<br/>
		    <strong>jdbc:h2:file:./samples/database/SHOPPING_CART_SAMPLE_DB</strong>
		</p>
		
		<p>
			<br></br>
			<br></br>
			<img alt="New Server Runtime" src="images/img112.PNG"></img>
			<br></br>
			<br></br>
		</p>
		
		<p>To deploy artifacts in to a server, first thing we have to do is add a WSO2 server. To do that 
		go to <strong>Servers</strong> view, right click and select <strong>New -> Server </strong>.
		</p>
		
		<p>
			<br></br>
			<br></br>
			<img alt="New Server Runtime" src="images/img11.PNG"></img>
			<br></br>
			<br></br>
		</p>
		
		<p>Under <strong>WSO2</strong> category, you will see there are two product lines support as 
		<strong>carbon 3.0.1 servers (which are already released)</strong> and <strong>carbon 3.1.x servers
		 (which are currently at the trunk)</strong>. You can select either option according to the what 
		 carbon server you already have.  
		</p>
		<p>Select <strong>WSO2 Carbon 3.0.1 based server</strong> and click <strong>Next</strong>.
		</p>
		
		<p>
		<br></br>
			<br></br>
			<img alt="New Server Runtime" src="images/img12.PNG"></img>
			<br></br>
			<br></br>
		</p>
		
		<p>
		If you have not added WSO2 Server instances before, you will need to specify location of the downloaded 
		WSO2 Server instance and click <strong>Next</strong>.
		</p>
		
		<p>
		<br></br>
			<br></br>
			<img alt="New Server Runtime" src="images/img13.PNG"></img>
			<br></br>
			<br></br>
		</p>
		
		<p>In the next page specify server ports according to the above table and click <strong>Next</strong>. 
		</p>
		
		<p>
		<br></br>
			<br></br>
			<img alt="New Server Runtime" src="images/img14.PNG"></img>
			<br></br>
			<br></br>
		</p>
		
		<p><strong>Add and Remove</strong> page will list all the <strong>CApp</strong> projects already in the 
		workspace. Select <strong>AcmeBackendServices</strong> and click <strong>Add</strong>. 
		</p>
		
		<p>
		<br></br>
			<br></br>
			<img alt="New Server Runtime" src="images/img15.PNG"></img>
			<br></br>
			<br></br>
		</p>
		
		<p>Now you will see added <strong>AcmeBackendServices</strong> project is under <strong>Configured</strong>
		 section. Then click <strong>Finish</strong>.
		 </p>
		 
		 <p>
		<br></br>
			<br></br>
			<img alt="New Server Runtime" src="images/img16.PNG"></img>
			<br></br>
			<br></br>
		</p>
		
		<p>
		At the <strong>Servers</strong> view, you will see created server is added in the view. Under the server 
		you will see our <strong>AcmeBackendServices</strong> project is also available. 
		</p>
		
		<p>
		<br></br>
			<br></br>
			<img alt="New Server Runtime" src="images/img18.PNG"></img>
			<br></br>
			<br></br>
		</p>
		
		<p>Before start the server we have to specify that <strong>Data Service Artifact</strong> should be 
		deployed. To do that double click on the <strong>root-artifact.xml</strong> and tick 
		<strong>ShoppingCartDS</strong> from <strong>Existing Artifacts</strong>.
		</p>
		
		<p>
		<br></br>
			<br></br>
			<img alt="New Server Runtime" src="images/img21.PNG"></img>
			<br></br>
			<br></br>
		</p>
		
		<p>Now you are ready to start the server. To start the server, right click on the server and select 
		<strong>Start</strong> from the menu. 
		</p>
		
		<p>
		<br></br>
			<br></br>
			<img alt="New Server Runtime" src="images/img19.PNG"></img>
			<br></br>
			<br></br>
		</p>
		
		<p>
		Now you will see messages displaying in the console, as you start a normal carbon server.
		</p>
		
		<p>
		<br></br>
			<br></br>
			<img alt="New Server Runtime" src="images/img20.PNG"></img>
			<br></br>
			<br></br>
		</p>
		 
		<p>
		After carbon server starts, you will see some messages regarding deploying the carbon application 
		project.
		</p>
		
		<p>
		<br></br>
			<br></br>
			<img alt="New Server Runtime" src="images/img22.PNG"></img>
			<br></br>
			<br></br>
		</p>
		
		<p>Now if you access management console in the normal web browser and go to <strong>Service 
		Listing</strong> page, you will see, our <strong>ShoppingCartDS</strong> data service is 
		available. 
		</p>
		
		<p>
		<br></br>
			<br></br>
			<img alt="New Server Runtime" src="images/img23.PNG"></img>
			<br></br>
			<br></br>
		</p>
		
		<p>
		You can try the service and see for all the available operations that are provided from the 
		<strong>data service descriptor</strong> file. 
		</p>
		
		<p>
		<br></br>
			<br></br>
			<img alt="New Server Runtime" src="images/img24.PNG"></img>
			<br></br>
			<br></br>
		</p>
		
		<h3 id="ShoppingCartEPs">EndPoints pointing to the created Data Service</h3>
		<p>
		<strong>ShoppingCartDS</strong> expose three Endpoints which are used by seveal servers when message passing. 
		</p>
		
		<p>
		In this sample we will create three Endpoints as below. 
		</p>
		
		<ol>
			<li>AdminServiceEP</li>
			<li>ProductServiceEP</li>
			<li>PurchasingServiceEP</li>
		</ol>
		
		<p>
		For the better organization of the workspace, we will create ESB related artifacts in a separate CApp 
		project called <strong>AcmeShoppingServices</strong>. You can create <strong>AcmeShoppingServices</strong> 
		project as you created <strong>AcmeBackendServices</strong> project. 
		</p>
		
		<p>
		To create the Endpoint, right click on the <strong>AcmeShoppingServices</strong> project and select 
		<strong>EndPoint</strong> from the <strong>right</strong> click menu. 
		</p>
		
		<p>
		<br></br>
			<br></br>
			<img alt="New Server Runtime" src="images/img25.PNG"></img>
			<br></br>
			<br></br>
		</p>
		
		<p>
		Give the name as <strong>AdminServiceEP</strong> and select the type <strong>Address Endpoint</strong> 
		if it is not set by default. Then click <strong>Next</strong>.
		</p>
		
		<p>
		<br></br>
			<br></br>
			<img alt="New Server Runtime" src="images/img26.PNG"></img>
			<br></br>
			<br></br>
		</p>
		
		<p>
		Select <strong>AcmeShoppingServices</strong> project and <strong>AdminServiceEP</strong> as the name and 
		click <strong>Finish</strong>.
		</p>
		
		<p>
		<br></br>
			<br></br>
			<img alt="New Server Runtime" src="images/img27.PNG"></img>
			<br></br>
			<br></br>
		</p>
		
		<p>
		Now you will see <strong>AdminServiceEP</strong> artifact is created under <strong>artifacts</strong> of the 
		<strong>AcmeShoppingServices</strong> project.
		</p>
		
		<p>
		<br></br>
			<br></br>
			<img alt="New Server Runtime" src="images/img28.PNG"></img>
			<br></br>
			<br></br>
		</p>
		
		<p>
		Double click on the <strong>AdminServiceEP.xml</strong> and you will see, Endpoint is open in the 
		<strong>Graphical ESB Editor</strong> and in the <strong>Properties</strong> view displays all the 
		information regarding the Endpoint. Since we are creating this <strong>Address EndPoint</strong> 
		according to the simplest template, it will display <strong>https://localhost:9443</strong> as the 
		default URI. 
		</p>
	
		<p>
		<br></br>
			<br></br>
			<img alt="New Server Runtime" src="images/img29.PNG"></img>
			<br></br>
			<br></br>
		</p>
		
		
		<p>
		You need to change this to the URI of <strong>ShoppingCartDS</strong>
		</p>
		
		<p>
		<br></br>
			<br></br>
			<img alt="New Server Runtime" src="images/img301.PNG"></img>
			<br></br>
			<br></br>
		</p>
		
		<p>
		At the similar manner, create <strong>PurchasingServiceEP and ProductServiceEP</strong> Endpoints 
		pointing to <strong>ShoppingCartDS</strong>.
		</p>
		
		<p>
		You can use the <strong>Import EndPoint file from File System</strong> option to add all the available
		 Endpoints at once by pointing the Synapse configuration file. 
		</p>
		
		<p>
		<br></br>
			<br></br>
			<img alt="New Server Runtime" src="images/img36.PNG"></img>
			<br></br>
			<br></br>
		</p>
		
		<p>These Endpoints will be used when we create Proxy services to the <strong>ShoppingCartDS</strong>.
		</p>
		
		
		<h3 id="ShoppingCartProxy">Proxy service to created Data Service</h3>
		<p>
		Now we have done all the items needed to create Proxy service to the data service and we are ready to 
		go. For this sample we need to create three Proxy services as below. 
		</p>

		<ol>
			<li>PurchasingService</li>
			<li>AdminService</li>
			<li>ProductService</li>
		</ol>
		
		<p>
		To create a Proxy service, right click <strong>AcmeShoppingServices</strong> project and select 
		<strong>Proxy Service</strong> from the menu.
		</p>
		
		<p>
		<br></br>
			<br></br>
			<img alt="New Server Runtime" src="images/img31.PNG"></img>
			<br></br>
			<br></br>
		</p>
		
		<p>
		Give the name as <strong>AdminService</strong> and select the option <strong>Import Proxy File 
		from the File System</strong>. Now browse for the Synapse configuration file (shopping-cart-synapse-config.xml) 
		from the location <strong>shopping-cart/esb-config</strong> you have checked-out. Now you will 
		see all the available Proxy services are displayed in the table. Select <strong>AdminService</strong> 
		from the table and click <strong>Next</strong>.
		</p>
		
		<p>
		<br></br>
			<br></br>
			<img alt="New Server Runtime" src="images/img32.PNG"></img>
			<br></br>
			<br></br>
		</p>
		
		<p>
		Specify the project name as <strong>AcmeShoppingServices</strong> and name as <strong>AdminService</strong> and click 
		<strong>Finish</strong>.
		</p>
		
		<p>
		<br></br>
			<br></br>
			<img alt="New Server Runtime" src="images/img33.PNG"></img>
			<br></br>
			<br></br>
		</p>
		
		<p>
		Now you will see <strong>AdminService</strong> Proxy service artifact has been created under 
		<strong>artifacts</strong> of the <strong>AcmeShoppingServices</strong> project. 
		</p>
		
		<p>
		<br></br>
			<br></br>
			<img alt="New Server Runtime" src="images/img34.PNG"></img>
			<br></br>
			<br></br>
		</p>
		
		<p>
		You can double click on the <strong>AdminService.xml</strong> and open it in the <strong>ESB Graphical 
		Editor</strong>. You will see <strong>AdminServiceEP</strong> which we created previously, has been 
		used in the <strong>AdminService</strong> Proxy service. 
		</p>
		
		<p>
		<br></br>
			<br></br>
			<img alt="New Server Runtime" src="images/img35.PNG"></img>
			<br></br>
			<br></br>
		
		</p>
		
		<p>
		You can modify and view all the information regarding a specific mediator by <strong>Properties</strong>
		 view, which is available whenever you select a node in the tree view. 
		</p>
		
		<p>
		If you are going to try this service after deploy in the WSO2 ESB Server, using <strong>try-it</strong> 
		functionality, we need to specify WSDL for that. In the checked-out location, under <strong>esb-config</strong>
		folder, you can see three WSDL files as <strong>AdminService.wsdl, ProductService.wsdl</strong> and 
		 <strong>PurchasingService.wsdl</strong>. These three WSDL files are for three proxy services that we are 
		going to create. We have to specify them in respective proxy service as <strong>in-line</strong> method. 
		</p>
		
		<p>
		I will explain how to specify <strong>AdminService.wsdl</strong> in the <strong>AdminService</strong> Proxy 
		Service that we have just created. 
		</p>
		
		<p>When you open <strong>AdminService</strong> Proxy Service in ESB graphical editor, there is a node called
		 <strong>WSDL</strong>. When you click on that node, under <strong>Properties</strong> view, you will see 
		 available options to add a WSDL. Select <strong>in-line</strong> from the options.
		</p>
		
		<p>
		<br></br>
			<br></br>
			<img alt="New Server Runtime" src="images/img113.PNG"></img>
			<br></br>
			<br></br>
		</p>
		
		<p>
		In the next entry of the <strong>Properties</strong> view, you have to specify the source of the WSDL file. Click 
		the button at the right hand corner of the <strong>Value</strong> field and you will see a dialog has been popped 
		up, where you can enter WSDL source. 
		</p>
		
		<p>
		<br></br>
			<br></br>
			<img alt="New Server Runtime" src="images/img114.PNG"></img>
			<br></br>
			<br></br>
		</p>
		
		<p>
		Open <strong>AdminService.wsdl</strong> located inside <strong>esb-config</strong> folder of your checked-out
		location and copy the content and paste in to popped up dialog and click <strong>OK</strong>. 
		</p>
		
		<p>
		<br></br>
			<br></br>
			<img alt="New Server Runtime" src="images/img115.PNG"></img>
			<br></br>
			<br></br>
		</p>
		
		<p>
		Save the configuration. 
		</p>
		
		<p>
		Now you are done with the <strong>AdminService</strong> Proxy Service. We will create other two Proxy services 
		in the similar manner. Make sure you define the respective WSDL for each proxy service as we did for 
		<strong>AdminService</strong> proxy service.
		</p>
		
		<p>
		<br></br>
			<br></br>
			<img alt="New Server Runtime" src="images/img39.PNG"></img>
			<br></br>
			<br></br>
		
		</p>

		<p>
		All these three Proxy service use Endpoints that we created previously. 
		</p>
		
		<p>
		<br></br>
			<br></br>
			<img alt="New Server Runtime" src="images/img41.PNG"></img>
			<br></br>
			<br></br>
		
		</p>
		
		<h3 id="ShoppingCartRegRes">Adding dependent resources to registry</h3>
		<p>
		For the Proxy services, we need several message transformation files which should be available. With WSO2 
		Carbon Studio, we can add all these needed resources to registry that is embedded in <strong>ESB server</strong>. 
		</p>
		
		<p>
		At the location <strong>shopping-cart/esb-config</strong> which you have checked-out, you will see 
		there are seven xslt files as below. 
		</p>
		
		<ol>
			<li>customer_details_by_email.xslt</li>
			<li>decrement_product-stock.xslt</li>
			<li>finance_connector.xslt</li>
			<li>new_customer.xslt</li>
			<li>new_order.xslt</li>
			<li>new_order_item.xslt</li>
			<li>total_order_amount.xslt</li>
		</ol>
		
		<p>We will copy these seven files to a folder called <strong>resources</strong> and we will point that 
		folder when we create a <strong>Registry Resource Artifact</strong>.
		</p>
		
		<p>
		To create a registry resource, right click <strong>AcmeShoppingServices</strong> project and select 
		<strong>Registry Resource</strong> from the menu.
		</p>
		
		<p>
		<br></br>
			<br></br>
			<img alt="New Server Runtime" src="images/img42.PNG"></img>
			<br></br>
			<br></br>
		</p>
		
		<p>
		In the wizard page, you will see there are several ways to create a registry resource. From the four 
		options that are available, select <strong>Import from Folder</strong> option and browse for the 
		folder that you copy all the xslt files in to and click <strong>Next</strong>.
		</p>
		
		<p>
		<br></br>
			<br></br>
			<img alt="New Server Runtime" src="images/img43.PNG"></img>
			<br></br>
			<br></br>
		</p>
		
		<p>
		Select the project as <strong>AcmeShoppingServices</strong> and give the name as 
		<strong>AcmeProxyServiceResources</strong> (you may give a name of your preference) 
		and click <strong>Finish</strong>.
		</p>
		
		<p>
		<br></br>
			<br></br>
			<img alt="New Server Runtime" src="images/img44.PNG"></img>
			<br></br>
			<br></br>
		</p>
		
		<p>
		Now you will see new <strong>Registry Resource</strong> artifact is created under <strong>Artifacts</strong> 
		folder of <strong>AcmeShoppingServices</strong> project. 
		</p>
		
		<p>
		<br></br>
			<br></br>
			<img alt="New Server Runtime" src="images/img45.PNG"></img>
			<br></br>
			<br></br>
		</p>
		
		<p>
		Now we have created all the sub parts we need to deploy Proxy service. Before deploying 
		<strong>AcmeShoppingServices</strong> to WSO2 ESB Server we have to specify which artifacts 
		should be deployed in the <strong>root-artifact.xml</strong> and other 
		<strong>artifact.xml</strong> of each artifacts if there are any dependencies. 
		</p>
		
		<p>
		For example <strong>AdminService</strong> Proxy service depends on <strong>AdminServiceEP</strong>. 
		This we will specify in the <strong>artifact.xml</strong> of the <strong>AdminService</strong> Proxy service. 
		This behavior is similar for other two Proxy services as well.
		</p>
		
		<p>
		<br></br>
			<br></br>
			<img alt="New Server Runtime" src="images/img51.PNG"></img>
			<br></br>
			<br></br>
		</p>
		
		<p>
		<br></br>
			<br></br>
			<img alt="New Server Runtime" src="images/img52.PNG"></img>
			<br></br>
			<br></br>
		</p>
		
		<p>
		<br></br>
			<br></br>
			<img alt="New Server Runtime" src="images/img53.PNG"></img>
			<br></br>
			<br></br>
		</p>
		
		<p>
		We will specify three main Proxy services and the <strong>AcmeProxyServiceResources</strong> registry 
		resource artifact in the <strong>root-artifact.xml</strong>.
		</p>
		
		<p>
		<br></br>
			<br></br>
			<img alt="New Server Runtime" src="images/img46.PNG"></img>
			<br></br>
			<br></br>
		</p>
		
		<h3 id="ShoppingCartGadget">Gadget to Data Service</h3>
		<p>
		Now we have completed representing legacy data system via a Web service and create a Proxy to that 
		service and we can move to front end monitoring section. Data monitoring is done via gadgets. 
		</p>
		<p>
		To add gadget related artifacts, we will create a seperate carbon application project named 
		<strong>AcmeFrontendMonitor</strong> as we created <strong>AcmeBackendServices</strong> and 
		<strong>AcmeShoppingService</strong> CApp projects. 
		</p>
		
		<p> 
		To create a gadget artifact, right click on the <strong>AcmeFrontendMonitor</strong> project 
		and select <strong>Gadget</strong> from the menu. 
		</p>
		<p>
			<br></br>
			<br></br>
			<img alt="New Server Runtime" src="images/img108.PNG"></img>
			<br></br>
			<br></br>
		</p>
		
		<p>
		In this sample, we will import a folder which includes all the resources related to the gadgets 
		we need from the checked-out location. Select <strong>Import gadget resource folder from 
		file system</strong> option and browse for the location 
		<strong>shopping-cart/gadgets/src/gadgets/acme-sales-gadgets/</strong> and click 
		<strong>Next</strong>.
		</p>

		<p>
			<br></br>
			<br></br>
			<img alt="New Server Runtime" src="images/img54.PNG"></img>
			<br></br>
			<br></br>
		</p>
		
		<p>Select the <strong>AcmeFrontendMonitor</strong> CApp project and specify the name as 
		<strong>AcmeSalesGadgets</strong>. Then click <strong>Finish</strong>.
			</p>
			<p>
				<br></br>
				<br></br>
				<img alt="New Server Runtime" src="images/img55.PNG"></img>
				<br></br>
				<br></br>
			</p>	
			
			<p>Now you will see new Gadget artifact called <strong>AcmeSalesGadgets</strong> 
			is created under <strong>AcmeFrontendMonitor</strong> CApp project.
			</p>
			<p>
				<br></br>
				<br></br>
				<img alt="New Server Runtime" src="images/img56.PNG"></img>
				<br></br>
				<br></br>
			</p>
			<p>When you double click on any of XML files which represent gadget,
			it will open in the gadget editor provided by <strong>Open Social 
			Gadget Editor</strong> which gives you a graphical editor to modify 
			gadget files. 
			</p>
			<p>
				<br></br>
				<br></br>
				<img alt="New Server Runtime" src="images/img57.PNG"></img>
				<br></br>
				<br></br>
			</p>		
	
		<p>
		Now we will deploy created gadget artifact in to a <strong>Gadget Server</strong>. With Carbon 
		Studio, you do not have to run all the servers inside Eclipse workspace. You can create a 
		<strong>Carbon Archive (.car)</strong> file and deploy that in a running server. We will deploy 
		gadget artifact in that way.  
		</p>
		
		<p>
		Extract <a href="http://wso2.com/products/gadget-server/">WSO2 Gadget Server v1.2.0</a> and 
		go to <strong>repository/conf</strong> and open <strong>mgt-transports.xml</strong> and change 
		http and https ports to <strong>9768 and 9448</strong> respectively. Save the changes and start 
		the gadget server.
		</p>
		
		<p>
		Open the <strong>root-artifact.xml</strong> of <strong>AcmeFrontendMonitor</strong> and tick 
		<strong>AcmeSalesGadgets</strong> artifact and save the changes. To export 
		<strong>AcmeFrontendMonitor</strong>, right click and select <strong>Carbon Application Archive [CAR]</strong> 
		from the <strong>Export</strong> menu.
		</p>
		
		<p>
			<br></br>
			<br></br>
			<img alt="New Server Runtime" src="images/img59.PNG"></img>
			<br></br>
			<br></br>
		</p>
		
		<p>
		There is another way to create a carbon archive file.  You can select the option from the 
		<strong>root-artifact.xml</strong>. Open the <strong>root-artifact.xml</strong> 
		and there is a button to create the <strong>Carbon Application Archive [CAR]</strong> 
		at the right most top corner. 
		</p>
		<p>
			<br></br>
			<br></br>
			<img alt="New Server Runtime" src="images/CreateArchive.PNG"></img>
			<br></br>
			<br></br>
		</p>
		
		<p>Then select the artifacts you want to include to the <strong>Carbon Application Archive [CAR]</strong> and click finish.
		</p>
		<p>
			<br></br>
			<br></br>
			<img alt="New Server Runtime" src="images/img58.PNG"></img>
			<br></br>
			<br></br>
		</p>
		
		<p>Specify the location to save the <strong>Carbon Application Archive [CAR]</strong> file. 
		</p>

		<p>
			<br></br>
			<br></br>
			<img alt="New Server Runtime" src="images/CreateArchive3.PNG"></img>
			<br></br>	
			<br></br>
		</p>	
					
		<p>Now you have successfully created a <strong>Carbon Application Archive [CAR]</strong> file which is ready to be deployed.
		</p>	
		
		<p>
		You can point to the created <strong>Carbon Archive</strong> from the running gadget server. Go 
		to <strong>Add</strong> under <strong>Applications</strong> of the management console. 
		</p>
		
		<p>
			<br></br>
			<br></br>
			<img alt="New Server Runtime" src="images/img60.PNG"></img>
			<br></br>	
			<br></br>
		</p>
		
		<p>
		Browse for the location of the <strong>Carbon Archive</strong> file and click <strong>Upload</strong>.
		</p>	
		
		<p>
			<br></br>
			<br></br>
			<img alt="New Server Runtime" src="images/img61.PNG"></img>
			<br></br>	
			<br></br>
		</p>
		
		<p>
		When the upload is done, you will get a message like below.
		</p>	
		
		<p>
			<br></br>
			<br></br>
			<img alt="New Server Runtime" src="images/img63.PNG"></img>
			<br></br>	
			<br></br>
		</p>
		
		<p>
		If you check the console, you will see messages saying that you have successfully deployed the 
		<strong>Carbon Archive</strong> file. 
		</p>
		
		<p>
		<strong>
		[2010-10-02 18:37:42,552]  INFO -  Deploying Carbon Application : AcmeFrontendMonitor-1.0.0.car...
		</strong>
		<br/>
		<strong>
		[2010-10-02 18:37:42,606]  INFO -  Successfully Deployed Carbon Application : AcmeFrontendMonitor
		</strong>
		<br/>
		<strong>
		[2010-10-02 18:37:53,024]  INFO -  Successfully populated gadgets from archive ./media/dev/wso2products/RC1/wso2gs-1.2.0/repository/deployment/server/gadgets/AcmeSalesGadgets_1.0.0.dar to the registry.
		</strong>
		</p>
		
		<p>
		If you go to <strong>Browse</strong> under <strong>Registry Resources</strong> tab and go to 
		<strong>/_system/config/repository/gadget-server/gadgets</strong>, you will see all the gadget xml
		 files that we added. (They will be in /_system/config/repository/dashboards/gadgets if a server 
		other than gadget server, such as greg, is used.)
		You need to give <strong>anonymous</strong> user role to the 
		 <strong>gadget</strong> folder, in order to view them in the portal. 
		</p>
		
		
		<h3 id="ShoppingCartBPEL">BPEL to manage scheduled task</h3>
		<p>
		In this sample, we have a schedule task to check whether the products are not out of stock. If a product 
		goes below the re-order limit, message will be sent to operator and suppliers in order to keep 
		all the products are available all the time for the customers. Scheduler task runs periodically 
		and you can change the frequency it needs to be run. Re-order process is a BPEL process which is 
		triggered from ESB Schedule task.  
		</p>
		
		<p>
		Let's try to create re-order process from Carbon Studio. You need to create a BPEL artifact to 
		get the job done. We will create the BPEL artifact under <strong>AcmeBackendServices</strong> 
		CApp project since it is related to backend services.
		</p>
		
		<p>
        To create an BPEL workflow, right click on the <strong>AcmeBackendServices</strong> CApp project
         and select <strong>BPEL Workflow</strong> from the menu. 
        </p>
		<p>
			<br></br>
			<br></br>
			<img alt="New Server Runtime" src="images/img109.PNG"></img>
			<br></br>
			<br></br>
		</p>
		
		<p>
		As you can see, there are several ways to create a <strong>BPEL Workflow</strong> in Carbon 
		Studio. In this sample we will create a new BPEL process pointing to a new BPEL project in 
		the workspace. 
		</p>
		
		<p>
		In the BPEL Workflow creation wizard, select <strong>New BPEL Workflow</strong> and click 
		<strong>Next</strong>. 
		</p>
		
		<p>
			<br></br>
			<br></br>
			<img alt="New Server Runtime" src="images/BPelProcessNew2.PNG"></img>
			<br></br>
			<br></br>
		</p>
		
		<p>
		Give the name as <strong>ReorderProcess</strong> and click 
		<strong>Finish</strong>. 
		</p>
		
		<p>
			<br></br>
			<br></br>
			<img alt="New Server Runtime" src="images/img64.PNG"></img>
			<br></br>	
			<br></br>
		</p>
		
		<p>
		Now you will get the <strong>Eclipse BPEL Designer Plugin</strong> BPEL project creation 
		wizard since we select the <strong>New BPEL Workflow</strong> option. Give the project 
		name as <strong>ReorderProcess</strong> and click <strong>Finish</strong>. 
		</p>
		
		<p>
			<br></br>
			<br></br>
			<img alt="New Server Runtime" src="images/img65.PNG"></img>
			<br></br>
			<br></br>
		</p>
		
		<p>
		Now you will see artifact called <strong>ReorderProcess</strong> is created under <strong>Artifact</strong>
		 folder of <strong>AcmeBackendServices</strong> CApp project and <strong>ReorderProcess</strong> 
		 BPEL project is created in the workspace. This BPEL project is linked from the BPEL artifact. 
		</p>
		
		<p>
			<br></br>
			<br></br>
			<img alt="New Server Runtime" src="images/img66.PNG"></img>
			<br></br>
			<br></br>
		</p>
		
		<p>
		Now we will import BPEL resources in the location we checked out to the BPEL project in order 
		to create the re-ordering process. To do that right click on the <strong>ReorderProcess</strong>
		 BPEL project and select <strong>Import</strong>. Select <strong>File System</strong> under 
		 <strong>General</strong> category and click <strong>Next</strong>.
 		</p>
 		
 		<p>
			<br></br>
			<br></br>
			<img alt="New Server Runtime" src="images/img67.PNG"></img>
			<br></br>
			<br></br>
		</p>
		
		<p>
		Then browser for the directory <strong>shopping-cart/bps/ReOrderProcess/src/ReOrderProcess</strong>
		 and tick the <strong>ReOrderProcess</strong>. Then click <strong>Finish</strong>.
		</p>
		
		<p>
			<br></br>
			<br></br>
			<img alt="New Server Runtime" src="images/img68.PNG"></img>
			<br></br>
			<br></br>
		</p>
		
		<p>
		Now you will see resources regarding to BPEL process is imported to the <strong>ReorderProcess</strong>
		 BPEL project and same behavior is depicted in the <strong>BPEL Artifact</strong> at the 
		 <strong>AcmeBackendServices</strong> CApp project.
		</p>
		
		<p>
			<br></br>
			<br></br>
			<img alt="New Server Runtime" src="images/img69.PNG"></img>
			<br></br>
			<br></br>
		</p>
		
		<p>
		If you double click on <strong>ReOrderProcess.bpel</strong>, you will see, it will be opened in the 
		graphical BPEL editor.
		</p>
		
		<p>
			<br></br>
			<br></br>
			<img alt="New Server Runtime" src="images/img70.PNG"></img>
			<br></br>
			<br></br>
		</p>
		
		<p>
		Now we will deploy BPEL process in to <strong><a href="http://wso2.com/products/business-process-server/">
		WSO2 Business Process Server v2.0.1</a></strong>. There are several ways you can deploy created 
		BPEL artifact by Carbon Studio.
		</p>
		<ol>
			<li>Add WSO2 BPS server and add <strong>AcmeBackendServices</strong> to it.</li>
			<li>Create a carbon archive and deploy it to running BPS server outside.</li>
			<li>Export BPEL project via BPEL Exporter Plugin and add it to BPS server running outside.</li>
		</ol>
		
		<p>
		We will deploy BPEL artifact using the second method as we did for gadget artifact previously. 
		Before we create the carbon archive file, we will open the <strong>root-artifact.xml</strong> 
		and select only the <strong>ReorderProcess</strong> artifact to be deployed. This is because 
		we are going to deploy our <strong>carbon archive</strong> file in to a <strong>WSO2 BPS Server</strong>.
		 If you have not install features related to data services, previously created 
		 <strong>ShoppingCartDS</strong> artifact will not be deployed. After saving the 
		 <strong>root-artifact.xml</strong> export <strong>AcmeBackendServices</strong> CApp project 
		 as you did for gadget artifact in the previous step. 
		
		</p>
		
		<p>
			<br></br>
			<br></br>
			<img alt="New Server Runtime" src="images/img71.PNG"></img>
			<br></br>
			<br></br>
		</p>
		
		<p>
		Run WSO2 BPS in the ports specified in the table, ie <strong>htttp port - 9766 and 
		https port - 9446</strong>. Go to <strong>Applications</strong> of the management console and 
		click <strong>Add</strong>. Browse for the path of the carbon archive and refresh the page.
		</p>
		
		<p>
			<br></br>
			<br></br>
			<img alt="New Server Runtime" src="images/img72.PNG"></img>
			<br></br>
			<br></br>
		</p>
		
		<p>
		Now you will see <strong>ReorderProcess</strong> has been listed in the service listing page. 
		</p>
		
		<p>
			<br></br>
			<br></br>
			<img alt="New Server Runtime" src="images/img73.PNG"></img>
			<br></br>
			<br></br>
		</p>
		
		<p>
		If you checked the console, you will see following messages in the console. 
		</p>
		
		<p>
		<strong>
		[2010-10-03 12:07:13,337]  INFO -  Process {http://acme.com/shoppingcart/reorder}ReOrderProcess-5 deployed from "{http://acme.com/shoppingcart/reorder}ReOrderProcess-5".
		</strong>
		<br/>
		<strong>
		[2010-10-03 12:07:13,539]  INFO -  Deploying Axis2 service : ReOrderProcessService
		</strong>
		<br/>
		<strong>
		[2010-10-03 12:07:14,018]  INFO -  Registered process {http://acme.com/shoppingcart/reorder}ReOrderProcess-5.
		</strong>
		</p>
		
		<h3 id="ShoppingCartAxis2Service">Apache Axis2 Service to Handle message coming from ESB</h3>
		<p>
		In this sample, we are going to create two Apache Axis2 services. One service is to handle supplier 
		information and the other service is to notify relavant modules when a purchase has been taken 
		place. 
		</p>
		
		<p>
		First we need to create Eclipse project artifact in order to import them in to the Eclipse 
		workspace. You can find the two projects that includes source files for services at 
		<strong>shopping-cart/connector-service</strong> and 
		<strong>shopping-cart/bps/SupplierService</strong>. Go to those folders in the command line and 
		create Eclipse project artifacts running the command <strong>mvn eclipse:eclipse</strong>. 
		After successfully created Eclipse project artifacts, you can import them in to the Eclipse 
		workspace. 
		</p>
		
		<p>
			<br></br>
			<br></br>
			<img alt="New Server Runtime" src="images/img74.PNG"></img>
			<br></br>
			<br></br>
		</p>
		
		<p>
		Select <strong>Existing Projects into Workspace</strong> option under <strong>General</strong> and 
		click <strong>Next</strong>.
		</p>
		
		<p>
			<br></br>
			<br></br>
			<img alt="New Server Runtime" src="images/img75.PNG"></img>
			<br></br>
			<br></br>
		</p>
		
		<p>
		Browse for the location of the source file of <strong>SupplierService</strong> and 
		<strong>connector-service</strong> and click <strong>Finish</strong>.
		</p>
		
		<p>
			<br></br>
			<br></br>
			<img alt="New Server Runtime" src="images/img76.PNG"></img>
			<br></br>
			<br></br>
		</p>
		
		<p>
			<br></br>
			<br></br>
			<img alt="New Server Runtime" src="images/img77.PNG"></img>
			<br></br>
			<br></br>
		</p>
		
		<p>
		Now you will see two projects has been imported to the workspace. 
		</p>
		
		<p>
			<br></br>
			<br></br>
			<img alt="New Server Runtime" src="images/img78.PNG"></img>
			<br></br>
			<br></br>
		</p>
		<p>
		Before creating Apache Axis2 artifacts, make sure you can build imported two projects without any 
		issue. Most of the libraries that needed to resolve class path issues, can be found in 
		<strong>{carbon-home}/lib</strong> folder of a carbon server, provided that you have run the carbon server 
		atleast for once. 
		</p>
		
		<p>
		Now we are in a position to create two Apache Axis2 service artifacts we need. We will create two 
		Axis2 service in the <strong>AcmeBackendServices</strong> CApp project. To create an 
		<strong>Axis2 Service</strong>, right click on the <strong>AcmeBackendServices</strong> and 
		select <strong>Axis2 Service</strong>. 
		</p>
		
		<p>
			<br></br>
			<br></br>
			<img alt="New Server Runtime" src="images/axis1.png"></img>
			<br></br>
			<br></br>
		</p>
		
		<p>
		You will see there are several ways to create an Axis2 service from Carbon Studio. For this sample, 
		we will browse for the service class and create the <strong>Axis2 Service</strong>.
		</p>
		
		<p>
			<br></br>
			<br></br>
			<img alt="New Server Runtime" src="images/img79.PNG"></img>
			<br></br>
			<br></br>
		</p>
		
		<p>
		In the wizard page, click <strong>Browse</strong> and type <strong>FinanceConnectorService</strong>
		 in the <strong>Axis2 Service Class</strong> dialog and click <strong>OK</strong>.
		</p>
		
		<p>
			<br></br>
			<br></br>
			<img alt="New Server Runtime" src="images/img80.PNG"></img>
			<br></br>
			<br></br>
		</p>
		
		<p>
		Now you will see <strong>Fully qualified class</strong> and respective project has been filled. 
		Now click <strong>Next</strong>.
		</p>
		
		<p>
			<br></br>
			<br></br>
			<img alt="New Server Runtime" src="images/img81.PNG"></img>
			<br></br>
			<br></br>
		</p>
		
		<p>
		Select the project as <strong>AcmeBackendServices</strong> and give the name as 
		<strong>FinanceConnectorService</strong> and click <strong>Finish</strong>.
		</p>
		
		<p>
			<br></br>
			<br></br>
			<img alt="New Server Runtime" src="images/img82.PNG"></img>
			<br></br>
			<br></br>
		</p>
		
		<p>
		In the similar manner, create other Axis2 service from <strong>SupplierOrderServiceSkeleton</strong>
		 class in the same CApp project. 
		</p>
		
		<p>
			<br></br>
			<br></br>
			<img alt="New Server Runtime" src="images/img83.PNG"></img>
			<br></br>
			<br></br>
		</p>
		
		<p>
		Now we will deploy these two Axis2 artifacts in to <strong>
		<a href="http://wso2.org/downloads/appserver">WSO2 Application Server</a></strong>. Extract the downloaded 
		Application Server and change the ports according to the table and run the AppServer as you did for 
		<strong>WSO2 BPS and WSO2 Gadget Server</strong>.
		</p>
		
		<p>
		Before creating the <strong>Carbon Archive</strong> file, double click on the <strong>root-artifact.xml</strong> 
		and select only the two Axis2 services that we created and save the file. Then export it as a 
		<strong>Carbon Archive</strong> file.
		</p>
		
		<p>
			<br></br>
			<br></br>
			<img alt="New Server Runtime" src="images/img84.PNG"></img>
			<br></br>
			<br></br>
		</p>
		
		<p>
		Add the created <strong>Carbon Archive</strong> file from the management console of the 
		<strong>WSO2 Application Server</strong>.
		</p>
		
		<p>
			<br></br>
			<br></br>
			<img alt="New Server Runtime" src="images/img85.PNG"></img>
			<br></br>
			<br></br>
		</p>
		
		<p>
		After successfully deploying the <strong>Carbon Archive</strong>, you will see two new services has 
		been added to the service list.
		</p>
		
		<p>
			<br></br>
			<br></br>
			<img alt="New Server Runtime" src="images/img86.PNG"></img>
			<br></br>
			<br></br>
		</p>
		<h3 id="CreateWebApps">Create User Portal and Admin Portal</h3>	
		<p>
		In this sample, there are two Web applications we need to create. One application for the <strong>User 
		Portal</strong> and the other application for the <strong>Admin Portal</strong>. Source code for these 
		two portals are at the checked-out location <strong>shopping-cart/portal</strong> and 
		<strong>shopping-cart/admin</strong>. Before importing these two projects in to the workspace, make sure 
		that you have successfully built the project and created an Eclipse project archive as well.  
		</p>
		
		<p>
		First we will create the <strong>User Portal</strong>. Create a <strong>Dynamic Web Project</strong> by 
		selecting <strong>File -> New -> Project -> Web -> Dynamic Web Project</strong>
		</p>
		
		<p>
			<br></br>
			<br></br>
			<img alt="New Server Runtime" src="images/img87.PNG"></img>
			<br></br>
			<br></br>
		</p>
		
		<p>
		Give the name as <strong>UserPortal</strong> and keep other options as default and click <strong>
		Finish</strong>. 
		</p>
		
		<p>
			<br></br>
			<br></br>
			<img alt="New Server Runtime" src="images/img88.PNG"></img>
			<br></br>
			<br></br>
		</p>
		
		<p>
		Now you will see an empty Dynamic web project has been created in the workspace. 
		</p>
		
		<p>
			<br></br>
			<br></br>
			<img alt="New Server Runtime" src="images/img89.PNG"></img>
			<br></br>
			<br></br>
		</p>
		
		<p>
		Now we will import sources from the checked-out location to the <strong>UserPortal</strong> project 
		that we have created. First we will import the web content. Right click on the <strong>WebContent</strong> 
		and select <strong>Import</strong>.
		</p>
		
		<p>
			<br></br>
			<br></br>
			<img alt="New Server Runtime" src="images/img90.PNG"></img>
			<br></br>
			<br></br>
		</p>
		
		<p>
		Select <strong>File System</strong> option and click <strong>Next</strong>. Browse for the location 
		<strong>shopping-cart/portal/src/main/webapp</strong> and tick <strong>webapp</strong> folder and click 
		<strong>Finish</strong>.
		</p>
		
		<p>
			<br></br>
			<br></br>
			<img alt="New Server Runtime" src="images/img91.PNG"></img>
			<br></br>
			<br></br>
		</p>
		
		<p>
		Then we will import Java source files. To do that, go to <strong>File -> Import</strong> and select 
		<strong>File System</strong> and browse for <strong>shopping-cart/portal/src</strong> and set the 
		<strong>Into Folder</strong> as <strong>UserPortal</strong> if it is not selected by default. 
		</p>
		
		<p>
			<br></br>
			<br></br>
			<img alt="New Server Runtime" src="images/img92.PNG"></img>
			<br></br>
			<br></br>
		</p>
		
		<p>
		Build the project and make sure you do not have any build errors. If there are build errors, you may need to 
		add dependent jars to the classpath. If there are no build errors, download <strong>axis2-client-1.6.0.wso2v1.jar</strong>
		 from <a href="https://svn.wso2.org/repos/wso2/trunk/tools/ide/eclipse/resources/libs/axis2-client-1.6.0.wso2v1-SNAPSHOT.jar">here</a> and copy downloaded jar in to <strong>WebContent/WEB-INF/lib</strong>. 
		</p>
		
		<p>
			<br></br>
			<br></br>
			<img alt="New Server Runtime" src="images/img93.PNG"></img>
			<br></br>
			<br></br>
		</p>
		
		<p>
		In the similar manner we will create a <strong>Dynamic Web Project</strong> to create
		<strong>Admin Portal</strong> as well. Do not forget to copy  <strong>axis2-client-1.6.0.wso2v1.jar</strong>
		 from <a href="https://svn.wso2.org/repos/wso2/trunk/tools/ide/eclipse/resources/libs/axis2s-client-1.6.0.wso2v1-SNAPSHOT.jar">here</a> and copy downloaded jar in to <strong>WebContent/WEB-INF/lib</strong>.
		</p>
		
		<p>
			<br></br>
			<br></br>
			<img alt="New Server Runtime" src="images/img94.PNG"></img>
			<br></br>
			<br></br>
		</p>
		
		<p> 
		Now we are ready to create <strong>Web Applications</strong> with the created two dynamic web projects. 
		We will create two <strong>Carbon Application</strong> projects as <strong>AcmeFrontEndUser</strong> and
		 <strong>AcmeFrontEndOperator</strong>. <strong>User Portal</strong> Web application will be created in 
		 <strong>AcmeFrontEndUser</strong> and <strong>Admin Portal</strong> Web application will be create in 
		 <strong>AcmeFrontEndOperator</strong> carbon project.
		</p>
		
		<p>
		First we will create the <strong>User Portal</strong> Web application. Right click on the <strong>AcmeFrontEndUser</strong>
		 and select <strong>Web Application (WAR)</strong> from the menu. 
		</p>
		
		<p>
			<br></br>
			<br></br>
			<img alt="New Server Runtime" src="images/img95.PNG"></img>
			<br></br>
			<br></br>
		</p>
		
		<p>
		Select <strong>Web Application (WAR) from web project</strong> option and select <strong>UserPortal</strong>
		 from the <strong>Dynamic Web Project</strong> list and click <strong>Next</strong>.
		</p>
		
		<p>
			<br></br>
			<br></br>
			<img alt="New Server Runtime" src="images/img96.PNG"></img>
			<br></br>
			<br></br>
		</p>
		
		<p>
		Select the <strong>AcmeFrontEndUser</strong> carbon application project and give the name as 
		<strong>UserPortal</strong> and click <strong>Finish</strong>.
		</p>
		
		<p>
			<br></br>
			<br></br>
			<img alt="New Server Runtime" src="images/img97.PNG"></img>
			<br></br>
			<br></br>
		</p>
		
		<p>
		Now you will see <strong>UserPortal</strong> Web application artifact is created under <strong>AcmeFrontEndUser</strong>.
		</p>
		
		<p>
			<br></br>
			<br></br>
			<img alt="New Server Runtime" src="images/img98.PNG"></img>
			<br></br>
			<br></br>
		</p>
		
		<p>
		We will deploy created Web application in to a AppServer. Currently, you have to deploy in to a AppServer 
		of <strong>Carbon 3.1 server</strong>. 
		</p>
		
		<p>
		Double click on the <strong>root-artifact.xml</strong> of the <strong>AcmeFrontEndUser</strong> and 
		tick <strong>UserPortal</strong> and save the file. Now create the <strong>Carbon Archive</strong> 
		file.
		</p>
		
		<p>
			<br></br>
			<br></br>
			<img alt="New Server Runtime" src="images/img99.PNG"></img>
			<br></br>
			<br></br>
		</p>
		
		<p>
		Start the AppServer at the <strong>HTTPS port - 9444</strong> and <strong>HTTP port - 9764</strong>. 
		Add the created <strong>CAR</strong> by clicking <strong>Add</strong> under <strong>Applications</strong>
		 of the management console.
		</p>
		
		<p>
			<br></br>
			<br></br>
			<img alt="New Server Runtime" src="images/img100.PNG"></img>
			<br></br>
			<br></br>
		</p>
		
		<p>
		You will get a message like below when the <strong>CAR</strong> deploying has been done successfully. 
		</p>
		
		<p>
			<br></br>
			<br></br>
			<img alt="New Server Runtime" src="images/img101.PNG"></img>
			<br></br>
			<br></br>
		</p>
		
		<p>
		Under <strong>Web Applications</strong> if you click <strong>List</strong>, it will show all the 
		running Web applications and you will our <strong>UserPortal</strong> Web application is also 
		listed.
		</p>
		
		<p>
			<br></br>
			<br></br>
			<img alt="New Server Runtime" src="images/img102.PNG"></img>
			<br></br>
			<br></br>
		</p>
		
		<p>
		Click <strong>Go To URL</strong> and you will see our <strong>Acme Shopping Cart User Portal</strong>.
		</p>
		
		<p>
			<br></br>
			<br></br>
			<img alt="New Server Runtime" src="images/img103.PNG"></img>
			<br></br>
			<br></br>
		</p>
		
		<p>
		You can access data from user portal if <strong>backend services (i.e Data Service, Proxy Service etc)</strong>
		 are up and running. 
		</p>
		
		<p>
		In the similar manner, we will create the other Web application for <strong>Admin Portal</strong> in 
		the <strong>AcmeFrontEndOperator</strong> carbon application and deploy it in to the same 
		<strong>AppServer</strong>. 
		</p>
		
		<p>
			<br></br>
			<br></br>
			<img alt="New Server Runtime" src="images/img104.PNG"></img>
			<br></br>
			<br></br>
		</p>
		
		<p>
		When the deployment is successful, you will see <strong>AdminPortal</strong> is also added to 
		<strong>Running Web Applications List</strong>. 
		</p>
		
		<p>
			<br></br>
			<br></br>
			<img alt="New Server Runtime" src="images/img106.PNG"></img>
			<br></br>
			<br></br>
		</p>
		
		<p>
		Click <strong>Go To URL</strong> and you will see the <strong>Admin Portal</strong>.
		</p>
		
		<p>
			<br></br>
			<br></br>
			<img alt="New Server Runtime" src="images/img107.PNG"></img>
			<br></br>
			<br></br>
		</p>
		
				
	</body> 
</html>							
